        const settings = {
            tracers: { enabled: false, draw: false },
            movementpredicter: { enabled: false, draw: false },
            percentages: { enabled: false, draw: false },
            enabledhacks: { enabled: false, draw: false },
            drawinchest: { enabled: false, draw: false },
            boxontop: { enabled: false, draw: false },
            chestontop: { enabled: false, draw: false },
            totemontop: { enabled: false, draw: false },
            xray: { enabled: false, draw: true, key: "Semicolon" },
        
            autorespawn: { enabled: false, draw: false },
            autototem: { enabled: false, draw: true, key: "KeyH" },
            autobandage: { enabled: false, draw: true },
            dropsword: { enabled: false, draw: true, key: "KeyV" },
            swordinchest: { enabled: false, draw: true, key: "KeyX" },
            aimbot: { enabled: false, draw: true, key: "KeyF" },
        
            autosteal: { enabled: false, draw: true, key: "KeyQ", unlock: false },
            
            autocraft: { enabled: false, draw: true, key: "KeyK", last: null },
            autorecycle: { enabled: false, draw: true, key: "KeyL", last: null },
        
            autospike: { enabled: false, draw: true, aim: false, key: "Space", mode: "Nova", cases: ["REIDITE_SPIKE", "AMETHYST_SPIKE", "DIAMOND_SPIKE", "GOLD_SPIKE", "STONE_SPIKE", "WOOD_WALL"], priority: ["REIDITE_SPIKE", "AMETHYST_SPIKE", "DIAMOND_SPIKE", "GOLD_SPIKE", "STONE_SPIKE", "WOOD_WALL"] },
            autodoor: { enabled: false, draw: true, key: "KeyB" },
        
            trashtalk: { enabled: false, draw: true, message: "" },
        
            autotradecakes: { enabled: false, draw: false },
            autotradecookies: { enabled: false, draw: false },
        
            colors: {
                tracersally: "rgb(0, 255, 0)",
                tracersenemy: "rgb(255, 0, 0)",
                movementpredicter: "rgb(0, 255, 255)",
                percentages: "rgb(105, 161, 72)",
                enabledhacks: "rgb(0, 255, 255)",
            },
        },
        
        readys = {
            trashtalk: true,
            autospike: true,
            autodoor: true,
            autosteal: true,
            autototem: true,
        };
        var q4vekP;
        var EohKKjx;
        var wdFu611;
        var wEdiuMa;
        var CKVhvVr;
        var Z9GUVDi;
        var Y5gIzY;
        var VXHgGYu;
        var bgBSzeY;
        var hPeynT;
        var JKWEKM;
        var OooROk;
        var j98IE8;
        var wCd5XZ;
        var gq7K_g;
        var hei7nFI;
        var AjXyWZ;
        var wZxB4RR;
        function DIo6Pf(EohKKjx) {
        return q4vekP[EohKKjx < -79 ? EohKKjx + 29 : EohKKjx > -79 ? EohKKjx < 238 ? EohKKjx < 238 ? EohKKjx + 78 : EohKKjx + 28 : EohKKjx + 76 : EohKKjx - 21];
        }
        q4vekP = b2JjwI.call(this);
        function _SaGeZW(EohKKjx, wdFu611) {
        var wEdiuMa = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx > 47 ? EohKKjx < 364 ? EohKKjx < 364 ? EohKKjx > 47 ? EohKKjx > 47 ? EohKKjx < 47 ? EohKKjx - 53 : EohKKjx < 47 ? EohKKjx - 24 : EohKKjx > 47 ? EohKKjx > 364 ? EohKKjx - 5 : EohKKjx - 48 : EohKKjx - 97 : EohKKjx + 37 : EohKKjx - 78 : EohKKjx + 85 : EohKKjx - 77 : EohKKjx - 13];
        }, 1);
        Object.defineProperty(EohKKjx, wEdiuMa(48), {
            value: wdFu611,
            configurable: DIo6Pf(111)
        });
        return EohKKjx;
        }
        EohKKjx = _SaGeZW(BZxLqo((...EohKKjx) => {
        var wdFu611 = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx < 221 ? EohKKjx + 95 : EohKKjx + 45];
        }, 1);
        EohKKjx[DIo6Pf(-78)] = 2;
        EohKKjx.ORc8XX = 92;
        if (EohKKjx[wdFu611(-94)] > 141) {
            var wEdiuMa = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx > 305 ? EohKKjx + 78 : EohKKjx + 11];
            }, 1);
            return EohKKjx[EohKKjx[DIo6Pf(-77)] - wEdiuMa(45)];
        } else {
            return EohKKjx[DIo6Pf(-66)](EohKKjx[DIo6Pf(-76)]());
        }
        }, 0), 2)(dMZCge, tEAFbw);
        var x_uNhNM = [];
        var NG4zOMq = DIo6Pf(-76);
        var Jjwkpkv = BZxLqo((...EohKKjx) => {
        var wdFu611 = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx > 346 ? EohKKjx - 71 : EohKKjx > 29 ? EohKKjx < 29 ? EohKKjx + 76 : EohKKjx < 29 ? EohKKjx - 96 : EohKKjx < 346 ? EohKKjx > 346 ? EohKKjx + 65 : EohKKjx - 30 : EohKKjx + 98 : EohKKjx - 38];
        }, 1);
        EohKKjx[DIo6Pf(-78)] = DIo6Pf(-76);
        EohKKjx[DIo6Pf(-75)] = wdFu611(161);
        EohKKjx[DIo6Pf(-76)] = [sYAKfGw(wdFu611(32)), sYAKfGw(EohKKjx[DIo6Pf(-75)] - 129), sYAKfGw(DIo6Pf(-37)), sYAKfGw(DIo6Pf(-69)), sYAKfGw(wdFu611(196)), sYAKfGw(EohKKjx[DIo6Pf(-75)] - 125), sYAKfGw(wdFu611(40)), sYAKfGw(DIo6Pf(155)), sYAKfGw(wdFu611(154)), sYAKfGw(9), sYAKfGw(wdFu611(74)), sYAKfGw(DIo6Pf(-6)), sYAKfGw(DIo6Pf(-58)), "@%hzcoUkMO|=g7CY<figzn!uuS6L1Qie", sYAKfGw(13), "|i^gJ8I0G", sYAKfGw(DIo6Pf(-48)), sYAKfGw(DIo6Pf(-61)), sYAKfGw(wdFu611(107)), sYAKfGw(DIo6Pf(-44)), sYAKfGw(wdFu611(171)), sYAKfGw(EohKKjx[wdFu611(33)] - wdFu611(38)), sYAKfGw(DIo6Pf(-42)), sYAKfGw(EohKKjx[wdFu611(33)] - wdFu611(117)), sYAKfGw(wdFu611(70)), sYAKfGw(wdFu611(37)), sYAKfGw(EohKKjx[wdFu611(33)] - 106), sYAKfGw(25), sYAKfGw(DIo6Pf(-33)), sYAKfGw(27), sYAKfGw(wdFu611(81)), sYAKfGw(29), sYAKfGw(EohKKjx[wdFu611(33)] - DIo6Pf(-72)), sYAKfGw(DIo6Pf(-23)), sYAKfGw(wdFu611(78)), sYAKfGw(wdFu611(79)), sYAKfGw(34), sYAKfGw(DIo6Pf(-17)), sYAKfGw(36), sYAKfGw(wdFu611(35)), sYAKfGw(DIo6Pf(33)), sYAKfGw(DIo6Pf(27)), sYAKfGw(wdFu611(100)), sYAKfGw(41), sYAKfGw(42), sYAKfGw(wdFu611(59)), "|D8=]^mC", sYAKfGw(DIo6Pf(-20)), sYAKfGw(EohKKjx.p99OeE - wdFu611(140)), sYAKfGw(wdFu611(89)), sYAKfGw(47), sYAKfGw(48), sYAKfGw(DIo6Pf(-31)), sYAKfGw(50), sYAKfGw(wdFu611(223)), sYAKfGw(DIo6Pf(86)), sYAKfGw(53), sYAKfGw(wdFu611(80)), sYAKfGw(DIo6Pf(-21)), sYAKfGw(EohKKjx[wdFu611(33)] - 74), sYAKfGw(57), sYAKfGw(EohKKjx.p99OeE - DIo6Pf(98)), sYAKfGw(wdFu611(69)), sYAKfGw(DIo6Pf(-51)), sYAKfGw(wdFu611(203)), sYAKfGw(EohKKjx[DIo6Pf(-75)] - wdFu611(34)), sYAKfGw(63), sYAKfGw(wdFu611(260)), sYAKfGw(DIo6Pf(-13)), sYAKfGw(wdFu611(189)), sYAKfGw(wdFu611(225)), sYAKfGw(wdFu611(34)), sYAKfGw(69), sYAKfGw(wdFu611(282)), sYAKfGw(71), sYAKfGw(72), sYAKfGw(73), sYAKfGw(EohKKjx[DIo6Pf(-75)] - 56), sYAKfGw(DIo6Pf(61)), sYAKfGw(76), sYAKfGw(wdFu611(99)), sYAKfGw(wdFu611(134)), sYAKfGw(79), sYAKfGw(80), "|D8=]^mCK%L)|a{oeB", sYAKfGw(wdFu611(231)), sYAKfGw(82), sYAKfGw(DIo6Pf(-50)), sYAKfGw(DIo6Pf(184)), sYAKfGw(85), sYAKfGw(wdFu611(137)), sYAKfGw(87), sYAKfGw(wdFu611(65)), sYAKfGw(wdFu611(181)), sYAKfGw(90), sYAKfGw(wdFu611(110)), sYAKfGw(DIo6Pf(20)), sYAKfGw(EohKKjx.p99OeE - wdFu611(35)), sYAKfGw(EohKKjx.p99OeE - 36), sYAKfGw(DIo6Pf(18)), sYAKfGw(DIo6Pf(49)), sYAKfGw(DIo6Pf(-36)), sYAKfGw(wdFu611(296)), sYAKfGw(DIo6Pf(-15)), sYAKfGw(DIo6Pf(-72)), sYAKfGw(DIo6Pf(-25)), sYAKfGw(wdFu611(319)), sYAKfGw(DIo6Pf(71)), sYAKfGw(wdFu611(335)), sYAKfGw(EohKKjx.p99OeE - 25), sYAKfGw(wdFu611(268)), sYAKfGw(EohKKjx.p99OeE - wdFu611(37)), sYAKfGw(DIo6Pf(195)), sYAKfGw(EohKKjx[wdFu611(33)] - DIo6Pf(-45)), sYAKfGw(DIo6Pf(28)), "0z|/W>kC", sYAKfGw(wdFu611(38)), sYAKfGw(112), sYAKfGw(DIo6Pf(199)), sYAKfGw(114), sYAKfGw(wdFu611(308)), sYAKfGw(EohKKjx[DIo6Pf(-75)] - 14), sYAKfGw(DIo6Pf(91)), sYAKfGw(DIo6Pf(-10)), sYAKfGw(DIo6Pf(68)), sYAKfGw(DIo6Pf(203)), sYAKfGw(121), sYAKfGw(122), sYAKfGw(DIo6Pf(100)), sYAKfGw(DIo6Pf(-14)), sYAKfGw(125), sYAKfGw(EohKKjx[DIo6Pf(-75)] - (EohKKjx[wdFu611(33)] - DIo6Pf(-11))), sYAKfGw(EohKKjx.p99OeE - wdFu611(39)), sYAKfGw(wdFu611(41)), sYAKfGw(wdFu611(284)), sYAKfGw(130), sYAKfGw(DIo6Pf(52)), sYAKfGw(132), sYAKfGw(EohKKjx[DIo6Pf(-75)] + 3), sYAKfGw(134), sYAKfGw(EohKKjx[wdFu611(33)] + wdFu611(109)), sYAKfGw(EohKKjx[wdFu611(33)] + DIo6Pf(-68)), sYAKfGw(wdFu611(51)), sYAKfGw(DIo6Pf(212)), sYAKfGw(DIo6Pf(213)), sYAKfGw(DIo6Pf(-16)), sYAKfGw(DIo6Pf(15)), sYAKfGw(DIo6Pf(13)), sYAKfGw(wdFu611(132)), sYAKfGw(144), sYAKfGw(145), sYAKfGw(wdFu611(55)), sYAKfGw(wdFu611(327)), sYAKfGw(148), sYAKfGw(DIo6Pf(54)), sYAKfGw(wdFu611(295)), sYAKfGw(DIo6Pf(221)), sYAKfGw(wdFu611(246)), sYAKfGw(EohKKjx[wdFu611(33)] + wdFu611(37)), sYAKfGw(wdFu611(283)), sYAKfGw(155), sYAKfGw(156), sYAKfGw(157), sYAKfGw(DIo6Pf(222)), sYAKfGw(DIo6Pf(223)), sYAKfGw(DIo6Pf(224))];
        if (EohKKjx[DIo6Pf(-75)] > wdFu611(53)) {
            return EohKKjx[-91];
        } else {
            var wEdiuMa = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx < 253 ? EohKKjx < -64 ? EohKKjx - 83 : EohKKjx < -64 ? EohKKjx + 80 : EohKKjx < 253 ? EohKKjx < -64 ? EohKKjx - 54 : EohKKjx + 63 : EohKKjx - 56 : EohKKjx + 99];
            }, 1);
            if (NG4zOMq) {
            EohKKjx[wEdiuMa(-61)].pop();
            } else {
            NG4zOMq++;
            }
            return EohKKjx[wEdiuMa(-61)];
        }
        }, 0)();
        function QB1qKN() {
        try {
            return global || window || new Function(sYAKfGw(DIo6Pf(225)))();
        } catch (e) {
            try {
            return this;
            } catch (e) {
            return {};
            }
        }
        }
        wdFu611 = QB1qKN() || {};
        wEdiuMa = wdFu611[sYAKfGw(DIo6Pf(226))];
        CKVhvVr = wdFu611[sYAKfGw(163)];
        Z9GUVDi = wdFu611[sYAKfGw(DIo6Pf(-26))];
        Y5gIzY = wdFu611[sYAKfGw(DIo6Pf(120))] || String;
        VXHgGYu = wdFu611[sYAKfGw(DIo6Pf(113))] || Array;
        bgBSzeY = BZxLqo(() => {
        var EohKKjx;
        var wdFu611;
        var wEdiuMa;
        function CKVhvVr(EohKKjx) {
            return q4vekP[EohKKjx > -94 ? EohKKjx + 93 : EohKKjx + 34];
        }
        EohKKjx = new VXHgGYu(CKVhvVr(-82));
        wdFu611 = Y5gIzY[sYAKfGw(DIo6Pf(-59))] || Y5gIzY[sYAKfGw(168)];
        wEdiuMa = [];
        return _SaGeZW(BZxLqo((...Z9GUVDi) => {
            var VXHgGYu;
            function bgBSzeY(Z9GUVDi) {
            return q4vekP[Z9GUVDi < -4 ? Z9GUVDi - 10 : Z9GUVDi < -4 ? Z9GUVDi + 54 : Z9GUVDi < 313 ? Z9GUVDi > -4 ? Z9GUVDi > 313 ? Z9GUVDi - 28 : Z9GUVDi < 313 ? Z9GUVDi < -4 ? Z9GUVDi + 33 : Z9GUVDi > -4 ? Z9GUVDi + 3 : Z9GUVDi + 50 : Z9GUVDi + 99 : Z9GUVDi + 18 : Z9GUVDi - 61];
            }
            Z9GUVDi[bgBSzeY(-3)] = DIo6Pf(-66);
            Z9GUVDi[CKVhvVr(-80)] = Z9GUVDi[DIo6Pf(-76)];
            var hPeynT;
            var JKWEKM;
            Z9GUVDi[CKVhvVr(-77)] = Z9GUVDi[bgBSzeY(10)];
            Z9GUVDi[3] = Z9GUVDi[9][sYAKfGw(bgBSzeY(11))];
            wEdiuMa[sYAKfGw(CKVhvVr(-79))] = CKVhvVr(-91);
            Z9GUVDi[DIo6Pf(-63)] = Z9GUVDi[DIo6Pf(-69)];
            for (VXHgGYu = DIo6Pf(-76); VXHgGYu < Z9GUVDi[DIo6Pf(-63)];) {
            var OooROk = BZxLqo(Z9GUVDi => {
                return q4vekP[Z9GUVDi < -90 ? Z9GUVDi + 83 : Z9GUVDi > -90 ? Z9GUVDi > -90 ? Z9GUVDi > 227 ? Z9GUVDi - 19 : Z9GUVDi > -90 ? Z9GUVDi > 227 ? Z9GUVDi - 60 : Z9GUVDi + 89 : Z9GUVDi - 10 : Z9GUVDi - 58 : Z9GUVDi - 17];
            }, 1);
            JKWEKM = Z9GUVDi[bgBSzeY(13)][VXHgGYu++];
            if (JKWEKM <= bgBSzeY(81)) {
                hPeynT = JKWEKM;
            } else if (JKWEKM <= OooROk(-23)) {
                var j98IE8 = BZxLqo(Z9GUVDi => {
                return q4vekP[Z9GUVDi < 366 ? Z9GUVDi < 366 ? Z9GUVDi > 49 ? Z9GUVDi < 366 ? Z9GUVDi - 50 : Z9GUVDi + 69 : Z9GUVDi + 27 : Z9GUVDi + 35 : Z9GUVDi - 58];
                }, 1);
                hPeynT = (JKWEKM & 31) << CKVhvVr(-83) | Z9GUVDi[j98IE8(66)][VXHgGYu++] & j98IE8(68);
            } else if (JKWEKM <= 239) {
                var wCd5XZ = BZxLqo(Z9GUVDi => {
                return q4vekP[Z9GUVDi < 287 ? Z9GUVDi < -30 ? Z9GUVDi + 54 : Z9GUVDi < 287 ? Z9GUVDi > -30 ? Z9GUVDi < 287 ? Z9GUVDi + 29 : Z9GUVDi + 55 : Z9GUVDi - 67 : Z9GUVDi + 46 : Z9GUVDi + 29];
                }, 1);
                hPeynT = (JKWEKM & DIo6Pf(-61)) << 12 | (Z9GUVDi[CKVhvVr(-77)][VXHgGYu++] & wCd5XZ(-11)) << bgBSzeY(7) | Z9GUVDi[9][VXHgGYu++] & DIo6Pf(-60);
            } else if (Y5gIzY[sYAKfGw(DIo6Pf(-59))]) {
                var gq7K_g = BZxLqo(Z9GUVDi => {
                return q4vekP[Z9GUVDi > 317 ? Z9GUVDi + 13 : Z9GUVDi > 0 ? Z9GUVDi > 0 ? Z9GUVDi > 317 ? Z9GUVDi + 25 : Z9GUVDi < 0 ? Z9GUVDi - 78 : Z9GUVDi < 0 ? Z9GUVDi - 84 : Z9GUVDi > 0 ? Z9GUVDi - 1 : Z9GUVDi - 31 : Z9GUVDi + 1 : Z9GUVDi - 92];
                }, 1);
                hPeynT = (JKWEKM & 7) << 18 | (Z9GUVDi[DIo6Pf(-62)][VXHgGYu++] & gq7K_g(19)) << CKVhvVr(-73) | (Z9GUVDi[DIo6Pf(-62)][VXHgGYu++] & gq7K_g(19)) << DIo6Pf(-68) | Z9GUVDi[9][VXHgGYu++] & DIo6Pf(-60);
            } else {
                hPeynT = 63;
                VXHgGYu += bgBSzeY(6);
            }
            wEdiuMa[sYAKfGw(170)](EohKKjx[hPeynT] ||= wdFu611(hPeynT));
            }
            return wEdiuMa[sYAKfGw(171)]("");
        }, 0), 1);
        }, 0)();
        _SaGeZW(AXyTpU, DIo6Pf(-66));
        function AXyTpU(...EohKKjx) {
        EohKKjx[DIo6Pf(-78)] = 1;
        EohKKjx[DIo6Pf(-56)] = DIo6Pf(-57);
        if (typeof wEdiuMa !== sYAKfGw(172) && wEdiuMa) {
            return new wEdiuMa()[sYAKfGw(DIo6Pf(77))](new CKVhvVr(EohKKjx[DIo6Pf(-76)]));
        } else if (typeof Z9GUVDi !== sYAKfGw(172) && Z9GUVDi) {
            var wdFu611 = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx > 377 ? EohKKjx - 33 : EohKKjx > 60 ? EohKKjx > 60 ? EohKKjx > 60 ? EohKKjx > 60 ? EohKKjx < 60 ? EohKKjx + 12 : EohKKjx > 377 ? EohKKjx + 65 : EohKKjx - 61 : EohKKjx - 59 : EohKKjx + 22 : EohKKjx - 59 : EohKKjx + 2];
            }, 1);
            return Z9GUVDi[sYAKfGw(wdFu611(83))](EohKKjx[wdFu611(63)])[sYAKfGw(wdFu611(268))](sYAKfGw(DIo6Pf(-55)));
        } else {
            var Y5gIzY = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx > 84 ? EohKKjx > 401 ? EohKKjx + 48 : EohKKjx < 401 ? EohKKjx - 85 : EohKKjx + 89 : EohKKjx + 41];
            }, 1);
            return bgBSzeY(EohKKjx[Y5gIzY(87)]);
        }
        }
        hPeynT = VsY1pmd[sYAKfGw(DIo6Pf(-54))](undefined, [55]);
        JKWEKM = VsY1pmd(53);
        OooROk = VsY1pmd(DIo6Pf(-40));
        j98IE8 = {
        [sYAKfGw(178)]: VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [18]),
        [sYAKfGw(DIo6Pf(-35))]: VsY1pmd(100),
        [sYAKfGw(180)]: VsY1pmd(DIo6Pf(-53))
        };
        wCd5XZ = [VsY1pmd(DIo6Pf(-61)), VsY1pmd(64), VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-51)), VsY1pmd(DIo6Pf(-50)), VsY1pmd[sYAKfGw(DIo6Pf(-54))](undefined, [DIo6Pf(-50)]), VsY1pmd(DIo6Pf(-49))];
        gq7K_g = BZxLqo((...EohKKjx) => {
        var wdFu611 = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx > 397 ? EohKKjx - 44 : EohKKjx > 397 ? EohKKjx - 41 : EohKKjx - 81];
        }, 1);
        EohKKjx[DIo6Pf(-78)] = 0;
        EohKKjx[196] = DIo6Pf(190);
        EohKKjx[wdFu611(113)] = {
            [sYAKfGw(EohKKjx[DIo6Pf(-47)] + 113)]: VsY1pmd(DIo6Pf(-48))
        };
        EohKKjx[EohKKjx[wdFu611(112)] - DIo6Pf(-74)] = {
            ZL74sx: EohKKjx[wdFu611(113)][sYAKfGw(182)],
            b8PF0s: wCd5XZ[wdFu611(83)],
            Emt5XE: VsY1pmd(16),
            FKxwHi: DIo6Pf(-45),
            OFbp8oF: VsY1pmd(DIo6Pf(-44)),
            _2azzQ: DIo6Pf(149),
            PXMLNQ: wdFu611(116),
            Y_JWQxq: j98IE8[sYAKfGw(DIo6Pf(189))],
            P2ohmXz: BZxLqo((EohKKjx = OooROk) => {
            var wdFu611 = BZxLqo(EohKKjx => {
                return q4vekP[EohKKjx > 387 ? EohKKjx + 73 : EohKKjx > 70 ? EohKKjx < 387 ? EohKKjx < 70 ? EohKKjx + 30 : EohKKjx < 70 ? EohKKjx - 13 : EohKKjx - 71 : EohKKjx + 71 : EohKKjx - 26];
            }, 1);
            if (!gq7K_g.mp6Ll3S[wdFu611(73)]) {
                gq7K_g.mp6Ll3S.push(-DIo6Pf(93));
            }
            return gq7K_g.mp6Ll3S[EohKKjx];
            }, 0),
            lVYG5oD: VsY1pmd(DIo6Pf(-42)),
            GbK0vv: VsY1pmd[sYAKfGw(DIo6Pf(-41))](undefined, DIo6Pf(-45)),
            l9FyIN: BZxLqo((EohKKjx = VsY1pmd(wdFu611(119))) => {
            if (!gq7K_g.bN1WegW[0]) {
                var wEdiuMa = BZxLqo(EohKKjx => {
                return q4vekP[EohKKjx > 60 ? EohKKjx > 60 ? EohKKjx < 377 ? EohKKjx > 60 ? EohKKjx < 60 ? EohKKjx + 63 : EohKKjx > 60 ? EohKKjx < 377 ? EohKKjx - 61 : EohKKjx - 60 : EohKKjx - 79 : EohKKjx - 91 : EohKKjx + 61 : EohKKjx - 50 : EohKKjx - 88];
                }, 1);
                gq7K_g.bN1WegW.push(-wEdiuMa(100));
            }
            return gq7K_g.bN1WegW[EohKKjx];
            }, 0),
            mp6Ll3S: [],
            IQ_nQTX: EohKKjx[DIo6Pf(-47)] + wdFu611(115),
            WHtRSze: VsY1pmd(wdFu611(121)),
            bN1WegW: []
        };
        if (EohKKjx[DIo6Pf(-47)] > EohKKjx[DIo6Pf(-47)] + 134) {
            return EohKKjx[DIo6Pf(-40)];
        } else {
            return EohKKjx[1];
        }
        }, 0)();
        var nZ6sA5N;
        var JIHNUni;
        var TlKFWLD = function () {
        function EohKKjx() {
            try {
            var EohKKjx = BZxLqo(wdFu611 => {
                return q4vekP[wdFu611 < 56 ? wdFu611 + 20 : wdFu611 > 56 ? wdFu611 > 56 ? wdFu611 - 57 : wdFu611 - 32 : wdFu611 + 35];
            }, 1);
            return window || global || new Function(VsY1pmd[sYAKfGw(EohKKjx(81))](DIo6Pf(-52), [DIo6Pf(-71)]) + VsY1pmd[sYAKfGw(DIo6Pf(-54))](EohKKjx(83), [DIo6Pf(-3)]))();
            } catch (e) {
            return wdFu611[VsY1pmd(25)](this);
            }
        }
        var wdFu611;
        wdFu611 = function () {
            try {
            return this;
            } catch (e) {
            return null;
            }
        };
        JIHNUni = wdFu611[VsY1pmd(DIo6Pf(128))](this, SswOvU);
        return nZ6sA5N = EohKKjx[VsY1pmd(25)](this);
        }[VsY1pmd(25)]();
        _SaGeZW(D5McUVk, DIo6Pf(-37));
        function D5McUVk(...EohKKjx) {
        var wdFu611 = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx < 228 ? EohKKjx > -89 ? EohKKjx < -89 ? EohKKjx - 90 : EohKKjx < 228 ? EohKKjx > -89 ? EohKKjx + 88 : EohKKjx + 24 : EohKKjx + 71 : EohKKjx - 87 : EohKKjx - 68];
        }, 1);
        EohKKjx.length = wdFu611(-47);
        EohKKjx[DIo6Pf(-70)] = EohKKjx[wdFu611(-86)];
        switch (hei7nFI) {
            case gq7K_g.P2ohmXz() ? 22 : -wdFu611(-46):
            return !EohKKjx[wdFu611(-80)];
            case gq7K_g.PXMLNQ <= -45 ? null : -DIo6Pf(-42):
            return EohKKjx[wdFu611(-80)] + EohKKjx[1];
            case gq7K_g._2azzQ <= -wdFu611(-17) ? DIo6Pf(-35) : wdFu611(-54):
            return EohKKjx[DIo6Pf(-70)] / EohKKjx[wdFu611(-76)];
            case !gq7K_g.P2ohmXz() ? DIo6Pf(-52) : -DIo6Pf(-73):
            return -EohKKjx[DIo6Pf(-70)];
            case gq7K_g.PXMLNQ <= -wdFu611(-42) ? -wdFu611(66) : 51:
            return EohKKjx[wdFu611(-80)] - EohKKjx[DIo6Pf(-66)];
        }
        }
        _SaGeZW(BTS1G_4, DIo6Pf(-66));
        function BTS1G_4(...EohKKjx) {
        var wdFu611 = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx < 282 ? EohKKjx > -35 ? EohKKjx > 282 ? EohKKjx - 96 : EohKKjx < 282 ? EohKKjx > -35 ? EohKKjx > 282 ? EohKKjx + 90 : EohKKjx > -35 ? EohKKjx > -35 ? EohKKjx < 282 ? EohKKjx + 34 : EohKKjx + 95 : EohKKjx - 95 : EohKKjx + 84 : EohKKjx - 49 : EohKKjx - 41 : EohKKjx + 93 : EohKKjx + 28];
        }, 1);
        EohKKjx[wdFu611(-34)] = wdFu611(-22);
        EohKKjx[wdFu611(10)] = EohKKjx[DIo6Pf(-76)];
        EohKKjx[wdFu611(10)] = hei7nFI + (hei7nFI = EohKKjx[wdFu611(10)], wdFu611(-32));
        return EohKKjx[DIo6Pf(-34)];
        }
        hei7nFI = hei7nFI;
        AjXyWZ = SswOvU(DIo6Pf(59)).create(null);
        wZxB4RR = [];
        window[VsY1pmd(DIo6Pf(-33))] = BZxLqo(EohKKjx => {
        var wdFu611;
        var wEdiuMa;
        var CKVhvVr;
        var Z9GUVDi;
        var Y5gIzY;
        var VXHgGYu;
        function bgBSzeY(EohKKjx) {
            return q4vekP[EohKKjx > 259 ? EohKKjx - 98 : EohKKjx + 57];
        }
        wdFu611 = {
            [sYAKfGw(DIo6Pf(51))]: VsY1pmd(DIo6Pf(-32)),
            [sYAKfGw(bgBSzeY(103))]: VsY1pmd(bgBSzeY(85)),
            [sYAKfGw(185)]: VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-31)),
            [sYAKfGw(bgBSzeY(257))]: VsY1pmd(43)
        };
        wEdiuMa = VsY1pmd(DIo6Pf(89));
        CKVhvVr = [VsY1pmd(DIo6Pf(-30)), VsY1pmd(DIo6Pf(-29)), VsY1pmd(DIo6Pf(-28)), VsY1pmd(DIo6Pf(-24))];
        Z9GUVDi = VsY1pmd(DIo6Pf(178));
        Y5gIzY = BZxLqo((...EohKKjx) => {
            var wdFu611 = {};
            wZxB4RR = [EohKKjx, wdFu611];
            return c4smX9(VsY1pmd(DIo6Pf(50)));
        }, 0)();
        VXHgGYu = D5McUVk(DIo6Pf(-76), hei7nFI = DIo6Pf(-38));
        for (let EohKKjx = DIo6Pf(-76); EohKKjx < Y5gIzY[VsY1pmd(bgBSzeY(-19))] && gq7K_g.P2ohmXz(); EohKKjx++) {
            var OooROk;
            function j98IE8(EohKKjx) {
            return q4vekP[EohKKjx < 71 ? EohKKjx - 53 : EohKKjx < 388 ? EohKKjx < 388 ? EohKKjx > 388 ? EohKKjx - 53 : EohKKjx > 71 ? EohKKjx > 71 ? EohKKjx > 388 ? EohKKjx + 44 : EohKKjx > 388 ? EohKKjx + 40 : EohKKjx - 72 : EohKKjx + 34 : EohKKjx + 6 : EohKKjx - 32 : EohKKjx + 13];
            }
            OooROk = VsY1pmd(j98IE8(123));
            if (Y5gIzY[EohKKjx][OooROk](Z9GUVDi)) {
            VXHgGYu = D5McUVk(1, hei7nFI = bgBSzeY(-17));
            }
        }
        if (VXHgGYu && gq7K_g.P2ohmXz()) {
            var AjXyWZ = BZxLqo(EohKKjx => {
            return q4vekP[EohKKjx > 277 ? EohKKjx - 23 : EohKKjx > -40 ? EohKKjx < 277 ? EohKKjx > 277 ? EohKKjx - 71 : EohKKjx < 277 ? EohKKjx < 277 ? EohKKjx + 39 : EohKKjx - 98 : EohKKjx - 97 : EohKKjx - 60 : EohKKjx + 49];
            }, 1);
            return AjXyWZ(-27);
        }
        new (SswOvU(-DIo6Pf(-26)))(_SaGeZW((...EohKKjx) => {
            var Z9GUVDi;
            var VXHgGYu;
            EohKKjx[DIo6Pf(-78)] = bgBSzeY(-45);
            EohKKjx[DIo6Pf(-25)] = -bgBSzeY(-3);
            Z9GUVDi = VsY1pmd(DIo6Pf(-73));
            EohKKjx.M98mao = 95;
            VXHgGYu = [VsY1pmd(bgBSzeY(-2)), VsY1pmd(bgBSzeY(-11))];
            EohKKjx[EohKKjx[DIo6Pf(-25)] + DIo6Pf(-24)][VsY1pmd(30)](_SaGeZW((...EohKKjx) => {
            var OooROk;
            function j98IE8(EohKKjx) {
                return q4vekP[EohKKjx > -7 ? EohKKjx > -7 ? EohKKjx < 310 ? EohKKjx < 310 ? EohKKjx < -7 ? EohKKjx - 3 : EohKKjx > 310 ? EohKKjx + 41 : EohKKjx > 310 ? EohKKjx + 36 : EohKKjx > 310 ? EohKKjx - 1 : EohKKjx < -7 ? EohKKjx + 81 : EohKKjx + 6 : EohKKjx + 41 : EohKKjx + 59 : EohKKjx - 35 : EohKKjx + 10];
            }
            EohKKjx[DIo6Pf(-78)] = bgBSzeY(-45);
            EohKKjx[55] = DIo6Pf(-22);
            OooROk = {
                [sYAKfGw(EohKKjx[EohKKjx[DIo6Pf(-21)] + j98IE8(24)] - (EohKKjx[j98IE8(51)] - j98IE8(80)))]: VsY1pmd(bgBSzeY(1)),
                [sYAKfGw(188)]: VsY1pmd(DIo6Pf(-20)),
                [sYAKfGw(bgBSzeY(155))]: VsY1pmd(39)
            };
            EohKKjx[j98IE8(54)] = EohKKjx.ZonIQuH;
            if (bgBSzeY(76) != EohKKjx[j98IE8(-4)][VsY1pmd(j98IE8(49)) + CKVhvVr[bgBSzeY(-55)]] && EohKKjx[EohKKjx[j98IE8(51)] - j98IE8(50)][CKVhvVr[j98IE8(6)]][VsY1pmd(DIo6Pf(-40))] > bgBSzeY(-55) && gq7K_g.P2ohmXz()) {
                var AjXyWZ = VsY1pmd(DIo6Pf(-19));
                var x_uNhNM;
                for (x_uNhNM of EohKKjx[EohKKjx[DIo6Pf(-21)] - 41][VXHgGYu[0] + VsY1pmd[sYAKfGw(177)](undefined, [j98IE8(42)])]) {
                var hPeynT = BZxLqo(EohKKjx => {
                    return q4vekP[EohKKjx > 39 ? EohKKjx > 39 ? EohKKjx < 356 ? EohKKjx < 356 ? EohKKjx - 40 : EohKKjx + 85 : EohKKjx - 49 : EohKKjx + 6 : EohKKjx + 61];
                }, 1);
                EohKKjx[bgBSzeY(3)] = {
                    [sYAKfGw(EohKKjx[j98IE8(51)] + 149)]: VsY1pmd(34)
                };
                if (x_uNhNM[EohKKjx[DIo6Pf(-18)][sYAKfGw(190)] + VsY1pmd(j98IE8(55))][VsY1pmd(EohKKjx[bgBSzeY(0)] - 5) + "es"](Z9GUVDi + VsY1pmd(38) + "==")) {
                    SswOvU(-(EohKKjx[j98IE8(51)] + hPeynT(65)))[VsY1pmd[sYAKfGw(EohKKjx[DIo6Pf(-21)] + j98IE8(56))](j98IE8(20), 39)]();
                    SswOvU(591)((...EohKKjx) => {
                    var x_uNhNM;
                    var Z9GUVDi;
                    var CKVhvVr;
                    var Y5gIzY;
                    var JKWEKM;
                    var wCd5XZ;
                    var wZxB4RR;
                    function NG4zOMq(EohKKjx) {
                        return q4vekP[EohKKjx > 88 ? EohKKjx < 405 ? EohKKjx - 89 : EohKKjx + 98 : EohKKjx + 61];
                    }
                    EohKKjx[NG4zOMq(89)] = hPeynT(42);
                    EohKKjx[bgBSzeY(6)] = EohKKjx[DIo6Pf(-5)];
                    x_uNhNM = {
                        [sYAKfGw(191)]: VsY1pmd(NG4zOMq(147))
                    };
                    Z9GUVDi = Z9GUVDi;
                    CKVhvVr = j98IE8(180);
                    Y5gIzY = -110;
                    JKWEKM = j98IE8(58);
                    wCd5XZ = -DIo6Pf(-4);
                    wZxB4RR = {
                        b: j98IE8(-4),
                        c: -NG4zOMq(291),
                        l: NG4zOMq(154),
                        [j98IE8(109)]: bgBSzeY(9),
                        [bgBSzeY(19)]: () => JKWEKM += JKWEKM + bgBSzeY(10) > CKVhvVr ? CKVhvVr - 308 : DIo6Pf(-31),
                        [bgBSzeY(148)]: 341,
                        [hPeynT(157)]: hPeynT(185),
                        [NG4zOMq(189)]: BZxLqo(() => {
                        var EohKKjx = BZxLqo(x_uNhNM => {
                            return q4vekP[x_uNhNM > -98 ? x_uNhNM > -98 ? x_uNhNM < 219 ? x_uNhNM < 219 ? x_uNhNM > 219 ? x_uNhNM - 15 : x_uNhNM < 219 ? x_uNhNM + 97 : x_uNhNM + 11 : x_uNhNM + 31 : x_uNhNM - 22 : x_uNhNM + 93 : x_uNhNM - 30];
                        }, 1);
                        CKVhvVr -= bgBSzeY(11);
                        Y5gIzY += JKWEKM == EohKKjx(-33) ? NG4zOMq(156) : bgBSzeY(77);
                        JKWEKM += Y5gIzY + hPeynT(109);
                        return wCd5XZ -= EohKKjx(-36);
                        }, 0),
                        [j98IE8(102)]: VsY1pmd(bgBSzeY(13)),
                        [bgBSzeY(69)]: j98IE8(132),
                        [hPeynT(202)]: (EohKKjx = typeof wZxB4RR[j98IE8(72)] == VsY1pmd(41) + wEdiuMa) => {
                        if (EohKKjx && gq7K_g._2azzQ > -NG4zOMq(160)) {
                            return CKVhvVr;
                        }
                        return JKWEKM += hPeynT(112);
                        },
                        [DIo6Pf(43)]: j98IE8(67),
                        [bgBSzeY(28)]: () => {
                        wZxB4RR[bgBSzeY(33)] = wCd5XZ == -bgBSzeY(17) && Jjwkpkv;
                        Y5gIzY += bgBSzeY(10);
                        JKWEKM += 38;
                        return "P";
                        },
                        [DIo6Pf(45)]: 38,
                        f: NG4zOMq(264),
                        af: BZxLqo(() => {
                        return CKVhvVr += NG4zOMq(270);
                        }, 0),
                        [hPeynT(255)]: () => {
                        var EohKKjx = BZxLqo(x_uNhNM => {
                            return q4vekP[x_uNhNM > -56 ? x_uNhNM + 55 : x_uNhNM + 78];
                        }, 1);
                        CKVhvVr = EohKKjx(20);
                        Y5gIzY += hPeynT(107);
                        wZxB4RR[DIo6Pf(-2)]();
                        wCd5XZ -= j98IE8(34);
                        return DIo6Pf(10);
                        },
                        [hPeynT(153)]: NG4zOMq(161),
                        [DIo6Pf(58)]: 55,
                        [j98IE8(151)]: bgBSzeY(20),
                        n: 279,
                        [bgBSzeY(163)]: DIo6Pf(-7),
                        [NG4zOMq(237)]: NG4zOMq(130),
                        o: 8,
                        [hPeynT(118)]: DIo6Pf(-69),
                        [hPeynT(158)]: DIo6Pf(1),
                        [bgBSzeY(57)]: 564,
                        [DIo6Pf(143)]: NG4zOMq(123),
                        [DIo6Pf(78)]: NG4zOMq(169),
                        [j98IE8(91)]: 128,
                        [j98IE8(138)]: bgBSzeY(-15),
                        [DIo6Pf(72)]: 21,
                        [j98IE8(83)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                        var x_uNhNM = BZxLqo(EohKKjx => {
                            return q4vekP[EohKKjx > 334 ? EohKKjx - 57 : EohKKjx - 18];
                        }, 1);
                        EohKKjx.length = hPeynT(52);
                        EohKKjx[x_uNhNM(99)] = EohKKjx[NG4zOMq(91)];
                        return EohKKjx[j98IE8(75)] + j98IE8(45);
                        }, 0), bgBSzeY(-45)),
                        [j98IE8(86)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                        EohKKjx[NG4zOMq(89)] = j98IE8(6);
                        EohKKjx[hPeynT(122)] = EohKKjx[0];
                        return EohKKjx.VnoZ62L != -238 && EohKKjx[bgBSzeY(25)] != -bgBSzeY(42) && EohKKjx[NG4zOMq(171)] != -203 && EohKKjx.VnoZ62L + 264;
                        }, 0), NG4zOMq(101)),
                        [j98IE8(88)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                        var x_uNhNM = BZxLqo(EohKKjx => {
                            return q4vekP[EohKKjx < -81 ? EohKKjx + 12 : EohKKjx > 236 ? EohKKjx - 47 : EohKKjx > 236 ? EohKKjx - 37 : EohKKjx > -81 ? EohKKjx < -81 ? EohKKjx + 1 : EohKKjx + 80 : EohKKjx - 87];
                        }, 1);
                        EohKKjx[bgBSzeY(-57)] = bgBSzeY(-45);
                        EohKKjx[DIo6Pf(-74)] = EohKKjx[DIo6Pf(-76)];
                        return EohKKjx[j98IE8(-2)] - x_uNhNM(29);
                        }, 0), NG4zOMq(101)),
                        [DIo6Pf(17)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                        EohKKjx[hPeynT(40)] = NG4zOMq(101);
                        EohKKjx[NG4zOMq(172)] = EohKKjx[j98IE8(-4)];
                        return EohKKjx[bgBSzeY(26)] - hPeynT(91);
                        }, 0), hPeynT(52))
                    };
                    while (CKVhvVr + Y5gIzY + JKWEKM + wCd5XZ != bgBSzeY(27) && gq7K_g._2azzQ > -90) {
                        var Jjwkpkv;
                        function QB1qKN(EohKKjx) {
                        return q4vekP[EohKKjx > -95 ? EohKKjx < 222 ? EohKKjx < -95 ? EohKKjx + 30 : EohKKjx > 222 ? EohKKjx - 1 : EohKKjx > 222 ? EohKKjx - 64 : EohKKjx > -95 ? EohKKjx > 222 ? EohKKjx - 40 : EohKKjx + 94 : EohKKjx - 74 : EohKKjx + 6 : EohKKjx - 15];
                        }
                        EohKKjx[NG4zOMq(192)] = [VsY1pmd(bgBSzeY(-11))];
                        switch (CKVhvVr + Y5gIzY + JKWEKM + wCd5XZ) {
                        case 646:
                        case 37:
                        case 878:
                            if (wZxB4RR[j98IE8(79)]() == bgBSzeY(156) && gq7K_g.b8PF0s[VsY1pmd(QB1qKN(-65)) + OooROk[sYAKfGw(hPeynT(126))]](DIo6Pf(-76)) == j98IE8(81)) {
                            break;
                            }
                        case gq7K_g._2azzQ > -90 ? JKWEKM - 76 : null:
                            if (wZxB4RR.I() == j98IE8(82)) {
                            break;
                            }
                        case gq7K_g.b8PF0s[VsY1pmd(j98IE8(23)) + OooROk[sYAKfGw(188)]](QB1qKN(-92)) != NG4zOMq(176) ? null : wZxB4RR[bgBSzeY(32)](JKWEKM):
                            if (wZxB4RR[hPeynT(130)]) {
                            var AXyTpU = BZxLqo(EohKKjx => {
                                return q4vekP[EohKKjx < 343 ? EohKKjx < 26 ? EohKKjx - 82 : EohKKjx < 343 ? EohKKjx < 26 ? EohKKjx - 69 : EohKKjx < 343 ? EohKKjx > 26 ? EohKKjx > 26 ? EohKKjx < 26 ? EohKKjx - 80 : EohKKjx < 26 ? EohKKjx + 72 : EohKKjx - 27 : EohKKjx - 42 : EohKKjx - 36 : EohKKjx - 58 : EohKKjx + 33 : EohKKjx + 45];
                            }, 1);
                            Y5gIzY *= bgBSzeY(-16);
                            Y5gIzY -= AXyTpU(118);
                            JKWEKM += QB1qKN(-90);
                            break;
                            }
                            CKVhvVr -= hPeynT(141);
                            JKWEKM += 44;
                            break;
                        case gq7K_g.PXMLNQ <= -45 ? undefined : wZxB4RR[bgBSzeY(35)](wCd5XZ):
                            CKVhvVr = JKWEKM - 100;
                            Y5gIzY += DIo6Pf(-11);
                            JKWEKM += wCd5XZ + DIo6Pf(15);
                            wCd5XZ -= DIo6Pf(-53);
                            break;
                        case wZxB4RR[hPeynT(134)](CKVhvVr):
                            delete wZxB4RR.al;
                            CKVhvVr = QB1qKN(-19);
                            CKVhvVr += NG4zOMq(157);
                            Y5gIzY += NG4zOMq(154);
                            JKWEKM -= 21;
                            break;
                        case wZxB4RR[NG4zOMq(184)](CKVhvVr):
                            JKWEKM = DIo6Pf(18);
                            JKWEKM += hPeynT(47);
                            break;
                        case gq7K_g.WHtRSze[VXHgGYu[1]](DIo6Pf(-69)) != NG4zOMq(186) ? j98IE8(20) : wCd5XZ != -NG4zOMq(163) && wCd5XZ != -NG4zOMq(187) && wCd5XZ != -hPeynT(139) && wCd5XZ + 264:
                            wZxB4RR[NG4zOMq(205)] = hPeynT(165);
                            JKWEKM = bgBSzeY(39);
                            wZxB4RR[hPeynT(140)]();
                            break;
                        case !gq7K_g.P2ohmXz() ? hPeynT(141) : bgBSzeY(45):
                        case gq7K_g.WHtRSze[EohKKjx[DIo6Pf(25)][0]](hPeynT(49)) == "r" ? 792 : -QB1qKN(10):
                        case gq7K_g.FKxwHi <= -19 ? -DIo6Pf(-4) : bgBSzeY(183):
                        case gq7K_g.PXMLNQ > -bgBSzeY(-11) ? 706 : -NG4zOMq(194):
                            Z9GUVDi = BZxLqo(() => {}, 0);
                            JKWEKM -= 134;
                            break;
                        case bgBSzeY(49):
                        case gq7K_g.FKxwHi <= -hPeynT(78) ? DIo6Pf(167) : bgBSzeY(241):
                        case gq7K_g._2azzQ > -QB1qKN(-23) ? 927 : -QB1qKN(176):
                        case gq7K_g.P2ohmXz() ? 903 : -bgBSzeY(50):
                            SswOvU(-187)[VsY1pmd(hPeynT(145))]();
                            SswOvU(2)[(wZxB4RR[j98IE8(228)] = wZxB4RR)[NG4zOMq(197)]](D5McUVk(QB1qKN(-92), hei7nFI = j98IE8(34)));
                            CKVhvVr -= bgBSzeY(11);
                            Y5gIzY += 77;
                            JKWEKM += QB1qKN(15);
                            wCd5XZ -= NG4zOMq(150);
                            break;
                        case !gq7K_g.P2ohmXz() ? -DIo6Pf(32) : 47:
                            (wZxB4RR.e == hPeynT(151) ? SswOvU(-187) : JKWEKM)[OooROk[sYAKfGw(189)]]();
                            (wCd5XZ == (wZxB4RR.y == DIo6Pf(41) ? wZxB4RR[j98IE8(257)] : -bgBSzeY(-6)) || SswOvU(2))[wZxB4RR[hPeynT(148)]](D5McUVk(QB1qKN(-92), hei7nFI = hPeynT(80)));
                            wZxB4RR.af();
                            break;
                        case gq7K_g.WHtRSze[VsY1pmd(45)](DIo6Pf(-69)) == NG4zOMq(186) ? bgBSzeY(-41) : -241:
                        case gq7K_g._2azzQ > -bgBSzeY(14) ? 695 : hPeynT(71):
                            EohKKjx[99] = _SaGeZW(BZxLqo((...EohKKjx) => {
                            var CKVhvVr;
                            var Y5gIzY;
                            var JKWEKM;
                            var wCd5XZ;
                            var Jjwkpkv;
                            var AXyTpU;
                            function OooROk(EohKKjx) {
                                return q4vekP[EohKKjx > 400 ? EohKKjx + 90 : EohKKjx < 83 ? EohKKjx - 80 : EohKKjx > 83 ? EohKKjx < 83 ? EohKKjx - 93 : EohKKjx < 83 ? EohKKjx - 38 : EohKKjx < 83 ? EohKKjx - 27 : EohKKjx - 84 : EohKKjx - 92];
                            }
                            EohKKjx.length = hPeynT(81);
                            EohKKjx[bgBSzeY(55)] = -bgBSzeY(-46);
                            CKVhvVr = [VsY1pmd(EohKKjx[j98IE8(106)] + 172)];
                            Y5gIzY = -420;
                            JKWEKM = -wZxB4RR[bgBSzeY(56)];
                            wCd5XZ = EohKKjx[DIo6Pf(34)] + 359;
                            Jjwkpkv = 287;
                            AXyTpU = {
                                [NG4zOMq(167)]: BZxLqo(() => {
                                return wCd5XZ += AXyTpU[bgBSzeY(40)];
                                }, 0),
                                [hPeynT(154)]: BZxLqo(() => {
                                var EohKKjx = BZxLqo(CKVhvVr => {
                                    return q4vekP[CKVhvVr < -33 ? CKVhvVr - 84 : CKVhvVr < 284 ? CKVhvVr < 284 ? CKVhvVr > 284 ? CKVhvVr - 30 : CKVhvVr < -33 ? CKVhvVr + 83 : CKVhvVr + 32 : CKVhvVr - 47 : CKVhvVr - 88];
                                }, 1);
                                JKWEKM -= wZxB4RR.h;
                                wCd5XZ *= wZxB4RR.i;
                                return wCd5XZ -= wZxB4RR[EohKKjx(83)];
                                }, 0),
                                z: 16,
                                [OooROk(231)]: BZxLqo(() => {
                                return JKWEKM -= bgBSzeY(20);
                                }, 0),
                                [DIo6Pf(38)]: BZxLqo(() => {
                                return JKWEKM = wZxB4RR[j98IE8(111)];
                                }, 0),
                                [hPeynT(193)]: BZxLqo(() => {
                                return JKWEKM += wZxB4RR[DIo6Pf(65)];
                                }, 0),
                                [bgBSzeY(61)]: wZxB4RR.l,
                                [bgBSzeY(62)]: (EohKKjx = AXyTpU[j98IE8(116)] == OooROk(86)) => {
                                if (!EohKKjx) {
                                    return JKWEKM;
                                }
                                return Jjwkpkv -= wZxB4RR[j98IE8(112)];
                                },
                                p: BZxLqo(() => {
                                if (Jjwkpkv == 287 && hPeynT(192) && gq7K_g.GbK0vv[VsY1pmd[sYAKfGw(177)](OooROk(110), [OooROk(113)]) + CKVhvVr[OooROk(86)]](hPeynT(119)) == 114) {
                                    Y5gIzY += AXyTpU[j98IE8(112)];
                                    JKWEKM -= 87;
                                    wCd5XZ += Jjwkpkv - wZxB4RR[DIo6Pf(42)];
                                    Jjwkpkv += DIo6Pf(-28);
                                    return OooROk(204);
                                }
                                }, 0),
                                [bgBSzeY(64)]: (EohKKjx = AXyTpU[QB1qKN(3)] == wZxB4RR.o) => {
                                var CKVhvVr;
                                function Y5gIzY(EohKKjx) {
                                    return q4vekP[EohKKjx < -86 ? EohKKjx - 11 : EohKKjx > 231 ? EohKKjx + 41 : EohKKjx > 231 ? EohKKjx + 65 : EohKKjx > 231 ? EohKKjx - 54 : EohKKjx < 231 ? EohKKjx > 231 ? EohKKjx - 7 : EohKKjx < 231 ? EohKKjx < 231 ? EohKKjx + 85 : EohKKjx - 88 : EohKKjx + 32 : EohKKjx - 24];
                                }
                                CKVhvVr = VsY1pmd[sYAKfGw(Y5gIzY(-48))](bgBSzeY(-31), QB1qKN(-36));
                                if (!EohKKjx && gq7K_g.b8PF0s[VsY1pmd[sYAKfGw(177)](j98IE8(20), [NG4zOMq(118)]) + CKVhvVr](QB1qKN(-92)) == 109) {
                                    return "v";
                                }
                                return wZxB4RR[Y5gIzY(37)];
                                },
                                [NG4zOMq(212)]: j98IE8(4),
                                [bgBSzeY(65)]: wZxB4RR.b,
                                r: OooROk(208),
                                [j98IE8(119)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                                var CKVhvVr = BZxLqo(EohKKjx => {
                                    return q4vekP[EohKKjx > 295 ? EohKKjx - 67 : EohKKjx + 21];
                                }, 1);
                                EohKKjx.length = OooROk(96);
                                EohKKjx[122] = EohKKjx[CKVhvVr(-19)];
                                return EohKKjx[122] != -wZxB4RR[NG4zOMq(215)] && EohKKjx[122] + hPeynT(198);
                                }, 0), 1),
                                [j98IE8(249)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                                var CKVhvVr = BZxLqo(EohKKjx => {
                                    return q4vekP[EohKKjx < -80 ? EohKKjx - 91 : EohKKjx > -80 ? EohKKjx < -80 ? EohKKjx - 26 : EohKKjx > 237 ? EohKKjx + 3 : EohKKjx > 237 ? EohKKjx + 80 : EohKKjx + 79 : EohKKjx - 11];
                                }, 1);
                                EohKKjx[CKVhvVr(-79)] = 1;
                                EohKKjx[hPeynT(167)] = j98IE8(35);
                                if (EohKKjx[EohKKjx[96] + OooROk(266)] > hPeynT(107)) {
                                    return EohKKjx[-j98IE8(122)];
                                } else {
                                    return EohKKjx[OooROk(86)] + wZxB4RR[hPeynT(154)];
                                }
                                }, 0), DIo6Pf(-66))
                            };
                            while (Y5gIzY + JKWEKM + wCd5XZ + Jjwkpkv != wZxB4RR[j98IE8(91)] && gq7K_g.WHtRSze[wdFu611[sYAKfGw(NG4zOMq(218))]](EohKKjx[OooROk(196)] + QB1qKN(36)) == bgBSzeY(40)) {
                                var AjXyWZ;
                                var AjXyWZ;
                                var VXHgGYu;
                                var wEdiuMa;
                                var VXHgGYu;
                                var wEdiuMa;
                                function nZ6sA5N(EohKKjx) {
                                return q4vekP[EohKKjx < 25 ? EohKKjx - 92 : EohKKjx - 26];
                                }
                                switch (Y5gIzY + JKWEKM + wCd5XZ + Jjwkpkv) {
                                case !gq7K_g.P2ohmXz() ? -hPeynT(171) : nZ6sA5N(158):
                                    while ((EohKKjx[j98IE8(129)] !== nZ6sA5N(159) || (AXyTpU[DIo6Pf(56)] = EohKKjx[18]) !== nZ6sA5N(159)) && gq7K_g._2azzQ > -(EohKKjx[hPeynT(152)] + 218)) {
                                    var JIHNUni = BZxLqo(EohKKjx => {
                                        return q4vekP[EohKKjx > 409 ? EohKKjx - 1 : EohKKjx < 409 ? EohKKjx < 92 ? EohKKjx - 95 : EohKKjx < 409 ? EohKKjx > 92 ? EohKKjx > 92 ? EohKKjx - 93 : EohKKjx + 32 : EohKKjx + 12 : EohKKjx - 94 : EohKKjx - 0];
                                    }, 1);
                                    VXHgGYu = (wCd5XZ == -wZxB4RR[nZ6sA5N(104)] ? SswOvU(591) : D5McUVk)((EohKKjx[DIo6Pf(57)] ? (JKWEKM == -wZxB4RR[bgBSzeY(64)] ? NaN : EohKKjx[NG4zOMq(224)]).val : AXyTpU[NG4zOMq(211)]) + ((AXyTpU[bgBSzeY(79)] == EohKKjx.e0y7s8y + 469 ? SswOvU(nZ6sA5N(163)) : EohKKjx[EohKKjx[JIHNUni(205)] + 146]) ? (Y5gIzY == -DIo6Pf(60) ? EohKKjx[EohKKjx[QB1qKN(18)] + QB1qKN(-69)] : SswOvU(-OooROk(323))).val : QB1qKN(-92)), Jjwkpkv == Y5gIzY + (AXyTpU.z == -OooROk(223) ? QB1qKN(137) : 761) && AjXyWZ, hei7nFI = -NG4zOMq(125));
                                    AjXyWZ = (AXyTpU[hPeynT(263)] = SswOvU(EohKKjx[OooROk(196)] + 211)).floor(D5McUVk(VXHgGYu, j98IE8(38), BTS1G_4(wZxB4RR.u)));
                                    EohKKjx[bgBSzeY(83)].next = new Z9GUVDi((AXyTpU[hPeynT(298)] = VXHgGYu) % NG4zOMq(133));
                                    EohKKjx[hPeynT(180)] = (AXyTpU.Q = EohKKjx[hPeynT(180)]).next;
                                    EohKKjx.fWaW3Ny = EohKKjx.fWaW3Ny ? EohKKjx[NG4zOMq(224)].next : nZ6sA5N(159);
                                    EohKKjx[nZ6sA5N(167)] = JKWEKM == -wZxB4RR[DIo6Pf(35)] && EohKKjx[18] ? (AXyTpU.e == "R" || EohKKjx[hPeynT(181)]).next : QB1qKN(39);
                                    }
                                    if (AXyTpU[VsY1pmd(QB1qKN(-35)) + VsY1pmd(nZ6sA5N(168)) + j98IE8(155)](j98IE8(116)) && AjXyWZ && gq7K_g.b8PF0s[VsY1pmd(hPeynT(69)) + x_uNhNM[sYAKfGw(191)]](EohKKjx[OooROk(196)] - (EohKKjx.e0y7s8y - 0)) == bgBSzeY(30)) {
                                    EohKKjx[hPeynT(180)].next = new (AXyTpU[OooROk(316)] = Z9GUVDi)(AjXyWZ);
                                    }
                                    JKWEKM += AXyTpU.b == -OooROk(226) ? AXyTpU.aa : -wZxB4RR[OooROk(227)];
                                    break;
                                case gq7K_g.WHtRSze[VsY1pmd[sYAKfGw(bgBSzeY(-33))](nZ6sA5N(52), [nZ6sA5N(72)])](3) != j98IE8(91) ? null : wZxB4RR[hPeynT(184)]:
                                    JKWEKM = OooROk(229);
                                    Y5gIzY *= wCd5XZ + wZxB4RR[NG4zOMq(293)];
                                    Y5gIzY -= OooROk(230) < wCd5XZ ? -432 : -130;
                                    AXyTpU[hPeynT(187)]();
                                    wCd5XZ *= wZxB4RR[NG4zOMq(237)];
                                    wCd5XZ -= wZxB4RR[OooROk(199)];
                                    Jjwkpkv += bgBSzeY(-7);
                                    break;
                                case gq7K_g.P2ohmXz() ? NG4zOMq(238) : -220:
                                case EohKKjx.e0y7s8y + 911:
                                case gq7K_g.PXMLNQ > -DIo6Pf(-32) ? 536 : -64:
                                    AjXyWZ = wZxB4RR.b;
                                    AXyTpU[bgBSzeY(57)]();
                                    break;
                                case AXyTpU[NG4zOMq(214)](Y5gIzY):
                                    AXyTpU[NG4zOMq(205)]();
                                    Y5gIzY -= OooROk(145);
                                    JKWEKM += wZxB4RR[j98IE8(144)];
                                    break;
                                case wZxB4RR.e:
                                    if (AXyTpU[DIo6Pf(48)]() == DIo6Pf(42) && gq7K_g.Y_JWQxq[VsY1pmd(48)](DIo6Pf(-66)) == NG4zOMq(240)) {
                                    break;
                                    }
                                case gq7K_g.GbK0vv[VsY1pmd(hPeynT(69)) + VsY1pmd(nZ6sA5N(84))](EohKKjx[bgBSzeY(55)] + 133) != nZ6sA5N(214) ? -OooROk(281) : bgBSzeY(47):
                                    if (NG4zOMq(241)) {
                                    AXyTpU[DIo6Pf(75)]();
                                    AXyTpU[hPeynT(159)]();
                                    break;
                                    }
                                    return wEdiuMa.next;
                                case !gq7K_g.P2ohmXz() ? OooROk(150) : 225:
                                case gq7K_g.PXMLNQ > -DIo6Pf(-32) ? EohKKjx[DIo6Pf(34)] + bgBSzeY(97) : -169:
                                case gq7K_g.PXMLNQ <= -45 ? -(EohKKjx[hPeynT(152)] + 332) : 87:
                                    AjXyWZ = DIo6Pf(-76);
                                    AXyTpU[j98IE8(72)]();
                                    break;
                                case gq7K_g.PXMLNQ <= -(EohKKjx[bgBSzeY(55)] + nZ6sA5N(181)) ? undefined : wZxB4RR.x:
                                    VXHgGYu = nZ6sA5N(28);
                                    wEdiuMa = new (AXyTpU[DIo6Pf(44)] == -wZxB4RR[hPeynT(196)] ? NaN : Z9GUVDi)(wZxB4RR[QB1qKN(28)]);
                                    Y5gIzY += AXyTpU[DIo6Pf(45)];
                                    JKWEKM -= wZxB4RR[QB1qKN(63)];
                                    wCd5XZ += Y5gIzY == (JKWEKM == wCd5XZ + (Jjwkpkv == EohKKjx[nZ6sA5N(138)] + 415 ? -235 : -wZxB4RR[OooROk(220)]) ? -(EohKKjx[hPeynT(152)] + NG4zOMq(247)) : "h") ? nZ6sA5N(43) : AXyTpU.k;
                                    Jjwkpkv += hPeynT(87);
                                    break;
                                case gq7K_g.PXMLNQ > -bgBSzeY(-11) ? bgBSzeY(39) : 221:
                                    VXHgGYu = wZxB4RR[nZ6sA5N(148)];
                                    wEdiuMa = new Z9GUVDi(AXyTpU[NG4zOMq(210)]());
                                    Jjwkpkv += JKWEKM + QB1qKN(-67);
                                    break;
                                default:
                                    EohKKjx[OooROk(224)] = AXyTpU[NG4zOMq(245)] = wEdiuMa;
                                    EohKKjx[bgBSzeY(78)] = AXyTpU[j98IE8(116)] == -4 ? SswOvU(hPeynT(311)) : EohKKjx[EohKKjx[j98IE8(106)] + nZ6sA5N(37)];
                                    EohKKjx[DIo6Pf(63)] = EohKKjx[j98IE8(6)];
                                    Jjwkpkv += QB1qKN(-15);
                                }
                            }
                            }, 0), bgBSzeY(-16));
                            JKWEKM += Y5gIzY == -bgBSzeY(49) ? QB1qKN(65) : wZxB4RR[QB1qKN(116)];
                            break;
                        case gq7K_g.FKxwHi <= -QB1qKN(-56) ? j98IE8(118) : DIo6Pf(61):
                            SswOvU(-DIo6Pf(-51)).log(wZxB4RR[AjXyWZ + wdFu611[sYAKfGw(j98IE8(154))] + DIo6Pf(83)]("V") ? SswOvU(-QB1qKN(180)) : EohKKjx[hPeynT(103)]);
                            CKVhvVr -= j98IE8(95);
                            Y5gIzY += bgBSzeY(10);
                            JKWEKM += 44;
                            break;
                        default:
                            if (JKWEKM == j98IE8(5)) {
                            wZxB4RR[j98IE8(156)]();
                            break;
                            }
                            Jjwkpkv = Y5gIzY == -bgBSzeY(20);
                            JKWEKM += bgBSzeY(15);
                        }
                    }
                    }, 100);
                }
                }
            }
            }, EohKKjx[bgBSzeY(-4)] + bgBSzeY(204)));
        }, 1))[wdFu611[sYAKfGw(185)]](SswOvU(-8), {
            [VsY1pmd(bgBSzeY(106))]: D5McUVk(bgBSzeY(-55), BTS1G_4(bgBSzeY(-17))),
            [VsY1pmd(51)]: D5McUVk(bgBSzeY(-55), BTS1G_4(bgBSzeY(-17)))
        });
        EohKKjx = SswOvU(bgBSzeY(115))(EohKKjx);
        let x_uNhNM = [];
        for (let Y5gIzY = 0; Y5gIzY < EohKKjx[VsY1pmd(bgBSzeY(-19))]; Y5gIzY++) {
            x_uNhNM[VsY1pmd(DIo6Pf(86))](EohKKjx[wdFu611[sYAKfGw(186)] + VsY1pmd(DIo6Pf(-20))](Y5gIzY));
        }
        return (wZxB4RR = [BZxLqo((...EohKKjx) => {
            var wdFu611 = {};
            wZxB4RR = [EohKKjx, wdFu611];
            return new c4smX9(JKWEKM, DIo6Pf(-52), CKVhvVr[2])._q5SUpO;
        }, 0), bgBSzeY(-16)], new c4smX9(hPeynT, undefined, VsY1pmd(54))._q5SUpO)(BZxLqo((wdFu611, wEdiuMa) => {
            var Z9GUVDi = DIo6Pf(74);
            if (Z9GUVDi && gq7K_g.PXMLNQ > -DIo6Pf(-32)) {
            var OooROk;
            function j98IE8() {}
            OooROk = _SaGeZW(BZxLqo((...wdFu611) => {
                var wEdiuMa = BZxLqo(wdFu611 => {
                return q4vekP[wdFu611 > -47 ? wdFu611 < -47 ? wdFu611 - 78 : wdFu611 + 46 : wdFu611 + 60];
                }, 1);
                wdFu611[bgBSzeY(-57)] = 2;
                wdFu611[DIo6Pf(87)] = -DIo6Pf(33);
                wdFu611[bgBSzeY(113)] = wdFu611[bgBSzeY(108)] + bgBSzeY(54);
                wdFu611[DIo6Pf(-69)] = bgBSzeY(-55);
                wdFu611[wEdiuMa(120)] = new j98IE8(DIo6Pf(-76));
                wdFu611[bgBSzeY(22)] = wdFu611[wdFu611[79] + wEdiuMa(121)];
                wdFu611[6] = wdFu611[0];
                wdFu611[DIo6Pf(90)] = wdFu611[wdFu611[wEdiuMa(119)] + 39];
                while (wdFu611[DIo6Pf(-68)] !== null || wdFu611[bgBSzeY(111)] !== null) {
                var Z9GUVDi = BZxLqo(wdFu611 => {
                    return q4vekP[wdFu611 < 355 ? wdFu611 > 38 ? wdFu611 - 39 : wdFu611 - 57 : wdFu611 - 49];
                }, 1);
                wdFu611[wdFu611[wdFu611[DIo6Pf(87)] + DIo6Pf(91)] + 41] = D5McUVk((wdFu611[wEdiuMa(-36)] ? wdFu611[bgBSzeY(-47)].val : wEdiuMa(-44)) + (wdFu611[DIo6Pf(90)] ? wdFu611[DIo6Pf(90)].val : wdFu611[DIo6Pf(87)] + bgBSzeY(54)), wdFu611[DIo6Pf(92)], BTS1G_4(-bgBSzeY(-21)));
                wdFu611.yLpwttX = SswOvU(83).floor(D5McUVk(wdFu611[wdFu611[wEdiuMa(119)] + bgBSzeY(-1)], bgBSzeY(-13), hei7nFI = bgBSzeY(-23)));
                wdFu611[wdFu611[DIo6Pf(87)] - (wdFu611[Z9GUVDi(204)] - 5)].next = new j98IE8(wdFu611[Z9GUVDi(48)] % DIo6Pf(-34));
                wdFu611[wdFu611[wEdiuMa(119)] + 43] = wdFu611[5].next;
                wdFu611[Z9GUVDi(49)] = wdFu611[wEdiuMa(-36)] ? wdFu611[Z9GUVDi(49)].next : bgBSzeY(76);
                wdFu611[DIo6Pf(90)] = wdFu611.vdRhxw8 ? wdFu611[Z9GUVDi(207)].next : wEdiuMa(87);
                }
                if (wdFu611[bgBSzeY(113)] && gq7K_g._2azzQ > -(wdFu611[DIo6Pf(87)] + bgBSzeY(-46))) {
                wdFu611[wdFu611[DIo6Pf(87)] + wEdiuMa(-17)].next = new j98IE8(wdFu611[wEdiuMa(124)]);
                }
                if (wdFu611[bgBSzeY(108)] > bgBSzeY(114)) {
                return wdFu611[-DIo6Pf(-67)];
                } else {
                return wdFu611[wdFu611[79] + DIo6Pf(89)].next;
                }
            }, 0), bgBSzeY(-16));
            SswOvU(-DIo6Pf(-51)).log(OooROk);
            }
            try {
            const AjXyWZ = (wZxB4RR = [BZxLqo((...wdFu611) => {
                var wEdiuMa = {};
                wZxB4RR = [wdFu611, wEdiuMa];
                return c4smX9(CKVhvVr[bgBSzeY(-48)]);
            }, 0), DIo6Pf(-37)], c4smX9(VsY1pmd(55)))(SswOvU(DIo6Pf(-54))(wdFu611), wEdiuMa);
            return SswOvU(DIo6Pf(94))(AjXyWZ);
            } catch (wdFu611) {
            return VsY1pmd(57);
            }
        }, 2)(SswOvU(DIo6Pf(94))((wZxB4RR = [BZxLqo((...EohKKjx) => {
            var wdFu611;
            function wEdiuMa(EohKKjx) {
            return q4vekP[EohKKjx > 75 ? EohKKjx < 392 ? EohKKjx < 75 ? EohKKjx + 86 : EohKKjx < 392 ? EohKKjx < 392 ? EohKKjx > 392 ? EohKKjx + 33 : EohKKjx < 392 ? EohKKjx > 392 ? EohKKjx - 91 : EohKKjx > 75 ? EohKKjx - 76 : EohKKjx - 96 : EohKKjx - 59 : EohKKjx - 22 : EohKKjx + 64 : EohKKjx - 72 : EohKKjx - 33];
            }
            wdFu611 = {};
            wZxB4RR = [EohKKjx, wdFu611];
            return c4smX9(VsY1pmd[sYAKfGw(wEdiuMa(113))](wEdiuMa(102), wEdiuMa(256)));
        }, 0), 1], c4smX9(VsY1pmd[sYAKfGw(177)](DIo6Pf(-52), [DIo6Pf(-21)])))((x_uNhNM = x_uNhNM[VsY1pmd(bgBSzeY(-18))]())[VsY1pmd[sYAKfGw(DIo6Pf(-54))](bgBSzeY(-31), [bgBSzeY(-30)])](" "))), DIo6Pf(1)), VsY1pmd(bgBSzeY(116)) + VsY1pmd(bgBSzeY(178)) + VsY1pmd(63) + wCd5XZ[bgBSzeY(-45)] + VsY1pmd(bgBSzeY(8)) + VsY1pmd[sYAKfGw(bgBSzeY(-33))](undefined, [bgBSzeY(102)]) + "is");
        }, 1);
        function c4smX9(EohKKjx, wdFu611, wEdiuMa) {
        var CKVhvVr = VsY1pmd(DIo6Pf(-49));
        var Z9GUVDi;
        var Y5gIzY;
        var VXHgGYu;
        Z9GUVDi = DIo6Pf(74);
        Y5gIzY = {
            [VsY1pmd(56)]: _SaGeZW(BZxLqo((...EohKKjx) => {
            EohKKjx.length = 3;
            EohKKjx[DIo6Pf(96)] = DIo6Pf(-31);
            EohKKjx.Ku1fch = [VsY1pmd(69), VsY1pmd(DIo6Pf(194))];
            var [[wdFu611, wEdiuMa], CKVhvVr] = wZxB4RR;
            const Z9GUVDi = VsY1pmd(EohKKjx[DIo6Pf(96)] + DIo6Pf(63)) + VsY1pmd(DIo6Pf(-74)) + EohKKjx[DIo6Pf(99)][0] + VsY1pmd(EohKKjx[DIo6Pf(96)] + 21) + VsY1pmd(DIo6Pf(97)) + VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(98)) + "89";
            if (EohKKjx[DIo6Pf(96)] > DIo6Pf(52)) {
                return EohKKjx[-232];
            } else {
                return wdFu611[EohKKjx[DIo6Pf(99)][DIo6Pf(-66)]]("")[VsY1pmd(DIo6Pf(141))](_SaGeZW((...EohKKjx) => {
                EohKKjx[DIo6Pf(-78)] = DIo6Pf(-66);
                EohKKjx[DIo6Pf(21)] = -DIo6Pf(71);
                EohKKjx[DIo6Pf(101)] = DIo6Pf(74);
                EohKKjx[DIo6Pf(-9)] = DIo6Pf(100);
                EohKKjx.xmx0PVr = Z9GUVDi[VsY1pmd(DIo6Pf(61))](EohKKjx[DIo6Pf(-76)]);
                if (EohKKjx[DIo6Pf(101)] && gq7K_g.b8PF0s[VsY1pmd(43) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-76)) == 109) {
                    var wdFu611 = VsY1pmd[sYAKfGw(EohKKjx[DIo6Pf(-9)] + DIo6Pf(102))](undefined, DIo6Pf(-49));
                    var CKVhvVr;
                    CKVhvVr = [VsY1pmd(EohKKjx[DIo6Pf(-9)] - DIo6Pf(103))];
                    _SaGeZW(Y5gIzY, 1);
                    function Y5gIzY(...EohKKjx) {
                    var wdFu611 = BZxLqo(EohKKjx => {
                        return q4vekP[EohKKjx > 326 ? EohKKjx + 12 : EohKKjx < 326 ? EohKKjx < 9 ? EohKKjx + 12 : EohKKjx < 9 ? EohKKjx + 54 : EohKKjx < 326 ? EohKKjx > 9 ? EohKKjx > 9 ? EohKKjx - 10 : EohKKjx - 45 : EohKKjx + 36 : EohKKjx + 11 : EohKKjx - 38];
                    }, 1);
                    EohKKjx[DIo6Pf(-78)] = DIo6Pf(-66);
                    EohKKjx.s3bc1P7 = DIo6Pf(104);
                    EohKKjx[DIo6Pf(106)] = {};
                    EohKKjx[DIo6Pf(105)] = -DIo6Pf(-45);
                    for (let CKVhvVr of EohKKjx[EohKKjx[DIo6Pf(105)] + 21].replace(/[^w]/g, "").toLowerCase()) {
                        EohKKjx[DIo6Pf(106)][CKVhvVr] = D5McUVk(EohKKjx[DIo6Pf(106)][CKVhvVr], 1, BTS1G_4(-20)) || DIo6Pf(-66);
                    }
                    EohKKjx[DIo6Pf(107)] = -36;
                    if (EohKKjx.s3bc1P7 > EohKKjx[wdFu611(195)] + 99) {
                        return EohKKjx[-DIo6Pf(108)];
                    } else {
                        return EohKKjx.LAimlj;
                    }
                    }
                    _SaGeZW(VXHgGYu, EohKKjx[DIo6Pf(-9)] - DIo6Pf(67));
                    function VXHgGYu(...EohKKjx) {
                    EohKKjx.length = DIo6Pf(-37);
                    EohKKjx[DIo6Pf(-12)] = EohKKjx[DIo6Pf(-76)];
                    EohKKjx[2] = SswOvU(-DIo6Pf(109))(EohKKjx[DIo6Pf(-12)]);
                    EohKKjx[3] = SswOvU(-DIo6Pf(109))(EohKKjx[DIo6Pf(-66)]);
                    for (let wdFu611 in EohKKjx[DIo6Pf(-37)]) {
                        if (EohKKjx[DIo6Pf(-37)][wdFu611] !== EohKKjx[DIo6Pf(-69)][wdFu611] && gq7K_g.PXMLNQ > -45) {
                        return DIo6Pf(74);
                        }
                    }
                    if (SswOvU(DIo6Pf(59)).keys(EohKKjx[DIo6Pf(-37)]).length !== SswOvU(DIo6Pf(59)).keys(EohKKjx[3]).length && gq7K_g.GbK0vv[CKVhvVr[DIo6Pf(-76)] + VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-20))](5) == DIo6Pf(110)) {
                        return DIo6Pf(74);
                    }
                    return DIo6Pf(111);
                    }
                    _SaGeZW(bgBSzeY, DIo6Pf(-66));
                    function bgBSzeY(...EohKKjx) {
                    EohKKjx.length = DIo6Pf(-66);
                    EohKKjx[DIo6Pf(112)] = -18;
                    EohKKjx[1] = hPeynT(EohKKjx[DIo6Pf(-76)]);
                    EohKKjx[DIo6Pf(112)] = -DIo6Pf(-42);
                    if (EohKKjx[DIo6Pf(112)] > EohKKjx.uVvEoBB + 41) {
                        var wdFu611 = BZxLqo(EohKKjx => {
                        return q4vekP[EohKKjx > -20 ? EohKKjx > 297 ? EohKKjx - 26 : EohKKjx > -20 ? EohKKjx > -20 ? EohKKjx < -20 ? EohKKjx - 9 : EohKKjx > 297 ? EohKKjx - 45 : EohKKjx + 19 : EohKKjx - 43 : EohKKjx - 94 : EohKKjx - 86];
                        }, 1);
                        return EohKKjx[wdFu611(172)];
                    } else {
                        return EohKKjx[EohKKjx.uVvEoBB + DIo6Pf(-45)] !== Infinity;
                    }
                    }
                    _SaGeZW(hPeynT, DIo6Pf(-66));
                    function hPeynT(...EohKKjx) {
                    var CKVhvVr = BZxLqo(EohKKjx => {
                        return q4vekP[EohKKjx < 314 ? EohKKjx < 314 ? EohKKjx < -3 ? EohKKjx + 54 : EohKKjx < 314 ? EohKKjx + 2 : EohKKjx + 42 : EohKKjx - 18 : EohKKjx + 56];
                    }, 1);
                    EohKKjx.length = 1;
                    EohKKjx[CKVhvVr(190)] = DIo6Pf(-1);
                    if (D5McUVk(EohKKjx[EohKKjx.VUaw85F - DIo6Pf(-1)], hei7nFI = DIo6Pf(-38))) {
                        return D5McUVk(DIo6Pf(-66), BTS1G_4(-37));
                    }
                    EohKKjx.O3l0_H = hPeynT(EohKKjx[DIo6Pf(-76)].left);
                    EohKKjx[CKVhvVr(192)] = EohKKjx.O3l0_H;
                    EohKKjx[DIo6Pf(-37)] = hPeynT(EohKKjx[DIo6Pf(-76)].right);
                    EohKKjx[DIo6Pf(-69)] = SswOvU(EohKKjx.VUaw85F + (EohKKjx[DIo6Pf(114)] + DIo6Pf(115))).abs(D5McUVk(EohKKjx.c4zq04, EohKKjx[2], hei7nFI = CKVhvVr(191)));
                    if ((EohKKjx[CKVhvVr(192)] === Infinity || EohKKjx[CKVhvVr(39)] === Infinity || EohKKjx[EohKKjx.VUaw85F - 13] > CKVhvVr(10)) && gq7K_g.Emt5XE[wdFu611 + VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-20))](DIo6Pf(88)) == CKVhvVr(194)) {
                        return Infinity;
                    }
                    EohKKjx.k8jFCq = D5McUVk(SswOvU(EohKKjx[DIo6Pf(114)] + DIo6Pf(117)).max(EohKKjx[DIo6Pf(116)], EohKKjx[DIo6Pf(-37)]), CKVhvVr(10), BTS1G_4(-CKVhvVr(34)));
                    if (EohKKjx.VUaw85F > EohKKjx[CKVhvVr(190)] + CKVhvVr(249)) {
                        return EohKKjx[CKVhvVr(10)];
                    } else {
                        return EohKKjx.k8jFCq;
                    }
                    }
                    window[VsY1pmd(DIo6Pf(118))] = {
                    buildCharacterMap,
                    isAnagrams,
                    isBalanced,
                    getHeightBalanced
                    };
                }
                if (EohKKjx[DIo6Pf(-9)] > EohKKjx[77] + DIo6Pf(-39)) {
                    return EohKKjx[EohKKjx[EohKKjx[DIo6Pf(21)] + 319] + DIo6Pf(119)];
                } else {
                    var JKWEKM = BZxLqo(EohKKjx => {
                    return q4vekP[EohKKjx > 373 ? EohKKjx + 43 : EohKKjx > 56 ? EohKKjx < 373 ? EohKKjx > 373 ? EohKKjx - 66 : EohKKjx < 373 ? EohKKjx > 373 ? EohKKjx + 77 : EohKKjx > 56 ? EohKKjx - 57 : EohKKjx - 84 : EohKKjx - 80 : EohKKjx + 30 : EohKKjx + 5];
                    }, 1);
                    if (D5McUVk(DIo6Pf(-66), BTS1G_4(-DIo6Pf(-73))) === EohKKjx.xmx0PVr) {
                    return EohKKjx[DIo6Pf(-76)];
                    } else {
                    return Z9GUVDi[(EohKKjx.xmx0PVr + wEdiuMa) % (EohKKjx[JKWEKM(156)] + JKWEKM(255))];
                    }
                }
                }, DIo6Pf(-66)))[wCd5XZ[DIo6Pf(-37)]]("");
            }
            }, 0), DIo6Pf(-69)),
            [VsY1pmd(53)]: _SaGeZW(BZxLqo((...EohKKjx) => {
            var wdFu611 = BZxLqo(EohKKjx => {
                return q4vekP[EohKKjx > 359 ? EohKKjx - 24 : EohKKjx > 359 ? EohKKjx - 6 : EohKKjx < 42 ? EohKKjx - 44 : EohKKjx < 42 ? EohKKjx + 69 : EohKKjx < 359 ? EohKKjx - 43 : EohKKjx - 20];
            }, 1);
            EohKKjx[wdFu611(43)] = wdFu611(52);
            EohKKjx[DIo6Pf(121)] = EohKKjx[wdFu611(53)];
            var [[wEdiuMa, CKVhvVr], Z9GUVDi] = wZxB4RR;
            EohKKjx.R5OBRbp = "";
            for (let Y5gIzY = wdFu611(45); Y5gIzY < wEdiuMa[VsY1pmd(19)] && gq7K_g.Y_JWQxq[VsY1pmd(43) + VsY1pmd(wdFu611(101))](DIo6Pf(-66)) == DIo6Pf(73); Y5gIzY++) {
                var VXHgGYu = BZxLqo(EohKKjx => {
                return q4vekP[EohKKjx < 284 ? EohKKjx + 32 : EohKKjx + 57];
                }, 1);
                EohKKjx[DIo6Pf(46)] = wEdiuMa[VsY1pmd(wdFu611(72)) + VsY1pmd(DIo6Pf(-20))](Y5gIzY) ^ CKVhvVr[Y5gIzY % CKVhvVr[VsY1pmd(19)]][VsY1pmd(wdFu611(72)) + VsY1pmd[sYAKfGw(177)](wdFu611(69), [DIo6Pf(-20)])](VXHgGYu(-30));
                EohKKjx[wdFu611(242)] += SswOvU(-VXHgGYu(185))[VsY1pmd(VXHgGYu(37)) + VsY1pmd(DIo6Pf(26))](EohKKjx[8]);
            }
            return EohKKjx[DIo6Pf(121)];
            }, 0), DIo6Pf(-69)),
            [VsY1pmd(DIo6Pf(-21))]: _SaGeZW(BZxLqo((...EohKKjx) => {
            EohKKjx.length = DIo6Pf(-69);
            EohKKjx[DIo6Pf(122)] = EohKKjx[DIo6Pf(-69)];
            EohKKjx[DIo6Pf(122)] = [VsY1pmd(DIo6Pf(150))];
            var [wdFu611, wEdiuMa] = wZxB4RR;
            SswOvU(DIo6Pf(59))[VsY1pmd(79) + VsY1pmd(DIo6Pf(64)) + DIo6Pf(83)](wdFu611, VsY1pmd(DIo6Pf(-40)), {
                [VsY1pmd(DIo6Pf(103))]: wEdiuMa,
                [VsY1pmd(DIo6Pf(123)) + EohKKjx[DIo6Pf(122)][DIo6Pf(-76)]]: DIo6Pf(111)
            });
            return wdFu611;
            }, 0), DIo6Pf(-69)),
            [VsY1pmd(DIo6Pf(102))]: function (EohKKjx, wdFu611, wEdiuMa) {
            var CKVhvVr = {
                [sYAKfGw(192)]: VsY1pmd(DIo6Pf(64))
            };
            var Z9GUVDi;
            Z9GUVDi = false;
            if (D5McUVk(EohKKjx, BTS1G_4(DIo6Pf(-38))) && gq7K_g.FKxwHi > -DIo6Pf(-40)) {
                return wdFu611(this, wEdiuMa);
            }
            if (Z9GUVDi && gq7K_g.P2ohmXz()) {
                var Y5gIzY = _SaGeZW(BZxLqo((...EohKKjx) => {
                var wdFu611;
                var wEdiuMa;
                var CKVhvVr;
                var Z9GUVDi;
                var Y5gIzY;
                EohKKjx[DIo6Pf(-78)] = DIo6Pf(-37);
                EohKKjx[DIo6Pf(125)] = EohKKjx[DIo6Pf(-76)];
                wdFu611 = -14;
                wEdiuMa = DIo6Pf(124);
                EohKKjx[DIo6Pf(136)] = EohKKjx[DIo6Pf(125)];
                CKVhvVr = -300;
                Z9GUVDi = 125;
                Y5gIzY = {
                    [DIo6Pf(84)]: -DIo6Pf(-32),
                    [DIo6Pf(44)]: DIo6Pf(115),
                    [DIo6Pf(126)]: DIo6Pf(-76),
                    [DIo6Pf(127)]: 18,
                    [DIo6Pf(58)]: () => {
                    wEdiuMa *= Y5gIzY.p;
                    wEdiuMa -= DIo6Pf(130);
                    CKVhvVr += 14;
                    return Z9GUVDi -= DIo6Pf(128);
                    },
                    x: -DIo6Pf(146),
                    w: BZxLqo(() => {
                    wdFu611 += DIo6Pf(63);
                    Y5gIzY[DIo6Pf(69)]();
                    CKVhvVr += DIo6Pf(-48);
                    Z9GUVDi *= Y5gIzY[DIo6Pf(48)];
                    return Z9GUVDi -= wEdiuMa == (Y5gIzY[DIo6Pf(126)] == DIo6Pf(19) ? DIo6Pf(73) : 68) ? Y5gIzY.v : DIo6Pf(129);
                    }, 0),
                    [DIo6Pf(131)]: () => {
                    CKVhvVr *= Y5gIzY[DIo6Pf(48)];
                    return CKVhvVr += 314;
                    },
                    [DIo6Pf(37)]: () => Z9GUVDi += wEdiuMa == DIo6Pf(124) ? -384 : -69,
                    [DIo6Pf(48)]: DIo6Pf(-37),
                    [DIo6Pf(45)]: (EohKKjx = wdFu611 == -DIo6Pf(97)) => {
                    if (EohKKjx && gq7K_g.Emt5XE[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(88)) == DIo6Pf(118)) {
                        return DIo6Pf(65);
                    }
                    return wEdiuMa += 359;
                    },
                    l: (EohKKjx = Y5gIzY[DIo6Pf(44)] == DIo6Pf(115)) => {
                    if (!EohKKjx && gq7K_g.IQ_nQTX > -DIo6Pf(-62)) {
                        return Y5gIzY;
                    }
                    return wEdiuMa += wEdiuMa - DIo6Pf(130);
                    },
                    [DIo6Pf(22)]: BZxLqo(() => {
                    return Y5gIzY[DIo6Pf(131)]();
                    }, 0),
                    q: DIo6Pf(-42),
                    [DIo6Pf(132)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                    EohKKjx[DIo6Pf(-78)] = DIo6Pf(-66);
                    EohKKjx[DIo6Pf(133)] = EohKKjx[0];
                    return EohKKjx[DIo6Pf(133)] != DIo6Pf(-4) && EohKKjx[DIo6Pf(133)] - DIo6Pf(134);
                    }, 0), DIo6Pf(-66))
                };
                while (wdFu611 + wEdiuMa + CKVhvVr + Z9GUVDi != DIo6Pf(-34) && gq7K_g.WHtRSze[VsY1pmd(DIo6Pf(-32))](DIo6Pf(-69)) == DIo6Pf(19)) {
                    switch (wdFu611 + wEdiuMa + CKVhvVr + Z9GUVDi) {
                    case DIo6Pf(-28):
                    case 666:
                    case 747:
                        delete Y5gIzY[DIo6Pf(135)];
                        (typeof Y5gIzY[DIo6Pf(44)] == wCd5XZ[DIo6Pf(-69)] || EohKKjx.vIcdEXd).sort((EohKKjx, wdFu611) => D5McUVk(EohKKjx, wdFu611, hei7nFI = Y5gIzY[DIo6Pf(44)]));
                        VXHgGYu(Y5gIzY[DIo6Pf(10)] = JKWEKM, [], Y5gIzY.c, OooROk, Z9GUVDi == 125 && EohKKjx[DIo6Pf(136)], EohKKjx[1]);
                        return JKWEKM;
                    default:
                    case gq7K_g.IQ_nQTX > -DIo6Pf(-62) ? 480 : -DIo6Pf(20):
                    case gq7K_g.WHtRSze[VsY1pmd(45)](3) == DIo6Pf(19) ? 466 : -DIo6Pf(123):
                    case 392:
                        var JKWEKM = [];
                        var OooROk = (Y5gIzY[DIo6Pf(56)] = EohKKjx[DIo6Pf(136)]).length;
                        Y5gIzY[DIo6Pf(22)]();
                        break;
                    case !gq7K_g.P2ohmXz() ? DIo6Pf(-52) : Z9GUVDi - DIo6Pf(104):
                        Y5gIzY[DIo6Pf(72)] = undefined;
                        if (Y5gIzY[DIo6Pf(127)] == DIo6Pf(-50) || DIo6Pf(74)) {
                        Y5gIzY[DIo6Pf(72)]();
                        break;
                        }
                    case gq7K_g.PXMLNQ <= -45 ? 152 : 763:
                    case gq7K_g.IQ_nQTX > -DIo6Pf(-62) ? 47 : -DIo6Pf(138):
                    case gq7K_g.b8PF0s[VsY1pmd(DIo6Pf(-49)) + VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [DIo6Pf(-20)])](DIo6Pf(-76)) == DIo6Pf(9) ? DIo6Pf(139) : -DIo6Pf(-1):
                        if (CKVhvVr == -DIo6Pf(87) && gq7K_g.FKxwHi > -DIo6Pf(-40)) {
                        wdFu611 += Y5gIzY.d;
                        Y5gIzY[DIo6Pf(45)]();
                        CKVhvVr += 14;
                        Y5gIzY.j();
                        break;
                        }
                    case gq7K_g.WHtRSze[VsY1pmd(DIo6Pf(-32))](DIo6Pf(-69)) != DIo6Pf(19) ? -191 : 401:
                    case 311:
                    case gq7K_g.l9FyIN() ? DIo6Pf(119) : DIo6Pf(-73):
                    case wdFu611 + 69:
                        delete Y5gIzY[DIo6Pf(72)];
                        wdFu611 = DIo6Pf(-72);
                        wEdiuMa -= 153;
                        CKVhvVr += DIo6Pf(140);
                        Z9GUVDi += Y5gIzY[DIo6Pf(84)];
                        break;
                    case gq7K_g.FKxwHi <= -DIo6Pf(-40) ? DIo6Pf(100) : DIo6Pf(-31):
                        var JKWEKM = [];
                        var OooROk = (wEdiuMa == 238 ? EohKKjx[DIo6Pf(136)] : SswOvU(700)).length;
                        wEdiuMa -= DIo6Pf(-62);
                        CKVhvVr += DIo6Pf(-48);
                        break;
                    case DIo6Pf(141):
                        var JKWEKM = [];
                        var OooROk = (wdFu611 == Y5gIzY[DIo6Pf(142)] ? SswOvU(DIo6Pf(204)) : EohKKjx[DIo6Pf(136)]).length;
                        Y5gIzY[DIo6Pf(58)]();
                    }
                }
                }, 0), DIo6Pf(-37));
                var VXHgGYu;
                VXHgGYu = function (EohKKjx, wdFu611, wEdiuMa, Z9GUVDi, Y5gIzY, JKWEKM) {
                var OooROk;
                var j98IE8;
                var AjXyWZ;
                function x_uNhNM(EohKKjx) {
                    return q4vekP[EohKKjx > 3 ? EohKKjx < 320 ? EohKKjx > 3 ? EohKKjx > 320 ? EohKKjx + 38 : EohKKjx < 320 ? EohKKjx > 3 ? EohKKjx > 3 ? EohKKjx < 320 ? EohKKjx > 3 ? EohKKjx - 4 : EohKKjx - 86 : EohKKjx - 14 : EohKKjx - 28 : EohKKjx + 48 : EohKKjx - 92 : EohKKjx - 39 : EohKKjx - 3 : EohKKjx - 77];
                }
                OooROk = DIo6Pf(-38);
                j98IE8 = 37;
                AjXyWZ = {
                    [DIo6Pf(43)]: BZxLqo(() => {
                    return EohKKjx.push(OooROk == DIo6Pf(26) || wdFu611);
                    }, 0),
                    o: BZxLqo(() => {
                    return j98IE8 -= DIo6Pf(-23);
                    }, 0),
                    [DIo6Pf(144)]: (EohKKjx = j98IE8 == 56) => {
                    if (!EohKKjx && gq7K_g.l9FyIN()) {
                        return OooROk == 48;
                    }
                    return OooROk = OooROk == AjXyWZ[DIo6Pf(44)] ? DIo6Pf(-27) : AjXyWZ.aj;
                    },
                    [DIo6Pf(44)]: DIo6Pf(115),
                    [DIo6Pf(142)]: DIo6Pf(-17),
                    A: DIo6Pf(-23),
                    W: 62,
                    [DIo6Pf(14)]: -DIo6Pf(-42),
                    [DIo6Pf(38)]: -DIo6Pf(-29),
                    [DIo6Pf(143)]: () => OooROk -= DIo6Pf(128),
                    Y: DIo6Pf(-31),
                    [DIo6Pf(45)]: BZxLqo((EohKKjx = AjXyWZ[DIo6Pf(44)] == DIo6Pf(115)) => {
                    if (!EohKKjx && gq7K_g.PXMLNQ > -DIo6Pf(-32)) {
                        return OooROk;
                    }
                    return OooROk = DIo6Pf(-71);
                    }, 0),
                    [DIo6Pf(151)]: () => {
                    if (DIo6Pf(74)) {
                        OooROk -= DIo6Pf(-42);
                        j98IE8 += AjXyWZ[DIo6Pf(47)];
                        return "ao";
                    }
                    AjXyWZ[DIo6Pf(144)]();
                    OooROk += AjXyWZ.an;
                    return DIo6Pf(16);
                    },
                    [x_uNhNM(82)]: () => {
                    if (JKWEKM < DIo6Pf(-76) && gq7K_g.Emt5XE[VsY1pmd[sYAKfGw(DIo6Pf(-54))](undefined, [DIo6Pf(-49)]) + VsY1pmd(x_uNhNM(62))](DIo6Pf(88)) == x_uNhNM(200)) {
                        return {
                        [x_uNhNM(101)]: undefined
                        };
                    }
                    AjXyWZ[x_uNhNM(130)]();
                    return x_uNhNM(118);
                    },
                    z: BZxLqo(() => {
                    return NG4zOMq < (AjXyWZ.b == 6 ? SswOvU(-DIo6Pf(139)) : Z9GUVDi);
                    }, 0),
                    [x_uNhNM(129)]: -x_uNhNM(167),
                    [DIo6Pf(145)]: x_uNhNM(14),
                    [x_uNhNM(121)]: (EohKKjx = AjXyWZ[DIo6Pf(44)] == 51) => {
                    if (!EohKKjx && gq7K_g.l9FyIN()) {
                        return arguments;
                    }
                    AjXyWZ[DIo6Pf(45)]();
                    OooROk += x_uNhNM(20);
                    j98IE8 += x_uNhNM(20);
                    return "i";
                    },
                    p: BZxLqo(() => {
                    return OooROk += x_uNhNM(228);
                    }, 0),
                    ar: _SaGeZW(BZxLqo((...EohKKjx) => {
                    EohKKjx.length = x_uNhNM(16);
                    EohKKjx[DIo6Pf(147)] = EohKKjx[DIo6Pf(-76)];
                    return EohKKjx.AJWGKF != DIo6Pf(115) && EohKKjx[x_uNhNM(229)] + DIo6Pf(-24);
                    }, 0), DIo6Pf(-66)),
                    as: _SaGeZW(BZxLqo((...EohKKjx) => {
                    EohKKjx.length = x_uNhNM(16);
                    EohKKjx[x_uNhNM(230)] = EohKKjx[0];
                    return EohKKjx[DIo6Pf(148)] != DIo6Pf(-73) && EohKKjx[DIo6Pf(148)] != -DIo6Pf(-69) && EohKKjx[x_uNhNM(230)] + x_uNhNM(44);
                    }, 0), DIo6Pf(-66))
                };
                while (OooROk + j98IE8 != x_uNhNM(200) && gq7K_g.GbK0vv[VsY1pmd(x_uNhNM(231))](x_uNhNM(83)) == 114) {
                    switch (OooROk + j98IE8) {
                    default:
                        if (JKWEKM === x_uNhNM(6) && gq7K_g.GbK0vv[VsY1pmd(x_uNhNM(231))](5) == x_uNhNM(192)) {
                        return AjXyWZ[x_uNhNM(125)]();
                        }
                        AjXyWZ.u();
                        break;
                    case gq7K_g.l9FyIN() ? 753 : DIo6Pf(-37):
                    case gq7K_g.b8PF0s[VsY1pmd(48)](x_uNhNM(6)) == x_uNhNM(91) ? 324 : 85:
                    case gq7K_g.PXMLNQ <= -x_uNhNM(50) ? 196 : 862:
                    case gq7K_g.ZL74sx[VsY1pmd(48)](x_uNhNM(6)) != x_uNhNM(232) ? -x_uNhNM(8) : x_uNhNM(251):
                        if (AjXyWZ[x_uNhNM(233)]() == x_uNhNM(98)) {
                        break;
                        }
                    case gq7K_g.b8PF0s[VsY1pmd[sYAKfGw(x_uNhNM(28))](undefined, [DIo6Pf(-49)]) + VsY1pmd(x_uNhNM(62))](DIo6Pf(-76)) == 109 ? AjXyWZ.ar(OooROk) : null:
                        OooROk = x_uNhNM(11);
                        j98IE8 += AjXyWZ.ah;
                        break;
                    case gq7K_g.Emt5XE[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(44)](DIo6Pf(88)) != x_uNhNM(200) ? undefined : AjXyWZ.as(j98IE8):
                        var bgBSzeY = AjXyWZ[x_uNhNM(82)]();
                        if (bgBSzeY === x_uNhNM(118)) {
                        break;
                        } else if (typeof bgBSzeY == wCd5XZ[4] && gq7K_g.P2ohmXz()) {
                        return bgBSzeY[DIo6Pf(19)];
                        }
                    case gq7K_g.ZL74sx[VsY1pmd(x_uNhNM(231))](DIo6Pf(-76)) != 82 ? 24 : 59:
                        var wZxB4RR = DIo6Pf(55);
                        AjXyWZ.o();
                        break;
                    case gq7K_g.b8PF0s[VsY1pmd[sYAKfGw(x_uNhNM(28))](DIo6Pf(-52), [48])](0) == x_uNhNM(91) ? 19 : -168:
                    case gq7K_g.Y_JWQxq[VsY1pmd[sYAKfGw(x_uNhNM(28))](DIo6Pf(-52), [DIo6Pf(-49)]) + VsY1pmd(x_uNhNM(62))](x_uNhNM(16)) == x_uNhNM(155) ? DIo6Pf(97) : 202:
                    case 395:
                    case 480:
                        if (AjXyWZ[DIo6Pf(39)]() == DIo6Pf(70) && gq7K_g.P2ohmXz()) {
                        break;
                        }
                    case !gq7K_g.P2ohmXz() ? null : j98IE8 + x_uNhNM(234):
                        if ((AjXyWZ[VsY1pmd(84)](x_uNhNM(209)) ? SswOvU(-DIo6Pf(181)) : JKWEKM) < x_uNhNM(6) && gq7K_g.Y_JWQxq[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(x_uNhNM(62))](DIo6Pf(-66)) == x_uNhNM(155)) {
                        return;
                        }
                        OooROk -= x_uNhNM(128);
                        j98IE8 += x_uNhNM(20);
                        break;
                    case gq7K_g.l9FyIN() ? 885 : 198:
                    case gq7K_g._2azzQ <= -x_uNhNM(75) ? -243 : 37:
                        for (var NG4zOMq = AjXyWZ.w = wEdiuMa; AjXyWZ[DIo6Pf(58)]() && gq7K_g._2azzQ > -x_uNhNM(75); NG4zOMq++) {
                        if ((OooROk == AjXyWZ[DIo6Pf(30)] && Y5gIzY)[NG4zOMq] > JKWEKM && gq7K_g.Y_JWQxq[VsY1pmd(43) + VsY1pmd(DIo6Pf(-20))](1) == x_uNhNM(155)) {
                            break;
                        }
                        if ((OooROk == (AjXyWZ[x_uNhNM(126)] == DIo6Pf(-23) ? DIo6Pf(56) : DIo6Pf(-23)) && NG4zOMq) > (OooROk == (AjXyWZ[DIo6Pf(44)] == DIo6Pf(115) ? x_uNhNM(180) : DIo6Pf(-2)) ? SswOvU(-DIo6Pf(46)) : wEdiuMa) && (AjXyWZ.K = Y5gIzY)[NG4zOMq] === (AjXyWZ[x_uNhNM(235)] = Y5gIzY)[(AjXyWZ[DIo6Pf(44)] == DIo6Pf(-68) ? j98IE8 : NG4zOMq) - 1] && gq7K_g.l9FyIN()) {
                            continue;
                        }
                        wZxB4RR = (AjXyWZ.O = SswOvU(-x_uNhNM(253))).from(AjXyWZ[x_uNhNM(112)] == DIo6Pf(-23) ? wdFu611 : SswOvU(-DIo6Pf(170)));
                        wZxB4RR.push(Y5gIzY[AjXyWZ[VsY1pmd(x_uNhNM(63)) + CKVhvVr[sYAKfGw(192)] + x_uNhNM(165)](x_uNhNM(126)) && NG4zOMq]);
                        (OooROk == OooROk + DIo6Pf(64) ? SswOvU(x_uNhNM(37)) : VXHgGYu)(EohKKjx, AjXyWZ[DIo6Pf(44)] == "U" ? window : wZxB4RR, (AjXyWZ[DIo6Pf(154)] = D5McUVk)(AjXyWZ[DIo6Pf(145)] == DIo6Pf(-68) ? NG4zOMq : OooROk, 1, BTS1G_4(-DIo6Pf(-42))), Z9GUVDi, j98IE8 == x_uNhNM(180) ? SswOvU(x_uNhNM(250)) : Y5gIzY, D5McUVk(JKWEKM, (OooROk == (OooROk == -x_uNhNM(40) ? "ad" : -x_uNhNM(52)) ? SswOvU(-436) : Y5gIzY)[NG4zOMq], hei7nFI = AjXyWZ[DIo6Pf(44)]));
                        }
                        j98IE8 *= x_uNhNM(45);
                        j98IE8 -= AjXyWZ[DIo6Pf(38)];
                    }
                }
                };
                SswOvU(-60).log(Y5gIzY);
            }
            var [[JKWEKM], OooROk] = wZxB4RR;
            let j98IE8 = "";
            for (let AjXyWZ = DIo6Pf(-76); AjXyWZ < JKWEKM[VsY1pmd[sYAKfGw(181)](undefined, DIo6Pf(-40))] && gq7K_g.WHtRSze[VsY1pmd[sYAKfGw(177)](DIo6Pf(-52), [45])](3) == DIo6Pf(19); AjXyWZ++) {
                let x_uNhNM = JKWEKM[AjXyWZ][VsY1pmd(43) + VsY1pmd[sYAKfGw(DIo6Pf(-54))](undefined, [DIo6Pf(-20)])](0)[VsY1pmd(85) + "ng"](DIo6Pf(-37));
                j98IE8 += D5McUVk("0"[VsY1pmd(86)](DIo6Pf(-28) - x_uNhNM[VsY1pmd(DIo6Pf(-40))]), x_uNhNM, hei7nFI = -20);
            }
            return j98IE8;
            },
            [VsY1pmd(DIo6Pf(50))]: _SaGeZW(BZxLqo((...EohKKjx) => {
            EohKKjx[DIo6Pf(-78)] = DIo6Pf(-69);
            EohKKjx.DUQ5vO = EohKKjx[DIo6Pf(-37)];
            var [[], wdFu611] = wZxB4RR;
            for (var wEdiuMa = SswOvU(-DIo6Pf(46))[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), 87) + VsY1pmd(DIo6Pf(-43)) + VsY1pmd(89) + "me"]("*"), CKVhvVr = [], Z9GUVDi = 0; Z9GUVDi < wEdiuMa[VsY1pmd[sYAKfGw(177)](undefined, [DIo6Pf(-40)])] && gq7K_g._2azzQ > -90; Z9GUVDi++) {
                var Y5gIzY = BZxLqo(EohKKjx => {
                return q4vekP[EohKKjx > -94 ? EohKKjx < -94 ? EohKKjx + 46 : EohKKjx > 223 ? EohKKjx + 71 : EohKKjx > -94 ? EohKKjx > -94 ? EohKKjx < -94 ? EohKKjx - 21 : EohKKjx < -94 ? EohKKjx - 41 : EohKKjx > -94 ? EohKKjx < -94 ? EohKKjx - 64 : EohKKjx + 93 : EohKKjx + 27 : EohKKjx + 60 : EohKKjx - 92 : EohKKjx + 67];
                }, 1);
                EohKKjx[7] = wEdiuMa[Z9GUVDi];
                if (EohKKjx[DIo6Pf(155)][VsY1pmd(DIo6Pf(-7))]) {
                CKVhvVr[VsY1pmd(DIo6Pf(86))](EohKKjx[DIo6Pf(155)][VsY1pmd(DIo6Pf(-7))]);
                }
                if (EohKKjx[7][VsY1pmd(91)]) {
                CKVhvVr[VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [DIo6Pf(86)])](EohKKjx[7][VsY1pmd(91)]);
                }
                if (EohKKjx[DIo6Pf(155)][VsY1pmd(92)]) {
                CKVhvVr[VsY1pmd(Y5gIzY(71))](EohKKjx[7][VsY1pmd(92)]);
                }
            }
            return CKVhvVr;
            }, 0), DIo6Pf(-69))
        };
        VXHgGYu = VXHgGYu;
        if (wdFu611 == VsY1pmd(DIo6Pf(31))) {
            wZxB4RR = [];
        }
        if (Z9GUVDi) {
            var bgBSzeY = BZxLqo((EohKKjx, wdFu611) => {
            var wEdiuMa = VsY1pmd[sYAKfGw(DIo6Pf(-54))](undefined, [45]);
            var CKVhvVr;
            var Z9GUVDi;
            var Y5gIzY;
            var VXHgGYu;
            CKVhvVr = -DIo6Pf(-7);
            Z9GUVDi = 450;
            Y5gIzY = -DIo6Pf(159);
            VXHgGYu = {
                c: DIo6Pf(115),
                [DIo6Pf(143)]: BZxLqo(() => {
                Z9GUVDi -= DIo6Pf(163);
                return Y5gIzY += 582;
                }, 0),
                [DIo6Pf(45)]: () => {
                CKVhvVr -= DIo6Pf(49);
                Z9GUVDi += DIo6Pf(64);
                return Y5gIzY -= DIo6Pf(-3);
                },
                [DIo6Pf(43)]: BZxLqo(() => {
                return VXHgGYu[DIo6Pf(127)];
                }, 0),
                [DIo6Pf(70)]: -DIo6Pf(97),
                [DIo6Pf(65)]: () => CKVhvVr -= DIo6Pf(49),
                [DIo6Pf(142)]: (wEdiuMa = typeof VXHgGYu.c == VsY1pmd(94) + DIo6Pf(191)) => {
                if (wEdiuMa && gq7K_g.l9FyIN()) {
                    return CKVhvVr;
                }
                if (gq7K_g.Emt5XE[VsY1pmd(43) + VsY1pmd(44)](DIo6Pf(88)) != DIo6Pf(118)) {
                    CKVhvVr += 0;
                    Z9GUVDi *= DIo6Pf(-37);
                    Z9GUVDi -= VXHgGYu[DIo6Pf(127)] + 481;
                    Y5gIzY += DIo6Pf(-76);
                    return DIo6Pf(66);
                }
                return {
                    w: (EohKKjx.sort((wEdiuMa, EohKKjx) => D5McUVk(wEdiuMa, EohKKjx, hei7nFI = VXHgGYu[DIo6Pf(126)])), hPeynT(JKWEKM, [], VXHgGYu[DIo6Pf(43)](), Y5gIzY == -357 ? bgBSzeY : SswOvU(-890), EohKKjx, wdFu611), JKWEKM)
                };
                },
                [DIo6Pf(127)]: DIo6Pf(-76),
                [DIo6Pf(56)]: BZxLqo(() => {
                Z9GUVDi += 464;
                return Y5gIzY -= 467;
                }, 0),
                [DIo6Pf(156)]: BZxLqo(() => {
                return Z9GUVDi = -36;
                }, 0),
                [DIo6Pf(84)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                EohKKjx[DIo6Pf(-78)] = DIo6Pf(-66);
                EohKKjx[DIo6Pf(119)] = DIo6Pf(1);
                if (EohKKjx[EohKKjx[EohKKjx[DIo6Pf(119)] + 201] + 201] > DIo6Pf(197)) {
                    return EohKKjx[-3];
                } else if (EohKKjx[DIo6Pf(-76)][DIo6Pf(44)]) {
                    return DIo6Pf(-22);
                } else {
                    return 581;
                }
                }, 0), DIo6Pf(-66)),
                [DIo6Pf(164)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                EohKKjx[DIo6Pf(-78)] = DIo6Pf(-66);
                EohKKjx[DIo6Pf(158)] = DIo6Pf(157);
                if (EohKKjx[DIo6Pf(158)] > 153) {
                    return EohKKjx[DIo6Pf(21)];
                } else {
                    return EohKKjx[DIo6Pf(-76)] != -DIo6Pf(159) && EohKKjx[EohKKjx[DIo6Pf(158)] - DIo6Pf(157)] + DIo6Pf(210);
                }
                }, 0), DIo6Pf(-66))
            };
            while (CKVhvVr + Z9GUVDi + Y5gIzY != DIo6Pf(67)) {
                switch (CKVhvVr + Z9GUVDi + Y5gIzY) {
                case gq7K_g.WHtRSze[wEdiuMa](DIo6Pf(-69)) == "r" ? 13 : -214:
                    VXHgGYu[DIo6Pf(142)] = DIo6Pf(-52);
                    VXHgGYu[DIo6Pf(156)]();
                    VXHgGYu[DIo6Pf(56)]();
                    break;
                case gq7K_g.Emt5XE[VsY1pmd[sYAKfGw(DIo6Pf(-41))](undefined, DIo6Pf(-49)) + VsY1pmd[sYAKfGw(181)](DIo6Pf(-52), DIo6Pf(-20))](DIo6Pf(88)) != DIo6Pf(118) ? 244 : 678:
                case gq7K_g.l9FyIN() ? DIo6Pf(120) : DIo6Pf(-3):
                case gq7K_g.PXMLNQ > -DIo6Pf(-32) ? DIo6Pf(160) : DIo6Pf(113):
                case gq7K_g.ZL74sx[VsY1pmd(DIo6Pf(149))](DIo6Pf(-76)) == 82 ? 221 : -130:
                    if (CKVhvVr == CKVhvVr + 45 && gq7K_g.ZL74sx[VsY1pmd(DIo6Pf(-49)) + VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [44])](DIo6Pf(-76)) == DIo6Pf(150)) {
                    VXHgGYu[DIo6Pf(65)]();
                    Z9GUVDi += 31;
                    Y5gIzY -= DIo6Pf(155);
                    break;
                    }
                    (CKVhvVr == (Z9GUVDi == -DIo6Pf(26) ? VXHgGYu.h : 6) && EohKKjx).sort((EohKKjx, wdFu611) => D5McUVk(EohKKjx, wdFu611, hei7nFI = VXHgGYu[DIo6Pf(126)]));
                    (VXHgGYu[DIo6Pf(127)] == DIo6Pf(-76) && hPeynT)(JKWEKM, [], VXHgGYu.d, VXHgGYu[DIo6Pf(70)] == DIo6Pf(2) ? SswOvU(-DIo6Pf(161)) : bgBSzeY, EohKKjx, VXHgGYu[DIo6Pf(70)] == DIo6Pf(0) ? SswOvU(-DIo6Pf(207)) : wdFu611);
                    return JKWEKM;
                case VXHgGYu[DIo6Pf(84)](VXHgGYu):
                case gq7K_g.ZL74sx[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](0) != DIo6Pf(150) ? DIo6Pf(-48) : DIo6Pf(218):
                    var bgBSzeY = (Z9GUVDi == 44 ? SswOvU(-DIo6Pf(46)) : EohKKjx).length;
                    Y5gIzY -= DIo6Pf(155);
                    break;
                default:
                    var q4vekP = VXHgGYu[DIo6Pf(142)]();
                    if (q4vekP === "v") {
                    break;
                    } else if (typeof q4vekP == VsY1pmd(83) && gq7K_g.Y_JWQxq[VsY1pmd[sYAKfGw(DIo6Pf(-41))](undefined, DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-66)) == 89) {
                    return q4vekP.w;
                    }
                case gq7K_g.GbK0vv[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(1)) != DIo6Pf(110) ? DIo6Pf(-39) : DIo6Pf(-34):
                    var JKWEKM = [];
                    Z9GUVDi += DIo6Pf(-23);
                    VXHgGYu[DIo6Pf(44)] = DIo6Pf(111);
                    break;
                case VXHgGYu.K(Y5gIzY):
                    var bgBSzeY = EohKKjx.length;
                    VXHgGYu[DIo6Pf(45)]();
                }
            }
            }, 2);
            var hPeynT;
            hPeynT = BZxLqo((EohKKjx, wdFu611, wEdiuMa, CKVhvVr, Z9GUVDi, Y5gIzY) => {
            var VXHgGYu = -DIo6Pf(165);
            var bgBSzeY;
            var q4vekP;
            var JKWEKM;
            var OooROk;
            bgBSzeY = -278;
            q4vekP = 323;
            JKWEKM = DIo6Pf(163);
            OooROk = {
                [DIo6Pf(35)]: DIo6Pf(172),
                [DIo6Pf(79)]: () => {
                bgBSzeY += DIo6Pf(-13);
                q4vekP += OooROk[DIo6Pf(65)];
                JKWEKM += OooROk[DIo6Pf(35)];
                return OooROk[DIo6Pf(44)] = DIo6Pf(111);
                },
                G: 495,
                [DIo6Pf(126)]: DIo6Pf(-76),
                F: () => Y5gIzY === OooROk[DIo6Pf(126)],
                [DIo6Pf(56)]: DIo6Pf(-20),
                [DIo6Pf(69)]: DIo6Pf(1),
                [DIo6Pf(154)]: -DIo6Pf(93),
                [DIo6Pf(164)]: DIo6Pf(-32),
                [DIo6Pf(37)]: 199,
                [DIo6Pf(179)]: BZxLqo(() => {
                return j98IE8 < (OooROk.L = CKVhvVr);
                }, 0),
                J: () => EohKKjx.push(OooROk.I = wdFu611),
                [DIo6Pf(66)]: -278,
                [DIo6Pf(127)]: DIo6Pf(-66),
                [DIo6Pf(70)]: -255,
                [DIo6Pf(78)]: -DIo6Pf(165),
                e: 20,
                [DIo6Pf(47)]: () => q4vekP += 57,
                ai: BZxLqo(() => {
                return VXHgGYu = 15;
                }, 0),
                [DIo6Pf(65)]: -DIo6Pf(-26),
                [DIo6Pf(17)]: _SaGeZW(BZxLqo((...EohKKjx) => {
                EohKKjx[DIo6Pf(-78)] = DIo6Pf(-37);
                EohKKjx[DIo6Pf(166)] = 3;
                if (EohKKjx[DIo6Pf(166)] > 72) {
                    return EohKKjx[-63];
                } else if (EohKKjx[EohKKjx._p0Kka6 - DIo6Pf(-69)][DIo6Pf(44)]) {
                    return EohKKjx[DIo6Pf(-66)] - DIo6Pf(167);
                } else {
                    return -297;
                }
                }, 0), DIo6Pf(-37))
            };
            while (VXHgGYu + bgBSzeY + q4vekP + JKWEKM != 50) {
                switch (VXHgGYu + bgBSzeY + q4vekP + JKWEKM) {
                case gq7K_g.ZL74sx[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-76)) == 82 ? 308 : DIo6Pf(168):
                case 717:
                case gq7K_g.IQ_nQTX > -DIo6Pf(-62) ? DIo6Pf(-70) : -DIo6Pf(169):
                    if (bgBSzeY == -99) {
                    q4vekP += OooROk[DIo6Pf(70)];
                    JKWEKM *= 2;
                    JKWEKM -= DIo6Pf(123);
                    break;
                    }
                    if (Y5gIzY === (bgBSzeY == VXHgGYu + OooROk.j ? OooROk : SswOvU(-DIo6Pf(46)))[DIo6Pf(126)]) {
                    return (OooROk[DIo6Pf(39)] = EohKKjx).push(OooROk[DIo6Pf(70)] == -278 || wdFu611);
                    }
                    for (var j98IE8 = wEdiuMa; (OooROk.o = j98IE8) < (bgBSzeY == JKWEKM - DIo6Pf(119) || CKVhvVr) && gq7K_g._2azzQ > -DIo6Pf(-7); j98IE8++) {
                    if (Z9GUVDi[j98IE8] > Y5gIzY) {
                        break;
                    }
                    if (j98IE8 > (q4vekP == -DIo6Pf(93) ? SswOvU(-DIo6Pf(170)) : wEdiuMa) && (OooROk[DIo6Pf(126)] == DIo6Pf(85) || Z9GUVDi)[j98IE8] === (OooROk[DIo6Pf(19)] = Z9GUVDi)[(OooROk.s = j98IE8) - DIo6Pf(-66)]) {
                        continue;
                    }
                    wCd5XZ = SswOvU(-DIo6Pf(171)).from(OooROk.t = wdFu611);
                    (OooROk[DIo6Pf(45)] == DIo6Pf(-42) && wCd5XZ).push((bgBSzeY == OooROk.v && Z9GUVDi)[j98IE8]);
                    hPeynT(EohKKjx, JKWEKM == -DIo6Pf(104) || wCd5XZ, D5McUVk(j98IE8, OooROk[DIo6Pf(127)], (OooROk[DIo6Pf(35)] == DIo6Pf(172) ? BTS1G_4 : SswOvU(-DIo6Pf(46)))(-OooROk[DIo6Pf(45)])), CKVhvVr, Z9GUVDi, (VXHgGYu == OooROk[DIo6Pf(78)] ? D5McUVk : SswOvU(-DIo6Pf(208)))(JKWEKM == JKWEKM && Y5gIzY, (OooROk[DIo6Pf(69)] == DIo6Pf(128) ? SswOvU(DIo6Pf(59)) : Z9GUVDi)[j98IE8], (VXHgGYu == -DIo6Pf(173) ? SswOvU(DIo6Pf(59)) : BTS1G_4)(DIo6Pf(115))));
                    }
                    bgBSzeY += OooROk[DIo6Pf(56)];
                    q4vekP -= 312;
                    JKWEKM += OooROk[DIo6Pf(35)];
                    break;
                case OooROk[DIo6Pf(17)](OooROk, q4vekP):
                case gq7K_g.Y_JWQxq[VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [DIo6Pf(-49)]) + VsY1pmd(44)](DIo6Pf(-66)) == DIo6Pf(73) ? 993 : -DIo6Pf(-19):
                case 718:
                    if (Y5gIzY < OooROk[DIo6Pf(126)] && gq7K_g.ZL74sx[VsY1pmd(DIo6Pf(-49)) + VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [DIo6Pf(-20)])](DIo6Pf(-76)) == DIo6Pf(150)) {
                    return;
                    }
                    bgBSzeY += bgBSzeY == -DIo6Pf(-73) ? -DIo6Pf(-19) : -DIo6Pf(-45);
                    break;
                case gq7K_g.GbK0vv[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(1)) == DIo6Pf(110) ? DIo6Pf(-60) : DIo6Pf(82):
                    var wCd5XZ = DIo6Pf(55);
                    bgBSzeY += DIo6Pf(-13);
                    OooROk.b = DIo6Pf(111);
                    break;
                case gq7K_g.OFbp8oF[VsY1pmd(DIo6Pf(149))](2) == DIo6Pf(174) ? 12 : DIo6Pf(128):
                case gq7K_g.lVYG5oD[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-37)) != DIo6Pf(-25) ? DIo6Pf(-60) : 377:
                case gq7K_g.ZL74sx[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-76)) != DIo6Pf(150) ? null : OooROk[DIo6Pf(45)]:
                    var wCd5XZ = DIo6Pf(55);
                    OooROk[DIo6Pf(79)]();
                    break;
                case DIo6Pf(198):
                case gq7K_g.lVYG5oD[VsY1pmd(43) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-37)) != DIo6Pf(-25) ? DIo6Pf(81) : DIo6Pf(216):
                case gq7K_g.Y_JWQxq[VsY1pmd[sYAKfGw(DIo6Pf(-54))](undefined, [DIo6Pf(-49)]) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-66)) != DIo6Pf(73) ? DIo6Pf(-53) : 1003:
                case gq7K_g.FKxwHi > -DIo6Pf(-40) ? 291 : -DIo6Pf(175):
                    var wCd5XZ = DIo6Pf(55);
                    bgBSzeY += DIo6Pf(-13);
                    q4vekP -= DIo6Pf(-27);
                    JKWEKM -= DIo6Pf(-28);
                    OooROk.b = true;
                    break;
                case !gq7K_g.l9FyIN() ? DIo6Pf(176) : 921:
                case 839:
                case gq7K_g.P2ohmXz() ? DIo6Pf(-33) : -171:
                    OooROk = DIo6Pf(-52);
                    OooROk[DIo6Pf(177)]();
                    bgBSzeY += JKWEKM - 471;
                    q4vekP += 57;
                    break;
                case gq7K_g.P2ohmXz() ? 315 : DIo6Pf(-40):
                case gq7K_g.Y_JWQxq[VsY1pmd(43) + VsY1pmd[sYAKfGw(181)](DIo6Pf(-52), DIo6Pf(-20))](DIo6Pf(-66)) == DIo6Pf(73) ? 397 : -DIo6Pf(178):
                case gq7K_g.Emt5XE[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](4) == DIo6Pf(118) ? DIo6Pf(169) : DIo6Pf(-11):
                    if (DIo6Pf(74)) {
                    bgBSzeY -= 44;
                    break;
                    }
                    if (OooROk[DIo6Pf(-2)]() && gq7K_g.FKxwHi > -DIo6Pf(-40)) {
                    return OooROk.J();
                    }
                    for (var j98IE8 = wEdiuMa; OooROk[DIo6Pf(179)]() && gq7K_g.PXMLNQ > -DIo6Pf(-32); j98IE8++) {
                    var hei7nFI = {
                        [sYAKfGw(DIo6Pf(182))]: VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [DIo6Pf(-49)])
                    };
                    if (Z9GUVDi[j98IE8] > Y5gIzY) {
                        break;
                    }
                    if (j98IE8 > wEdiuMa && Z9GUVDi[OooROk[DIo6Pf(180)] = j98IE8] === (VXHgGYu == -DIo6Pf(165) ? Z9GUVDi : SswOvU(-DIo6Pf(181)))[j98IE8 - 1] && gq7K_g.ZL74sx[hei7nFI[sYAKfGw(DIo6Pf(182))] + VsY1pmd(44)](DIo6Pf(-76)) == 82) {
                        continue;
                    }
                    wCd5XZ = SswOvU(-DIo6Pf(171)).from(wdFu611);
                    (OooROk[DIo6Pf(70)] == -DIo6Pf(186) ? null : wCd5XZ).push((JKWEKM == -DIo6Pf(183) ? SswOvU(-DIo6Pf(46)) : Z9GUVDi)[j98IE8]);
                    (OooROk[DIo6Pf(56)] == 44 ? hPeynT : SswOvU(-DIo6Pf(170)))(OooROk[VsY1pmd(DIo6Pf(184))]("U") ? SswOvU(-964) : EohKKjx, wCd5XZ, D5McUVk(OooROk[DIo6Pf(127)] == 20 ? SswOvU(-507) : j98IE8, (OooROk[DIo6Pf(154)] == -64 ? eval : OooROk).d, BTS1G_4(-(OooROk[DIo6Pf(185)] = OooROk)[DIo6Pf(45)])), CKVhvVr, q4vekP == -DIo6Pf(-60) || Z9GUVDi, (bgBSzeY == -DIo6Pf(186) && D5McUVk)(Y5gIzY, Z9GUVDi[j98IE8], (OooROk.v == "af" ? SswOvU(-440) : BTS1G_4)(51)));
                    }
                    q4vekP -= 57;
                    break;
                default:
                    JKWEKM = -DIo6Pf(187);
                    bgBSzeY -= DIo6Pf(188);
                    OooROk[DIo6Pf(47)]();
                }
            }
            }, 6);
            SswOvU(-DIo6Pf(-51)).log(bgBSzeY);
        }
        VXHgGYu = wdFu611 == VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [95]) && gq7K_g.FKxwHi > -DIo6Pf(-40) ? AjXyWZ[EohKKjx] ||= function (...wdFu611) {
            wZxB4RR = wdFu611;
            return Y5gIzY[EohKKjx].call(this, VsY1pmd(96));
        } : Y5gIzY[EohKKjx](VsY1pmd(DIo6Pf(-36)));
        if (wEdiuMa == VsY1pmd[sYAKfGw(DIo6Pf(-41))](undefined, 54) && gq7K_g.lVYG5oD[CKVhvVr + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-37)) == DIo6Pf(-25)) {
            return {
            _q5SUpO: VXHgGYu
            };
        } else {
            return VXHgGYu;
        }
        }
        _SaGeZW(SswOvU, DIo6Pf(-66));
        function SswOvU(...q4vekP) {
        q4vekP[DIo6Pf(-78)] = 1;
        q4vekP[DIo6Pf(155)] = q4vekP[DIo6Pf(-76)];
        q4vekP[1] = [VsY1pmd(DIo6Pf(54))];
        q4vekP[DIo6Pf(189)] = DIo6Pf(-17);
        q4vekP[DIo6Pf(-37)] = VsY1pmd(DIo6Pf(9));
        q4vekP[DIo6Pf(-69)] = DIo6Pf(-52);
        switch (q4vekP[DIo6Pf(155)]) {
            case gq7K_g.WHtRSze[VsY1pmd(45)](DIo6Pf(-69)) == DIo6Pf(19) ? 807 : q4vekP[DIo6Pf(189)] + DIo6Pf(217):
            return nZ6sA5N[VsY1pmd(DIo6Pf(188))] || JIHNUni[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), q4vekP[DIo6Pf(189)] + 63)];
            case -(q4vekP[q4vekP[DIo6Pf(189)] + DIo6Pf(24)] + DIo6Pf(176)):
            return nZ6sA5N[VsY1pmd(99) + j98IE8[sYAKfGw(179)] + VsY1pmd(DIo6Pf(-25))] || JIHNUni[VsY1pmd(q4vekP[DIo6Pf(189)] + DIo6Pf(152)) + VsY1pmd(100) + VsY1pmd[sYAKfGw(q4vekP[DIo6Pf(189)] + DIo6Pf(-53))](DIo6Pf(-52), DIo6Pf(-25))];
            case -DIo6Pf(8):
            q4vekP[q4vekP[q4vekP[DIo6Pf(189)] + DIo6Pf(24)] - DIo6Pf(-30)] = VsY1pmd(q4vekP[DIo6Pf(189)] + 67) || JIHNUni[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), 102)];
            break;
            case gq7K_g.P2ohmXz() ? 591 : 174:
            return nZ6sA5N[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(71)) + VsY1pmd(104)] || JIHNUni[VsY1pmd(DIo6Pf(71)) + VsY1pmd(q4vekP[DIo6Pf(189)] + DIo6Pf(190))];
            case gq7K_g.WHtRSze[VsY1pmd(DIo6Pf(-32))](DIo6Pf(-69)) != DIo6Pf(19) ? 222 : DIo6Pf(-37):
            q4vekP[3] = VsY1pmd(q4vekP[178] + DIo6Pf(174)) + DIo6Pf(191) || JIHNUni[VsY1pmd[sYAKfGw(q4vekP[178] + 142)](DIo6Pf(-52), [DIo6Pf(214)]) + DIo6Pf(191)];
            break;
            case gq7K_g.lVYG5oD[VsY1pmd[sYAKfGw(q4vekP[DIo6Pf(189)] + DIo6Pf(-53))](DIo6Pf(-52), DIo6Pf(149))](DIo6Pf(-37)) == 101 ? -665 : null:
            q4vekP[q4vekP[DIo6Pf(189)] - DIo6Pf(-30)] = VsY1pmd(DIo6Pf(160)) || JIHNUni[VsY1pmd(DIo6Pf(160))];
            break;
            case gq7K_g.P2ohmXz() ? DIo6Pf(-50) : DIo6Pf(192):
            q4vekP[DIo6Pf(-69)] = VsY1pmd(DIo6Pf(169)) || JIHNUni[VsY1pmd(DIo6Pf(169))];
            break;
            case DIo6Pf(193):
            return nZ6sA5N[VsY1pmd(q4vekP[178] + DIo6Pf(194)) + "pe"] || JIHNUni[VsY1pmd(DIo6Pf(195)) + "pe"];
            case gq7K_g.IQ_nQTX > -(q4vekP[DIo6Pf(189)] - 26) ? -60 : undefined:
            return nZ6sA5N[VsY1pmd(DIo6Pf(9))] || JIHNUni[q4vekP[DIo6Pf(-37)]];
            case gq7K_g.IQ_nQTX <= -(q4vekP[178] - DIo6Pf(-33)) ? null : -DIo6Pf(196):
            q4vekP[3] = VsY1pmd(DIo6Pf(28)) || JIHNUni[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), q4vekP[DIo6Pf(189)] + 75)];
            break;
            case gq7K_g.lVYG5oD[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](2) != 101 ? null : -8:
            q4vekP[q4vekP[178] - (q4vekP[178] - (q4vekP[DIo6Pf(189)] - DIo6Pf(-30)))] = VsY1pmd(DIo6Pf(-70)) + DIo6Pf(202) || JIHNUni[VsY1pmd(DIo6Pf(197))];
            break;
            case gq7K_g.lVYG5oD[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-37)) == DIo6Pf(-25) ? q4vekP[DIo6Pf(189)] + DIo6Pf(198) : -DIo6Pf(182):
            q4vekP[DIo6Pf(-69)] = VsY1pmd(DIo6Pf(199)) || JIHNUni[VsY1pmd(DIo6Pf(199))];
            break;
            case gq7K_g.WHtRSze[VsY1pmd(DIo6Pf(-32))](DIo6Pf(-69)) != "r" ? DIo6Pf(98) : 177:
            return nZ6sA5N[VsY1pmd(114) + VsY1pmd(DIo6Pf(200)) + VsY1pmd(DIo6Pf(201))] || JIHNUni[VsY1pmd(114) + VsY1pmd(DIo6Pf(200)) + VsY1pmd(DIo6Pf(201))];
            case gq7K_g.OFbp8oF[VsY1pmd(43) + VsY1pmd(44)](q4vekP[178] - DIo6Pf(-29)) == DIo6Pf(174) ? -805 : null:
            return nZ6sA5N[VsY1pmd(DIo6Pf(91))] || JIHNUni[VsY1pmd(DIo6Pf(91))];
            case gq7K_g._2azzQ > -(q4vekP[178] + DIo6Pf(-21)) ? -DIo6Pf(139) : null:
            q4vekP[DIo6Pf(-69)] = VsY1pmd[sYAKfGw(181)](DIo6Pf(-52), 118) || JIHNUni[VsY1pmd(118)];
            break;
            case q4vekP[DIo6Pf(189)] + DIo6Pf(161):
            q4vekP[DIo6Pf(-69)] = VsY1pmd(DIo6Pf(68)) + DIo6Pf(202) || JIHNUni[VsY1pmd(DIo6Pf(203))];
            break;
            case gq7K_g.ZL74sx[VsY1pmd(DIo6Pf(149))](DIo6Pf(-76)) == q4vekP[DIo6Pf(189)] + DIo6Pf(64) ? DIo6Pf(204) : DIo6Pf(6):
            return nZ6sA5N[VsY1pmd(121)] || JIHNUni[VsY1pmd(DIo6Pf(67))];
            case gq7K_g.P2ohmXz() ? -DIo6Pf(181) : DIo6Pf(-52):
            return nZ6sA5N[VsY1pmd(DIo6Pf(205))] || JIHNUni[VsY1pmd(DIo6Pf(205))];
            case gq7K_g.IQ_nQTX <= -DIo6Pf(-62) ? null : -DIo6Pf(171):
            q4vekP[DIo6Pf(-69)] = VsY1pmd(123) || JIHNUni[VsY1pmd(123)];
            break;
            case gq7K_g.ZL74sx[VsY1pmd(DIo6Pf(149))](DIo6Pf(-76)) != 82 ? DIo6Pf(-52) : -DIo6Pf(170):
            q4vekP[DIo6Pf(-69)] = VsY1pmd(DIo6Pf(-14)) + VsY1pmd[sYAKfGw(177)](DIo6Pf(-52), [q4vekP[DIo6Pf(189)] + 90]) || JIHNUni[VsY1pmd(126)];
            break;
            case gq7K_g.FKxwHi <= -DIo6Pf(-40) ? DIo6Pf(173) : DIo6Pf(-45):
            q4vekP[q4vekP[178] - DIo6Pf(-30)] = VsY1pmd[sYAKfGw(181)](DIo6Pf(-52), 127) + VsY1pmd(DIo6Pf(-67)) || JIHNUni[VsY1pmd(DIo6Pf(6)) + VsY1pmd(q4vekP[178] + DIo6Pf(31))];
            break;
            case DIo6Pf(168):
            return nZ6sA5N[VsY1pmd(DIo6Pf(176))] || JIHNUni[VsY1pmd(DIo6Pf(53)) + VsY1pmd(DIo6Pf(52)) + "sk"];
            case gq7K_g.Y_JWQxq[VsY1pmd(DIo6Pf(-49)) + VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-20))](DIo6Pf(-66)) == DIo6Pf(73) ? -(q4vekP[178] + 401) : DIo6Pf(-52):
            return nZ6sA5N[VsY1pmd(132) + DIo6Pf(206)] || JIHNUni[VsY1pmd(132) + DIo6Pf(206)];
            case gq7K_g.GbK0vv[wCd5XZ[DIo6Pf(1)] + VsY1pmd[sYAKfGw(DIo6Pf(-54))](undefined, [DIo6Pf(-20)])](DIo6Pf(1)) == q4vekP[DIo6Pf(189)] - (q4vekP[DIo6Pf(189)] - DIo6Pf(110)) ? -DIo6Pf(207) : DIo6Pf(-52):
            return nZ6sA5N[VsY1pmd(133)] || JIHNUni[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), q4vekP[DIo6Pf(189)] + DIo6Pf(-15)) + VsY1pmd(135)];
            case -DIo6Pf(208):
            q4vekP[3] = VsY1pmd(DIo6Pf(209)) + DIo6Pf(191) || JIHNUni[VsY1pmd(DIo6Pf(209)) + DIo6Pf(191)];
            break;
            case -DIo6Pf(210):
            return nZ6sA5N[VsY1pmd(q4vekP[DIo6Pf(189)] + DIo6Pf(211)) + VsY1pmd(DIo6Pf(212))] || JIHNUni[VsY1pmd(DIo6Pf(-57)) + VsY1pmd(q4vekP[DIo6Pf(189)] + 103)];
            case gq7K_g.GbK0vv[VsY1pmd[sYAKfGw(q4vekP[178] + DIo6Pf(13))](DIo6Pf(-52), [DIo6Pf(-49)]) + VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(-20))](DIo6Pf(1)) == DIo6Pf(110) ? 1448 : q4vekP[DIo6Pf(189)] - DIo6Pf(-6):
            q4vekP[DIo6Pf(-69)] = VsY1pmd(139) || JIHNUni[VsY1pmd(DIo6Pf(213))];
            break;
            case gq7K_g._2azzQ > -DIo6Pf(-7) ? q4vekP[178] + 1371 : -DIo6Pf(186):
            q4vekP[DIo6Pf(-69)] = VsY1pmd(q4vekP[DIo6Pf(189)] + 105) || JIHNUni[VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), q4vekP[178] + DIo6Pf(214))];
            break;
            case 4736:
            return nZ6sA5N[VsY1pmd(DIo6Pf(15))] || JIHNUni[VsY1pmd(DIo6Pf(15))];
            case gq7K_g.FKxwHi <= -DIo6Pf(-40) ? DIo6Pf(-71) : 4792:
            return nZ6sA5N[VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [DIo6Pf(13)]) + VsY1pmd(143)] || JIHNUni[VsY1pmd[sYAKfGw(181)](DIo6Pf(-52), DIo6Pf(13)) + VsY1pmd(DIo6Pf(24))];
            case 5105:
            return nZ6sA5N[VsY1pmd(DIo6Pf(215))] || JIHNUni[VsY1pmd(DIo6Pf(215))];
            case gq7K_g.Y_JWQxq[VsY1pmd(DIo6Pf(-49)) + VsY1pmd(DIo6Pf(-20))](DIo6Pf(-66)) != DIo6Pf(73) ? -240 : 168:
            q4vekP[DIo6Pf(-69)] = VsY1pmd(DIo6Pf(216)) || JIHNUni[VsY1pmd[sYAKfGw(DIo6Pf(-41))](undefined, DIo6Pf(216))];
            break;
            case 3063:
            return nZ6sA5N[j98IE8[sYAKfGw(DIo6Pf(217))]] || JIHNUni[VsY1pmd(DIo6Pf(-53))];
            case DIo6Pf(218):
            return nZ6sA5N[VsY1pmd(DIo6Pf(219))] || JIHNUni[VsY1pmd(DIo6Pf(219))];
            case 1480:
            return nZ6sA5N[VsY1pmd(q4vekP[DIo6Pf(189)] + DIo6Pf(199)) + VsY1pmd(DIo6Pf(54))] || JIHNUni[VsY1pmd(DIo6Pf(220)) + VsY1pmd[sYAKfGw(DIo6Pf(-54))](DIo6Pf(-52), [DIo6Pf(54)])];
            case 3343:
            q4vekP[DIo6Pf(-69)] = VsY1pmd[sYAKfGw(DIo6Pf(-41))](DIo6Pf(-52), DIo6Pf(187)) || JIHNUni[VsY1pmd(150)];
            break;
            case q4vekP[DIo6Pf(189)] + 4162:
            return nZ6sA5N[VsY1pmd(DIo6Pf(221)) + VsY1pmd(q4vekP[DIo6Pf(189)] + DIo6Pf(91))] || JIHNUni[VsY1pmd(153)];
            case 3361:
            return nZ6sA5N[VsY1pmd(q4vekP[DIo6Pf(189)] + DIo6Pf(68)) + q4vekP[DIo6Pf(-66)][DIo6Pf(-76)]] || JIHNUni[VsY1pmd(q4vekP[DIo6Pf(189)] + DIo6Pf(203))];
            case 4270:
            return nZ6sA5N[VsY1pmd(156) + VsY1pmd(q4vekP[178] + DIo6Pf(205))] || JIHNUni[VsY1pmd[sYAKfGw(DIo6Pf(-41))](undefined, DIo6Pf(222))];
            case 3768:
            return nZ6sA5N[VsY1pmd(DIo6Pf(223)) + VsY1pmd(DIo6Pf(224)) + DIo6Pf(69)] || JIHNUni[VsY1pmd(q4vekP[DIo6Pf(189)] + DIo6Pf(-14)) + VsY1pmd(DIo6Pf(224)) + DIo6Pf(69)];
            case 4160:
            return nZ6sA5N[VsY1pmd(159) + VsY1pmd(DIo6Pf(225)) + DIo6Pf(206)] || JIHNUni[VsY1pmd(q4vekP[178] + DIo6Pf(-14)) + VsY1pmd(DIo6Pf(225)) + DIo6Pf(206)];
            case 3765:
            return nZ6sA5N[VsY1pmd(DIo6Pf(226))] || JIHNUni[VsY1pmd(DIo6Pf(226))];
            case q4vekP[DIo6Pf(189)] + 3295:
            return nZ6sA5N[VsY1pmd(163)] || JIHNUni[VsY1pmd[sYAKfGw(177)](DIo6Pf(-52), [163])];
            case 3880:
            return nZ6sA5N[VsY1pmd(DIo6Pf(-26))] || JIHNUni[VsY1pmd(q4vekP[178] + 129)];
            case 1286:
            q4vekP[3] = VsY1pmd(DIo6Pf(120)) || JIHNUni[VsY1pmd(DIo6Pf(120))];
        }
        if (q4vekP[178] > 99) {
            return q4vekP[DIo6Pf(103)];
        } else {
            return nZ6sA5N[q4vekP[DIo6Pf(-69)]] || JIHNUni[q4vekP[DIo6Pf(-69)]];
        }
        }
        _SaGeZW(fcu4Rd, 1);
        function fcu4Rd(...q4vekP) {
        q4vekP[DIo6Pf(-78)] = DIo6Pf(-66);
        q4vekP.gXZiPs = DIo6Pf(169);
        q4vekP[DIo6Pf(228)] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+,./:;<=>?@[]^_`{|}~\"";
        q4vekP.lnyPoS = "" + (q4vekP[q4vekP.gXZiPs - DIo6Pf(169)] || "");
        q4vekP[q4vekP[DIo6Pf(233)] - DIo6Pf(227)] = q4vekP[DIo6Pf(229)].length;
        q4vekP[DIo6Pf(232)] = DIo6Pf(27);
        q4vekP[DIo6Pf(234)] = [];
        q4vekP[DIo6Pf(1)] = DIo6Pf(-76);
        q4vekP[DIo6Pf(-68)] = DIo6Pf(-76);
        q4vekP.z2Cc6eV = -DIo6Pf(-66);
        for (let EohKKjx = 0; EohKKjx < q4vekP[DIo6Pf(-69)]; EohKKjx++) {
            q4vekP[DIo6Pf(230)] = q4vekP[DIo6Pf(228)].indexOf(q4vekP[DIo6Pf(229)][EohKKjx]);
            if (q4vekP[DIo6Pf(230)] === -1) {
            continue;
            }
            if (q4vekP[DIo6Pf(231)] < DIo6Pf(-76)) {
            q4vekP[DIo6Pf(231)] = q4vekP.pFfgAb;
            } else {
            q4vekP.z2Cc6eV += q4vekP[DIo6Pf(230)] * 91;
            q4vekP[DIo6Pf(1)] |= q4vekP[DIo6Pf(231)] << q4vekP[6];
            q4vekP[DIo6Pf(-68)] += (q4vekP.z2Cc6eV & 8191) > q4vekP[DIo6Pf(232)] + DIo6Pf(-31) ? q4vekP._ASKELT - 26 : DIo6Pf(-48);
            do {
                q4vekP.KmfCH0T.push(q4vekP[DIo6Pf(1)] & DIo6Pf(235));
                q4vekP[DIo6Pf(1)] >>= DIo6Pf(46);
                q4vekP[DIo6Pf(-68)] -= q4vekP[DIo6Pf(232)] - 31;
            } while (q4vekP[q4vekP[DIo6Pf(232)] - DIo6Pf(-29)] > q4vekP[DIo6Pf(233)] - DIo6Pf(-72));
            q4vekP.z2Cc6eV = -DIo6Pf(-66);
            }
        }
        if (q4vekP.z2Cc6eV > -1) {
            q4vekP[DIo6Pf(234)].push((q4vekP[DIo6Pf(1)] | q4vekP[DIo6Pf(231)] << q4vekP[q4vekP[DIo6Pf(232)] - DIo6Pf(-29)]) & DIo6Pf(235));
        }
        if (q4vekP._ASKELT > DIo6Pf(197)) {
            return q4vekP[DIo6Pf(236)];
        } else {
            return AXyTpU(q4vekP[DIo6Pf(234)]);
        }
        }
        function VsY1pmd(q4vekP, EohKKjx, wdFu611, wEdiuMa = fcu4Rd, CKVhvVr = x_uNhNM) {
        if (wdFu611) {
            return EohKKjx[x_uNhNM[wdFu611]] = VsY1pmd(q4vekP, EohKKjx);
        } else if (EohKKjx) {
            [CKVhvVr, EohKKjx] = [wEdiuMa(CKVhvVr), q4vekP || wdFu611];
        }
        if (EohKKjx) {
            return q4vekP[CKVhvVr[EohKKjx]];
        } else {
            return x_uNhNM[q4vekP] || ((CKVhvVr[q4vekP], wdFu611 = wEdiuMa), x_uNhNM[q4vekP] = wdFu611(Jjwkpkv[q4vekP]));
        }
        }
        function dMZCge() {
        return "Nog2*[$Y&Mo/7]ml8R^F:woYbUlYY^KU+R`yW|~/u0KĔesI|<lEK><S+##ĒV8`jmRwG@5[do6:1k,*lyA|ESC;\"t4o[PLi<^BrWgox}h;5aRB;1ĀlV2W3y;Ő>lh2uxŐyl2<o#ZT91J)hQ~d|15O0$3*pF$_#B|uGl:<<[5K%JJ&Nlm^UW<0=UuoU`kıhS|RS{fK<w69L!4dwdk}z1fb>kY<OK9PO=bxJQGN^ŻsL10lQO|.)%zyu2{A&$@*EBk|Uţ2+iV1uČyR8{QĀ{,cvG{?Pdi(]LaűWE)iwe5U{d_PJm|WJ3xq9<Y7I_=^7iY3thbD1IeE|Y)feg/9dUJ7LƜlXuHsǆƜxomf&ŮTD|pz#cɖ2CƏ,Ǐa<TƜXPU=>[aɨ4,kfX>5ƜTdy.wn*NG|oX[ɧus6F|dP(gt@mɷ4!fP[Ő]DwJb|Q,Kz_*{Y;R5|nUI2O:sɨə(I1]eeaU|frDgcmZũ˃drzgl)RȐʒMef3+%ƜrMn<c˖˘˚K{8!a.ɘoTgp@1Ɯtl$ʈʻʽ]œ|X]A;f,uɨgJːF?yɨ[DX<aʒPE=v)˻9o˘B.cɨZP;Į2X01nvoɨPP)FƎ̣̥Ců|vz.J́̃|̰̦vʭ<!t/Ɯ=G7˯@&eʈ̣YJ5+c0˂6˄8ȳʗg͌|c8NK̐$fB>?:qƞ|N5}2IȊYʑƹ5z˴ʋʈc)`a~tQuɠď͈ƎVoƲ(unƜʓ^͉8͜hrZ2ʥF͘g0;Uɨ^D̸k@̩|b,`H~7˲ʉl,/q/8ɨ&έ<i>qɨpˏI]ɵɨfGĒ%w_o%5qOƜ1i/z+3jɕΪcƜ;!9H́3Hc!QzƜ\"RIJM:U˶$b˜|Vu~2R[!e<%m?˝:*abj5X̅8=ŐZ΁g?ʟ|BE@J|ə˘9_tjʈX}YGϑHHm6Lso7:a{O):Dʼɨ*zbgmvɶ|$zĊ͑Μ|̫uf7ƳɨKEˇg,Őar%2L:Yɨ_z̥U<м͆>f]*̴rreHʗ̝̑jʖ)̴SʔgNіɨYP$JS[pƜ25G<M3Mɨ]zʼ|ɪ_1Z|ђʣ|ir\"I3?{iɃS8ɲ=[ѣe}ĲOy}@Ƀ1DygB_r˕[OͼFiǔH|tGљћ̴_7ʕҗѣ3o\"zN[мN#҄ˢqa͠j>N1ҰeѪz=̴)zΎѕŐjšfҺɨ;i҄[Ќ8DV͡|̘ˠ`*ѽ|ъɲηu͜CPϛo2ѽҰbӚ~ѭΤӻ<\"@q˃f5вYұʊ<лɨnrˮ6ӒɨO8͏͑suLđSZEǫQ͵gсѐőEƲ́3ƜEԦ=́iԂ˃32kdL3Ő̶вN:ΐʈgzːh`ŐӏӥH:kɨcrdKƎՅKՇȠ2$ήƜ[ώ2sȞԍX,ˡʒ8ɛчe0rR(&Ƌ0oQΌբfчƛ̼JƲ@[ӬԲɤсѣԎ͠r2JTc%j3pɃվKրмьϛcш|=7ҖҘɨӏʕĴՉ|hM+ӛӁɨũѱf>4ɨъью7;ʈȡ/2Ԉԫԧ,xƜәzIƎY2~zT҇q̸e,]@ʈ̶̸nՃ|kѓ=r@Ő՞ѥ/w̻λFK|}Oп˰ԁs!ӍwbRnXƜ%Dɲ֐v՗zְˢ׫׭,+MM%`+Ɯ7!ֹ;חɨ׾؀wʆ2Tʱ=iɛo@=Ɯδˠʾ̴؋؍@s0W$8&Pyǫؖf؎ԩ|r5҄b^Ӭ+l^IюӬ~Oӥ|ӣА|ӳϛ86&YҰW,52e>iɨџturn ȼis|TextDecoderǽint8AўayЍпɇٝStrٟg|٣r٥˄rɚCٚӏoٟtٴٶhъٷٛ|lenʖhɡʎڈjٺnƝnٛfٟeƎٛٙڂ˅ɚԉ٫٭چƝtf-8ӭppŎϯeҿ0IŐmOh_e7|IgwBDj͝all|ИǺ9ˆ˄kghfˢ̹KXnu1|zwK1gWںbuERHBu|Kvivj9ʉqPѼʈfUФQԈ˯B̲ƼMTSVaʑADMg8_|yQyPwEy";
        }
        _SaGeZW(sYAKfGw, DIo6Pf(-66));
        function sYAKfGw(...q4vekP) {
        q4vekP.length = DIo6Pf(-66);
        q4vekP[DIo6Pf(237)] = DIo6Pf(-24);
        if (q4vekP[DIo6Pf(237)] > DIo6Pf(-55)) {
            return q4vekP[-97];
        } else {
            return EohKKjx[q4vekP[DIo6Pf(-76)]];
        }
        }
        function tEAFbw(q4vekP) {
        var EohKKjx;
        var wdFu611;
        var wEdiuMa;
        var CKVhvVr = {};
        var Z9GUVDi = q4vekP.split("");
        var Y5gIzY = wdFu611 = Z9GUVDi[DIo6Pf(-76)];
        var VXHgGYu = [Y5gIzY];
        var bgBSzeY = EohKKjx = 256;
        for (q4vekP = DIo6Pf(-66); q4vekP < Z9GUVDi.length; q4vekP++) {
            wEdiuMa = Z9GUVDi[q4vekP].charCodeAt(0);
            wEdiuMa = bgBSzeY > wEdiuMa ? Z9GUVDi[q4vekP] : CKVhvVr[wEdiuMa] ? CKVhvVr[wEdiuMa] : wdFu611 + Y5gIzY;
            VXHgGYu.push(wEdiuMa);
            Y5gIzY = wEdiuMa.charAt(DIo6Pf(-76));
            CKVhvVr[EohKKjx] = wdFu611 + Y5gIzY;
            EohKKjx++;
            wdFu611 = wEdiuMa;
        }
        return VXHgGYu.join("").split("|");
        }
        function b2JjwI() {
        return ["length", "ORc8XX", 0, "p99OeE", 68, 37, 100, 23, 111, 3, 6, 128, 1, "zMcSpk", 169, "rujiqK", 9, 15, 63, 167, 12, 137, 174, 176, 177, 146, undefined, 60, 83, 43, 14, 196, "wScAFv", 21, 17, 88, 20, 181, 19, 59, 22, 2, 97, 179, 10, 26, 45, 49, 32, 33, 54, 28, 164, 101, 56, 31, 41, 55, 44, 46, "ZmSFDh", 35, 140, 99, 124, 65, 223, 126, 118, 77, 40, 90, 11, 13, 238, 24, "F", 16, "s", 5, 91, 248, "VnoZ62L", "khOPvDE", 127, "R", 187, 109, "G", "am", "a", 142, "an", 141, "ao", "ap", 95, "r", 92, 216, "E", 198, 143, "G5Lt5c", 78, 39, 110, 86, "A", 93, 85, 38, "e0y7s8y", "g", "q", "j", "ag", "k", "m", "ac", "n", "t", "b", "e", 8, "ah", "p", 96, 27, 183, 131, 130, 149, null, "C", "fWaW3Ny", "z", 807, 420, 75, "Vl7wFf", 18, 47, "f", "v", 121, 119, "l", "i", 103, "w", 89, false, "ab", 228, 173, "y", "h", 548, 66, 184, "ty", "J", 50, 52, 79, 4, 42, "vdRhxw8", 117, "yLpwttX", 30, 970, 61, "P14s9b", 71, 72, "Ku1fch", 123, "Kvwfk2", 58, 80, 94, "GOhQOC", "LAimlj", "s3bc1P7", 250, 805, 114, true, "uVvEoBB", 166, "VUaw85F", 51, "c4zq04", 67, 76, 206, 165, "R5OBRbp", "H8RsD9", 81, 229, "oC9xZJ", "c", "d", 25, 175, 247, "D", "T", "bxWiSl", 189, "P", "vIcdEXd", "I", 152, 890, 197, 74, "x", "u", "ak", "N", 34, "AJWGKF", 155, 48, 82, "aq", 64, "L", "X", 7, "B", 62, "YRvfH2", 350, 106, 665, 575, 495, "K", 477, "_p0Kka6", 195, 194, 107, 964, 507, 207, 87, 70, 154, 129, "ai", 29, "M", "O", 282, 193, 57, 84, "ae", 234, 150, 98, 178, 69, "on", 241, 923, 73, 108, 270, 112, 935, 113, 115, 116, "nt", 120, 534, 122, "te", 442, 522, 136, 440, 102, 138, 139, 105, 144, 145, 180, 529, 147, 148, 151, 158, 159, 160, 161, 162, 104, "KH7eHoF", "lnyPoS", "pFfgAb", "z2Cc6eV", "_ASKELT", "gXZiPs", "KmfCH0T", 255, 186, "RQ9Jqrf"];
        }
        function BZxLqo(q4vekP, EohKKjx) {
        function wdFu611() {
            return q4vekP(...arguments);
        }
        Object.defineProperty(wdFu611, "length", {
            value: EohKKjx,
            configurable: true
        });
        return wdFu611;
        }
        window.onload = function () {
        const e = {
            coloredspikes: {
            enabled: true,
            draw: false
            }
        };
        let t = window.location.origin + "/";
        let i = null;
        let o = Date.now();
        const T = window.Math.PI * 2;
        const r = window.Math.PI / 2;
        const n = window.Math.PI / 4;
        const a = 0;
        let I = [];
        let E = performance.now();
        const _ = async e => {
            const i = await fetch(t + "setRegion?login=" + Vn.login + "&password=" + Vn.password + "&region=" + e);
            if (i.status !== 200) {
            Gn.select_subview(Gn.__GAME__);
            return Yn.new_alert(i.status + " error");
            }
            Gn.select_subview(Gn.__SERVER_DURATION__);
        };
        const s = async (e, i) => {
            if (Gn.spin > 0) {
            return;
            }
            if (Gn.bread < i) {
            Gn.select_subview(Gn.__BUY__);
            return;
            }
            Gn.spin = 2;
            Gn.spin_effect = 0;
            Gn.spin_target = 100;
            const o = await fetch(t + "buySpin?&login=" + Vn.login + "&password=" + Vn.password + "&spin=" + e);
            if (o.status !== 200) {
            Gn.spin = 0;
            return Yn.new_alert(o.status + " error");
            }
            const r = await o.json();
            Gn.play_spin(r.rand * T, r.type, r.id);
            Gn.bread -= i;
        };
        const R = () => {
            if (Gn.bread >= 300 || Gn.firstName <= 0) {
            var e = window.document.getElementById("account_nickname_input").value.trim();
            window.document.getElementById("account_nickname_input").value = e;
            if (e.length >= 1 && e.length <= 20) {
                var i = new window.XMLHttpRequest();
                i.open("GET", t + "changeNickname?login=" + Vn.login + "&nickname=" + e);
                i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                i.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && i.responseText !== "0") {
                    var e = window.Number(i.responseText);
                    if (e > 0) {
                    Gn.bread -= e;
                    }
                    Gn.firstName = 1;
                    Gn.select_subview(Gn.__PROFILE__);
                }
                };
                i.send();
            }
            }
        };
        const d = async (e, i) => {
            if (Gn.bread < i) {
            Gn.select_subview(Gn.__BUY__);
            return;
            }
            const o = await fetch(t + "buyKit?&login=" + Vn.login + "&password=" + Vn.password + "&kit=" + e);
            if (o.status !== 200) {
            return Yn.new_alert(o.status + " error");
            }
            const T = o.json();
            Gn.bread -= i;
            Gn.kit = Date.now() + window.Number(T);
        };
        const u = async (e, i, o, T) => {
            e = e === undefined ? Gn.leaderboard_range : e;
            i = i === undefined ? Gn.leaderboard_mode : i;
            o = o === undefined ? Gn.leaderboard_sorted : o;
            T = T === undefined ? Gn.leaderboard_season : T;
            if (e === Gn.leaderboard_range && i === Gn.leaderboard_mode && o === Gn.leaderboard_sorted && T === Gn.leaderboard_season) {
            return;
            }
            Gn.leaderboard_range = e;
            Gn.leaderboard_mode = i;
            Gn.leaderboard_sorted = o;
            Gn.leaderboard_season = T;
            if (Gn.LEADERBOARD_SEASON1 === T) {
            T = "0";
            }
            if (Gn.LEADERBOARD_TOTAL === i) {
            i = "total";
            } else if (Gn.LEADERBOARD_NORMAL === i) {
            i = "normal";
            }
            if (Gn.LEADERBOARD_ALL === e) {
            e = "all";
            }
            if (Gn.LEADERBOARD_WEEK === e) {
            e = "week";
            }
            if (Gn.LEADERBOARD_TODAY === e) {
            e = "today";
            }
            if (Gn.LEADERBOARD_KILL === o) {
            o = "kill";
            } else if (Gn.LEADERBOARD_SCORE === o) {
            o = "score";
            } else if (Gn.LEADERBOARD_TIME === o) {
            o = "time";
            }
            const r = await fetch(t + "leaderboard?range=" + e + "&mode=" + i + "&sort=" + o + "&season=" + T);
            if (r.status !== 200) {
            return Yn.new_alert("Error parse leaderboard.", "#a60f1b");
            }
            const n = await r.json();
            var a = "";
            for (var I = 0; I < n.length; I++) {
            line = n[I];
            a += "<div class=\"lineLeaderboard\">";
            a += "<div class=\"rank\">";
            a += I + 1 + "";
            a += "</div>";
            a += "<div class=\"name\">";
            a += line[0].replaceAll("<", "< ");
            a += "</div>";
            a += "<div class=\"lvl\">";
            a += Gn.level_formula(line[4]) + 1 + "";
            a += "</div>";
            a += "<div class=\"kills\">";
            a += line[3] + "";
            a += "</div>";
            a += "<div class=\"time\">";
            a += line[2] + "";
            a += "</div>";
            a += "<div class=\"score\">";
            a += v.simplify_number(line[1]) + "";
            a += "</div>";
            a += "</div>";
            }
            window.document.getElementById("leaderboard").innerHTML = a;
        };
        const A = [];
        const O = [{
            price: 1000,
            items: [[2, ItemType.FIRE], [1, ItemType.COOKED_MEAT], [8, ItemType.BERRY], [1, ItemType.BREAD]]
        }, {
            price: 2000,
            items: [[2, ItemType.BIG_FIRE], [1, ItemType.WOOD_PICK], [2, ItemType.COOKED_MEAT], [16, ItemType.BERRY], [2, ItemType.BREAD]]
        }, {
            price: 4000,
            items: [[3, ItemType.BIG_FIRE], [1, ItemType.STONE_PICK], [4, ItemType.COOKED_MEAT], [20, ItemType.BERRY], [4, ItemType.BREAD], [1, ItemType.WORKBENCH], [80, ItemType.STONE], [140, ItemType.WOOD]]
        }, {
            price: 8000,
            items: [[1, ItemType.BAG], [4, ItemType.BIG_FIRE], [1, ItemType.GOLD_PICK], [6, ItemType.COOKED_MEAT], [30, ItemType.BERRY], [6, ItemType.BREAD], [1, ItemType.WORKBENCH], [150, ItemType.STONE], [200, ItemType.WOOD], [60, ItemType.GOLD], [2, ItemType.BOTTLE_FULL]]
        }, {
            price: 16000,
            items: [[1, ItemType.BAG], [1, ItemType.DIAMOND_PICK], [1, ItemType.BED], [7, ItemType.CAKE], [2, ItemType.BOTTLE_FULL], [2, ItemType.BIG_FIRE], [1, ItemType.FURNACE], [15, ItemType.STONE_WALL], [2, ItemType.STONE_DOOR], [1, ItemType.TOTEM], [1, ItemType.WRENCH], [200, ItemType.STONE], [300, ItemType.WOOD]]
        }, {
            price: 16000,
            items: [[1, ItemType.BAG], [1, ItemType.COAT], [1, ItemType.GOLD_SHOVEL], [1, ItemType.GOLD_PICK], [10, ItemType.CAKE], [4, ItemType.BOTTLE_FULL], [6, ItemType.BIG_FIRE], [3, ItemType.BANDAGE], [1, ItemType.BOOK], [200, ItemType.STONE], [300, ItemType.WOOD]]
        }, {
            price: 16000,
            items: [[1, ItemType.BAG], [1, ItemType.HOOD], [1, ItemType.GOLD_HAMMER], [3, ItemType.BANDAGE], [1, 0], [1, ItemType.GOLD_PICK], [7, ItemType.CAKE], [2, ItemType.BOTTLE_FULL], [4, ItemType.BIG_FIRE], [150, ItemType.STONE], [200, ItemType.WOOD], [1, ItemType.LOCK_PICK]]
        }, {
            price: 16000,
            items: [[1, ItemType.BAG], [1, ItemType.PEASANT], [1, ItemType.GOLD_PICK], [7, ItemType.CAKE], [2, ItemType.BOTTLE_FULL], [4, ItemType.BIG_FIRE], [2, ItemType.WINDMILL], [4, ItemType.BREAD_OVEN], [10, ItemType.PLOT], [6, ItemType.WHEAT_SEED], [4, ItemType.BERRY_SEED], [1, ItemType.WATERING_CAN_FULL], [500, ItemType.WOOD]]
        }, {
            price: 16000,
            items: [[1, ItemType.BAG], [1, ItemType.GOLD_PICK], [16, ItemType.FISH_COOKED], [1, ItemType.BOTTLE_FULL], [6, ItemType.BIG_FIRE], [3, ItemType.BANDAGE], [1, ItemType.DIVING_MASK], [1, ItemType.STONE_SWORD], [16, ItemType.BRIDGE], [150, ItemType.STONE], [200, ItemType.WOOD]]
        }, {
            price: 20000,
            items: [[1, ItemType.BAG], [1, ItemType.GOLD_PICK], [1, ItemType.CAKE], [1, ItemType.BOTTLE_FULL], [3, ItemType.BIG_FIRE], [3, ItemType.BANDAGE], [1, ItemType.GOLD_HELMET], [1, ItemType.GOLD_SWORD], [1, ItemType.DIAMOND_SPEAR], [2, ItemType.GOLD_SPIKE], [50, ItemType.STONE], [100, ItemType.WOOD]]
        }];
        let l = [];
        l[ItemType.WOOD_SWORD] = {
            r: [[ItemType.WOOD, 30]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.CURSED_SWORD] = {
            r: [[ItemType.LAVA_SWORD, 1], [ItemType.EMERALD, 60], [ItemType.REIDITE, 180], [ItemType.AMETHYST, 250]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 5,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.STONE_SWORD] = {
            r: [[ItemType.WOOD, 50], [ItemType.STONE, 25], [ItemType.WOOD_SWORD, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.GOLD_SWORD] = {
            r: [[ItemType.WOOD, 60], [ItemType.GOLD, 40], [ItemType.STONE, 50], [ItemType.STONE_SWORD, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DIAMOND_SWORD] = {
            r: [[ItemType.DIAMOND, 40], [ItemType.GOLD, 60], [ItemType.STONE, 80], [ItemType.GOLD_SWORD, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 30,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.AMETHYST_SWORD] = {
            r: [[ItemType.DIAMOND, 60], [ItemType.GOLD, 100], [ItemType.AMETHYST, 40], [ItemType.DIAMOND_SWORD, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.REIDITE_SWORD] = {
            r: [[ItemType.DIAMOND, 100], [ItemType.AMETHYST, 80], [ItemType.REIDITE, 40], [ItemType.AMETHYST_SWORD, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DRAGON_SWORD] = {
            r: [[ItemType.DIAMOND_CORD, 20], [ItemType.DRAGON_ORB, 1], [ItemType.AMETHYST, 150], [ItemType.DRAGON_HEART, 3]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 120,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.LAVA_SWORD] = {
            r: [[ItemType.DRAGON_SWORD, 1], [ItemType.LAVA_ORB, 1], [ItemType.REIDITE, 150], [ItemType.LAVA_HEART, 2]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 180,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.WOOD_SPEAR] = {
            r: [[ItemType.WOOD, 40]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.STONE_SPEAR] = {
            r: [[ItemType.WOOD_SPEAR, 1], [ItemType.WOOD, 60], [ItemType.STONE, 10]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.GOLD_SPEAR] = {
            r: [[ItemType.WOOD, 80], [ItemType.GOLD, 30], [ItemType.STONE, 30], [ItemType.STONE_SPEAR, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DIAMOND_SPEAR] = {
            r: [[ItemType.WOOD, 200], [ItemType.DIAMOND, 40], [ItemType.GOLD, 60], [ItemType.GOLD_SPEAR, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 30,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.AMETHYST_SPEAR] = {
            r: [[ItemType.AMETHYST, 40], [ItemType.DIAMOND, 80], [ItemType.GOLD, 90], [ItemType.DIAMOND_SPEAR, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.REIDITE_SPEAR] = {
            r: [[ItemType.REIDITE, 40], [ItemType.AMETHYST, 80], [ItemType.DIAMOND, 90], [ItemType.AMETHYST_SPEAR, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DRAGON_SPEAR] = {
            r: [[ItemType.DIAMOND_CORD, 20], [ItemType.DRAGON_ORB, 1], [ItemType.AMETHYST, 100], [ItemType.DRAGON_HEART, 3]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 120,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.LAVA_SPEAR] = {
            r: [[ItemType.DRAGON_SPEAR, 1], [ItemType.LAVA_ORB, 1], [ItemType.REIDITE, 100], [ItemType.LAVA_HEART, 2]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 200,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.CRAB_SPEAR] = {
            r: [[ItemType.WOOD_SPEAR, 1], [ItemType.CRAB_LOOT, 5], [ItemType.CORD, 6]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 30,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.WOOD_BOW] = {
            r: [[ItemType.WOOD, 100], [ItemType.CORD, 4]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.STONE_BOW] = {
            r: [[ItemType.STONE, 200], [ItemType.CORD, 8], [ItemType.PENGUIN_FEATHER, 4], [ItemType.WOOD_BOW, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 25,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.GOLD_BOW] = {
            r: [[ItemType.GOLD, 200], [ItemType.CORD, 12], [ItemType.HAWK_FEATHER, 4], [ItemType.PENGUIN_FEATHER, 4], [ItemType.STONE_BOW, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 30,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DIAMOND_BOW] = {
            r: [[ItemType.DIAMOND, 200], [ItemType.DIAMOND_CORD, 10], [ItemType.HAWK_FEATHER, 8], [ItemType.PENGUIN_FEATHER, 8], [ItemType.GOLD_BOW, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 35,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.AMETHYST_BOW] = {
            r: [[ItemType.AMETHYST, 200], [ItemType.DIAMOND_CORD, 10], [ItemType.PENGUIN_FEATHER, 8], [ItemType.VULTURE_FEATHER, 8], [ItemType.DIAMOND_BOW, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 40,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.REIDITE_BOW] = {
            r: [[ItemType.REIDITE, 200], [ItemType.DIAMOND_CORD, 10], [ItemType.KRAKEN_FUR, 1], [ItemType.AMETHYST_BOW, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 45,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DRAGON_BOW] = {
            r: [[ItemType.EMERALD, 200], [ItemType.DIAMOND_CORD, 10], [ItemType.DRAGON_ORB, 1], [ItemType.REIDITE_BOW, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 50,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.WOOD_ARROW] = {
            r: [[ItemType.WOOD, 30]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.STONE_ARROW] = {
            r: [[ItemType.STONE, 20], [ItemType.HAWK_FEATHER, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.GOLD_ARROW] = {
            r: [[ItemType.GOLD, 20], [ItemType.PENGUIN_FEATHER, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DIAMOND_ARROW] = {
            r: [[ItemType.DIAMOND, 10], [ItemType.PENGUIN_FEATHER, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.AMETHYST_ARROW] = {
            r: [[ItemType.AMETHYST, 10], [ItemType.VULTURE_FEATHER, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 15,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.REIDITE_ARROW] = {
            r: [[ItemType.REIDITE, 10], [ItemType.VULTURE_FEATHER, 1], [ItemType.FLAME, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 15,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DRAGON_ARROW] = {
            r: [[ItemType.EMERALD, 10], [ItemType.SANDWORM_JUICE, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.WOOD_SHIELD] = {
            r: [[ItemType.WOOD, 100]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 25,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.STONE_SHIELD] = {
            r: [[ItemType.WOOD_SHIELD, 1], [ItemType.STONE, 100], [ItemType.WOOD, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 40,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.GOLD_SHIELD] = {
            r: [[ItemType.STONE_SHIELD, 1], [ItemType.GOLD, 50], [ItemType.STONE, 50], [ItemType.WOOD, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 50,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.DIAMOND_SHIELD] = {
            r: [[ItemType.GOLD_SHIELD, 1], [ItemType.DIAMOND, 50], [ItemType.GOLD, 50], [ItemType.STONE, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 70,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.AMETHYST_SHIELD] = {
            r: [[ItemType.DIAMOND_SHIELD, 1], [ItemType.AMETHYST, 50], [ItemType.DIAMOND, 50], [ItemType.GOLD, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.REIDITE_SHIELD] = {
            r: [[ItemType.AMETHYST_SHIELD, 1], [ItemType.REIDITE, 50], [ItemType.AMETHYST, 50], [ItemType.DIAMOND, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 120,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.WOOD_PICK] = {
            r: [[ItemType.WOOD, 10]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 3,
            t: CATEGORY.TOOLS
        };
        l[ItemType.STONE_PICK] = {
            r: [[ItemType.WOOD_PICK, 1], [ItemType.WOOD, 50], [ItemType.STONE, 15]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 8,
            t: CATEGORY.TOOLS
        };
        l[ItemType.GOLD_PICK] = {
            r: [[ItemType.WOOD, 40], [ItemType.GOLD, 20], [ItemType.STONE, 30], [ItemType.STONE_PICK, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 12,
            t: CATEGORY.TOOLS
        };
        l[ItemType.DIAMOND_PICK] = {
            r: [[ItemType.DIAMOND, 20], [ItemType.GOLD, 50], [ItemType.STONE, 80], [ItemType.GOLD_PICK, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.TOOLS
        };
        l[ItemType.AMETHYST_PICK] = {
            r: [[ItemType.DIAMOND, 40], [ItemType.GOLD, 60], [ItemType.AMETHYST, 30], [ItemType.DIAMOND_PICK, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.TOOLS
        };
        l[ItemType.REIDITE_PICK] = {
            r: [[ItemType.AMETHYST, 30], [ItemType.DIAMOND, 40], [ItemType.REIDITE, 30], [ItemType.AMETHYST_PICK, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.TOOLS
        };
        l[ItemType.STONE_SHOVEL] = {
            r: [[ItemType.WOOD, 30], [ItemType.STONE, 15]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.TOOLS
        };
        l[ItemType.GOLD_SHOVEL] = {
            r: [[ItemType.STONE_SHOVEL, 1], [ItemType.GOLD, 20], [ItemType.STONE, 30], [ItemType.WOOD, 40]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.TOOLS
        };
        l[ItemType.DIAMOND_SHOVEL] = {
            r: [[ItemType.GOLD_SHOVEL, 1], [ItemType.DIAMOND, 20], [ItemType.GOLD, 50], [ItemType.STONE, 80]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.TOOLS
        };
        l[ItemType.AMETHYST_SHOVEL] = {
            r: [[ItemType.DIAMOND_SHOVEL, 1], [ItemType.GOLD, 60], [ItemType.AMETHYST, 30], [ItemType.DIAMOND, 40]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 40,
            t: CATEGORY.TOOLS
        };
        l[ItemType.REIDITE_SHOVEL] = {
            r: [[ItemType.AMETHYST_SHOVEL, 1], [ItemType.DIAMOND, 60], [ItemType.REIDITE, 30], [ItemType.AMETHYST, 40]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 40,
            t: CATEGORY.TOOLS
        };
        l[ItemType.WOOD_HELMET] = {
            r: [[ItemType.WOOD, 50]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.STONE_HELMET] = {
            r: [[ItemType.STONE, 75], [ItemType.WOOD, 75], [ItemType.WOOD_HELMET, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.GOLD_HELMET] = {
            r: [[ItemType.STONE, 90], [ItemType.WOOD, 90], [ItemType.GOLD, 90], [ItemType.STONE_HELMET, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.DIAMOND_HELMET] = {
            r: [[ItemType.STONE, 100], [ItemType.GOLD, 100], [ItemType.DIAMOND, 100], [ItemType.GOLD_HELMET, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 30,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.AMETHYST_HELMET] = {
            r: [[ItemType.AMETHYST, 80], [ItemType.GOLD, 150], [ItemType.DIAMOND, 120], [ItemType.DIAMOND_HELMET, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.REIDITE_HELMET] = {
            r: [[ItemType.REIDITE, 80], [ItemType.DIAMOND, 150], [ItemType.AMETHYST, 120], [ItemType.AMETHYST_HELMET, 1]],
            f: 1,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.DRAGON_HELMET] = {
            r: [[ItemType.DIAMOND_CORD, 30], [ItemType.DRAGON_CUBE, 1], [ItemType.AMETHYST, 150], [ItemType.DRAGON_HEART, 3]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 120,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.LAVA_HELMET] = {
            r: [[ItemType.DRAGON_HELMET, 1], [ItemType.LAVA_CUBE, 1], [ItemType.REIDITE, 150], [ItemType.LAVA_HEART, 2]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 180,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.CRAB_HELMET] = {
            r: [[ItemType.GOLD_HELMET, 1], [ItemType.CRAB_LOOT, 10], [ItemType.CRAB_STICK, 10], [ItemType.CORD, 10]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.DIAMOND_PROTECTION] = {
            r: [[ItemType.FLAME, 5], [ItemType.DIAMOND, 50], [ItemType.DIAMOND_CORD, 5]],
            f: 1,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.AMETHYST_PROTECTION] = {
            r: [[ItemType.DIAMOND_PROTECTION, 1], [ItemType.FLAME, 10], [ItemType.AMETHYST, 50]],
            f: 1,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.REIDITE_PROTECTION] = {
            r: [[ItemType.AMETHYST_PROTECTION, 1], [ItemType.FLAME, 15], [ItemType.AMETHYST, 50], [ItemType.REIDITE, 50]],
            f: 1,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.SUPER_DIVING_SUIT] = {
            r: [[ItemType.DIVING_MASK, 1], [ItemType.GOLD, 80], [ItemType.KRAKEN_FUR, 1], [ItemType.AMETHYST, 20]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.DIVING_MASK] = {
            r: [[ItemType.PIRANHA_SCALES, 2], [ItemType.DIAMOND, 40], [ItemType.CORD, 4]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.STONE_HAMMER] = {
            r: [[ItemType.WOOD, 90], [ItemType.STONE, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.TOOLS
        };
        l[ItemType.GOLD_HAMMER] = {
            r: [[ItemType.WOOD, 160], [ItemType.STONE, 120], [ItemType.GOLD, 80], [ItemType.STONE_HAMMER, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 15,
            t: CATEGORY.TOOLS
        };
        l[ItemType.DIAMOND_HAMMER] = {
            r: [[ItemType.DIAMOND, 80], [ItemType.STONE, 200], [ItemType.GOLD, 150], [ItemType.GOLD_HAMMER, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.TOOLS
        };
        l[ItemType.AMETHYST_HAMMER] = {
            r: [[ItemType.DIAMOND, 160], [ItemType.AMETHYST, 60], [ItemType.GOLD, 250], [ItemType.DIAMOND_HAMMER, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.TOOLS
        };
        l[ItemType.REIDITE_HAMMER] = {
            r: [[ItemType.AMETHYST, 160], [ItemType.REIDITE, 60], [ItemType.DIAMOND, 250], [ItemType.AMETHYST_HAMMER, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.TOOLS
        };
        l[ItemType.SUPER_HAMMER] = {
            r: [[ItemType.REIDITE_HAMMER, 1], [ItemType.BOTTLE_FULL, 1], [ItemType.KRAKEN_FUR, 1], [ItemType.PIRANHA_SCALES, 10], [ItemType.AMETHYST, 20]],
            f: 1,
            e: 0,
            w: 1,
            o: 0,
            time: 120,
            t: CATEGORY.TOOLS
        };
        l[ItemType.CROWN_GREEN] = {
            r: [[ItemType.GEM_GREEN, 1], [ItemType.GOLD, 200]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.CROWN_ORANGE] = {
            r: [[ItemType.GEM_ORANGE, 1], [ItemType.GOLD, 200]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.CROWN_BLUE] = {
            r: [[ItemType.GEM_BLUE, 1], [ItemType.GOLD, 200], [ItemType.DRAGON_HEART, 1]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.FIRE] = {
            r: [[ItemType.WOOD, 25], [ItemType.STONE, 5]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.UTILS
        };
        l[ItemType.BIG_FIRE] = {
            r: [[ItemType.FIRE, 1], [ItemType.WOOD, 35], [ItemType.STONE, 10]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.UTILS
        };
        l[ItemType.FURNACE] = {
            r: [[ItemType.WOOD, 150], [ItemType.STONE, 50], [ItemType.GOLD, 15]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.UTILS
        };
        l[ItemType.WORKBENCH] = {
            r: [[ItemType.WOOD, 20], [ItemType.STONE, 10]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 6,
            t: CATEGORY.UTILS
        };
        l[ItemType.PAPER] = {
            r: [[ItemType.WOOD, 20]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 3,
            t: CATEGORY.UTILS
        };
        l[ItemType.STONE_EXTRACTOR] = {
            r: [[ItemType.WOOD, 50], [ItemType.STONE, 100]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.UTILS
        };
        l[ItemType.GOLD_EXTRACTOR] = {
            r: [[ItemType.STONE, 60], [ItemType.GOLD, 120]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.UTILS
        };
        l[ItemType.DIAMOND_EXTRACTOR] = {
            r: [[ItemType.GOLD, 70], [ItemType.DIAMOND, 140]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.UTILS
        };
        l[ItemType.AMETHYST_EXTRACTOR] = {
            r: [[ItemType.DIAMOND, 80], [ItemType.AMETHYST, 160]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.UTILS
        };
        l[ItemType.REIDITE_EXTRACTOR] = {
            r: [[ItemType.AMETHYST, 90], [ItemType.REIDITE, 180]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 90,
            t: CATEGORY.UTILS
        };
        l[ItemType.EARMUFFS] = {
            r: [[ItemType.RABBIT_FUR, 1], [ItemType.CORD, 2]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.COAT] = {
            r: [[ItemType.EARMUFFS, 1], [ItemType.WOLF_FUR, 5], [ItemType.CORD, 4]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 12,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.CAP_SCARF] = {
            r: [[ItemType.COAT, 1], [ItemType.WINTER_FUR, 5], [ItemType.DIAMOND_CORD, 4]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 30,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.FUR_HAT] = {
            r: [[ItemType.CAP_SCARF, 1], [ItemType.WINTER_FUR, 5], [ItemType.MAMMOTH_FUR, 10], [ItemType.DIAMOND_CORD, 4]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 50,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.HOOD] = {
            r: [[ItemType.WOLF_FUR, 10], [ItemType.RABBIT_FUR, 5], [ItemType.CORD, 6]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.PEASANT] = {
            r: [[ItemType.RABBIT_FUR, 3], [ItemType.CORD, 2]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.WINTER_HOOD] = {
            r: [[ItemType.HOOD, 1], [ItemType.WINTER_HOOD_FUR, 1], [ItemType.WINTER_FUR, 15], [ItemType.DIAMOND_CORD, 5], [ItemType.PENGUIN_FEATHER, 8]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.WINTER_PEASANT] = {
            r: [[ItemType.PEASANT, 1], [ItemType.WINTER_PEASANT_FUR, 1], [ItemType.WINTER_FUR, 10], [ItemType.DIAMOND_CORD, 5], [ItemType.PENGUIN_FEATHER, 8]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.PILOT_HAT] = {
            r: [[ItemType.PILOT_GLASSES, 1], [ItemType.HAWK_FEATHER, 8], [ItemType.VULTURE_FEATHER, 8], [ItemType.PENGUIN_FEATHER, 8], [ItemType.CORD, 6]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.TURBAN1] = {
            r: [[ItemType.CORD, 4], [ItemType.BOAR_FUR, 2]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 15,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.TURBAN2] = {
            r: [[ItemType.TURBAN1, 1], [ItemType.CORD, 6], [ItemType.BOAR_FUR, 4], [ItemType.VULTURE_FEATHER, 12], [ItemType.PENGUIN_FEATHER, 4]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 150,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.BOOK] = {
            r: [[ItemType.PAPER, 4], [ItemType.CORD, 4], [ItemType.WOLF_FUR, 4]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 15,
            t: CATEGORY.TOOLS
        };
        l[ItemType.BAG] = {
            r: [[ItemType.CORD, 6], [ItemType.WOLF_FUR, 5]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 15,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.EXPLORER_HAT] = {
            r: [[ItemType.PAPER, 1], [ItemType.RABBIT_FUR, 1], [ItemType.CORD, 2]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.PIRATE_HAT] = {
            r: [[ItemType.PAPER, 5], [ItemType.PENGUIN_FEATHER, 20], [ItemType.DIAMOND_CORD, 5], [ItemType.RABBIT_FUR, 5]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 30,
            t: CATEGORY.CLOTHES
        };
        l[ItemType.PITCHFORK] = {
            r: [[ItemType.WOOD, 100], [ItemType.STONE, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.TOOLS
        };
        l[ItemType.GOLD_PITCHFORK] = {
            r: [[ItemType.PITCHFORK, 1], [ItemType.PITCHFORK_PART, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.TOOLS
        };
        l[ItemType.YUSUKEDAO_ITEM1] = {
            r: [[ItemType.STONE_SWORD, 100]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 60,
            t: CATEGORY.WEAPONS
        };
        l[ItemType.YUSUKEDAO_ITEM2] = {
            r: [[ItemType.STONE_SWORD, 200]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 60,
            t: CATEGORY.TOOLS
        };
        l[ItemType.WRENCH] = {
            r: [[ItemType.STONE, 70]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.TOOLS
        };
        l[ItemType.GOLD_WRENCH] = {
            r: [[ItemType.FLOWER_HAT, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.TOOLS
        };
        l[ItemType.MACHETE] = {
            r: [[ItemType.STONE, 70], [ItemType.WOOD, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.TOOLS
        };
        l[ItemType.WATERING_CAN_EMPTY] = {
            r: [[ItemType.WOOD, 40]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 8,
            t: CATEGORY.TOOLS
        };
        l[ItemType.WATERING_CAN_FULL] = {
            r: [[ItemType.WATERING_CAN_EMPTY, 1]],
            f: 0,
            e: 0,
            w: 0,
            o: 1,
            time: 5,
            t: CATEGORY.TOOLS
        };
        l[ItemType.BRIDGE] = {
            r: [[ItemType.WOOD, 15]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.UTILS
        };
        l[ItemType.TOWER] = {
            r: [[ItemType.WOOD, 120]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 15,
            t: CATEGORY.UTILS
        };
        l[ItemType.SADDLE] = {
            r: [[ItemType.CORD, 10], [ItemType.WOLF_FUR, 6], [ItemType.RABBIT_FUR, 4], [ItemType.SAND, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.UTILS
        };
        l[ItemType.WINDMILL] = {
            r: [[ItemType.WOOD, 60], [ItemType.STONE, 20], [ItemType.CORD, 2]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.UTILS
        };
        l[ItemType.PLOT] = {
            r: [[ItemType.WOOD, 20], [ItemType.GROUND, 15]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.UTILS
        };
        l[ItemType.BREAD_OVEN] = {
            r: [[ItemType.WOOD, 40], [ItemType.STONE, 40]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.UTILS
        };
        l[ItemType.DIAMOND_CORD] = {
            r: [[ItemType.DIAMOND, 1], [ItemType.CORD, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 3,
            t: CATEGORY.UTILS
        };
        l[ItemType.RESURRECTION] = {
            r: [[ItemType.DIAMOND, 40], [ItemType.STONE, 45]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.UTILS
        };
        l[ItemType.EMERALD_MACHINE] = {
            r: [[ItemType.RESURRECTION, 1], [ItemType.EMERALD, 40], [ItemType.SANDWORM_JUICE, 1]],
            f: 1,
            e: 0,
            w: 1,
            o: 1,
            time: 200,
            t: CATEGORY.UTILS
        };
        l[ItemType.LOCK_PICK] = {
            r: [[ItemType.GOLD, 250]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 60,
            t: CATEGORY.UTILS
        };
        l[ItemType.LOCK] = {
            r: [[ItemType.GOLD, 10]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.UTILS
        };
        l[ItemType.TOTEM] = {
            r: [[ItemType.WOOD, 50]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.UTILS
        };
        l[ItemType.CHEST] = {
            r: [[ItemType.WOOD, 25], [ItemType.GOLD, 2]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.UTILS
        };
        l[ItemType.WELL] = {
            r: [[ItemType.STONE, 100], [ItemType.GROUND, 30]],
            f: 1,
            e: 0,
            w: 1,
            o: 0,
            time: 10,
            t: CATEGORY.UTILS
        };
        l[ItemType.BANDAGE] = {
            r: [[ItemType.CORD, 2]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.UTILS
        };
        l[ItemType.ROOF] = {
            r: [[ItemType.WOOD, 30]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.UTILS
        };
        l[ItemType.BED] = {
            r: [[ItemType.WOOD, 100], [ItemType.STONE, 50], [ItemType.RABBIT_FUR, 5], [ItemType.WOLF_FUR, 5], [ItemType.CORD, 6]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.UTILS
        };
        l[ItemType.BOAT] = {
            r: [[ItemType.WOOD, 250], [ItemType.DIAMOND_CORD, 10], [ItemType.WINTER_FUR, 2], [ItemType.PIRANHA_SCALES, 2]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 50,
            t: CATEGORY.UTILS
        };
        l[ItemType.SLED] = {
            r: [[ItemType.WOOD, 250], [ItemType.CORD, 10], [ItemType.WINTER_FUR, 2], [ItemType.PENGUIN_FEATHER, 8]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 50,
            t: CATEGORY.UTILS
        };
        l[ItemType.PLANE] = {
            r: [[ItemType.WOOD, 250], [ItemType.CORD, 10], [ItemType.PAPER, 10], [ItemType.HAWK_FEATHER, 8]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 50,
            t: CATEGORY.UTILS
        };
        l[ItemType.BERRY_SEED] = {
            r: [[ItemType.BERRY, 3]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.WHEAT_SEED] = {
            r: [[ItemType.WHEAT, 3]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.PUMPKIN_SEED] = {
            r: [[ItemType.PUMPKIN, 8]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.CARROT_SEED] = {
            r: [[ItemType.CARROT, 8]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.TOMATO_SEED] = {
            r: [[ItemType.TOMATO, 8]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.THORNBUSH_SEED] = {
            r: [[ItemType.THORNBUSH, 8]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.GARLIC_SEED] = {
            r: [[ItemType.GARLIC, 8]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.WATERMELON_SEED] = {
            r: [[ItemType.WATERMELON, 16]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.ALOE_VERA_SEED] = {
            r: [[ItemType.ALOE_VERA, 16]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.BREAD] = {
            r: [[ItemType.FLOUR, 3]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 3,
            t: CATEGORY.FOODS
        };
        l[ItemType.SANDWICH] = {
            r: [[ItemType.BREAD, 1], [ItemType.COOKED_MEAT, 1]],
            f: 0,
            e: 0,
            w: 0,
            o: 0,
            time: 3,
            t: CATEGORY.FOODS
        };
        l[ItemType.BOTTLE_FULL] = {
            r: [[ItemType.BOTTLE_EMPTY, 1]],
            f: 0,
            e: 1,
            w: 0,
            o: 0,
            time: 3,
            t: CATEGORY.FOODS
        };
        l[ItemType.BOTTLE_FULL_2] = {
            r: [[ItemType.BOTTLE_EMPTY, 1], [ItemType.ICE, 20]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 3,
            t: CATEGORY.FOODS
        };
        l[ItemType.BOTTLE_FULL_3] = {
            r: [[ItemType.BOTTLE_EMPTY, 1]],
            f: 0,
            e: 0,
            w: 0,
            o: 1,
            time: 3,
            t: CATEGORY.FOODS
        };
        l[ItemType.BOTTLE_EMPTY] = {
            r: [[ItemType.SAND, 25]],
            f: 1,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.COOKIE] = {
            r: [[ItemType.FLOUR, 3], [ItemType.BERRY, 1]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 3,
            t: CATEGORY.FOODS
        };
        l[ItemType.CAKE] = {
            r: [[ItemType.FLOUR, 5], [ItemType.BERRY, 2], [ItemType.ICE, 2]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.FISH_COOKED] = {
            r: [[ItemType.FISH, 1]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 3,
            t: CATEGORY.FOODS
        };
        l[ItemType.COOKED_MEAT] = {
            r: [[ItemType.MEAT, 1]],
            f: 1,
            e: 0,
            w: 0,
            o: 0,
            time: 5,
            t: CATEGORY.FOODS
        };
        l[ItemType.BUCKET_FULL] = {
            r: [[ItemType.BUCKET_EMPTY, 1]],
            f: 0,
            e: 0,
            w: 0,
            o: 1,
            time: 5,
            t: CATEGORY.TOOLS
        };
        l[ItemType.BUCKET_EMPTY] = {
            r: [[ItemType.WOOD, 20], [ItemType.CORD, 1]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.TOOLS
        };
        l[ItemType.WOOD_WALL] = {
            r: [[ItemType.WOOD, 20]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.BASES
        };
        l[ItemType.STONE_WALL] = {
            r: [[ItemType.WOOD_WALL, 1], [ItemType.STONE, 17]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.BASES
        };
        l[ItemType.GOLD_WALL] = {
            r: [[ItemType.STONE_WALL, 1], [ItemType.GOLD, 14]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.BASES
        };
        l[ItemType.DIAMOND_WALL] = {
            r: [[ItemType.GOLD_WALL, 1], [ItemType.DIAMOND, 11]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.BASES
        };
        l[ItemType.AMETHYST_WALL] = {
            r: [[ItemType.DIAMOND_WALL, 1], [ItemType.AMETHYST, 8]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.BASES
        };
        l[ItemType.REIDITE_WALL] = {
            r: [[ItemType.AMETHYST_WALL, 1], [ItemType.REIDITE, 5]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 5,
            t: CATEGORY.BASES
        };
        l[ItemType.WOOD_SPIKE] = {
            r: [[ItemType.WOOD_WALL, 1], [ItemType.WOOD, 40], [ItemType.STONE, 30]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.STONE_SPIKE] = {
            r: [[ItemType.STONE_WALL, 1], [ItemType.STONE, 70]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.GOLD_SPIKE] = {
            r: [[ItemType.GOLD_WALL, 1], [ItemType.GOLD, 40], [ItemType.STONE, 30]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.DIAMOND_SPIKE] = {
            r: [[ItemType.DIAMOND_WALL, 1], [ItemType.DIAMOND, 40], [ItemType.STONE, 30]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.AMETHYST_SPIKE] = {
            r: [[ItemType.AMETHYST_WALL, 1], [ItemType.AMETHYST, 40], [ItemType.STONE, 30]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.REIDITE_SPIKE] = {
            r: [[ItemType.REIDITE_WALL, 1], [ItemType.REIDITE, 40], [ItemType.GOLD, 30]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.WOOD_DOOR] = {
            r: [[ItemType.WOOD, 30]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 8,
            t: CATEGORY.BASES
        };
        l[ItemType.STONE_DOOR] = {
            r: [[ItemType.WOOD_DOOR, 1], [ItemType.STONE, 27]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 8,
            t: CATEGORY.BASES
        };
        l[ItemType.GOLD_DOOR] = {
            r: [[ItemType.STONE_DOOR, 1], [ItemType.GOLD, 24]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 8,
            t: CATEGORY.BASES
        };
        l[ItemType.DIAMOND_DOOR] = {
            r: [[ItemType.GOLD_DOOR, 1], [ItemType.DIAMOND, 21]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 8,
            t: CATEGORY.BASES
        };
        l[ItemType.AMETHYST_DOOR] = {
            r: [[ItemType.DIAMOND_DOOR, 1], [ItemType.AMETHYST, 18]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 8,
            t: CATEGORY.BASES
        };
        l[ItemType.REIDITE_DOOR] = {
            r: [[ItemType.AMETHYST_DOOR, 1], [ItemType.REIDITE, 15]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 8,
            t: CATEGORY.BASES
        };
        l[ItemType.WOOD_DOOR_SPIKE] = {
            r: [[ItemType.WOOD_DOOR, 1], [ItemType.WOOD, 80], [ItemType.STONE, 60]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.STONE_DOOR_SPIKE] = {
            r: [[ItemType.STONE_DOOR, 1], [ItemType.STONE, 140]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.GOLD_DOOR_SPIKE] = {
            r: [[ItemType.GOLD_DOOR, 1], [ItemType.GOLD, 80], [ItemType.STONE, 60]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.DIAMOND_DOOR_SPIKE] = {
            r: [[ItemType.DIAMOND_DOOR, 1], [ItemType.DIAMOND, 80], [ItemType.STONE, 60]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.AMETHYST_DOOR_SPIKE] = {
            r: [[ItemType.AMETHYST_DOOR, 1], [ItemType.AMETHYST, 80], [ItemType.STONE, 60]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        l[ItemType.REIDITE_DOOR_SPIKE] = {
            r: [[ItemType.REIDITE_DOOR, 1], [ItemType.REIDITE, 80], [ItemType.GOLD, 60]],
            f: 0,
            e: 0,
            w: 1,
            o: 0,
            time: 20,
            t: CATEGORY.BASES
        };
        let S = {
            LOGO: "logo",
            BIGDAY: "mapday",
            BIGNIGHT: "mapnight",
            BIGZDAY: "bigzday",
            BIGZNIGHT: "bigznight",
            MAPDAY_RIVER: "bigday-river1",
            MAPDAY_BERRY: "bigday-berry",
            MAPDAY_STONE1: "bigday-stone1",
            MAPDAY_STONE2: "bigday-stone2",
            MAPDAY_GOLD1: "bigday-gold1",
            MAPDAY_GOLD2: "bigday-gold2",
            MAPDAY_EMERALD1: "bigday-emerald1",
            MAPDAY_EMERALD2: "bigday-emerald2",
            MAPDAY_AMETHYST: "bigday-amethyst",
            MAPDAY_BEAR: "bigday-bear",
            MAPDAY_CAVE: "bigday-cave",
            MAPDAY_DIAMOND: "bigday-diamond",
            MAPDAY_ISLAND: "bigday-island",
            MAPDAY_REIDITE: "bigday-reidite",
            MAPDAY_SPIDER: "bigday-spider",
            MAPDAY_WOLF: "bigday-wolf",
            MAPDAY_FIR_TREE: "bigday-fir-tree",
            MAPDAY_FOX: "bigday-fox",
            MAPDAY_KRAKEN: "bigday-kraken",
            MAPDAY_PIRANHA: "bigday-piranha",
            MAPDAY_CACTUS: "bigday-cactus",
            MAPDAY_MAGMA: "bigday-magma",
            MAPNIGHT_RIVER: "bigday-river1",
            MAPNIGHT_BERRY: "bignight-berry",
            MAPNIGHT_STONE1: "bignight-stone1",
            MAPNIGHT_STONE2: "bignight-stone2",
            MAPNIGHT_GOLD1: "bignight-gold1",
            MAPNIGHT_GOLD2: "bignight-gold2",
            MAPNIGHT_EMERALD1: "bignight-emerald1",
            MAPNIGHT_EMERALD2: "bignight-emerald2",
            MAPNIGHT_AMETHYST: "bignight-amethyst",
            MAPNIGHT_BEAR: "bignight-bear",
            MAPNIGHT_CAVE: "bignight-cave",
            MAPNIGHT_DIAMOND: "bignight-diamond",
            MAPNIGHT_ISLAND: "bignight-island",
            MAPNIGHT_REIDITE: "bignight-reidite",
            MAPNIGHT_SPIDER: "bignight-spider",
            MAPNIGHT_WOLF: "bignight-wolf",
            MAPNIGHT_FIR_TREE: "bignight-fir-tree",
            MAPNIGHT_FOX: "bignight-fox",
            MAPNIGHT_KRAKEN: "bignight-kraken",
            MAPNIGHT_PIRANHA: "bignight-piranha",
            MAPNIGHT_CACTUS: "bignight-cactus",
            MAPNIGHT_MAGMA: "bignight-magma",
            MAPDAY_DESERT: "bigday-desert",
            MAPDAY_WINTER: "bigday-winter",
            MAPDAY_LAVA: "bigday-lava",
            MAPDAY_FOREST: "bigday-forest",
            MAPNIGHT_DESERT: "bignight-desert",
            MAPNIGHT_WINTER: "bignight-winter",
            MAPNIGHT_LAVA: "bignight-lava",
            MAPNIGHT_FOREST: "bignight-forest",
            RIVER_WAVED: "day-river-wave",
            RIVER_WAVEN: "night-river-wave",
            FOG0D: "day-fog0",
            FOG1D: "day-fog1",
            FOG2D: "day-fog2",
            FOG0N: "night-fog0",
            FOG1N: "night-fog1",
            FOG2N: "night-fog2",
            FOD0D: "day-fogdesert0",
            FOD1D: "day-fogdesert1",
            FOD2D: "day-fogdesert2",
            FOD0N: "night-fogdesert0",
            FOD1N: "night-fogdesert1",
            FOD2N: "night-fogdesert2",
            MARKER0D: "day-cross-server",
            MARKER1D: "day-here-server",
            MARKER2D: "day-finish-server",
            MARKER3D: "day-item-server",
            MARKER0N: "night-cross-server",
            MARKER1N: "night-here-server",
            MARKER2N: "night-finish-server",
            MARKER3N: "night-item-server",
            REIDITE0D: "day-reidite0",
            REIDITE0N: "night-reidite0",
            REIDITE1D: "day-reidite1",
            REIDITE1N: "night-reidite1",
            REIDITE2D: "day-reidite2",
            REIDITE2N: "night-reidite2",
            MAGMA1D: "day-lava1",
            MAGMA1N: "night-lava1",
            MAGMA2D: "day-lava2",
            MAGMA2N: "night-lava2",
            MAGMA3D: "day-lava3",
            MAGMA3N: "night-lava3",
            MAGMA4D: "day-lava4",
            MAGMA4N: "night-lava4",
            MAGMA5D: "day-lava5",
            MAGMA5N: "night-lava5",
            MAGMA6D: "day-lava6",
            MAGMA6N: "night-lava6",
            LAVA_GROUND1D: "day-lava-ground1",
            LAVA_GROUND1N: "night-lava-ground1",
            LAVA_GROUND2D: "day-lava-ground2",
            LAVA_GROUND2N: "night-lava-ground2",
            LAVA_GROUND3D: "day-lava-ground3",
            LAVA_GROUND3N: "night-lava-ground3",
            LAVA_GROUND4D: "day-lava-ground4",
            LAVA_GROUND4N: "night-lava-ground4",
            LAVA_GROUND5D: "day-lava-ground5",
            LAVA_GROUND5N: "night-lava-ground5",
            LAVA_GROUND6D: "day-lava-ground6",
            LAVA_GROUND6N: "night-lava-ground6",
            FIRE_MOBD: "day-fire-mob",
            FIRE_MOBN: "night-fire-mob",
            FIRE_MOB_HURT: "hurt-fire-mob",
            DIAMOND_PROTECTIOND: "day-diamond-protection",
            DIAMOND_PROTECTIONN: "night-diamond-protection",
            HAND_DIAMOND_PROTECTIOND: "day-hand-diamond-protection",
            HAND_DIAMOND_PROTECTIONN: "night-hand-diamond-protection",
            INV_DIAMOND_PROTECTION_OUT: "inv-diamond-protection-out",
            INV_DIAMOND_PROTECTION_IN: "inv-diamond-protection-in",
            INV_DIAMOND_PROTECTION_CLICK: "inv-diamond-protection-click",
            AMETHYST_PROTECTIOND: "day-amethyst-protection",
            AMETHYST_PROTECTIONN: "night-amethyst-protection",
            HAND_AMETHYST_PROTECTIOND: "day-hand-amethyst-protection",
            HAND_AMETHYST_PROTECTIONN: "night-hand-amethyst-protection",
            INV_AMETHYST_PROTECTION_OUT: "inv-amethyst-protection-out",
            INV_AMETHYST_PROTECTION_IN: "inv-amethyst-protection-in",
            INV_AMETHYST_PROTECTION_CLICK: "inv-amethyst-protection-click",
            REIDITE_SWORDD: "day-reidite-sword",
            REIDITE_SWORDN: "night-reidite-sword",
            INV_REIDITE_SWORD_OUT: "inv-reidite-sword-out",
            INV_REIDITE_SWORD_IN: "inv-reidite-sword-in",
            INV_REIDITE_SWORD_CLICK: "inv-reidite-sword-click",
            INV_REIDITE_OUT: "inv-reidite-out",
            INV_REIDITE_IN: "inv-reidite-in",
            INV_REIDITE_CLICK: "inv-reidite-click",
            INV_FLAME_OUT: "inv-flame-out",
            INV_FLAME_IN: "inv-flame-in",
            INV_FLAME_CLICK: "inv-flame-click",
            LAVA_BUBLE0D: "day-magma-buble0",
            LAVA_BUBLE0N: "night-magma-buble0",
            LAVA_BUBLE1D: "day-magma-buble1",
            LAVA_BUBLE1N: "night-magma-buble1",
            LAVA_BUBLE2D: "day-magma-buble2",
            LAVA_BUBLE2N: "night-magma-buble2",
            LAVA_DRAGOND: "day-lava-dragon",
            LAVA_DRAGONN: "night-lava-dragon",
            LAVA_FIRE_DRAGOND: "day-fire-dragon",
            LAVA_FIRE_DRAGONN: "night-fire-dragon",
            HURT_LAVA_DRAGON: "hurt-lava-dragon",
            LAVA_WING_LEFTD: "day-lava-wing-left",
            LAVA_WING_LEFTN: "night-lava-wing-left",
            LAVA_WING_RIGHTD: "day-lava-wing-right",
            LAVA_WING_RIGHTN: "night-lava-wing-right",
            HURT_LAVA_WING_LEFT: "hurt-lava-wing-left",
            HURT_LAVA_WING_RIGHT: "hurt-lava-wing-right",
            REIDITE_SPEARD: "day-reidite-spear",
            REIDITE_SPEARN: "night-reidite-spear",
            INV_REIDITE_SPEAR_OUT: "inv-reidite-spear-out",
            INV_REIDITE_SPEAR_IN: "inv-reidite-spear-in",
            INV_REIDITE_SPEAR_CLICK: "inv-reidite-spear-click",
            REIDITE_HELMETD: "day-reidite-helmet",
            REIDITE_HELMETN: "night-reidite-helmet",
            INV_REIDITE_HELMET_OUT: "inv-reidite-helmet-out",
            INV_REIDITE_HELMET_IN: "inv-reidite-helmet-in",
            INV_REIDITE_HELMET_CLICK: "inv-reidite-helmet-click",
            HAND_REIDITE_PROTECTIOND: "day-hand-reidite-protection",
            HAND_REIDITE_PROTECTIONN: "night-hand-reidite-protection",
            REIDITE_PROTECTIOND: "day-reidite-protection",
            REIDITE_PROTECTIONN: "night-reidite-protection",
            INV_REIDITE_PROTECTION_OUT: "inv-reidite-protection-out",
            INV_REIDITE_PROTECTION_IN: "inv-reidite-protection-in",
            INV_REIDITE_PROTECTION_CLICK: "inv-reidite-protection-click",
            LAVA_SWORDD: "day-lava-dragon-sword",
            LAVA_SWORDN: "night-lava-dragon-sword",
            INV_LAVA_SWORD_OUT: "inv-lava-dragon-sword-out",
            INV_LAVA_SWORD_IN: "inv-lava-dragon-sword-in",
            INV_LAVA_SWORD_CLICK: "inv-lava-dragon-sword-click",
            LAVA_SPEARD: "day-lava-spear",
            LAVA_SPEARN: "night-lava-spear",
            INV_LAVA_SPEAR_OUT: "inv-lava-spear-out",
            INV_LAVA_SPEAR_IN: "inv-lava-spear-in",
            INV_LAVA_SPEAR_CLICK: "inv-lava-spear-click",
            LAVA_HELMETD: "day-lava-helmet",
            LAVA_HELMETN: "night-lava-helmet",
            INV_LAVA_HELMET_OUT: "inv-lava-helmet-out",
            INV_LAVA_HELMET_IN: "inv-lava-helmet-in",
            INV_LAVA_HELMET_CLICK: "inv-lava-helmet-click",
            WITCHD: "day-witch-hat",
            WITCHN: "night-witch-hat",
            INV_WITCH_OUT: "inv-witch-hat-out",
            INV_WITCH_IN: "inv-witch-hat-in",
            INV_WITCH_CLICK: "inv-witch-hat-click",
            NIMBUSD: "day-nimbus2000",
            NIMBUSN: "night-nimbus2000",
            INV_NIMBUS_OUT: "inv-nimbus2000-out",
            INV_NIMBUS_IN: "inv-nimbus2000-in",
            INV_NIMBUS_CLICK: "inv-nimbus2000-click",
            ACCESSORY1D: "day-accessory1-pacques",
            ACCESSORY1N: "night-accessory1-pacques",
            ACCESSORY2D: "day-accessory2-pacques",
            ACCESSORY2N: "night-accessory2-pacques",
            ACCESSORY3D: "day-accessory3-pacques",
            ACCESSORY3N: "night-accessory3-pacques",
            ACCESSORY5D: "day-accessory5-pacques",
            ACCESSORY5N: "night-accessory5-pacques",
            ACCESSORY6D: "day-accessory6-pacques",
            ACCESSORY6N: "night-accessory6-pacques",
            ACCESSORY7D: "day-accessory7-pacques",
            ACCESSORY7N: "night-accessory7-pacques",
            ACCESSORY8D: "day-accessory8-pacques",
            ACCESSORY8N: "night-accessory8-pacques",
            BAG_EASTERD: "day-bag-pacques",
            BAG_EASTERN: "night-bag-pacques",
            CARROTD: "day-carrot",
            CARROTN: "night-carrot",
            CARROT_DRIEDD: "day-carrot-dried",
            CARROT_DRIEDN: "night-carrot-dried",
            TOMATO_MINID: "day-tomato-herb",
            TOMATO_MININ: "night-tomato-herb",
            TOMATO_MINI_DRIEDD: "day-tomato-herb-dried",
            TOMATO_MINI_DRIEDN: "night-tomato-herb-dried",
            TOMATOD: "day-tomato",
            TOMATON: "night-tomato",
            INV_CARROT_OUT: "inv-carrot-out",
            INV_CARROT_IN: "inv-carrot-in",
            INV_CARROT_CLICK: "inv-carrot-click",
            INV_TOMATO_OUT: "inv-tomato-out",
            INV_TOMATO_IN: "inv-tomato-in",
            INV_TOMATO_CLICK: "inv-tomato-click",
            PLAYER0D: "day-player0",
            PLAYER0N: "night-player0",
            PLAYER1D: "day-player1",
            PLAYER1N: "night-player1",
            PLAYER2D: "day-player2",
            PLAYER2N: "night-player22",
            PLAYER3D: "day-player3",
            PLAYER3N: "night-player33",
            PLAYER4D: "day-player4",
            PLAYER4N: "night-player4",
            PLAYER5D: "day-player5",
            PLAYER5N: "night-player5",
            PLAYER6D: "day-player6",
            PLAYER6N: "night-player6",
            PLAYER7D: "day-player7",
            PLAYER7N: "night-player7",
            PLAYER8D: "day-player8",
            PLAYER8N: "night-player8",
            PLAYER9D: "day-player9",
            PLAYER9N: "night-player9",
            PLAYER10D: "day-player10",
            PLAYER10N: "night-player10",
            PLAYER11D: "day-player11",
            PLAYER11N: "night-player11",
            PLAYER12D: "day-player12",
            PLAYER12N: "night-player12",
            PLAYER13D: "day-player13",
            PLAYER13N: "night-player13",
            PLAYER14D: "day-player14",
            PLAYER14N: "night-player14",
            PLAYER15D: "day-player15",
            PLAYER15N: "night-player15",
            PLAYER16D: "day-player16",
            PLAYER16N: "night-player16",
            PLAYER17D: "day-player17",
            PLAYER17N: "night-player17",
            PLAYER18D: "day-player18",
            PLAYER18N: "night-player18",
            PLAYER19D: "day-player19",
            PLAYER19N: "night-player19",
            HAND0D: "day-hand-player0",
            HAND0N: "night-hand-player0",
            HAND1D: "day-hand-player1",
            HAND1N: "night-hand-player1",
            HAND2D: "day-hand-player2",
            HAND2N: "night-hand-player22",
            HAND3D: "day-hand-player3",
            HAND3N: "night-hand-player33",
            HAND4D: "day-hand-player4",
            HAND4N: "night-hand-player4",
            HAND5D: "day-hand-player5",
            HAND5N: "night-hand-player5",
            HAND6D: "day-hand-player6",
            HAND6N: "night-hand-player6",
            HAND7D: "day-hand-player7",
            HAND7N: "night-hand-player7",
            HAND8D: "day-hand-player8",
            HAND8N: "night-hand-player8",
            HAND9D: "day-hand-player9",
            HAND9N: "night-hand-player9",
            HAND10D: "day-hand-player10",
            HAND10N: "night-hand-player10",
            HAND11D: "day-hand-player11",
            HAND11N: "night-hand-player11",
            HAND12D: "day-hand-player12",
            HAND12N: "night-hand-player12",
            HAND13D: "day-hand-player13",
            HAND13N: "night-hand-player13",
            HAND14D: "day-hand-player14",
            HAND14N: "night-hand-player14",
            HAND15D: "day-hand-player15",
            HAND15N: "night-hand-player15",
            HAND16D: "day-hand-player16",
            HAND16N: "night-hand-player16",
            HAND17D: "day-hand-player17",
            HAND17N: "night-hand-player17",
            HAND18D: "day-hand-player18",
            HAND18N: "night-hand-player18",
            HAND19D: "day-hand-player19",
            HAND19N: "night-hand-player19",
            ACCESSORY4D: "day-accessory4",
            ACCESSORY4N: "night-accessory4",
            ACCESSORY9D: "day-accessory9",
            ACCESSORY9N: "night-accessory9",
            ACCESSORY10D: "day-accessory10",
            ACCESSORY10N: "night-accessory10",
            ACCESSORY11D: "day-accessory11",
            ACCESSORY11N: "night-accessory11",
            ACCESSORY12D: "day-accessory12",
            ACCESSORY12N: "night-accessory12",
            BAGD: "day-bag",
            BAGN: "night-bag",
            INV_BAG_OUT: "inv-bag-out",
            INV_BAG_IN: "inv-bag-in",
            INV_BAG_CLICK: "inv-bag-click",
            PITCHFORKD: "day-pitchfork",
            PITCHFORKN: "night-pitchfork",
            INV_PITCHFORK_OUT: "inv-pitchfork-out",
            INV_PITCHFORK_IN: "inv-pitchfork-in",
            INV_PITCHFORK_CLICK: "inv-pitchfork-click",
            INV_WOOD_DOOR_SPIKE_OUT: "inv-wood-spike-door-out",
            INV_WOOD_DOOR_SPIKE_IN: "inv-wood-spike-door-in",
            INV_WOOD_DOOR_SPIKE_CLICK: "inv-wood-spike-door-click",
            INV_STONE_DOOR_SPIKE_OUT: "inv-stone-spike-door-out",
            INV_STONE_DOOR_SPIKE_IN: "inv-stone-spike-door-in",
            INV_STONE_DOOR_SPIKE_CLICK: "inv-stone-spike-door-click",
            INV_GOLD_DOOR_SPIKE_OUT: "inv-gold-spike-door-out",
            INV_GOLD_DOOR_SPIKE_IN: "inv-gold-spike-door-in",
            INV_GOLD_DOOR_SPIKE_CLICK: "inv-gold-spike-door-click",
            INV_DIAMOND_DOOR_SPIKE_OUT: "inv-diamond-spike-door-out",
            INV_DIAMOND_DOOR_SPIKE_IN: "inv-diamond-spike-door-in",
            INV_DIAMOND_DOOR_SPIKE_CLICK: "inv-diamond-spike-door-click",
            INV_AMETHYST_DOOR_SPIKE_OUT: "inv-amethyst-spike-door-out",
            INV_AMETHYST_DOOR_SPIKE_IN: "inv-amethyst-spike-door-in",
            INV_AMETHYST_DOOR_SPIKE_CLICK: "inv-amethyst-spike-door-click",
            WOOD_DOOR_SPIKED: "day-wood-spike-door",
            WOOD_DOOR_SPIKEN: "night-wood-spike-door",
            STONE_DOOR_SPIKED: "day-stone-spike-door",
            STONE_DOOR_SPIKEN: "night-stone-spike-door",
            GOLD_DOOR_SPIKED: "day-gold-spike-door",
            GOLD_DOOR_SPIKEN: "night-gold-spike-door",
            DIAMOND_DOOR_SPIKED: "day-diamond-spike-door",
            DIAMOND_DOOR_SPIKEN: "night-diamond-spike-door",
            AMETHYST_DOOR_SPIKED: "day-amethyst-spike-door",
            AMETHYST_DOOR_SPIKEN: "night-amethyst-spike-door",
            INV_REIDITE_DOOR_SPIKE_OUT: "inv-reidite-spike-door-out",
            INV_REIDITE_DOOR_SPIKE_IN: "inv-reidite-spike-door-in",
            INV_REIDITE_DOOR_SPIKE_CLICK: "inv-reidite-spike-door-click",
            INV_REIDITE_DOOR_OUT: "inv-reidite-door-out",
            INV_REIDITE_DOOR_IN: "inv-reidite-door-in",
            INV_REIDITE_DOOR_CLICK: "inv-reidite-door-click",
            INV_REIDITE_SPIKE_OUT: "inv-reidite-spike-out",
            INV_REIDITE_SPIKE_IN: "inv-reidite-spike-in",
            INV_REIDITE_SPIKE_CLICK: "inv-reidite-spike-click",
            INV_REIDITE_WALL_OUT: "inv-reidite-wall-out",
            INV_REIDITE_WALL_IN: "inv-reidite-wall-in",
            INV_REIDITE_WALL_CLICK: "inv-reidite-wall-click",
            REIDITE_WALLD: "day-reidite-wall",
            REIDITE_WALLN: "night-reidite-wall",
            REIDITE_DOORD: "day-reidite-door",
            REIDITE_DOORN: "night-reidite-door",
            REIDITE_SPIKED: "day-reidite-spike",
            REIDITE_SPIKEN: "night-reidite-spike",
            REIDITE_DOOR_SPIKED: "day-reidite-spike-door",
            REIDITE_DOOR_SPIKEN: "night-reidite-spike-door",
            INV_PICK_REIDITE_OUT: "inv-reidite-pickaxe-out",
            INV_PICK_REIDITE_IN: "inv-reidite-pickaxe-in",
            INV_PICK_REIDITE_CLICK: "inv-reidite-pickaxe-click",
            PICK_REIDITED: "day-reidite-pickaxe",
            PICK_REIDITEN: "night-reidite-pickaxe",
            INV_HAMMER_REIDITE_OUT: "inv-reidite-hammer-out",
            INV_HAMMER_REIDITE_IN: "inv-reidite-hammer-in",
            INV_HAMMER_REIDITE_CLICK: "inv-reidite-hammer-click",
            HAMMER_REIDITED: "day-reidite-hammer",
            HAMMER_REIDITEN: "night-reidite-hammer",
            WATERMELOND: "day-watermelon1",
            WATERMELONN: "night-watermelon1",
            DRIED_WATERMELOND: "day-watermelon-dried1",
            DRIED_WATERMELONN: "night-watermelon-dried1",
            INV_WATERMELON_OUT: "inv-watermelon-out",
            INV_WATERMELON_IN: "inv-watermelon-in",
            INV_WATERMELON_CLICK: "inv-watermelon-click",
            BOATD: "day-boat",
            BOATN: "night-boat",
            BOAT_WAVED: "day-boat-wave",
            BOAT_WAVEN: "night-boat-wave",
            INV_BOAT_OUT: "inv-boat-out",
            INV_BOAT_IN: "inv-boat-in",
            INV_BOAT_CLICK: "inv-boat-click",
            PLANED: "day-plane",
            PLANEN: "night-plane",
            INV_PLANE_OUT: "inv-plane-out",
            INV_PLANE_IN: "inv-plane-in",
            INV_PLANE_CLICK: "inv-plane-click",
            SLEDD: "day-sled",
            SLEDN: "night-sled",
            SLED_WAVED: "day-sled-wave",
            SLED_WAVEN: "night-sled-wave",
            INV_SLED_OUT: "inv-sled-out",
            INV_SLED_IN: "inv-sled-in",
            INV_SLED_CLICK: "inv-sled-click",
            PIRATE_HATD: "day-pirate-hat",
            PIRATE_HATN: "night-pirate-hat",
            INV_PIRATE_HAT_OUT: "inv-pirate-hat-out",
            INV_PIRATE_HAT_IN: "inv-pirate-hat-in",
            INV_PIRATE_HAT_CLICK: "inv-pirate-hat-click",
            PENGUIND: "day-penguin",
            PENGUINN: "night-penguin",
            HURT_PENGUIN: "hurt-penguin",
            INV_PENGUIN_FEATHER: "inv-penguin-feather-click",
            INV_HAWK_FEATHER: "inv-hawk-feather-click",
            BOARD: "day-boar1",
            BOAR_TAMEDD: "day-boar1-tamed",
            BOAR_ANGRYD: "day-boar1-angry",
            BOARN: "night-boar1",
            BOAR_TAMEDN: "night-boar1-tamed",
            BOAR_ANGRYN: "night-boar1-angry",
            INV_MOUNT_BOAR_OUT: "inv-mount-boar-out",
            INV_MOUNT_BOAR_IN: "inv-mount-boar-in",
            INV_MOUNT_BOAR_CLICK: "inv-mount-boar-click",
            HURT_BOAR: "day-hurt-boar1",
            BOAR_STEP: "boar1-step",
            SADDLED: "day-saddle1",
            SADDLEN: "night-saddle1",
            INV_SADDLE_OUT: "inv-saddle-out",
            INV_SADDLE_IN: "inv-saddle-in",
            INV_SADDLE_CLICK: "inv-saddle-click",
            WAND1D: "day-magic-wand0",
            WAND1N: "night-magic-wand0",
            LIGHT_WAND1D: "day-light-wand1",
            LIGHT_WAND1N: "night-light-wand1",
            INV_WAND1_OUT: "inv-magic-wand0-out",
            INV_WAND1_IN: "inv-magic-wand0-in",
            INV_WAND1_CLICK: "inv-magic-wand0-click",
            WAND2D: "day-magic-wand1",
            WAND2N: "night-magic-wand1",
            LIGHT_WAND0D: "day-light-wand0",
            LIGHT_WAND0N: "night-light-wand0",
            INV_WAND2_OUT: "inv-magic-wand1-out",
            INV_WAND2_IN: "inv-magic-wand1-in",
            INV_WAND2_CLICK: "inv-magic-wand1-click",
            FIREFLYD: "day-firefly",
            FIREFLYN: "night-firefly",
            HURT_FIREFLY: "hurt-firefly",
            INV_FIREFLY_OUT: "inv-firefly-out",
            INV_FIREFLY_IN: "inv-firefly-in",
            INV_FIREFLY_CLICK: "inv-firefly-click",
            BABY_DRAGOND: "day-baby-dragon",
            BABY_DRAGONN: "night-baby-dragon",
            BABY_DRAGON_ATTACKD: "day-baby-dragon-angry",
            BABY_DRAGON_ATTACKN: "night-baby-dragon-angry",
            BABY_DRAGON_TAMEDD: "day-baby-dragon-tamed",
            BABY_DRAGON_TAMEDN: "night-baby-dragon-tamed",
            BABY_DRAGON_WING_LEFT_ATTACKD: "day-wing-dragon-left-angry",
            BABY_DRAGON_WING_LEFT_ATTACKN: "night-dragon-wing-left-angry",
            BABY_DRAGON_WING_RIGHT_ATTACKD: "day-wing-dragon-right-angry",
            BABY_DRAGON_WING_RIGHT_ATTACKN: "night-dragon-wing-right-angry",
            BABY_DRAGON_WING_LEFT_TAMEDD: "day-wing-dragon-left-tamed",
            BABY_DRAGON_WING_LEFT_TAMEDN: "night-dragon-wing-left-tamed",
            BABY_DRAGON_WING_RIGHT_TAMEDD: "day-wing-dragon-right-tamed",
            BABY_DRAGON_WING_RIGHT_TAMEDN: "night-wing-dragon-right-tamed",
            BABY_DRAGON_WING_LEFTD: "day-wing-dragon-left",
            BABY_DRAGON_WING_LEFTN: "night-dragon-wing-left",
            BABY_DRAGON_WING_RIGHTD: "day-wing-dragon-right",
            BABY_DRAGON_WING_RIGHTN: "night-wing-dragon-right",
            HURT_BABY_DRAGON: "hurt-baby-dragon",
            HURT_BABY_DRAGON_WING_LEFT: "hurt-baby-dragon-wing-left",
            HURT_BABY_DRAGON_WING_RIGHT: "hurt-baby-dragon-wing-right",
            INV_BABY_DRAGON_OUT: "inv-baby-dragon-out",
            INV_BABY_DRAGON_IN: "inv-baby-dragon-in",
            INV_BABY_DRAGON_CLICK: "inv-baby-dragon-click",
            BABY_LAVAD: "day-baby-lava",
            BABY_LAVAN: "night-baby-lava",
            BABY_LAVA_ATTACKD: "day-baby-lava-angry",
            BABY_LAVA_ATTACKN: "night-baby-lava-angry",
            BABY_LAVA_TAMEDD: "day-baby-lava-tamed",
            BABY_LAVA_TAMEDN: "night-baby-lava-tamed",
            BABY_LAVA_WING_LEFT_ATTACKD: "day-wing-lava-left-angry",
            BABY_LAVA_WING_LEFT_ATTACKN: "night-wing-lava-left-angry",
            BABY_LAVA_WING_RIGHT_ATTACKD: "day-wing-lava-right-angry",
            BABY_LAVA_WING_RIGHT_ATTACKN: "night-wing-lava-right-angry",
            BABY_LAVA_WING_LEFT_TAMEDD: "day-wing-lava-left-tamed",
            BABY_LAVA_WING_LEFT_TAMEDN: "night-wing-lava-left-tamed",
            BABY_LAVA_WING_RIGHT_TAMEDD: "day-wing-lava-right-tamed",
            BABY_LAVA_WING_RIGHT_TAMEDN: "night-wing-lava-right-tamed",
            BABY_LAVA_WING_LEFTD: "day-wing-lava-left",
            BABY_LAVA_WING_LEFTN: "night-wing-lava-left",
            BABY_LAVA_WING_RIGHTD: "day-wing-lava-right",
            BABY_LAVA_WING_RIGHTN: "night-wing-lava-right",
            HURT_BABY_LAVA: "hurt-baby-lava",
            HURT_BABY_LAVA_WING_LEFT: "hurt-baby-lava-wing-left",
            HURT_BABY_LAVA_WING_RIGHT: "hurt-baby-lava-wing-right",
            INV_BABY_LAVA_OUT: "inv-baby-lava-out",
            INV_BABY_LAVA_IN: "inv-baby-lava-in",
            INV_BABY_LAVA_CLICK: "inv-baby-lava-click",
            HAWKD: "day-falcon",
            HAWKN: "night-falcon",
            HAWK_ATTACKD: "day-falcon-angry",
            HAWK_ATTACKN: "night-falcon-angry",
            HAWK_GROUNDD: "day-falcon-ground",
            HAWK_GROUNDN: "night-falcon-ground",
            HAWK_GROUND_ATTACKD: "day-falcon-ground-angry",
            HAWK_GROUND_ATTACKN: "night-falcon-ground-angry",
            HAWK_WING_LEFTD: "day-falcon-wings-left",
            HAWK_WING_LEFTN: "night-falcon-wings-left",
            HAWK_WING_RIGHTD: "day-falcon-wings-right",
            HAWK_WING_RIGHTN: "night-falcon-wings-right",
            HAWK_WING_LEFT_ATTACKD: "day-falcon-angry-wings-left",
            HAWK_WING_LEFT_ATTACKN: "night-falcon-angry-wings-left",
            HAWK_WING_RIGHT_ATTACKD: "day-falcon-angry-wings-right",
            HAWK_WING_RIGHT_ATTACKN: "night-falcon-angry-wings-right",
            HAWK_WING_LEFT_TAMEDD: "day-falcon-wings-left-tamed",
            HAWK_WING_LEFT_TAMEDN: "night-falcon-wings-left-tamed",
            HAWK_WING_RIGHT_TAMEDD: "day-falcon-wings-right-tamed",
            HAWK_WING_RIGHT_TAMEDN: "night-falcon-wings-right-tamed",
            HAWK_TAMEDD: "day-falcon-tamed",
            HAWK_TAMEDN: "night-falcon-tamed",
            HURT_HAWK_GROUND: "hurt-falcon-ground",
            HURT_HAWK: "hurt-falcon",
            HURT_HAWK_WING_LEFT: "hurt-falcon-wings-left",
            HURT_HAWK_WING_RIGHT: "hurt-falcon-wings-right",
            INV_HAWK_OUT: "inv-falcon-out",
            INV_HAWK_IN: "inv-falcon-in",
            INV_HAWK_CLICK: "inv-falcon-click",
            CRAB_BOSSD: "day-crab-boss",
            CRAB_BOSSN: "night-crab-boss",
            CRAB_BOSS_ATTACKD: "day-crab-boss-angry",
            CRAB_BOSS_ATTACKN: "night-crab-boss-angry",
            CRAB_BOSS_TAMEDD: "day-crab-boss-tamed",
            CRAB_BOSS_TAMEDN: "night-crab-boss-tamed",
            CRAB_BOSS_CLAW_LEFT_ATTACKD: "day-crab-boss-claw-left-attack",
            CRAB_BOSS_CLAW_LEFT_ATTACKN: "night-crab-boss-claw-left-attack",
            CRAB_BOSS_CLAW_RIGHT_ATTACKD: "day-crab-boss-claw-right-attack",
            CRAB_BOSS_CLAW_RIGHT_ATTACKN: "night-crab-boss-claw-right-attack",
            CRAB_BOSS_CLAW_LEFT_TAMEDD: "day-crab-boss-claw-left-tamed",
            CRAB_BOSS_CLAW_LEFT_TAMEDN: "night-crab-boss-claw-left-tamed",
            CRAB_BOSS_CLAW_RIGHT_TAMEDD: "day-crab-boss-claw-right-tamed",
            CRAB_BOSS_CLAW_RIGHT_TAMEDN: "night-crab-boss-claw-right-tamed",
            CRAB_BOSS_CLAW_LEFTD: "day-crab-boss-claw-left",
            CRAB_BOSS_CLAW_LEFTN: "night-crab-boss-claw-left",
            CRAB_BOSS_CLAW_RIGHTD: "day-crab-boss-claw-right",
            CRAB_BOSS_CLAW_RIGHTN: "night-crab-boss-claw-right",
            HURT_CRAB_BOSS: "hurt-crab-boss",
            HURT_CRAB_BOSS_CLAW_LEFT: "hurt-crab-boss-claw-left",
            HURT_CRAB_BOSS_CLAW_RIGHT: "hurt-crab-boss-claw-right",
            HEAL_CRAB_BOSS: "heal-crab-boss",
            HEAL_CRAB_BOSS_CLAW_LEFT: "heal-crab-boss-claw-left",
            HEAL_CRAB_BOSS_CLAW_RIGHT: "heal-crab-boss-claw-right",
            CRAB_STEP: "crab-step",
            INV_CRAB_BOSS_OUT: "inv-crab-boss-out",
            INV_CRAB_BOSS_IN: "inv-crab-boss-in",
            INV_CRAB_BOSS_CLICK: "inv-crab-boss-click",
            CACTUSD: "day-cactus10",
            CACTUSN: "night-cactus10",
            INV_CACTUS_OUT: "inv-cactus-out",
            INV_CACTUS_IN: "inv-cactus-in",
            INV_CACTUS_CLICK: "inv-cactus-click",
            SCORPIOND: "day-scorpion",
            SCORPIONN: "night-scorpion",
            SCORPION_HAND_LEFTD: "day-scorpion-hand-left",
            SCORPION_HAND_LEFTN: "night-scorpion-hand-left",
            SCORPION_HAND_RIGHTD: "day-scorpion-hand-right",
            SCORPION_HAND_RIGHTN: "night-scorpion-hand-right",
            HURT_SCORPION: "hurt-scorpion",
            HURT_SCORPION_HAND_LEFT: "hurt-scorpion-hand-left",
            HURT_SCORPION_HAND_RIGHT: "hurt-scorpion-hand-right",
            VULTURED: "day-vulture",
            VULTUREN: "night-vulture",
            VULTURE_ATTACKD: "day-vulture-angry",
            VULTURE_ATTACKN: "night-vulture-angry",
            VULTURE_GROUNDD: "day-vulture-ground",
            VULTURE_GROUNDN: "night-vulture-ground",
            VULTURE_GROUND_ATTACKD: "day-vulture-ground-angry",
            VULTURE_GROUND_ATTACKN: "night-vulture-ground-angry",
            VULTURE_WING_LEFTD: "day-vulture-wings-left",
            VULTURE_WING_LEFTN: "night-vulture-wings-left",
            VULTURE_WING_RIGHTD: "day-vulture-wings-right",
            VULTURE_WING_RIGHTN: "night-vulture-wings-right",
            VULTURE_WING_LEFT_ATTACKD: "day-vulture-angry-wings-left",
            VULTURE_WING_LEFT_ATTACKN: "night-vulture-angry-wings-left",
            VULTURE_WING_RIGHT_ATTACKD: "day-vulture-angry-wings-right",
            VULTURE_WING_RIGHT_ATTACKN: "night-vulture-angry-wings-right",
            VULTURE_WING_LEFT_TAMEDD: "day-vulture-wings-left-tamed",
            VULTURE_WING_LEFT_TAMEDN: "night-vulture-wings-left-tamed",
            VULTURE_WING_RIGHT_TAMEDD: "day-vulture-wings-right-tamed",
            VULTURE_WING_RIGHT_TAMEDN: "night-vulture-wings-right-tamed",
            VULTURE_TAMEDD: "day-vulture-tamed",
            VULTURE_TAMEDN: "night-vulture-tamed",
            HURT_VULTURE_GROUND: "hurt-vulture-ground",
            HURT_VULTURE: "hurt-vulture",
            HURT_VULTURE_WING_LEFT: "hurt-vulture-wings-left",
            HURT_VULTURE_WING_RIGHT: "hurt-vulture-wings-right",
            ALOE_VERAD: "day-aloe-vera",
            ALOE_VERAN: "night-aloe-vera",
            INV_ALOE_VERA_OUT: "inv-aloe-vera-out",
            INV_ALOE_VERA_IN: "inv-aloe-vera-in",
            INV_ALOE_VERA_CLICK: "inv-aloe-vera-click",
            ALOE_VERA_GROWND: "day-aloe-vera-grown",
            ALOE_VERA_GROWNN: "night-aloe-vera-grown",
            ALOE_VERA_DRIEDD: "day-aloe-vera-dried",
            ALOE_VERAN_DRIEDN: "night-aloe-vera-dried",
            TURBAN1D: "day-turban1",
            TURBAN1N: "night-turban1",
            TURBAN2D: "day-turban2",
            TURBAN2N: "night-turban2",
            INV_TURBAN2_OUT: "inv-turban2-out",
            INV_TURBAN2_IN: "inv-turban2-in",
            INV_TURBAN2_CLICK: "inv-turban2-click",
            INV_TURBAN1_OUT: "inv-turban1-out",
            INV_TURBAN1_IN: "inv-turban1-in",
            INV_TURBAN1_CLICK: "inv-turban1-click",
            PITCHFORK2D: "day-pitchfork2",
            PITCHFORK2N: "night-pitchfork2",
            INV_PITCHFORK2_OUT: "inv-pitchfork2-out",
            INV_PITCHFORK2_IN: "inv-pitchfork2-in",
            INV_PITCHFORK2_CLICK: "inv-pitchfork2-click",
            YUSUKEDAO_ITEM1D: "day-yi1",
            YUSUKEDAO_ITEM1N: "night-yi1",
            INV_YUSUKEDAO_ITEM1_OUT: "inv-yi1-out",
            INV_YUSUKEDAO_ITEM1_IN: "inv-yi1-in",
            INV_YUSUKEDAO_ITEM1_CLICK: "inv-yi1-click",
            YUSUKEDAO_ITEM2D: "p",
            YUSUKEDAO_ITEM2N: "p",
            INV_YUSUKEDAO_ITEM2_OUT: "tinko2",
            INV_YUSUKEDAO_ITEM2_IN: "tinko",
            INV_YUSUKEDAO_ITEM2_CLICK: "tinko",
            INV_PITCHFORK_PART_CLICK: "inv-gold-fork-click",
            INV_PILOT_GLASSES_CLICK: "inv-pilot-glasses-click",
            PILOT_HELMETD: "day-pilot-helmet",
            PILOT_HELMETN: "night-pilot-helmet",
            INV_PILOT_HELMET_OUT: "inv-pilot-helmet-out",
            INV_PILOT_HELMET_IN: "inv-pilot-helmet-in",
            INV_PILOT_HELMET_CLICK: "inv-pilot-helmet-click",
            SAND_WORM0D: "day-sandworm0",
            SAND_WORM1D: "day-sandworm1",
            SAND_WORM2D: "day-sandworm2",
            SAND_WORM0N: "night-sandworm0",
            SAND_WORM1N: "night-sandworm1",
            SAND_WORM2N: "night-sandworm2",
            HURT_SAND_WORM0: "hurt-sandworm0",
            HURT_SAND_WORM1: "hurt-sandworm1",
            HURT_SAND_WORM2: "hurt-sandworm2",
            INV_VULTURE_FEATHER: "inv-vulture-feather-click",
            EMERALD0D: "day-emerald0",
            EMERALD0N: "night-emerald0",
            EMERALD1D: "day-emerald1",
            EMERALD1N: "night-emerald1",
            EMERALD2D: "day-emerald2",
            EMERALD2N: "night-emerald2",
            INV_EMERALD: "inv-emerald-click",
            INV_SANDWORM_JUICE_OUT: "inv-sworm-juice-out",
            INV_SANDWORM_JUICE_IN: "inv-sworm-juice-in",
            INV_SANDWORM_JUICE_CLICK: "inv-sworm-juice-click",
            EMERALD_MACHINED: "day-point-machine",
            EMERALD_MACHINEN: "night-point-machine",
            EMERALD_MACHINE_HOLED: "day-point-machine-hole",
            EMERALD_MACHINE_HOLEN: "night-point-machine-hole",
            EMERALD_MACHINE_GROUNDD: "day-point-machine-ground",
            EMERALD_MACHINE_GROUNDN: "night-point-machine-ground",
            EMERALD_MACHINE_ROTATED: "day-point-machine-rotate",
            EMERALD_MACHINE_ROTATEN: "night-point-machine-rotate",
            INV_EMERALD_MACHINE_OUT: "inv-point-machine-out",
            INV_EMERALD_MACHINE_IN: "inv-point-machine-in",
            INV_EMERALD_MACHINE_CLICK: "inv-point-machine-click",
            EXTRACTOR_MACHINE0_STONED: "day-extractor-machine0-stone",
            EXTRACTOR_MACHINE0_STONEN: "night-extractor-machine0-stone",
            EXTRACTOR_MACHINE_STONED: "day-extractor-machine-stone",
            EXTRACTOR_MACHINE_STONEN: "night-extractor-machine-stone",
            INV_EXTRACTOR_MACHINE_STONE_OUT: "inv-extractor-machine-stone-out",
            INV_EXTRACTOR_MACHINE_STONE_IN: "inv-extractor-machine-stone-in",
            INV_EXTRACTOR_MACHINE_STONE_CLICK: "inv-extractor-machine-stone-click",
            EXTRACTOR_MACHINE0_GOLDD: "day-extractor-machine0-gold",
            EXTRACTOR_MACHINE0_GOLDN: "night-extractor-machine0-gold",
            EXTRACTOR_MACHINE_GOLDD: "day-extractor-machine-gold",
            EXTRACTOR_MACHINE_GOLDN: "night-extractor-machine-gold",
            INV_EXTRACTOR_MACHINE_GOLD_OUT: "inv-extractor-machine-gold-out",
            INV_EXTRACTOR_MACHINE_GOLD_IN: "inv-extractor-machine-gold-in",
            INV_EXTRACTOR_MACHINE_GOLD_CLICK: "inv-extractor-machine-gold-click",
            EXTRACTOR_MACHINE0_DIAMONDD: "day-extractor-machine0-diamond",
            EXTRACTOR_MACHINE0_DIAMONDN: "night-extractor-machine0-diamond",
            DIAMOND_EXTRACTORD: "day-extractor-machine-diamond",
            DIAMOND_EXTRACTORN: "night-extractor-machine-diamond",
            INV_DIAMOND_EXTRACTOR_OUT: "inv-extractor-machine-diamond-out",
            INV_DIAMOND_EXTRACTOR_IN: "inv-extractor-machine-diamond-in",
            INV_DIAMOND_EXTRACTOR_CLICK: "inv-extractor-machine-diamond-click",
            EXTRACTOR_MACHINE0_AMETHYSTD: "day-extractor-machine0-amethyst",
            EXTRACTOR_MACHINE0_AMETHYSTN: "night-extractor-machine0-amethyst",
            EXTRACTOR_MACHINE_AMETHYSTD: "day-extractor-machine-amethyst",
            EXTRACTOR_MACHINE_AMETHYSTN: "night-extractor-machine-amethyst",
            INV_EXTRACTOR_MACHINE_AMETHYST_OUT: "inv-extractor-machine-amethyst-out",
            INV_EXTRACTOR_MACHINE_AMETHYST_IN: "inv-extractor-machine-amethyst-in",
            INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: "inv-extractor-machine-amethyst-click",
            EXTRACTOR_MACHINE0_REIDITED: "day-extractor-machine0-reidite",
            EXTRACTOR_MACHINE0_REIDITEN: "night-extractor-machine0-reidite",
            EXTRACTOR_MACHINE_REIDITED: "day-extractor-machine-reidite",
            EXTRACTOR_MACHINE_REIDITEN: "night-extractor-machine-reidite",
            INV_EXTRACTOR_MACHINE_REIDITE_OUT: "inv-extractor-machine-reidite-out",
            INV_EXTRACTOR_MACHINE_REIDITE_IN: "inv-extractor-machine-reidite-in",
            INV_EXTRACTOR_MACHINE_REIDITE_CLICK: "inv-extractor-machine-reidite-click",
            EXTRACTOR_CASES: "extractor-cases",
            HEND: "day-golden-hen",
            HENN: "night-golden-hen",
            CHICKEND: "day-golden-chicken",
            CHICKENN: "night-golden-chicken",
            HURT_GOLDEN_HEN: "hurt-golden-hen",
            HURT_GOLDEN_CHICKEN: "hurt-golden-chicken",
            LOGO_INTERFACE: "logo-interface",
            NORMAL_MODE_HOVER: "normal-mode-hover",
            MODE_COMMUNITY_HOVER: "community-mode-hover2",
            MODE_EXPERIMENTAL_HOVER: "experimental-mode-hover",
            NORMAL_MODE_OUT: "normal-mode-out",
            NORMAL_MODE_IN: "normal-mode-in",
            NORMAL_MODE_CLICK: "normal-mode-click",
            MODE_COMMUNITY_OUT: "community-mode-out",
            MODE_COMMUNITY_IN: "community-mode-in",
            MODE_COMMUNITY_CLICK: "community-mode-click",
            MODE_EXPERIMENTAL_OUT: "experimental-modes-out",
            MODE_EXPERIMENTAL_IN: "experimental-modes-in",
            MODE_EXPERIMENTAL_CLICK: "experimental-modes-click",
            YOUTUBE_BUTTON_OUT: "youtube-button-out",
            YOUTUBE_BUTTON_IN: "youtube-button-in",
            YOUTUBE_BUTTON_CLICK: "youtube-button-click",
            DISCORD_BUTTON_OUT: "discord-button-out",
            DISCORD_BUTTON_IN: "discord-button-in",
            DISCORD_BUTTON_CLICK: "discord-button-click",
            MERCH_BUTTON_OUT: "merch-button-out",
            MERCH_BUTTON_IN: "merch-button-in",
            MERCH_BUTTON_CLICK: "merch-button-click",
            TERMINAL_BUTTON_OUT: "terminal-button-out",
            TERMINAL_BUTTON_IN: "terminal-button-in",
            TERMINAL_BUTTON_CLICK: "terminal-button-click",
            RESTART_OUT: "restart-out",
            RESTART_IN: "restart-in",
            RESTART_CLICK: "restart-click",
            GUIDE_OUT: "guide-out",
            GUIDE_IN: "guide-in",
            GUIDE_CLICK: "guide-click",
            COPY_PASTE_OUT: "copy-paste-out",
            COPY_PASTE_IN: "copy-paste-in",
            COPY_PASTE_CLICK: "copy-paste-click",
            LINKS_BG: "link-buttons-bg",
            CHANGELOG_BOX: "changelog-box2",
            CHANGELOG_BUTTON_OUT: "changelog_29",
            PROFILE_BUTTON_OUT: "profile-button-out",
            PROFILE_BUTTON_IN: "profile-button-in",
            PROFILE_BUTTON_CLICK: "profile-button-click",
            LOGIN_BUTTON_OUT: "login-button-out",
            LOGIN_BUTTON_IN: "login-button-in",
            LOGIN_BUTTON_CLICK: "login-button-click",
            LOGIN_GOOGLE_OUT: "login-google-out",
            LOGIN_GOOGLE_IN: "login-google-in",
            LOGIN_GOOGLE_CLICK: "login-google-click",
            ACCOUNT_BOX: "account-box",
            ACCOUNT_MAINTENANCE: "account-under-maintenance",
            CLOSE_BUTTON_OUT: "close-button-account-out",
            CLOSE_BUTTON_IN: "close-button-account-in",
            CLOSE_BUTTON_CLICK: "close-button-account-click",
            PLAY_BUTTON_OUT: "play-button-out",
            PLAY_BUTTON_IN: "play-button-in",
            PLAY_BUTTON_CLICK: "play-button-click",
            MODIFY_NAME_OUT: "modify-name-out",
            MODIFY_NAME_IN: "modify-name-in",
            MODIFY_NAME_CLICK: "modify-name-click",
            YES_BUTTON_OUT: "yes-button-out",
            YES_BUTTON_IN: "yes-button-in",
            YES_BUTTON_CLICK: "yes-button-click",
            YES_300_BUTTON_OUT: "yes-300-button-out",
            YES_300_BUTTON_IN: "yes-300-button-in",
            YES_300_BUTTON_CLICK: "yes-300-button-click",
            NO_BUTTON_OUT: "no-button-out",
            NO_BUTTON_IN: "no-button-in",
            NO_BUTTON_CLICK: "no-button-click",
            NO_THANKS_BUTTON_OUT: "no-thanks-button-out",
            NO_THANKS_BUTTON_IN: "no-thanks-button-in",
            NO_THANKS_BUTTON_CLICK: "no-thanks-button-click",
            SHOP_BUTTON_OUT: "shop-button-out",
            SHOP_BUTTON_IN: "shop-button-in",
            SHOP_BUTTON_CLICK: "shop-button-click",
            LOGOUT_OUT: "logout-out",
            LOGOUT_IN: "logout-in",
            LOGOUT_CLICK: "logout-click",
            TERMS_BUTTON_OUT: "terms-button-out",
            TERMS_BUTTON_IN: "terms-button-in",
            TERMS_BUTTON_CLICK: "terms-button-click",
            TUTORIAL_ICON: "tutorial-icon",
            SKINS_ICON: "skins-icon",
            SHOP_ICON: "shop-icon",
            PAINT_ICON: "paint-icon",
            LEADERBOARD_ICON: "leaderboard-icon",
            START_ICON: "start-icon",
            PROFILE_ICON: "profile-icon",
            SERVER_ACCESS_ICON: "server-access-icon2",
            ICONS_BG_BUTTON_OUT: "button-homepage-bg-out",
            ICONS_BG_BUTTON_IN: "button-homepage-bg-in",
            ICONS_BG_BUTTON_CLICK: "button-homepage-bg-click",
            ICONS_BOTTOM_BG_BUTTON_OUT: "button-bottom-homepage-bg-out",
            ICONS_BOTTOM_BG_BUTTON_IN: "button-bottom-homepage-bg-in",
            ICONS_BOTTOM_BG_BUTTON_CLICK: "button-bottom-homepage-bg-click",
            AVATAR_RESUME: "lvl-player",
            AVATAR_LVL1: "avatar-player",
            AVATAR_LVL2: "avatar-player1",
            AVATAR_LVL3: "avatar-player2",
            AVATAR_LVL4: "avatar-player3",
            AVATAR_LVL5: "avatar-player4",
            AVATAR_LVL6: "avatar-player5",
            AVATAR_LVL7: "avatar-player6",
            AVATAR_LVL8: "avatar-player7",
            AVATAR_LVL9: "avatar-player8",
            AVATAR_LVL10: "avatar-player9",
            AVATAR_LVL11: "avatar-player10",
            AVATAR_LVL12: "avatar-player11",
            AVATAR_LVL13: "avatar-player12",
            AVATAR_LVL14: "avatar-player13",
            AVATAR_LVL15: "avatar-player14",
            AVATAR_LVL16: "avatar-player14",
            AVATAR_LVL17: "avatar-player14",
            AVATAR_LVL18: "avatar-player14",
            GOLDEN_BREAD: "golden-bread",
            BUY_BREAD_OUT: "buy-bread-out",
            BUY_BREAD_IN: "buy-bread-in",
            BUY_BREAD_CLICK: "buy-bread-click",
            GAUGE: "gauge",
            SEASON_4: "season-4-out",
            SEASON_4_IN: "season-4-in",
            SEASON_4_OUT: "season-4-click",
            SEASON4_BOX: "season4-box",
            SEASON_5: "season-5-out",
            SEASON_5_IN: "season-5-in",
            SEASON_5_OUT: "season-5-click",
            SEASON5_BOX: "season5-box",
            PROFILE_BOX: "profile2-box",
            SKINS_BOX: "skins-box",
            SHOP_BOX: "shop-box",
            PRIVATE_SERVER_BOX: "private-server-box",
            SERVER_LOCATION_BOX: "location-box",
            SERVER_DURATION_BOX: "server-duration-box",
            TUTORIAL_BOX: "tutorial-box",
            LEADERBOARD_BOX: "leaderboard1-box",
            BUY_BREAD_BOX: "buy-breads-box",
            BAG_BOX: "bag-box",
            CRATE_BOX: "deadbox-box",
            BOOK_BOX: "book-box",
            ACCESSORIES_BOX: "accessories-box",
            CUSTOM_SKIN_BOX: "customskin-box",
            BAG_REMAIN_BOX: "bag-lasts",
            SERVER_REMAIN_BOX: "server-lasts",
            SERVER_ACCESS_BOX: "server-access-box2",
            LOOT_BOX: "lootbox-box",
            CHANGE_NICKNAME1_BOX: "change-nickname0",
            CHANGE_NICKNAME0_BOX: "change-nickname1",
            CHEATING_BOX: "cheating-box",
            DAILY_QUEST_BOX: "daily-quest-box",
            DAILY_5_BREAD: "daily-5-bread",
            DAILY_10_BREAD: "daily-10-bread",
            DAILY_VALID: "daily-valid",
            NORMAL_PROFILE_OUT: "normal-profile-out",
            NORMAL_PROFILE_IN: "normal-profile-in",
            NORMAL_PROFILE_CLICK: "normal-profile-click",
            FOREST_PROFILE_OUT: "forest-profile-out",
            FOREST_PROFILE_IN: "forest-profile-in",
            FOREST_PROFILE_CLICK: "forest-profile-click",
            ZOMBIE_PROFILE_OUT: "zombie-profile-out",
            ZOMBIE_PROFILE_IN: "zombie-profile-in",
            ZOMBIE_PROFILE_CLICK: "zombie-profile-click",
            VAMPIRE_PROFILE_OUT: "vampire-profile-out",
            VAMPIRE_PROFILE_IN: "vampire-profile-in",
            VAMPIRE_PROFILE_CLICK: "vampire-profile-click",
            TOTAL_PROFILE_OUT: "total-profile-out",
            TOTAL_PROFILE_IN: "total-profile-in",
            TOTAL_PROFILE_CLICK: "total-profile-click",
            SEASON1_PROFILE_OUT: "season1-profile-out",
            SEASON1_PROFILE_IN: "season1-profile-in",
            SEASON1_PROFILE_CLICK: "season1-profile-click",
            SEASON2_PROFILE_OUT: "season2-profile-out",
            SEASON2_PROFILE_IN: "season2-profile-in",
            SEASON2_PROFILE_CLICK: "season2-profile-click",
            SEASON3_PROFILE_OUT: "season3-profile-out",
            SEASON3_PROFILE_IN: "season3-profile-in",
            SEASON3_PROFILE_CLICK: "season3-profile-click",
            SEASON4_PROFILE_OUT: "season4-profile-out",
            SEASON4_PROFILE_IN: "season4-profile-in",
            SEASON4_PROFILE_CLICK: "season4-profile-click",
            SEASON5_PROFILE_OUT: "season5-profile-out",
            SEASON5_PROFILE_IN: "season5-profile-in",
            SEASON5_PROFILE_CLICK: "season5-profile-click",
            LOCKED_SKIN_ALERT: "locked-skin-alert",
            LOCKED_CUSTOM_ALERT: "locked-custom-alert",
            RED_LOCKED: "bg-red-locked",
            SKIN_BUTTON_OUT: "skin-button-out",
            SKIN_BUTTON_IN: "skin-button-in",
            SKIN_BUTTON_CLICK: "skin-button-click",
            ACCESSORY_BUTTON_OUT: "accessory-button-out",
            ACCESSORY_BUTTON_IN: "accessory-button-in",
            ACCESSORY_BUTTON_CLICK: "accessory-button-click",
            BAG_BUTTON_OUT: "bag-button-out",
            BAG_BUTTON_IN: "bag-button-in",
            BAG_BUTTON_CLICK: "bag-button-click",
            BOOK_BUTTON_OUT: "book-button-out",
            BOOK_BUTTON_IN: "book-button-in",
            BOOK_BUTTON_CLICK: "book-button-click",
            CRATE_BUTTON_OUT: "deadbox-button-out",
            CRATE_BUTTON_IN: "deadbox-button-in",
            CRATE_BUTTON_CLICK: "deadbox-button-click",
            LOOT_BUTTON_OUT: "loot-button-out",
            LOOT_BUTTON_IN: "loot-button-in",
            LOOT_BUTTON_CLICK: "loot-button-click",
            FREE_ITEM_OUT: "free-item-out",
            FREE_ITEM_IN: "free-item-in",
            FREE_ITEM_CLICK: "free-item-click",
            WOOD_ITEM_OUT: "wood-item-out",
            WOOD_ITEM_IN: "wood-item-in",
            WOOD_ITEM_CLICK: "wood-item-click",
            STONE_ITEM_OUT: "stone-item",
            STONE_ITEM_IN: "stone-item-in",
            STONE_ITEM_CLICK: "stone-item-click",
            GOLD_ITEM_OUT: "gold-item",
            GOLD_ITEM_IN: "gold-item-in",
            GOLD_ITEM_CLICK: "gold-item-click",
            DIAMOND_ITEM_OUT: "diamond-item",
            DIAMOND_ITEM_IN: "diamond-item-in",
            DIAMOND_ITEM_CLICK: "diamond-item-click",
            AMETHYST_ITEM_OUT: "amethyst-item",
            AMETHYST_ITEM_IN: "amethyst-item-in",
            AMETHYST_ITEM_CLICK: "amethyst-item-click",
            REIDITE_ITEM_OUT: "reidite-item",
            REIDITE_ITEM_IN: "reidite-item-in",
            REIDITE_ITEM_CLICK: "reidite-item-click",
            SPECIAL_ITEM_OUT: "special-item-out",
            SPECIAL_ITEM_IN: "special-item-in",
            SPECIAL_ITEM_CLICK: "special-item-click",
            LEVEL_ITEM_OUT: "level-item-out",
            LEVEL_ITEM_IN: "level-item-in",
            LEVEL_ITEM_CLICK: "level-item-click",
            SKIN_PREVIOUS_OUT: "skin-previous-out",
            SKIN_PREVIOUS_IN: "skin-previous-in",
            SKIN_PREVIOUS_CLICK: "skin-previous-click",
            SKIN_NEXT_OUT: "skin-next-out",
            SKIN_NEXT_IN: "skin-next-in",
            SKIN_NEXT_CLICK: "skin-next-click",
            BACK_BUTTON_OUT: "back-button-out",
            BACK_BUTTON_IN: "back-button-in",
            BACK_BUTTON_CLICK: "back-button-click",
            GET_MORE_BUTTON_OUT: "get-more-button-out",
            GET_MORE_BUTTON_IN: "get-more-button-in",
            GET_MORE_BUTTON_CLICK: "get-more-button-click",
            CURRENCY1_OUT: "currency1-out",
            CURRENCY1_IN: "currency1-in",
            CURRENCY1_CLICK: "currency1-click",
            CURRENCY2_OUT: "currency2-out",
            CURRENCY2_IN: "currency2-in",
            CURRENCY2_CLICK: "currency2-click",
            CURRENCY3_OUT: "currency3-out",
            CURRENCY3_IN: "currency3-in",
            CURRENCY3_CLICK: "currency3-click",
            CURRENCY4_OUT: "currency4-out",
            CURRENCY4_IN: "currency4-in",
            CURRENCY4_CLICK: "currency4-click",
            CURRENCY5_OUT: "currency5-out",
            CURRENCY5_IN: "currency5-in",
            CURRENCY5_CLICK: "currency5-click",
            PRICE1_OUT: "price1-out",
            PRICE1_IN: "price1-in",
            PRICE1_CLICK: "price1-click",
            PRICE2_OUT: "price2-out",
            PRICE2_IN: "price2-in",
            PRICE2_CLICK: "price2-click",
            PRICE3_OUT: "price3-out",
            PRICE3_IN: "price3-in",
            PRICE3_CLICK: "price3-click",
            PRICE4_OUT: "price4-out",
            PRICE4_IN: "price4-in",
            PRICE4_CLICK: "price4-click",
            PRICE5_OUT: "price5-out",
            PRICE5_IN: "price5-in",
            PRICE5_CLICK: "price5-click",
            BUY_PRIVATE_SERVER_OUT: "buy-private-server-out",
            BUY_PRIVATE_SERVER_IN: "buy-private-server-in",
            BUY_PRIVATE_SERVER_CLICK: "buy-private-server-click",
            ATLANTA_OUT: "atlanta-out",
            ATLANTA_IN: "atlanta-in",
            ATLANTA_CLICK: "atlanta-click",
            DALLAS_OUT: "dallas-out",
            DALLAS_IN: "dallas-in",
            DALLAS_CLICK: "dallas-click",
            FREMONT_OUT: "fremont-out",
            FREMONT_IN: "fremont-in",
            FREMONT_CLICK: "fremont-click",
            NEWARK_OUT: "newark-out",
            NEWARK_IN: "newark-in",
            NEWARK_CLICK: "newark-click",
            TORONTO_OUT: "toronto-out",
            TORONTO_IN: "toronto-in",
            TORONTO_CLICK: "toronto-click",
            SINGAPORE_OUT: "singapore-out",
            SINGAPORE_IN: "singapore-in",
            SINGAPORE_CLICK: "singapore-click",
            FRANKFURT_OUT: "frankfurt-out",
            FRANKFURT_IN: "frankfurt-in",
            FRANKFURT_CLICK: "frankfurt-click",
            LONDON_OUT: "london-out",
            LONDON_IN: "london-in",
            LONDON_CLICK: "london-click",
            MUMBAI_OUT: "mumbai-out",
            MUMBAI_IN: "mumbai-in",
            MUMBAI_CLICK: "mumbai-click",
            TOKYO_OUT: "tokyo-out",
            TOKYO_IN: "tokyo-in",
            TOKYO_CLICK: "tokyo-click",
            YES_LOCATION_OUT: "yes-location-out",
            YES_LOCATION_IN: "yes-location-in",
            YES_LOCATION_CLICK: "yes-location-click",
            DAYS3_OUT: "3days-out",
            DAYS3_IN: "3days-in",
            DAYS3_CLICK: "3days-click",
            DAYS7_OUT: "7days-out",
            DAYS7_IN: "7days-in",
            DAYS7_CLICK: "7days-click",
            DAYS30_OUT: "30days-out",
            DAYS30_IN: "30days-in",
            DAYS30_CLICK: "30days-click",
            DAYS90_OUT: "90days-out",
            DAYS90_IN: "90days-in",
            DAYS90_CLICK: "90days-click",
            SPIN1: "spin1",
            SPIN2: "spin2",
            SPIN3: "spin3",
            SPIN4: "spin4",
            SPIN5: "spin5",
            SPIN6: "spin6",
            ARROW_SPIN: "arrow-spin",
            SPIN_BUTTON_1_OUT: "spin-button-1-out",
            SPIN_BUTTON_1_IN: "spin-button-1-in",
            SPIN_BUTTON_1_CLICK: "spin-button-1-click",
            SPIN_BUTTON_2_OUT: "spin-button-2-out",
            SPIN_BUTTON_2_IN: "spin-button-2-in",
            SPIN_BUTTON_2_CLICK: "spin-button-2-click",
            SPIN_BUTTON_3_OUT: "spin-button-3-out",
            SPIN_BUTTON_3_IN: "spin-button-3-in",
            SPIN_BUTTON_3_CLICK: "spin-button-3-click",
            SPIN_BUTTON_4_OUT: "spin-button-4-out",
            SPIN_BUTTON_4_IN: "spin-button-4-in",
            SPIN_BUTTON_4_CLICK: "spin-button-4-click",
            SPIN_BUTTON_5_OUT: "spin-button-5-out",
            SPIN_BUTTON_5_IN: "spin-button-5-in",
            SPIN_BUTTON_5_CLICK: "spin-button-5-click",
            SPIN_LIGHT: "spin-light",
            TIME_LEADERBOARD_OUT: "time-leaderboard-out",
            TIME_LEADERBOARD_IN: "time-leaderboard-in",
            TIME_LEADERBOARD_CLICK: "time-leaderboard-click",
            SCORE_LEADERBOARD_OUT: "score-leaderboard-out",
            SCORE_LEADERBOARD_IN: "score-leaderboard-in",
            SCORE_LEADERBOARD_CLICK: "score-leaderboard-click",
            LVL_LEADERBOARD_OUT: "lvl-leaderboard-out",
            LVL_LEADERBOARD_IN: "lvl-leaderboard-in",
            LVL_LEADERBOARD_CLICK: "lvl-leaderboard-click",
            KILL_LEADERBOARD_OUT: "kill-leaderboard-out",
            KILL_LEADERBOARD_IN: "kill-leaderboard-in",
            KILL_LEADERBOARD_CLICK: "kill-leaderboard-click",
            ALL_LEADERBOARD_OUT: "all-leaderboard-out",
            ALL_LEADERBOARD_IN: "all-leaderboard-in",
            ALL_LEADERBOARD_CLICK: "all-leaderboard-click",
            TODAY_LEADERBOARD_OUT: "today-leaderboard-out",
            TODAY_LEADERBOARD_IN: "today-leaderboard-in",
            TODAY_LEADERBOARD_CLICK: "today-leaderboard-click",
            WEEK_LEADERBOARD_OUT: "week-leaderboard-out",
            WEEK_LEADERBOARD_IN: "week-leaderboard-in",
            WEEK_LEADERBOARD_CLICK: "week-leaderboard-click",
            SEASON1_LEADERBOARD_OUT: "season1-out",
            SEASON1_LEADERBOARD_IN: "season1-in",
            SEASON1_LEADERBOARD_CLICK: "season1-click",
            SEASON2_LEADERBOARD_OUT: "season2--out",
            SEASON2_LEADERBOARD_IN: "season2--in",
            SEASON2_LEADERBOARD_CLICK: "season2--click",
            SEASON3_LEADERBOARD_OUT: "season3-out",
            SEASON3_LEADERBOARD_IN: "season3-in",
            SEASON3_LEADERBOARD_CLICK: "season3-click",
            SEASON4_LEADERBOARD_OUT: "season4-out",
            SEASON4_LEADERBOARD_IN: "season4-in",
            SEASON4_LEADERBOARD_CLICK: "season4-click",
            SEASON5_LEADERBOARD_OUT: "season5-out",
            SEASON5_LEADERBOARD_IN: "season5-in",
            SEASON5_LEADERBOARD_CLICK: "season5-click",
            TOTAL_LEAD_OUT: "total-lead-out",
            TOTAL_LEAD_IN: "total-lead-in",
            TOTAL_LEAD_CLICK: "total-lead-click",
            NORMAL_LEAD_OUT: "normal-lead-out",
            NORMAL_LEAD_IN: "normal-lead-in",
            NORMAL_LEAD_CLICK: "normal-lead-click",
            FOREST_LEAD_OUT: "forest-lead-out",
            FOREST_LEAD_IN: "forest-lead-in",
            FOREST_LEAD_CLICK: "forest-lead-click",
            VAMPIRE_LEAD_OUT: "vampire-lead-out",
            VAMPIRE_LEAD_IN: "vampire-lead-in",
            VAMPIRE_LEAD_CLICK: "vampire-lead-click",
            ZOMBIE_LEAD_OUT: "zombie-lead-out",
            ZOMBIE_LEAD_IN: "zombie-lead-in",
            ZOMBIE_LEAD_CLICK: "zombie-lead-click",
            LEVEL5D: "day-level5",
            LEVEL5N: "night-level5",
            LEVEL10D: "day-level10",
            LEVEL10N: "night-level10",
            LEVEL15D: "day-level15",
            LEVEL15N: "night-level15",
            LEVEL20D: "day-level20",
            LEVEL20N: "night-level20",
            LEVEL25D: "day-level25",
            LEVEL25N: "night-level25",
            LEVEL30D: "day-level30",
            LEVEL30N: "night-level30",
            LEVEL35D: "day-level35",
            LEVEL35N: "night-level35",
            LEVEL40D: "day-level40",
            LEVEL40N: "night-level40",
            LEVEL45D: "day-level45",
            LEVEL45N: "night-level45",
            LEVEL50D: "day-level50",
            LEVEL50N: "night-level50",
            LEVEL55D: "day-level55",
            LEVEL55N: "night-level55",
            LEVEL60D: "day-level60",
            LEVEL60N: "night-level60",
            SKIN_DEVASTD: "day-skin-devast0",
            SKIN_DEVASTN: "night-skin-devast0",
            HAND_DEVASTD: "day-hand-devaster",
            HAND_DEVASTN: "night-hand-devaster",
            SKIN_STARD: "day-skin-star0",
            SKIN_STARN: "night-skin-star0",
            HAND_STARD: "day-hand-star0",
            HAND_STARN: "night-hand-star0",
            SKIN_VAMPIRED: "day-vampire",
            SKIN_VAMPIREN: "night-vampire",
            HAND_VAMPIRED: "day-hand-vampire",
            HAND_VAMPIREN: "night-hand-vampire",
            SKIN_ZOMBIED: "day-zombie",
            SKIN_ZOMBIEN: "night-zombie",
            HAND_ZOMBIED: "day-hand-zombie",
            HAND_ZOMBIEN: "night-hand-zombie",
            SKIN_ROBOTD: "day-skin113",
            SKIN_ROBOTN: "night-skin113",
            HAND_ROBOTD: "day-hand-skin113",
            HAND_ROBOTN: "night-hand-skin113",
            SKIN0D: "day-skin0",
            SKIN0N: "night-skin0",
            SKIN1D: "day-skin1",
            SKIN1N: "night-skin1",
            SKIN2D: "day-skin2",
            SKIN2N: "night-skin2",
            SKIN3D: "day-skin3",
            SKIN3N: "night-skin3",
            SKIN4D: "day-skin4",
            SKIN4N: "night-skin4",
            SKIN5D: "day-skin5",
            SKIN5N: "night-skin5",
            SKIN6D: "day-skin6",
            SKIN6N: "night-skin6",
            SKIN7D: "day-skin7",
            SKIN7N: "night-skin7",
            SKIN8D: "day-skin8",
            SKIN8N: "night-skin8",
            SKIN9D: "day-skin9",
            SKIN9N: "night-skin9",
            SKIN10D: "day-skin10",
            SKIN10N: "night-skin10",
            SKIN11D: "day-skin11",
            SKIN11N: "night-skin11",
            SKIN12D: "day-skin12",
            SKIN12N: "night-skin12",
            SKIN13D: "day-skin13",
            SKIN13N: "night-skin13",
            SKIN14D: "day-skin14",
            SKIN14N: "night-skin14",
            SKIN15D: "day-skin15",
            SKIN15N: "night-skin15",
            SKIN16D: "day-skin16",
            SKIN16N: "night-skin16",
            SKIN17D: "day-skin17",
            SKIN17N: "night-skin17",
            SKIN18D: "day-skin18",
            SKIN18N: "night-skin18",
            SKIN19D: "day-skin19",
            SKIN19N: "night-skin19",
            SKIN20D: "day-skin20",
            SKIN20N: "night-skin20",
            SKIN21D: "day-skin21",
            SKIN21N: "night-skin21",
            SKIN22D: "day-skin22",
            SKIN22N: "night-skin22",
            SKIN23D: "day-skin23",
            SKIN23N: "night-skin23",
            SKIN24D: "day-skin24",
            SKIN24N: "night-skin24",
            SKIN25D: "day-skin25",
            SKIN25N: "night-skin25",
            SKIN26D: "day-skin26",
            SKIN26N: "night-skin26",
            SKIN27D: "day-skin27",
            SKIN27N: "night-skin27",
            SKIN28D: "day-skin28",
            SKIN28N: "night-skin28",
            SKIN29D: "day-skin29",
            SKIN29N: "night-skin29",
            SKIN30D: "day-skin30",
            SKIN30N: "night-skin30",
            SKIN31D: "day-skin31",
            SKIN31N: "night-skin31",
            SKIN32D: "day-skin32",
            SKIN32N: "night-skin32",
            SKIN33D: "day-skin33",
            SKIN33N: "night-skin33",
            SKIN34D: "day-skin34",
            SKIN34N: "night-skin34",
            SKIN35D: "day-skin35",
            SKIN35N: "night-skin35",
            SKIN36D: "day-skin36",
            SKIN36N: "night-skin36",
            SKIN37D: "day-skin37",
            SKIN37N: "night-skin37",
            SKIN38D: "day-skin38",
            SKIN38N: "night-skin38",
            SKIN39D: "day-skin39",
            SKIN39N: "night-skin39",
            SKIN40D: "day-skin40",
            SKIN40N: "night-skin40",
            SKIN41D: "day-skin41",
            SKIN41N: "night-skin41",
            SKIN42D: "day-skin42",
            SKIN42N: "night-skin42",
            SKIN43D: "day-skin43",
            SKIN43N: "night-skin43",
            SKIN44D: "day-skin44",
            SKIN44N: "night-skin44",
            SKIN45D: "day-skin45",
            SKIN45N: "night-skin45",
            SKIN46D: "day-skin46",
            SKIN46N: "night-skin46",
            SKIN47D: "day-skin47",
            SKIN47N: "night-skin47",
            SKIN48D: "day-skin48",
            SKIN48N: "night-skin48",
            SKIN49D: "day-skin49",
            SKIN49N: "night-skin49",
            SKIN50D: "day-skin50",
            SKIN50N: "night-skin50",
            SKIN51D: "day-skin51",
            SKIN51N: "night-skin51",
            SKIN52D: "day-skin52",
            SKIN52N: "night-skin52",
            SKIN53D: "day-skin53",
            SKIN53N: "night-skin53",
            SKIN54D: "day-skin54",
            SKIN54N: "night-skin54",
            SKIN55D: "day-skin55",
            SKIN55N: "night-skin55",
            SKIN56D: "day-skin56",
            SKIN56N: "night-skin56",
            SKIN57D: "day-skin57",
            SKIN57N: "night-skin57",
            SKIN58D: "day-skin58",
            SKIN58N: "night-skin58",
            SKIN59D: "day-skin59",
            SKIN59N: "night-skin59",
            SKIN60D: "day-skin60",
            SKIN60N: "night-skin60",
            SKIN61D: "day-skin61",
            SKIN61N: "night-skin61",
            SKIN62D: "day-skin62",
            SKIN62N: "night-skin62",
            SKIN63D: "day-skin63",
            SKIN63N: "night-skin63",
            SKIN64D: "day-skin64",
            SKIN64N: "night-skin64",
            SKIN65D: "day-skin65",
            SKIN65N: "night-skin65",
            SKIN66D: "day-skin66",
            SKIN66N: "night-skin66",
            SKIN67D: "day-skin67",
            SKIN67N: "night-skin67",
            SKIN68D: "day-skin68",
            SKIN68N: "night-skin68",
            SKIN69D: "day-skin69",
            SKIN69N: "night-skin69",
            SKIN70D: "day-skin70",
            SKIN70N: "night-skin70",
            SKIN71D: "day-skin71",
            SKIN71N: "night-skin71",
            SKIN72D: "day-skin72",
            SKIN72N: "night-skin72",
            SKIN73D: "day-skin73",
            SKIN73N: "night-skin73",
            SKIN74D: "day-skin74",
            SKIN74N: "night-skin74",
            SKIN75D: "day-skin75",
            SKIN75N: "night-skin75",
            SKIN76D: "day-skin76",
            SKIN76N: "night-skin76",
            SKIN77D: "day-skin77",
            SKIN77N: "night-skin77",
            SKIN78D: "day-skin78",
            SKIN78N: "night-skin78",
            SKIN79D: "day-skin79",
            SKIN79N: "night-skin79",
            SKIN80D: "day-skin80",
            SKIN80N: "night-skin80",
            SKIN81D: "day-skin81",
            SKIN81N: "night-skin81",
            SKIN82D: "day-skin82",
            SKIN82N: "night-skin82",
            SKIN83D: "day-skin83",
            SKIN83N: "night-skin83",
            SKIN84D: "day-skin84",
            SKIN84N: "night-skin84",
            SKIN85D: "day-skin85",
            SKIN85N: "night-skin85",
            SKIN86D: "day-skin86",
            SKIN86N: "night-skin86",
            SKIN87D: "day-skin87",
            SKIN87N: "night-skin87",
            SKIN88D: "day-skin88",
            SKIN88N: "night-skin88",
            SKIN89D: "day-skin89",
            SKIN89N: "night-skin89",
            SKIN90D: "day-skin90",
            SKIN90N: "night-skin90",
            SKIN91D: "day-skin91",
            SKIN91N: "night-skin91",
            SKIN92D: "day-skin92",
            SKIN92N: "night-skin92",
            SKIN93D: "day-skin93",
            SKIN93N: "night-skin93",
            SKIN94D: "day-skin94",
            SKIN94N: "night-skin94",
            SKIN95D: "day-skin95",
            SKIN95N: "night-skin95",
            SKIN96D: "day-skin96",
            SKIN96N: "night-skin96",
            SKIN97D: "day-skin97",
            SKIN97N: "night-skin97",
            SKIN98D: "day-skin98",
            SKIN98N: "night-skin98",
            SKIN99D: "day-skin99",
            SKIN99N: "night-skin99",
            SKIN100D: "day-skin100",
            SKIN100N: "night-skin100",
            SKIN101D: "day-skin101",
            SKIN101N: "night-skin101",
            SKIN102D: "day-skin102",
            SKIN102N: "night-skin102",
            SKIN103D: "day-skin103",
            SKIN103N: "night-skin103",
            SKIN104D: "day-skin104",
            SKIN104N: "night-skin104",
            SKIN105D: "day-skin105",
            SKIN105N: "night-skin105",
            SKIN106D: "day-skin106",
            SKIN106N: "night-skin106",
            SKIN107D: "day-skin107",
            SKIN107N: "night-skin107",
            SKIN108D: "day-skin108",
            SKIN108N: "night-skin108",
            SKIN109D: "day-skin109",
            SKIN109N: "night-skin109",
            SKIN110D: "day-skin110",
            SKIN110N: "night-skin110",
            SKIN111D: "day-skin111",
            SKIN111N: "night-skin111",
            SKIN112D: "day-skin112",
            SKIN112N: "night-skin112",
            SKIN113D: "day-skin113",
            SKIN113N: "night-skin113",
            SKIN114D: "day-skin114",
            SKIN114N: "night-skin114",
            SKIN115D: "day-skin115",
            SKIN115N: "night-skin115",
            SKIN116D: "day-skin116",
            SKIN116N: "night-skin116",
            SKIN117D: "day-skin117",
            SKIN117N: "night-skin117",
            SKIN118D: "day-skin118",
            SKIN118N: "night-skin118",
            SKIN119D: "day-skin119",
            SKIN119N: "night-skin119",
            SKIN120D: "day-skin120",
            SKIN120N: "night-skin120",
            SKIN121D: "day-skin121",
            SKIN121N: "night-skin121",
            SKIN122D: "day-skin122",
            SKIN122N: "night-skin122",
            SKIN123D: "day-skin123",
            SKIN123N: "night-skin123",
            SKIN124D: "day-skin124",
            SKIN124N: "night-skin124",
            SKIN125D: "day-skin125",
            SKIN125N: "night-skin125",
            SKIN126D: "day-skin126",
            SKIN126N: "night-skin126",
            SKIN127D: "day-skin127",
            SKIN127N: "night-skin127",
            SKIN128D: "day-skin128",
            SKIN128N: "night-skin128",
            SKIN129D: "day-skin129",
            SKIN129N: "night-skin129",
            SKIN130D: "day-skin130-1",
            SKIN130N: "night-skin130-1",
            SKIN131D: "day-skin131",
            SKIN131N: "night-skin131",
            SKIN132D: "day-skin132",
            SKIN132N: "night-skin132",
            SKIN133D: "day-skin133",
            SKIN133N: "night-skin133",
            SKIN134D: "day-skin134",
            SKIN134N: "night-skin134",
            SKIN135D: "day-skin135",
            SKIN135N: "night-skin135",
            SKIN136D: "day-skin136",
            SKIN136N: "night-skin136",
            SKIN137D: "day-skin137",
            SKIN137N: "night-skin137",
            SKIN138D: "day-skin138",
            SKIN138N: "night-skin138",
            SKIN139D: "day-skin139",
            SKIN139N: "night-skin139",
            SKIN140D: "day-skin140",
            SKIN140N: "night-skin140",
            SKIN141D: "day-skin141",
            SKIN141N: "night-skin141",
            SKIN142D: "day-skin142",
            SKIN142N: "night-skin142",
            SKIN143D: "day-skin143",
            SKIN143N: "night-skin143",
            SKIN144D: "day-skin144",
            SKIN144N: "night-skin144",
            SKIN145D: "day-skin145",
            SKIN145N: "night-skin145",
            SKIN146D: "day-skin146",
            SKIN146N: "night-skin146",
            SKIN147D: "day-skin147",
            SKIN147N: "night-skin147",
            SKIN148D: "day-skin148",
            SKIN148N: "night-skin148",
            SKIN149D: "day-skin149",
            SKIN149N: "night-skin149",
            SKIN150D: "day-skin150",
            SKIN150N: "night-skin150",
            HAND_SKIN0D: "day-hand-skin0",
            HAND_SKIN0N: "night-hand-skin0",
            HAND_SKIN1D: "day-hand-skin1",
            HAND_SKIN1N: "night-hand-skin1",
            HAND_SKIN2D: "day-hand-skin2",
            HAND_SKIN2N: "night-hand-skin2",
            HAND_SKIN3D: "day-hand-skin3",
            HAND_SKIN3N: "night-hand-skin3",
            HAND_SKIN4D: "day-hand-skin4",
            HAND_SKIN4N: "night-hand-skin4",
            HAND_SKIN5D: "day-hand-skin5",
            HAND_SKIN5N: "night-hand-skin5",
            HAND_SKIN6D: "day-hand-skin6",
            HAND_SKIN6N: "night-hand-skin6",
            HAND_SKIN7D: "day-hand-skin6",
            HAND_SKIN7N: "night-hand-skin6",
            HAND_SKIN8D: "day-hand-skin8",
            HAND_SKIN8N: "night-hand-skin8",
            HAND_SKIN9D: "day-hand-skin9",
            HAND_SKIN9N: "night-hand-skin9",
            HAND_SKIN10D: "day-hand-skin10",
            HAND_SKIN10N: "night-hand-skin10",
            HAND_SKIN11D: "day-hand-skin11",
            HAND_SKIN11N: "night-hand-skin11",
            HAND_SKIN12D: "day-hand-skin12",
            HAND_SKIN12N: "night-hand-skin12",
            HAND_SKIN13D: "day-hand-skin13",
            HAND_SKIN13N: "night-hand-skin13",
            HAND_SKIN14D: "day-hand-skin14",
            HAND_SKIN14N: "night-hand-skin14",
            HAND_SKIN15D: "day-hand-skin15",
            HAND_SKIN15N: "night-hand-skin15",
            HAND_SKIN16D: "day-hand-skin16",
            HAND_SKIN16N: "night-hand-skin16",
            HAND_SKIN17D: "day-hand-skin17",
            HAND_SKIN17N: "night-hand-skin17",
            HAND_SKIN18D: "day-hand-skin18",
            HAND_SKIN18N: "night-hand-skin18",
            HAND_SKIN19D: "day-hand-skin19",
            HAND_SKIN19N: "night-hand-skin19",
            HAND_SKIN20D: "day-hand-skin20",
            HAND_SKIN20N: "night-hand-skin20",
            HAND_SKIN21D: "day-hand-skin21",
            HAND_SKIN21N: "night-hand-skin21",
            HAND_SKIN22D: "day-hand-skin22",
            HAND_SKIN22N: "night-hand-skin22",
            HAND_SKIN23D: "day-hand-skin23",
            HAND_SKIN23N: "night-hand-skin23",
            HAND_SKIN24D: "day-hand-skin24",
            HAND_SKIN24N: "night-hand-skin24",
            HAND_SKIN25D: "day-hand-skin25",
            HAND_SKIN25N: "night-hand-skin25",
            HAND_SKIN26D: "day-hand-skin26",
            HAND_SKIN26N: "night-hand-skin26",
            HAND_SKIN27D: "day-hand-skin27",
            HAND_SKIN27N: "night-hand-skin27",
            HAND_SKIN28D: "day-hand-skin28",
            HAND_SKIN28N: "night-hand-skin28",
            HAND_SKIN29D: "day-hand-skin29",
            HAND_SKIN29N: "night-hand-skin29",
            HAND_SKIN30D: "day-hand-skin30",
            HAND_SKIN30N: "night-hand-skin30",
            HAND_SKIN31D: "day-hand-skin31",
            HAND_SKIN31N: "night-hand-skin31",
            HAND_SKIN32D: "day-hand-skin32",
            HAND_SKIN32N: "night-hand-skin32",
            HAND_SKIN33D: "day-hand-skin33",
            HAND_SKIN33N: "night-hand-skin33",
            HAND_SKIN34D: "day-hand-skin34",
            HAND_SKIN34N: "night-hand-skin34",
            HAND_SKIN35D: "day-hand-skin35",
            HAND_SKIN35N: "night-hand-skin35",
            HAND_SKIN36D: "day-hand-skin36",
            HAND_SKIN36N: "night-hand-skin36",
            HAND_SKIN37D: "day-hand-skin37",
            HAND_SKIN37N: "night-hand-skin37",
            HAND_SKIN38D: "day-hand-skin38",
            HAND_SKIN38N: "night-hand-skin38",
            HAND_SKIN39D: "day-hand-skin39",
            HAND_SKIN39N: "night-hand-skin39",
            HAND_SKIN40D: "day-hand-skin40",
            HAND_SKIN40N: "night-hand-skin40",
            HAND_SKIN41D: "day-hand-skin41",
            HAND_SKIN41N: "night-hand-skin41",
            HAND_SKIN42D: "day-hand-skin42",
            HAND_SKIN42N: "night-hand-skin42",
            HAND_SKIN43D: "day-hand-skin43",
            HAND_SKIN43N: "night-hand-skin43",
            HAND_SKIN44D: "day-hand-skin16",
            HAND_SKIN44N: "night-hand-skin16",
            HAND_SKIN45D: "day-hand-skin45",
            HAND_SKIN45N: "night-hand-skin45",
            HAND_SKIN46D: "day-hand-skin46",
            HAND_SKIN46N: "night-hand-skin46",
            HAND_SKIN47D: "day-hand-skin47",
            HAND_SKIN47N: "night-hand-skin47",
            HAND_SKIN48D: "day-hand-skin48",
            HAND_SKIN48N: "night-hand-skin48",
            HAND_SKIN49D: "day-hand-skin49",
            HAND_SKIN49N: "night-hand-skin49",
            HAND_SKIN50D: "day-hand-skin49",
            HAND_SKIN50N: "night-hand-skin49",
            HAND_SKIN51D: "day-hand-skin51",
            HAND_SKIN51N: "night-hand-skin51",
            HAND_SKIN52D: "day-hand-skin52",
            HAND_SKIN52N: "night-hand-skin52",
            HAND_SKIN53D: "day-hand-skin53",
            HAND_SKIN53N: "night-hand-skin53",
            HAND_SKIN54D: "day-hand-skin53",
            HAND_SKIN54N: "night-hand-skin53",
            HAND_SKIN55D: "day-hand-skin55",
            HAND_SKIN55N: "night-hand-skin55",
            HAND_SKIN56D: "day-hand-skin56",
            HAND_SKIN56N: "night-hand-skin56",
            HAND_SKIN57D: "day-hand-skin57",
            HAND_SKIN57N: "night-hand-skin57",
            HAND_SKIN58D: "day-hand-skin58",
            HAND_SKIN58N: "night-hand-skin58",
            HAND_SKIN59D: "day-hand-skin59",
            HAND_SKIN59N: "night-hand-skin59",
            HAND_SKIN60D: "day-hand-skin61",
            HAND_SKIN60N: "night-hand-skin61",
            HAND_SKIN61D: "day-hand-skin61",
            HAND_SKIN61N: "night-hand-skin61",
            HAND_SKIN62D: "day-hand-skin62",
            HAND_SKIN62N: "night-hand-skin62",
            HAND_SKIN63D: "day-hand-skin63",
            HAND_SKIN63N: "night-hand-skin63",
            HAND_SKIN64D: "day-hand-skin64",
            HAND_SKIN64N: "night-hand-skin64",
            HAND_SKIN65D: "day-hand-skin65",
            HAND_SKIN65N: "night-hand-skin65",
            HAND_SKIN66D: "day-hand-skin66",
            HAND_SKIN66N: "night-hand-skin66",
            HAND_SKIN67D: "day-hand-skin67",
            HAND_SKIN67N: "night-hand-skin67",
            HAND_SKIN68D: "day-hand-skin68",
            HAND_SKIN68N: "night-hand-skin68",
            HAND_SKIN69D: "day-hand-skin69",
            HAND_SKIN69N: "night-hand-skin69",
            HAND_SKIN70D: "day-hand-skin70",
            HAND_SKIN70N: "night-hand-skin70",
            HAND_SKIN71D: "day-hand-skin71",
            HAND_SKIN71N: "night-hand-skin71",
            HAND_SKIN72D: "day-hand-skin72",
            HAND_SKIN72N: "night-hand-skin72",
            HAND_SKIN73D: "day-hand-skin73",
            HAND_SKIN73N: "night-hand-skin73",
            HAND_SKIN74D: "day-hand-skin74",
            HAND_SKIN74N: "night-hand-skin74",
            HAND_SKIN75D: "day-hand-skin75",
            HAND_SKIN75N: "night-hand-skin75",
            HAND_SKIN76D: "day-hand-skin76",
            HAND_SKIN76N: "night-hand-skin76",
            HAND_SKIN77D: "day-hand-skin77",
            HAND_SKIN77N: "night-hand-skin77",
            HAND_SKIN78D: "day-hand-skin78",
            HAND_SKIN78N: "night-hand-skin78",
            HAND_SKIN79D: "day-hand-skin79",
            HAND_SKIN79N: "night-hand-skin79",
            HAND_SKIN80D: "day-hand-skin80",
            HAND_SKIN80N: "night-hand-skin80",
            HAND_SKIN81D: "day-hand-skin81",
            HAND_SKIN81N: "night-hand-skin81",
            HAND_SKIN82D: "day-hand-skin82",
            HAND_SKIN82N: "night-hand-skin82",
            HAND_SKIN83D: "day-hand-skin83",
            HAND_SKIN83N: "night-hand-skin83",
            HAND_SKIN84D: "day-hand-skin84",
            HAND_SKIN84N: "night-hand-skin84",
            HAND_SKIN85D: "day-hand-skin85",
            HAND_SKIN85N: "night-hand-skin85",
            HAND_SKIN86D: "day-hand-skin86",
            HAND_SKIN86N: "night-hand-skin86",
            HAND_SKIN87D: "day-hand-skin87",
            HAND_SKIN87N: "night-hand-skin87",
            HAND_SKIN88D: "day-hand-skin88",
            HAND_SKIN88N: "night-hand-skin88",
            HAND_SKIN89D: "day-hand-skin89",
            HAND_SKIN89N: "night-hand-skin89",
            HAND_SKIN90D: "day-hand-skin90",
            HAND_SKIN90N: "night-hand-skin90",
            HAND_SKIN91D: "day-hand-skin91",
            HAND_SKIN91N: "night-hand-skin91",
            HAND_SKIN92D: "day-hand-skin92",
            HAND_SKIN92N: "night-hand-skin92",
            HAND_SKIN93D: "day-hand-skin93",
            HAND_SKIN93N: "night-hand-skin93",
            HAND_SKIN94D: "day-hand-skin94",
            HAND_SKIN94N: "night-hand-skin94",
            HAND_SKIN95D: "day-hand-skin95",
            HAND_SKIN95N: "night-hand-skin95",
            HAND_SKIN96D: "day-hand-skin96",
            HAND_SKIN96N: "night-hand-skin96",
            HAND_SKIN97D: "day-hand-skin97",
            HAND_SKIN97N: "night-hand-skin97",
            HAND_SKIN98D: "day-hand-skin98",
            HAND_SKIN98N: "night-hand-skin98",
            HAND_SKIN99D: "day-hand-skin99",
            HAND_SKIN99N: "night-hand-skin99",
            HAND_SKIN100D: "day-hand-skin100",
            HAND_SKIN100N: "night-hand-skin100",
            HAND_SKIN101D: "day-hand-skin101",
            HAND_SKIN101N: "night-hand-skin101",
            HAND_SKIN102D: "day-hand-skin102",
            HAND_SKIN102N: "night-hand-skin102",
            HAND_SKIN103D: "day-hand-skin103",
            HAND_SKIN103N: "night-hand-skin103",
            HAND_SKIN104D: "day-hand-skin104",
            HAND_SKIN104N: "night-hand-skin104",
            HAND_SKIN105D: "day-hand-skin105",
            HAND_SKIN105N: "night-hand-skin105",
            HAND_SKIN106D: "day-hand-skin106",
            HAND_SKIN106N: "night-hand-skin106",
            HAND_SKIN107D: "day-hand-skin107",
            HAND_SKIN107N: "night-hand-skin107",
            HAND_SKIN108D: "day-hand-skin108",
            HAND_SKIN108N: "night-hand-skin108",
            HAND_SKIN109D: "day-hand-skin109",
            HAND_SKIN109N: "night-hand-skin109",
            HAND_SKIN110D: "day-hand-skin110",
            HAND_SKIN110N: "night-hand-skin110",
            HAND_SKIN111D: "day-hand-skin111",
            HAND_SKIN111N: "night-hand-skin111",
            HAND_SKIN112D: "day-hand-skin112",
            HAND_SKIN112N: "night-hand-skin112",
            HAND_SKIN113D: "day-hand-skin113",
            HAND_SKIN113N: "night-hand-skin113",
            HAND_SKIN114D: "day-hand-skin114",
            HAND_SKIN114N: "night-hand-skin114",
            HAND_SKIN115D: "day-hand-skin115",
            HAND_SKIN115N: "night-hand-skin115",
            HAND_SKIN116D: "day-hand-skin116",
            HAND_SKIN116N: "night-hand-skin116",
            HAND_SKIN117D: "day-hand-skin117",
            HAND_SKIN117N: "night-hand-skin117",
            HAND_SKIN118D: "day-hand-skin118",
            HAND_SKIN118N: "night-hand-skin118",
            HAND_SKIN119D: "day-hand-skin119",
            HAND_SKIN119N: "night-hand-skin119",
            HAND_SKIN120D: "day-hand-skin120",
            HAND_SKIN120N: "night-hand-skin120",
            HAND_SKIN121D: "day-hand-skin122",
            HAND_SKIN121N: "night-hand-skin122",
            HAND_SKIN122D: "day-hand-skin122",
            HAND_SKIN122N: "night-hand-skin122",
            HAND_SKIN123D: "day-hand-skin122",
            HAND_SKIN123N: "night-hand-skin122",
            HAND_SKIN124D: "day-hand-skin124",
            HAND_SKIN124N: "night-hand-skin124",
            HAND_SKIN125D: "day-hand-skin125",
            HAND_SKIN125N: "night-hand-skin125",
            HAND_SKIN126D: "day-hand-skin126",
            HAND_SKIN126N: "night-hand-skin126",
            HAND_SKIN127D: "day-hand-skin127",
            HAND_SKIN127N: "night-hand-skin127",
            HAND_SKIN128D: "day-hand-skin128",
            HAND_SKIN128N: "night-hand-skin128",
            HAND_SKIN129D: "day-hand-skin129",
            HAND_SKIN129N: "night-hand-skin129",
            HAND_SKIN130D: "day-hand-skin130",
            HAND_SKIN130N: "night-hand-skin130",
            HAND_SKIN131D: "day-hand-skin131",
            HAND_SKIN131N: "night-hand-skin131",
            HAND_SKIN132D: "day-hand-skin130",
            HAND_SKIN132N: "night-hand-skin130",
            HAND_SKIN133D: "day-hand-skin133",
            HAND_SKIN133N: "night-hand-skin133",
            HAND_SKIN134D: "day-hand-skin134",
            HAND_SKIN134N: "night-hand-skin134",
            HAND_SKIN135D: "day-hand-skin135",
            HAND_SKIN135N: "night-hand-skin135",
            HAND_SKIN136D: "day-hand-skin136",
            HAND_SKIN136N: "night-hand-skin136",
            HAND_SKIN137D: "day-hand-skin137",
            HAND_SKIN137N: "night-hand-skin137",
            HAND_SKIN138D: "day-hand-skin138",
            HAND_SKIN138N: "night-hand-skin138",
            HAND_SKIN139D: "day-hand-skin139",
            HAND_SKIN139N: "night-hand-skin139",
            HAND_SKIN140D: "day-hand-skin140",
            HAND_SKIN140N: "night-hand-skin140",
            HAND_SKIN141D: "day-hand-skin141",
            HAND_SKIN141N: "night-hand-skin141",
            HAND_SKIN142D: "day-hand-skin142",
            HAND_SKIN142N: "night-hand-skin142",
            HAND_SKIN143D: "day-hand-skin143",
            HAND_SKIN143N: "night-hand-skin143",
            HAND_SKIN144D: "day-hand-skin144",
            HAND_SKIN144N: "night-hand-skin144",
            HAND_SKIN145D: "day-hand-skin145",
            HAND_SKIN145N: "night-hand-skin145",
            HAND_SKIN146D: "day-hand-skin146",
            HAND_SKIN146N: "night-hand-skin146",
            HAND_SKIN147D: "day-hand-skin147",
            HAND_SKIN147N: "night-hand-skin147",
            HAND_SKIN148D: "day-hand-skin148",
            HAND_SKIN148N: "night-hand-skin148",
            HAND_SKIN149D: "day-hand-skin149",
            HAND_SKIN149N: "night-hand-skin149",
            HAND_SKIN150D: "day-hand-skin150",
            HAND_SKIN150N: "night-hand-skin150",
            BAG_STARD: "day-bag-star0",
            BAG_STARN: "night-bag-star0",
            BAG0D: "day-bag0",
            BAG0N: "night-bag0",
            BAG1D: "day-bag1",
            BAG1N: "night-bag1",
            BAG2D: "day-bag2",
            BAG2N: "night-bag2",
            BAG3D: "day-bag3",
            BAG3N: "night-bag3",
            BAG4D: "day-bag4",
            BAG4N: "night-bag4",
            BAG5D: "day-bag5",
            BAG5N: "night-bag5",
            BAG6D: "day-bag6",
            BAG6N: "night-bag6",
            BAG7D: "day-bag7",
            BAG7N: "night-bag7",
            BAG8D: "day-bag8",
            BAG8N: "night-bag8",
            BAG9D: "day-bag9",
            BAG9N: "night-bag9",
            BAG10D: "day-bag10",
            BAG10N: "night-bag10",
            BAG11D: "day-bag11",
            BAG11N: "night-bag11",
            BAG13D: "day-bag13",
            BAG13N: "night-bag13",
            BAG14D: "day-bag14",
            BAG14N: "night-bag14",
            BAG16D: "day-bag16",
            BAG16N: "night-bag16",
            BAG17D: "day-bag17",
            BAG17N: "night-bag17",
            BAG18D: "day-bag18",
            BAG18N: "night-bag18",
            BAG19D: "day-bag19",
            BAG19N: "night-bag19",
            BAG20D: "day-bag20",
            BAG20N: "night-bag20",
            BAG21D: "day-bag21",
            BAG21N: "night-bag21",
            BAG22D: "day-bag22",
            BAG22N: "night-bag22",
            BAG23D: "day-bag23",
            BAG23N: "night-bag23",
            BAG24D: "day-bag24",
            BAG24N: "night-bag24",
            BAG25D: "day-bag25",
            BAG25N: "night-bag25",
            BAG26D: "day-bag26",
            BAG26N: "night-bag26",
            BAG27D: "day-bag27",
            BAG27N: "night-bag27",
            BAG28D: "day-bag28",
            BAG28N: "night-bag28",
            BAG29D: "day-bag29",
            BAG29N: "night-bag29",
            BAG30D: "day-bag30",
            BAG30N: "night-bag30",
            BAG31D: "day-bag31",
            BAG31N: "night-bag31",
            BAG32D: "day-bag32",
            BAG32N: "night-bag32",
            BAG33D: "day-bag33",
            BAG33N: "night-bag33",
            BAG34D: "day-bag34",
            BAG34N: "night-bag34",
            BAG35D: "day-bag35",
            BAG35N: "night-bag35",
            BAG36D: "day-bag36",
            BAG36N: "night-bag36",
            BAG37D: "day-bag37",
            BAG37N: "night-bag37",
            BAG38D: "day-bag38",
            BAG38N: "night-bag38",
            BAG39D: "day-bag39",
            BAG39N: "night-bag39",
            BAG40D: "day-bag40",
            BAG40N: "night-bag40",
            BAG41D: "day-bag41",
            BAG41N: "night-bag41",
            BAG42D: "day-bag42",
            BAG42N: "night-bag42",
            BAG43D: "day-bag43",
            BAG43N: "night-bag43",
            BAG44D: "day-bag44",
            BAG44N: "night-bag44",
            BAG45D: "day-bag45",
            BAG45N: "night-bag45",
            BAG46D: "day-bag46",
            BAG46N: "night-bag46",
            BAG47D: "day-bag47",
            BAG47N: "night-bag47",
            BAG48D: "day-bag48",
            BAG48N: "night-bag48",
            BAG49D: "day-bag49",
            BAG49N: "night-bag49",
            BAG50D: "day-bag50",
            BAG50N: "night-bag50",
            BAG51D: "day-bag51",
            BAG51N: "night-bag51",
            BAG52D: "day-bag52",
            BAG52N: "night-bag52",
            BAG53D: "day-bag53",
            BAG53N: "night-bag53",
            BAG54D: "day-bag54",
            BAG54N: "night-bag54",
            BAG55D: "day-bag55",
            BAG55N: "night-bag55",
            BAG56D: "day-bag56",
            BAG56N: "night-bag56",
            BAG57D: "day-bag57",
            BAG57N: "night-bag57",
            BAG58D: "day-bag58",
            BAG58N: "night-bag58",
            BAG59D: "day-bag59",
            BAG59N: "night-bag59",
            BAG60D: "day-bag60",
            BAG60N: "night-bag60",
            BAG61D: "day-bag61",
            BAG61N: "night-bag61",
            BAG62D: "day-bag62",
            BAG62N: "night-bag62",
            BAG63D: "day-bag63",
            BAG63N: "night-bag63",
            BAG64D: "day-bag64",
            BAG64N: "night-bag64",
            BAG65D: "day-bag65",
            BAG65N: "night-bag65",
            BAG66D: "day-bag66",
            BAG66N: "night-bag66",
            BAG67D: "day-bag67",
            BAG67N: "night-bag67",
            BAG68D: "day-bag68",
            BAG68N: "night-bag68",
            ACCESSORY0D: "day-accessory0",
            ACCESSORY17D: "day-accessory0-pacques",
            ACCESSORY17N: "night-accessory0-pacques",
            ACCESSORY13D: "day-accessory13",
            ACCESSORY13N: "night-accessory13",
            ACCESSORY14D: "day-accessory14",
            ACCESSORY14N: "night-accessory14",
            ACCESSORY15D: "day-accessory15",
            ACCESSORY15N: "night-accessory15",
            ACCESSORY16D: "day-accessory16",
            ACCESSORY16N: "night-accessory16",
            ACCESSORY18D: "day-accessory17",
            ACCESSORY18N: "day-accessory17",
            ACCESSORY19D: "day-accessory19",
            ACCESSORY19N: "night-accessory19",
            ACCESSORY20D: "day-accessory20",
            ACCESSORY20N: "night-accessory20",
            ACCESSORY21D: "day-accessory21",
            ACCESSORY21N: "night-accessory21",
            ACCESSORY22D: "day-accessory22",
            ACCESSORY22N: "night-accessory22",
            ACCESSORY23D: "day-accessory23",
            ACCESSORY23N: "night-accessory23",
            ACCESSORY24D: "day-accessory24",
            ACCESSORY24N: "night-accessory24",
            ACCESSORY25D: "day-accessory25",
            ACCESSORY25N: "night-accessory25",
            ACCESSORY26D: "day-accessory26",
            ACCESSORY26N: "night-accessory26",
            ACCESSORY27D: "day-accessory27",
            ACCESSORY27N: "night-accessory27",
            ACCESSORY28D: "day-accessory18",
            ACCESSORY28N: "night-accessory18",
            ACCESSORY29D: "day-accessory29",
            ACCESSORY29N: "night-accessory29",
            ACCESSORY30D: "day-accessory30",
            ACCESSORY30N: "night-accessory30",
            ACCESSORY31D: "day-accessory31",
            ACCESSORY31N: "night-accessory31",
            ACCESSORY32D: "day-accessory32",
            ACCESSORY32N: "night-accessory32",
            ACCESSORY33D: "day-accessory33",
            ACCESSORY33N: "night-accessory33",
            ACCESSORY34D: "day-accessory34",
            ACCESSORY34N: "night-accessory34",
            ACCESSORY35D: "day-accessory35",
            ACCESSORY35N: "night-accessory35",
            ACCESSORY36D: "day-accessory28",
            ACCESSORY36N: "night-accessory28",
            ACCESSORY37D: "day-accessory36",
            ACCESSORY37N: "night-accessory36",
            ACCESSORY38D: "day-accessory37",
            ACCESSORY38N: "night-accessory37",
            ACCESSORY39D: "day-accessory39",
            ACCESSORY39N: "night-accessory39",
            ACCESSORY40D: "day-accessory40",
            ACCESSORY40N: "night-accessory40",
            ACCESSORY41D: "day-accessory41",
            ACCESSORY41N: "night-accessory41",
            ACCESSORY42D: "day-accessory42",
            ACCESSORY42N: "night-accessory42",
            ACCESSORY43D: "day-accessory43",
            ACCESSORY43N: "night-accessory43",
            ACCESSORY44D: "day-accessory44",
            ACCESSORY44N: "night-accessory44",
            ACCESSORY45D: "day-accessory38",
            ACCESSORY45N: "night-accessory38",
            ACCESSORY46D: "day-accessory46",
            ACCESSORY46N: "night-accessory46",
            ACCESSORY47D: "day-accessory47",
            ACCESSORY47N: "night-accessory47",
            ACCESSORY48D: "day-accessory48",
            ACCESSORY48N: "night-accessory48",
            ACCESSORY49D: "day-accessory49",
            ACCESSORY49N: "night-accessory49",
            ACCESSORY50D: "day-accessory45",
            ACCESSORY50N: "night-accessory45",
            ACCESSORY51D: "day-accessory50",
            ACCESSORY51N: "night-accessory50",
            ACCESSORY52D: "day-accessory51",
            ACCESSORY52N: "night-accessory51",
            ACCESSORY53D: "day-accessory52",
            ACCESSORY53N: "night-accessory52",
            ACCESSORY54D: "day-accessory53",
            ACCESSORY54N: "night-accessory53",
            ACCESSORY55D: "day-accessory54",
            ACCESSORY55N: "night-accessory54",
            ACCESSORY56D: "day-accessory55",
            ACCESSORY56N: "night-accessory55",
            ACCESSORY57D: "day-accessory56",
            ACCESSORY57N: "night-accessory56",
            ACCESSORY58D: "day-accessory57",
            ACCESSORY58N: "night-accessory57",
            ACCESSORY59D: "day-accessory58",
            ACCESSORY59N: "night-accessory58",
            ACCESSORY60D: "day-accessory59",
            ACCESSORY60N: "night-accessory59",
            ACCESSORY61D: "day-accessory60",
            ACCESSORY61N: "night-accessory60",
            ACCESSORY62D: "day-accessory61",
            ACCESSORY62N: "night-accessory61",
            ACCESSORY63D: "day-accessory62",
            ACCESSORY63N: "night-accessory62",
            ACCESSORY64D: "day-accessory63",
            ACCESSORY64N: "night-accessory63",
            ACCESSORY65D: "day-accessory64",
            ACCESSORY65N: "night-accessory64",
            ACCESSORY66D: "day-accessory65",
            ACCESSORY66N: "night-accessory65",
            ACCESSORY67D: "day-accessory66",
            ACCESSORY67N: "night-accessory66",
            ACCESSORY68D: "day-accessory67",
            ACCESSORY68N: "night-accessory67",
            ACCESSORY69D: "day-accessory68",
            ACCESSORY69N: "night-accessory68",
            ACCESSORY70D: "day-accessory69",
            ACCESSORY70N: "night-accessory69",
            ACCESSORY71D: "day-accessory70",
            ACCESSORY71N: "night-accessory70",
            ACCESSORY72D: "day-accessory71",
            ACCESSORY72N: "night-accessory71",
            ACCESSORY73D: "day-accessory72",
            ACCESSORY73N: "night-accessory72",
            ACCESSORY74D: "day-accessory73",
            ACCESSORY74N: "night-accessory73",
            ACCESSORY75D: "day-accessory74",
            ACCESSORY75N: "night-accessory74",
            ACCESSORY76D: "day-accessory75",
            ACCESSORY76N: "night-accessory75",
            ACCESSORY77D: "day-accessory76",
            ACCESSORY77N: "night-accessory76",
            ACCESSORY78D: "day-accessory77",
            ACCESSORY78N: "night-accessory77",
            ACCESSORY79D: "day-accessory78",
            ACCESSORY79N: "night-accessory78",
            ACCESSORY80D: "day-accessory79",
            ACCESSORY80N: "night-accessory79",
            ACCESSORY81D: "day-accessory80",
            ACCESSORY81N: "night-accessory80",
            ACCESSORY82D: "day-accessory81",
            ACCESSORY82N: "night-accessory81",
            BOOK0D: "day-book0",
            BOOK0N: "night-book0",
            BOOK1D: "day-book1",
            BOOK1N: "night-book1",
            BOOK2D: "day-book2",
            BOOK2N: "night-book2",
            BOOK3D: "day-book3",
            BOOK3N: "night-book3",
            BOOK4D: "day-book4",
            BOOK4N: "night-book4",
            BOOK5D: "day-book5",
            BOOK5N: "night-book5",
            BOOK6D: "day-book6",
            BOOK6N: "night-book6",
            BOOK7D: "day-book7",
            BOOK7N: "night-book7",
            BOOK8D: "day-book8",
            BOOK8N: "night-book8",
            BOOK9D: "day-book9",
            BOOK9N: "night-book9",
            BOOK10D: "day-book10",
            BOOK10N: "night-book10",
            BOOK11D: "day-book11",
            BOOK11N: "night-book11",
            BOOK12D: "day-book12",
            BOOK12N: "night-book12",
            BOOK13D: "day-book13",
            BOOK13N: "night-book13",
            BOOK14D: "day-book14",
            BOOK14N: "night-book14",
            BOOK15D: "day-book15",
            BOOK15N: "night-book15",
            BOOK16D: "day-book16",
            BOOK16N: "night-book16",
            BOOK17D: "day-book17",
            BOOK17N: "night-book17",
            BOOK18D: "day-book18",
            BOOK18N: "night-book18",
            BOOK19D: "day-book19",
            BOOK19N: "night-book19",
            BOOK20D: "day-book20",
            BOOK20N: "night-book20",
            BOOK21D: "day-book21",
            BOOK21N: "night-book21",
            BOOK22D: "day-book22",
            BOOK22N: "night-book22",
            BOOK23D: "day-book23",
            BOOK23N: "night-book23",
            BOOK24D: "day-book24",
            BOOK24N: "night-book24",
            BOOK25D: "day-book25",
            BOOK25N: "night-book25",
            BOOK26D: "day-book26",
            BOOK26N: "night-book26",
            BOOK27D: "day-book27",
            BOOK27N: "night-book27",
            BOOK28D: "day-book28",
            BOOK28N: "night-book28",
            BOOK29D: "day-book29",
            BOOK29N: "night-book29",
            BOOK30D: "day-book30",
            BOOK30N: "night-book30",
            BOOK31D: "day-book31",
            BOOK31N: "night-book31",
            BOOK32D: "day-book32",
            BOOK32N: "night-book32",
            BOOK33D: "day-book33",
            BOOK33N: "night-book33",
            BOOK34D: "day-book34",
            BOOK34N: "night-book34",
            BOOK35D: "day-book35",
            BOOK35N: "night-book35",
            BOOK36D: "day-book36",
            BOOK36N: "night-book36",
            BOOK37D: "day-book37",
            BOOK37N: "night-book37",
            BOOK38D: "day-book38",
            BOOK38N: "night-book38",
            BOOK39D: "day-book39",
            BOOK39N: "night-book39",
            BOOK40D: "day-book40",
            BOOK40N: "night-book40",
            BOOK41D: "day-book41",
            BOOK41N: "night-book41",
            BOOK42D: "day-book42",
            BOOK42N: "night-book42",
            BOOK43D: "day-book43",
            BOOK43N: "night-book43",
            BOOK44D: "day-book44",
            BOOK44N: "night-book44",
            BOOK45D: "day-book45",
            BOOK45N: "night-book45",
            CRATE1D: "day-crate1",
            CRATE1N: "night-crate1",
            CRATE2D: "day-crate2",
            CRATE2N: "night-crate2",
            CRATE3D: "day-crate3",
            CRATE3N: "night-crate3",
            CRATE4D: "day-crate4",
            CRATE4N: "night-crate4",
            CRATE5D: "day-crate5",
            CRATE5N: "night-crate5",
            CRATE6D: "day-crate6",
            CRATE6N: "night-crate6",
            CRATE7D: "day-crate7",
            CRATE7N: "night-crate7",
            CRATE8D: "day-crate8",
            CRATE8N: "night-crate8",
            CRATE9D: "day-crate9",
            CRATE9N: "night-crate9",
            CRATE10D: "day-crate10",
            CRATE10N: "night-crate10",
            CRATE11D: "day-crate11",
            CRATE11N: "night-crate11",
            CRATE12D: "day-crate12",
            CRATE12N: "night-crate12",
            CRATE13D: "day-crate13",
            CRATE13N: "night-crate13",
            CRATE14D: "day-crate14",
            CRATE14N: "night-crate14",
            CRATE15D: "day-crate15",
            CRATE15N: "night-crate15",
            CRATE16D: "day-crate16",
            CRATE16N: "night-crate16",
            CRATE17D: "day-crate17",
            CRATE17N: "night-crate17",
            CRATE18D: "day-crate18",
            CRATE18N: "night-crate18",
            CRATE19D: "day-crate19",
            CRATE19N: "night-crate19",
            CRATE20D: "day-crate20",
            CRATE20N: "night-crate20",
            CRATE21D: "day-crate21",
            CRATE21N: "night-crate21",
            CRATE22D: "day-crate22",
            CRATE22N: "night-crate22",
            CRATE23D: "day-crate23",
            CRATE23N: "night-crate23",
            CRATE24D: "day-crate24",
            CRATE24N: "night-crate24",
            CRATE25D: "day-crate25",
            CRATE25N: "night-crate25",
            CRATE26D: "day-crate26",
            CRATE26N: "night-crate26",
            CRATE27D: "day-crate27",
            CRATE27N: "night-crate27",
            CRATE28D: "day-crate28",
            CRATE28N: "night-crate28",
            CRATE29D: "day-crate29",
            CRATE29N: "night-crate29",
            CRATE30D: "day-crate30",
            CRATE30N: "night-crate30",
            CRATE31D: "day-crate31",
            CRATE31N: "night-crate31",
            CRATE32D: "day-crate32",
            CRATE32N: "night-crate32",
            CRATE33D: "day-crate33",
            CRATE33N: "night-crate33",
            CRATE34D: "day-crate34",
            CRATE34N: "night-crate34",
            CRATE35D: "day-crate35",
            CRATE35N: "night-crate35",
            CRATE36D: "day-crate36",
            CRATE36N: "night-crate36",
            CRATE37D: "day-crate37",
            CRATE37N: "night-crate37",
            CRATE38D: "day-crate38",
            CRATE38N: "night-crate38",
            CRATE39D: "day-crate39",
            CRATE39N: "night-crate39",
            CRATE40D: "day-crate40",
            CRATE40N: "night-crate40",
            CRATE41D: "day-crate41",
            CRATE41N: "night-crate41",
            CRATE42D: "day-crate42",
            CRATE42N: "night-crate42",
            CRATE43D: "day-crate43",
            CRATE43N: "night-crate43",
            CRATE44D: "day-crate44",
            CRATE44N: "night-crate44",
            CRATE45D: "day-crate45",
            CRATE45N: "night-crate45",
            CRATE46D: "day-crate46",
            CRATE46N: "night-crate46",
            CRATE47D: "day-crate47",
            CRATE47N: "night-crate47",
            CRATE48D: "day-crate48",
            CRATE48N: "night-crate48",
            CRATE49D: "day-crate49",
            CRATE49N: "night-crate49",
            CRATE50D: "day-crate50",
            CRATE50N: "night-crate50",
            CRATE51D: "day-crate51",
            CRATE51N: "night-crate51",
            CRATE52D: "day-crate52",
            CRATE52N: "night-crate52",
            CRATE53D: "day-crate53",
            CRATE53N: "night-crate53",
            CRATE54D: "day-crate54",
            CRATE54N: "night-crate54",
            CRATE55D: "day-crate55",
            CRATE55N: "night-crate55",
            CRATE56D: "day-crate56",
            CRATE56N: "night-crate56",
            CRATE57D: "day-crate57",
            CRATE57N: "night-crate57",
            CRATE58D: "day-crate58",
            CRATE58N: "night-crate58",
            CRATE59D: "day-crate59",
            CRATE59N: "night-crate59",
            CRATE60D: "day-crate60",
            CRATE60N: "night-crate60",
            CRATE61D: "day-crate61",
            CRATE61N: "night-crate61",
            CRATE62D: "day-crate62",
            CRATE62N: "night-crate62",
            CRATE63D: "day-crate63",
            CRATE63N: "night-crate63",
            CRATE64D: "day-crate64",
            CRATE64N: "night-crate64",
            CRATE65D: "day-crate65",
            CRATE65N: "night-crate65",
            CRATE66D: "day-crate66",
            CRATE66N: "night-crate66",
            CRATE67D: "day-crate67",
            CRATE67N: "night-crate67",
            CRATE68D: "day-crate68",
            CRATE68N: "night-crate68",
            CRATE69D: "day-crate69",
            CRATE69N: "night-crate69",
            CRATE70D: "day-crate70",
            CRATE70N: "night-crate70",
            CRATE71D: "day-crate71",
            CRATE71N: "night-crate71",
            CRATE72D: "day-crate72",
            CRATE72N: "night-crate72",
            DECORATION_0D: "day-herb0",
            DECORATION_1D: "day-herb1",
            DECORATION_2D: "day-herb2",
            DECORATION_3D: "day-herb3",
            DECORATION_4D: "day-herb4",
            DECORATION_5D: "day-herb5",
            DECORATION_6D: "day-herb6",
            DECORATION_7D: "day-herb7",
            DECORATION_8D: "day-herb8",
            DECORATION_9D: "day-herb9",
            DECORATION_10D: "day-herb10",
            DECORATION_11D: "day-herb11",
            DECORATION_12D: "day-herb12",
            DECORATION_13D: "day-herb13",
            DECORATION_14D: "day-herb14",
            DECORATION_15D: "day-herb15",
            DECORATION_16D: "day-shell0",
            DECORATION_17D: "day-shell1",
            DECORATION_18D: "day-shell2",
            DECORATION_19D: "day-leaf1",
            DECORATION_20D: "day-leaf2",
            DECORATION_21D: "day-leaf3",
            DECORATION_22D: "day-leaf4",
            DECORATION_23D: "day-leaf5",
            DECORATION_24D: "day-leaf6",
            DECORATION_25D: "day-leaf7",
            DECORATION_26D: "day-leaf8",
            DECORATION_27D: "day-rock0",
            DECORATION_28D: "day-rock1",
            DECORATION_29D: "day-rock2",
            DECORATION_30D: "day-rock3",
            DECORATION_31D: "day-rock4",
            DECORATION_32D: "day-rock5",
            DECORATION_33D: "day-rock6",
            DECORATION_34D: "day-rock7",
            DECORATION_35D: "day-rock8",
            DECORATION_36D: "day-rock9",
            DECORATION_37D: "day-rock10",
            DECORATION_38D: "day-rock11",
            DECORATION_39D: "day-rock12",
            DECORATION_40D: "day-rock13",
            DECORATION_41D: "day-flower1",
            DECORATION_42D: "day-flower2",
            DECORATION_43D: "day-flower3",
            DECORATION_44D: "day-flower4",
            DECORATION_45D: "day-flower5",
            DECORATION_46D: "day-flower6",
            DECORATION_47D: "day-flower7",
            DECORATION_48D: "day-flower8",
            DECORATION_49D: "day-flower9",
            DECORATION_50D: "day-herb16",
            DECORATION_51D: "day-herb17",
            DECORATION_52D: "day-herb18",
            DECORATION_53D: "day-herb19",
            DECORATION_54D: "day-herb20",
            DECORATION_55D: "day-herb21",
            DECORATION_0N: "night-herb0",
            DECORATION_1N: "night-herb1",
            DECORATION_2N: "night-herb2",
            DECORATION_3N: "night-herb3",
            DECORATION_4N: "night-herb4",
            DECORATION_5N: "night-herb5",
            DECORATION_6N: "night-herb6",
            DECORATION_7N: "night-herb7",
            DECORATION_8N: "night-herb8",
            DECORATION_9N: "night-herb9",
            DECORATION_10N: "night-herb10",
            DECORATION_11N: "night-herb11",
            DECORATION_12N: "night-herb12",
            DECORATION_13N: "night-herb13",
            DECORATION_14N: "night-herb14",
            DECORATION_15N: "night-herb15",
            DECORATION_16N: "night-shell0",
            DECORATION_17N: "night-shell1",
            DECORATION_18N: "night-shell2",
            DECORATION_19N: "night-leaf1",
            DECORATION_20N: "night-leaf2",
            DECORATION_21N: "night-leaf3",
            DECORATION_22N: "night-leaf4",
            DECORATION_23N: "night-leaf5",
            DECORATION_24N: "night-leaf6",
            DECORATION_25N: "night-leaf7",
            DECORATION_26N: "night-leaf8",
            DECORATION_27N: "night-rock0",
            DECORATION_28N: "night-rock1",
            DECORATION_29N: "night-rock2",
            DECORATION_30N: "night-rock3",
            DECORATION_31N: "night-rock4",
            DECORATION_32N: "night-rock5",
            DECORATION_33N: "night-rock6",
            DECORATION_34N: "night-rock7",
            DECORATION_35N: "night-rock8",
            DECORATION_36N: "night-rock9",
            DECORATION_37N: "night-rock10",
            DECORATION_38N: "night-rock11",
            DECORATION_39N: "night-rock12",
            DECORATION_40N: "night-rock13",
            DECORATION_41N: "night-flower1",
            DECORATION_42N: "night-flower2",
            DECORATION_43N: "night-flower3",
            DECORATION_44N: "night-flower4",
            DECORATION_45N: "night-flower5",
            DECORATION_46N: "night-flower6",
            DECORATION_47N: "night-flower7",
            DECORATION_48N: "night-flower8",
            DECORATION_49N: "night-flower9",
            DECORATION_50N: "night-herb16",
            DECORATION_51N: "night-herb17",
            DECORATION_52N: "night-herb18",
            DECORATION_53N: "night-herb19",
            DECORATION_54N: "night-herb20",
            DECORATION_55N: "night-herb21",
            DAY_RIVER_000_010_000: "day-river000-010-000",
            DAY_RIVER_000_010_010: "day-river000-010-010",
            DAY_RIVER_000_011_000: "day-river000-011-000",
            DAY_RIVER_000_011_010: "day-river000-011-010",
            DAY_RIVER_000_011_011: "day-river000-011-011",
            DAY_RIVER_000_110_000: "day-river000-110-000",
            DAY_RIVER_000_110_010: "day-river000-110-010",
            DAY_RIVER_000_110_110: "day-river000-110-110",
            DAY_RIVER_000_111_000: "day-river000-111-000",
            DAY_RIVER_000_111_010: "day-river000-111-010",
            DAY_RIVER_000_111_011: "day-river000-111-011",
            DAY_RIVER_000_111_110: "day-river000-111-110",
            DAY_RIVER_000_111_111: "day-river000-111-111",
            DAY_RIVER_010_010_000: "day-river010-010-000",
            DAY_RIVER_010_010_010: "day-river010-010-010",
            DAY_RIVER_010_011_000: "day-river010-011-000",
            DAY_RIVER_010_011_010: "day-river010-011-010",
            DAY_RIVER_010_011_011: "day-river010-011-011",
            DAY_RIVER_010_110_000: "day-river010-110-000",
            DAY_RIVER_010_110_010: "day-river010-110-010",
            DAY_RIVER_010_110_110: "day-river010-110-110",
            DAY_RIVER_010_111_000: "day-river010-111-000",
            DAY_RIVER_010_111_010: "day-river010-111-010",
            DAY_RIVER_010_111_011: "day-river010-111-011",
            DAY_RIVER_010_111_110: "day-river010-111-110",
            DAY_RIVER_010_111_111: "day-river010-111-111",
            DAY_RIVER_011_011_000: "day-river011-011-000",
            DAY_RIVER_011_011_010: "day-river011-011-010",
            DAY_RIVER_011_011_011: "day-river011-011-011",
            DAY_RIVER_011_111_000: "day-river011-111-000",
            DAY_RIVER_011_111_010: "day-river011-111-010",
            DAY_RIVER_011_111_011: "day-river011-111-011",
            DAY_RIVER_011_111_110: "day-river011-111-110",
            DAY_RIVER_011_111_111: "day-river011-111-111",
            DAY_RIVER_110_110_000: "day-river110-110-000",
            DAY_RIVER_110_110_010: "day-river110-110-010",
            DAY_RIVER_110_110_110: "day-river110-110-110",
            DAY_RIVER_110_111_000: "day-river110-111-000",
            DAY_RIVER_110_111_010: "day-river110-111-010",
            DAY_RIVER_110_111_011: "day-river110-111-011",
            DAY_RIVER_110_111_110: "day-river110-111-110",
            DAY_RIVER_110_111_111: "day-river110-111-111",
            DAY_RIVER_111_111_011: "day-river111-111-011",
            DAY_RIVER_111_111_110: "day-river111-111-110",
            DAY_RIVER_111_111_011: "day-river111-111-011",
            DAY_RIVER_111_111_000: "day-river111-111-000",
            DAY_RIVER_111_111_111: "day-river111-111-111",
            DAY_RIVER_111_111_010: "day-river111-111-010",
            NIGHT_RIVER_000_010_000: "night-river000-010-000",
            NIGHT_RIVER_000_010_010: "night-river000-010-010",
            NIGHT_RIVER_000_011_000: "night-river000-011-000",
            NIGHT_RIVER_000_011_010: "night-river000-011-010",
            NIGHT_RIVER_000_011_011: "night-river000-011-011",
            NIGHT_RIVER_000_110_000: "night-river000-110-000",
            NIGHT_RIVER_000_110_010: "night-river000-110-010",
            NIGHT_RIVER_000_110_110: "night-river000-110-110",
            NIGHT_RIVER_000_111_000: "night-river000-111-000",
            NIGHT_RIVER_000_111_010: "night-river000-111-010",
            NIGHT_RIVER_000_111_011: "night-river000-111-011",
            NIGHT_RIVER_000_111_110: "night-river000-111-110",
            NIGHT_RIVER_000_111_111: "night-river000-111-111",
            NIGHT_RIVER_010_010_000: "night-river010-010-000",
            NIGHT_RIVER_010_010_010: "night-river010-010-010",
            NIGHT_RIVER_010_011_000: "night-river010-011-000",
            NIGHT_RIVER_010_011_010: "night-river010-011-010",
            NIGHT_RIVER_010_011_011: "night-river010-011-011",
            NIGHT_RIVER_010_110_000: "night-river010-110-000",
            NIGHT_RIVER_010_110_010: "night-river010-110-010",
            NIGHT_RIVER_010_110_110: "night-river010-110-110",
            NIGHT_RIVER_010_111_000: "night-river010-111-000",
            NIGHT_RIVER_010_111_010: "night-river010-111-010",
            NIGHT_RIVER_010_111_011: "night-river010-111-011",
            NIGHT_RIVER_010_111_110: "night-river010-111-110",
            NIGHT_RIVER_010_111_111: "night-river010-111-111",
            NIGHT_RIVER_011_011_000: "night-river011-011-000",
            NIGHT_RIVER_011_011_010: "night-river011-011-010",
            NIGHT_RIVER_011_011_011: "night-river011-011-011",
            NIGHT_RIVER_011_111_000: "night-river011-111-000",
            NIGHT_RIVER_011_111_010: "night-river011-111-010",
            NIGHT_RIVER_011_111_011: "night-river011-111-011",
            NIGHT_RIVER_011_111_110: "night-river011-111-110",
            NIGHT_RIVER_011_111_111: "night-river011-111-111",
            NIGHT_RIVER_110_110_000: "night-river110-110-000",
            NIGHT_RIVER_110_110_010: "night-river110-110-010",
            NIGHT_RIVER_110_110_110: "night-river110-110-110",
            NIGHT_RIVER_110_111_000: "night-river110-111-000",
            NIGHT_RIVER_110_111_010: "night-river110-111-010",
            NIGHT_RIVER_110_111_011: "night-river110-111-011",
            NIGHT_RIVER_110_111_110: "night-river110-111-110",
            NIGHT_RIVER_110_111_111: "night-river110-111-111",
            NIGHT_RIVER_111_111_011: "night-river111-111-011",
            NIGHT_RIVER_111_111_110: "night-river111-111-110",
            NIGHT_RIVER_111_111_011: "night-river111-111-011",
            NIGHT_RIVER_111_111_000: "night-river111-111-000",
            NIGHT_RIVER_111_111_111: "night-river111-111-111",
            NIGHT_RIVER_111_111_010: "night-river111-111-010",
            DAY_RIVER_COMPO1: "day-pebblecompo1",
            DAY_RIVER_COMPO2: "day-pebblecompo2",
            DAY_RIVER_COMPO3: "day-pebblecompo3",
            DAY_RIVER_COMPO4: "day-pebblecompo4",
            DAY_RIVER_COMPO5: "day-pebblecompo5",
            DAY_RIVER_COMPO6: "day-pebblecompo6",
            DAY_RIVER_COMPO7: "day-pebblecompo7",
            DAY_RIVER_COMPO8: "day-pebblecompo8",
            DAY_RIVER_COMPO9: "day-pebblecompo9",
            DAY_RIVER_COMPO10: "day-pebblecompo10",
            DAY_RIVER_COMPO11: "day-pebblecompo11",
            DAY_RIVER_COMPO12: "day-pebblecompo12",
            DAY_RIVER_COMPO13: "day-pebblecompo13",
            DAY_RIVER_COMPO14: "day-pebblecompo14",
            DAY_RIVER_COMPO15: "day-pebblecompo15",
            DAY_RIVER_COMPO16: "day-pebblecompo16",
            DAY_RIVER_COMPO17: "day-pebblecompo17",
            DAY_RIVER_COMPO18: "day-pebblecompo18",
            DAY_RIVER_COMPO19: "day-pebblecompo19",
            DAY_RIVER_COMPO20: "day-pebblecompo20",
            DAY_RIVER_COMPO21: "day-pebblecompo21",
            DAY_RIVER_COMPO22: "day-pebblecompo22",
            DAY_RIVER_COMPO23: "day-pebblecompo23",
            DAY_RIVER_COMPO24: "day-pebblecompo24",
            DAY_RIVER_COMPO25: "day-pebblecompo25",
            DAY_RIVER_COMPO26: "day-pebblecompo26",
            DAY_RIVER_COMPO27: "day-pebblecompo27",
            DAY_RIVER_COMPO28: "day-pebblecompo28",
            NIGHT_RIVER_COMPO1: "night-pebblecompo1",
            NIGHT_RIVER_COMPO2: "night-pebblecompo2",
            NIGHT_RIVER_COMPO3: "night-pebblecompo3",
            NIGHT_RIVER_COMPO4: "night-pebblecompo4",
            NIGHT_RIVER_COMPO5: "night-pebblecompo5",
            NIGHT_RIVER_COMPO6: "night-pebblecompo6",
            NIGHT_RIVER_COMPO7: "night-pebblecompo7",
            NIGHT_RIVER_COMPO8: "night-pebblecompo8",
            NIGHT_RIVER_COMPO9: "night-pebblecompo9",
            NIGHT_RIVER_COMPO10: "night-pebblecompo10",
            NIGHT_RIVER_COMPO11: "night-pebblecompo11",
            NIGHT_RIVER_COMPO12: "night-pebblecompo12",
            NIGHT_RIVER_COMPO13: "night-pebblecompo13",
            NIGHT_RIVER_COMPO14: "night-pebblecompo14",
            NIGHT_RIVER_COMPO15: "night-pebblecompo15",
            NIGHT_RIVER_COMPO16: "night-pebblecompo16",
            NIGHT_RIVER_COMPO17: "night-pebblecompo17",
            NIGHT_RIVER_COMPO18: "night-pebblecompo18",
            NIGHT_RIVER_COMPO19: "night-pebblecompo19",
            NIGHT_RIVER_COMPO20: "night-pebblecompo20",
            NIGHT_RIVER_COMPO21: "night-pebblecompo21",
            NIGHT_RIVER_COMPO22: "night-pebblecompo22",
            NIGHT_RIVER_COMPO23: "night-pebblecompo23",
            NIGHT_RIVER_COMPO24: "night-pebblecompo24",
            NIGHT_RIVER_COMPO25: "night-pebblecompo25",
            NIGHT_RIVER_COMPO26: "night-pebblecompo26",
            NIGHT_RIVER_COMPO27: "night-pebblecompo27",
            NIGHT_RIVER_COMPO28: "night-pebblecompo28",
            BABY_MAMMOTHD: "day-baby-mammoth",
            BABY_MAMMOTH_TAMEDD: "day-baby-mammoth-tamed",
            BABY_MAMMOTH_ATTACKD: "day-baby-mammoth-angry",
            BABY_MAMMOTHN: "night-baby-mammoth",
            BABY_MAMMOTH_TAMEDN: "night-baby-mammoth-tamed",
            BABY_MAMMOTH_ATTACKN: "night-baby-mammoth-angry",
            INV_BABY_MAMMOTH_OUT: "inv-mammoth-out",
            INV_BABY_MAMMOTH_IN: "inv-mammoth-in",
            INV_BABY_MAMMOTH_CLICK: "inv-mammoth-click",
            HURT_BABY_MAMMOTH: "hurt-baby-mammoth",
            BABY_MAMMOTH_STEP: "baby-mammoth-step",
            FLOWER_HATD: "day-flower-hat",
            FLOWER_HATN: "night-flower-hat",
            INV_FLOWER_HAT_OUT: "inv-flower-hat-out",
            INV_FLOWER_HAT_IN: "inv-flower-hat-in",
            INV_FLOWER_HAT_CLICK: "inv-flower-hat-click",
            FUR_HATD: "day-fur-hat",
            FUR_HATN: "night-fur-hat",
            INV_FUR_HAT_OUT: "inv-fur-hat-out",
            INV_FUR_HAT_IN: "inv-fur-hat-in",
            INV_FUR_HAT_CLICK: "inv-fur-hat-click",
            MAMMOTHD: "day-mammoth",
            MAMMOTHN: "night-mammoth",
            HURT_MAMMOTH: "hurt-mammoth",
            INV_FUR_MAMMOTH_OUT: "inv-mammoth-fur-out",
            INV_FUR_MAMMOTH_IN: "inv-mammoth-fur-in",
            INV_FUR_MAMMOTH_CLICK: "inv-mammoth-fur-click",
            INV_WOOD_BOW_OUT: "inv-wood-bow-out",
            INV_WOOD_BOW_IN: "inv-wood-bow-in",
            INV_WOOD_BOW_CLICK: "inv-wood-bow-click",
            INV_WOOD_ARROW_OUT: "inv-wood-arrow-out",
            INV_WOOD_ARROW_IN: "inv-wood-arrow-in",
            INV_WOOD_ARROW_CLICK: "inv-wood-arrow-click",
            WOOD_BOWD: "day-wood-bow2",
            WOOD_BOWN: "night-wood-bow2",
            WOOD_ARROWD: "day-wood-arrow",
            WOOD_ARROWN: "night-wood-arrow",
            INV_STONE_BOW_OUT: "inv-stone-bow-out",
            INV_STONE_BOW_IN: "inv-stone-bow-in",
            INV_STONE_BOW_CLICK: "inv-stone-bow-click",
            INV_STONE_ARROW_OUT: "inv-stone-arrow-out",
            INV_STONE_ARROW_IN: "inv-stone-arrow-in",
            INV_STONE_ARROW_CLICK: "inv-stone-arrow-click",
            STONE_BOWD: "day-stone-bow",
            STONE_BOWN: "night-stone-bow",
            STONE_ARROWD: "day-stone-arrow",
            STONE_ARROWN: "night-stone-arrow",
            INV_GOLD_BOW_OUT: "inv-gold-bow-out",
            INV_GOLD_BOW_IN: "inv-gold-bow-in",
            INV_GOLD_BOW_CLICK: "inv-gold-bow-click",
            INV_GOLD_ARROW_OUT: "inv-gold-arrow-out",
            INV_GOLD_ARROW_IN: "inv-gold-arrow-in",
            INV_GOLD_ARROW_CLICK: "inv-gold-arrow-click",
            GOLD_BOWD: "day-gold-bow",
            GOLD_BOWN: "night-gold-bow",
            GOLD_ARROWD: "day-gold-arrow",
            GOLD_ARROWN: "night-gold-arrow",
            INV_DIAMOND_BOW_OUT: "inv-diamond-bow-out",
            INV_DIAMOND_BOW_IN: "inv-diamond-bow-in",
            INV_DIAMOND_BOW_CLICK: "inv-diamond-bow-click",
            INV_DIAMOND_ARROW_OUT: "inv-diamond-arrow-out",
            INV_DIAMOND_ARROW_IN: "inv-diamond-arrow-in",
            INV_DIAMOND_ARROW_CLICK: "inv-diamond-arrow-click",
            DIAMOND_BOWD: "day-diamond-bow",
            DIAMOND_BOWN: "night-diamond-bow",
            DIAMOND_ARROWD: "day-diamond-arrow",
            DIAMOND_ARROWN: "night-diamond-arrow",
            INV_AMETHYST_BOW_OUT: "inv-amethyst-bow-out",
            INV_AMETHYST_BOW_IN: "inv-amethyst-bow-in",
            INV_AMETHYST_BOW_CLICK: "inv-amethyst-bow-click",
            INV_AMETHYST_ARROW_OUT: "inv-amethyst-arrow-out",
            INV_AMETHYST_ARROW_IN: "inv-amethyst-arrow-in",
            INV_AMETHYST_ARROW_CLICK: "inv-amethyst-arrow-click",
            AMETHYST_BOWD: "day-amethyst-bow",
            AMETHYST_BOWN: "night-amethyst-bow",
            AMETHYST_ARROWD: "day-amethyst-arrow",
            AMETHYST_ARROWN: "night-amethyst-arrow",
            INV_DRAGON_BOW_OUT: "inv-dragon-bow-out",
            INV_DRAGON_BOW_IN: "inv-dragon-bow-in",
            INV_DRAGON_BOW_CLICK: "inv-dragon-bow-click",
            INV_DRAGON_ARROW_OUT: "inv-dragon-arrow-out",
            INV_DRAGON_ARROW_IN: "inv-dragon-arrow-in",
            INV_DRAGON_ARROW_CLICK: "inv-dragon-arrow-click",
            DRAGON_BOWD: "day-dragon-bow",
            DRAGON_BOWN: "night-dragon-bow",
            DRAGON_ARROWD: "day-dragon-arrow",
            DRAGON_ARROWN: "night-dragon-arrow",
            INV_REIDITE_BOW_OUT: "inv-reidite-bow-out",
            INV_REIDITE_BOW_IN: "inv-reidite-bow-in",
            INV_REIDITE_BOW_CLICK: "inv-reidite-bow-click",
            INV_REIDITE_ARROW_OUT: "inv-reidite-arrow-out",
            INV_REIDITE_ARROW_IN: "inv-reidite-arrow-in",
            INV_REIDITE_ARROW_CLICK: "inv-reidite-arrow-click",
            REIDITE_BOWD: "day-reidite-bow",
            REIDITE_BOWN: "night-reidite-bow",
            REIDITE_ARROWD: "day-reidite-arrow",
            REIDITE_ARROWN: "night-reidite-arrow",
            MICROPHONE: "microphone",
            BANDAGE_ACTIVATED: "bandage-activated",
            AUTO_FEED: "auto-feed",
            STOP_REGENERATION_BLIZZARD: "stop-regeneration",
            STOP_REGENERATION: "stop-regeneration2",
            WOOD_TOWERD: "day-wood-platform",
            WOOD_TOWERN: "night-wood-platform",
            INV_WOOD_TOWER_IN: "inv-wood-platform-in",
            INV_WOOD_TOWER_OUT: "inv-wood-platform-out",
            INV_WOOD_TOWER_CLICK: "inv-wood-platform-click",
            WOOD_SHIELDD: "day-wood-shield",
            WOOD_SHIELDN: "night-wood-shield",
            STONE_SHIELDD: "day-stone-shield",
            STONE_SHIELDN: "night-stone-shield",
            GOLD_SHIELDD: "day-gold-shield",
            GOLD_SHIELDN: "night-gold-shield",
            DIAMOND_SHIELDD: "day-diamond-shield",
            DIAMOND_SHIELDN: "night-diamond-shield",
            AMETHYST_SHIELDD: "day-amethyst-shield",
            AMETHYST_SHIELDN: "night-amethyst-shield",
            REIDITE_SHIELDD: "day-reidite-shield",
            REIDITE_SHIELDN: "night-reidite-shield",
            INV_WOOD_SHIELD_IN: "inv-wood-shield-in",
            INV_WOOD_SHIELD_OUT: "inv-wood-shield-out",
            INV_WOOD_SHIELD_CLICK: "inv-wood-shield-click",
            INV_STONE_SHIELD_IN: "inv-stone-shield-in",
            INV_STONE_SHIELD_OUT: "inv-stone-shield-out",
            INV_STONE_SHIELD_CLICK: "inv-stone-shield-click",
            INV_GOLD_SHIELD_IN: "inv-gold-shield-in",
            INV_GOLD_SHIELD_OUT: "inv-gold-shield-out",
            INV_GOLD_SHIELD_CLICK: "inv-gold-shield-click",
            INV_DIAMOND_SHIELD_IN: "inv-diamond-shield-in",
            INV_DIAMOND_SHIELD_OUT: "inv-diamond-shield-out",
            INV_DIAMOND_SHIELD_CLICK: "inv-diamond-shield-click",
            INV_AMETHYST_SHIELD_IN: "inv-amethyst-shield-in",
            INV_AMETHYST_SHIELD_OUT: "inv-amethyst-shield-out",
            INV_AMETHYST_SHIELD_CLICK: "inv-amethyst-shield-click",
            INV_REIDITE_SHIELD_IN: "inv-reidite-shield-in",
            INV_REIDITE_SHIELD_OUT: "inv-reidite-shield-out",
            INV_REIDITE_SHIELD_CLICK: "inv-reidite-shield-click",
            MACHETED: "day-machete",
            MACHETEN: "night-machete",
            INV_MACHETE_IN: "inv-machete-in",
            INV_MACHETE_OUT: "inv-machete-out",
            INV_MACHETE_CLICK: "inv-machete-click"
        };
        class C {
            constructor() {
            this.m = 2147483648;
            this.a = 1103515245;
            this.c = 12345;
            }
            init(e) {
            this.state = e || window.Math.floor(window.Math.random() * (this.m - 1));
            }
            random() {
            this.state = (this.a * this.state + this.c) % this.m;
            return this.state / this.m;
            }
            set_seed(e) {
            this.state = e;
            }
            get() {
            this.state = (this.a * this.state + this.c) % this.m;
            return this.state / this.m;
            }
        }
        const b = 10000;
        const N = [];
        const D = new C();
        D.set_seed(new window.Date().getTime());
        for (let e = 0; e < b; e++) {
            N.push(D.random());
        }
        class m {
            constructor(e, t, i, o, T, r) {
            this.x1 = t * 100;
            this.y1 = i * 100;
            this.w = o * 100;
            this.h = T * 100;
            this.x2 = (t + o) * 100;
            this.y2 = (i + T) * 100;
            this.t = e;
            this.v = r;
            }
        }
        const c = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
        class v {
            static copy_vector(e, t) {
            t.x = e.x;
            t.y = e.y;
            }
            static get_vector(e, t) {
            return {
                x: e.x - t.x,
                y: e.y - t.y
            };
            }
            static scalar_product(e, t) {
            return e.x * t.x + e.y * t.y;
            }
            static norm(e) {
            return window.Math.sqrt(e.x * e.x + e.y * e.y);
            }
            static sign(e) {
            if (e < 0) {
                return -1;
            } else {
                return 1;
            }
            }
            static sign_(e) {
            if (e === 0) {
                return 0;
            } else if (e > 0) {
                return 1;
            } else {
                return -1;
            }
            }
            static cross_product(e, t) {
            return e.x * t.y - e.y * t.x;
            }
            static get_angle_2(e, t, i, o) {
            var T = o - t;
            var r = i - e;
            return window.Math.atan2(T, r);
            }
            static get_angle(e, t) {
            return window.Math.acos(this.scalar_product(e, t) / (this.norm(e) * this.norm(t))) * this.sign(this.cross_product(e, t));
            }
            static getURLData(e) {
            let t = location.href;
            e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var i = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(t);
            if (i === null) {
                return null;
            } else {
                return i[1];
            }
            }
            static reduceAngle(e, t) {
            t = (t % T + T) % T;
            if (window.Math.abs(e - t) > window.Math.PI) {
                if (e > t) {
                return t + T;
                } else {
                return t - T;
                }
            } else {
                return t;
            }
            }
            static get_std_angle(e, t) {
            return this.get_angle({
                x: 1,
                y: 0
            }, this.get_vector(e, t));
            }
            static dist(e, t) {
            return window.Math.sqrt((t.x - e.x) * (t.x - e.x) + (t.y - e.y) * (t.y - e.y));
            }
            static build_vector(e, t) {
            return {
                x: window.Math.cos(t) * e,
                y: window.Math.sin(t) * e
            };
            }
            static add_vector(e, t) {
            e.x += t.x;
            e.y += t.y;
            }
            static sub_vector(e, t) {
            e.x -= t.x;
            e.y -= t.y;
            }
            static middle_point(e, t) {
            return {
                x: (e.x + t.x) / 2,
                y: (e.y + t.y) / 2
            };
            }
            static restore_number(e) {
            if (e >= 60000) {
                e = (e - 60000) * 10000000;
            } else if (e >= 50000) {
                e = (e - 50000) * 1000000;
            } else if (e >= 40000) {
                e = (e - 40000) * 100000;
            } else if (e >= 30000) {
                e = (e - 30000) * 10000;
            } else if (e >= 20000) {
                e = (e - 20000) * 1000;
            } else if (e >= 10000) {
                e = (e - 10000) * 100;
            }
            return e;
            }
            static simplify_number(e) {
            if (typeof e != "number") {
                return "0";
            } else if (e >= 1000000000000) {
                return (e / 1000000000000).toFixed(2).replace(/\.00$/, "") + "t";
            } else if (e >= 1000000000) {
                return (e / 1000000000).toFixed(2).replace(/\.00$/, "") + "b";
            } else if (e >= 1000000) {
                return (e / 1000000).toFixed(2).replace(/\.00$/, "") + "m";
            } else if (e >= 10000) {
                return (e / 1000).toFixed(1).replace(/\.00$/, "") + "k";
            } else {
                return "" + e;
            }
            }
            static ease_out_quad(e) {
            return e * (2 - e);
            }
            static ease_out_cubic(e) {
            return --e * e * e + 1;
            }
            static ease_in_out_quad(e) {
            if (e < 0.5) {
                return e * 2 * e;
            } else {
                return (4 - e * 2) * e - 1;
            }
            }
            static ease_in_out_cubic(e) {
            if (e < 0.5) {
                return e * 4 * e * e;
            } else {
                return (e - 1) * (e * 2 - 2) * (e * 2 - 2) + 1;
            }
            }
            static ease_out_quart(e) {
            return 1 - --e * e * e * e;
            }
            static ease_out_quint(e) {
            return 1 + --e * e * e * e * e;
            }
            static generate_token(e) {
            var t = "";
            for (var i = 0; i < e; i++) {
                t += c[~~(Math.random() * 63)];
            }
            return t;
            }
            static gup(e, t) {
            t ||= location.href;
            e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var i = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(t);
            if (i == null) {
                return null;
            } else {
                return i[1];
            }
            }
            static intersect_aabb(e, t, i, o, T, r, n, a) {
            if (window.Math.max(e, T) < window.Math.min(t, r) && window.Math.max(i, n) < window.Math.min(o, a)) {
                return 1;
            } else {
                return 0;
            }
            }
            static lerp(e, t, i) {
            return (1 - i) * e + i * t;
            }
            static escape_html(e) {
            return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
            }
        }
        class P {
            constructor(e, t, i, o, T, r) {
            this.o = e;
            this.v = t;
            this.max = i;
            this.min = o;
            this.max_speed = T;
            this.min_speed = r;
            this.last = 0;
            this.update = function () {
                if (this.o) {
                if ((e = this.v + Xn * this.max_speed) > this.max) {
                    this.v = this.max;
                    this.o = false;
                    return true;
                }
                this.v = e;
                } else {
                var e;
                if ((e = this.v - Xn * this.min_speed) < this.min) {
                    this.v = this.min;
                    this.o = true;
                } else {
                    this.v = e;
                }
                }
            };
            return false;
            }
        }
        class p {
            constructor(e, t, i, o, T, r, n) {
            this.fun = e;
            this.ed = t;
            this.em = i;
            this.sx = o;
            this.x = T;
            this.ex = r;
            }
            ease(e) {
            if (e !== this.ex) {
                this.ex = e;
                this.sx = this.x;
                this.ed = 0;
            }
            if (this.ex !== this.x) {
                this.ed += Xn;
                if (this.ed > this.em) {
                this.x = this.ex;
                } else {
                var t = this.fun(this.ed / this.em);
                this.x = this.sx + (this.ex - this.sx) * t;
                }
            }
            }
            restart() {
            this.x = this.sx;
            this.ed = 0;
            }
        }
        class g {
            constructor(e, t, i, o, T, r, n, a, I) {
            this.fun = e;
            this.ed = t;
            this.em = i;
            this.sx = o;
            this.sy = T;
            this.x = r;
            this.y = n;
            this.ex = a;
            this.ey = I;
            this.ease = function (e) {
                if (e.x != this.ex || e.y != this.ey) {
                this.ex = e.x;
                this.ey = e.y;
                this.sx = this.x;
                this.sy = this.y;
                this.ed = 0;
                }
                if (this.ex != this.x || this.ey != this.y) {
                this.ed += Xn;
                if (this.ed > this.em) {
                    this.x = this.ex;
                    this.y = this.ey;
                } else {
                    var t = this.fun(this.ed / this.em);
                    this.x = this.sx + (this.ex - this.sx) * t;
                    this.y = this.sy + (this.ey - this.sy) * t;
                }
                }
            };
            }
        }
        var M = window.document.getElementById("game_canvas");
        var L = M.getContext("2d");
        var H = M.width;
        var f = M.height;
        var z = M.width / 2;
        var B = M.height / 2;
        var G = {
            x: z,
            y: B
        };
        var W = 1;
        var V = 1;
        var K = 1;
        function Y(e) {
            var t = new Image();
            t.src = e.toDataURL("image/png");
            t.width = e.width;
            t.height = e.height;
            t.isLoaded = 1;
            return t;
        }
        var U = window.devicePixelRatio || 1;
        var k = L.webkitBackingStorePixelRatio || L.mozBackingStorePixelRatio || L.msBackingStorePixelRatio || L.oBackingStorePixelRatio || L.backingStorePixelRatio || 1;
        var F = window.document.getElementById("game_body");
        F.ondragstart = __p_5863156023(() => {
            return false;
        }, 0);
        F.ondrop = __p_5863156023(() => {
            return false;
        }, 0);
        (() => {
            var e = 0;
            for (var t = ["ms", "moz", "webkit", "o"], i = 0; i < t.length && !window.requestAnimationFrame; ++i) {
            window.requestAnimationFrame = window[t[i] + "RequestAnimationFrame"];
            window.cancelAnimationFrame = window[t[i] + "CancelAnimationFrame"] || window[t[i] + "CancelRequestAnimationFrame"];
            }
            window.requestAnimationFrame ||= __p_5863156023((t, i) => {
            var o = new window.Date().getTime();
            var T = window.Math.max(0, 16 - (o - e));
            var r = window.setTimeout(() => {
                t(o + T);
                return undefined;
            }, T);
            e = o + T;
            return r;
            }, 2);
            window.cancelAnimationFrame ||= __p_5863156023(e => {
            window.clearTimeout(e);
            }, 1);
        })();
        var J = navigator.language || navigator.userLanguage;
        var X = -new window.Date().getTimezoneOffset() / 60;
        var q = "Europe";
        var Z = "South America";
        var $ = q;
        if (X >= -2 && X <= 2) {
            $ = q;
        } else if (X > 2 && X <= 5) {
            $ = "Russia";
        } else if (X > 5 && X <= 9) {
            $ = "Asia";
        } else if (X > 9) {
            $ = "Australia";
        } else if (X >= -5 && X < -2) {
            $ = J === "pt-BR" || J === "pt-br" || J === "pt" || J === "pt-pt" ? Z : "North America";
        } else if (X < -5) {
            $ = J === "pt-BR" || J === "pt-br" || J === "pt" || J === "pt-pt" ? Z : "West America";
        }
        var Q = [];
        Q[ItemType.WOOD] = {
            img: SPRITE.INV_WOOD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.STONE] = {
            img: SPRITE.INV_STONE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GOLD] = {
            img: SPRITE.INV_GOLD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.DIAMOND] = {
            img: SPRITE.INV_DIAMOND,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.AMETHYST] = {
            img: SPRITE.INV_AMETHYST,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.RABBIT_FUR] = {
            img: SPRITE.INV_FUR,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WOLF_FUR] = {
            img: SPRITE.INV_FUR_WOLF,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BOAR_FUR] = {
            img: SPRITE.INV_FUR_BOAR,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.FIREFLY] = {
            img: SPRITE.INV_FIREFLY,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WOOD_ARROW] = {
            img: SPRITE.INV_WOOD_ARROW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_ARROW] = {
            img: SPRITE.INV_STONE_ARROW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_ARROW] = {
            img: SPRITE.INV_GOLD_ARROW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_ARROW] = {
            img: SPRITE.INV_DIAMOND_ARROW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_ARROW] = {
            img: SPRITE.INV_AMETHYST_ARROW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_ARROW] = {
            img: SPRITE.INV_REIDITE_ARROW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DRAGON_ARROW] = {
            img: SPRITE.INV_DRAGON_ARROW,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WINTER_FUR] = {
            img: SPRITE.INV_FUR_WINTER,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.MAMMOTH_FUR] = {
            img: SPRITE.INV_FUR_MAMMOTH,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CORD] = {
            img: SPRITE.INV_CORD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.MEAT] = {
            img: SPRITE.INV_MEAT,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.FISH] = {
            img: SPRITE.INV_FOODFISH,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.KRAKEN_FUR] = {
            img: SPRITE.INV_KRAKEN_SKIN,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.PIRANHA_SCALES] = {
            img: SPRITE.INV_SCALES,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.ICE] = {
            img: ItemType.ICE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.SAND] = {
            img: ItemType.SAND,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GROUND] = {
            img: ItemType.GROUND,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BERRY] = {
            img: SPRITE.INV_PLANT,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.FLOUR] = {
            img: SPRITE.INV_FLOUR,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WHEAT] = {
            img: SPRITE.INV_WILD_WHEAT,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WINTER_PEASANT_FUR] = {
            img: ItemType.WINTER_HOOD_FUR,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WINTER_HOOD_FUR] = {
            img: ItemType.WINTER_PEASANT_FUR,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.PUMPKIN] = {
            img: SPRITE.INV_PUMPKIN,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GARLIC] = {
            img: SPRITE.INV_GARLIC,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.THORNBUSH] = {
            img: SPRITE.INV_THORNBUSH,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CARROT] = {
            img: SPRITE.INV_CARROT,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.TOMATO] = {
            img: SPRITE.INV_TOMATO,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WATERMELON] = {
            img: SPRITE.INV_WATERMELON,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.ALOE_VERA] = {
            img: SPRITE.INV_ALOE_VERA,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.PENGUIN_FEATHER] = {
            img: SPRITE.INV_PENGUIN_FEATHER,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.HAWK_FEATHER] = {
            img: SPRITE.INV_HAWK_FEATHER,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.VULTURE_FEATHER] = {
            img: SPRITE.INV_VULTURE_FEATHER,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CACTUS] = {
            img: SPRITE.INV_CACTUS,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.PILOT_GLASSES] = {
            img: SPRITE.INV_PILOT_GLASSES,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.PITCHFORK_PART] = {
            img: SPRITE.INV_PITCHFORK_PART,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.SANDWORM_JUICE] = {
            img: SPRITE.INV_SANDWORM_JUICE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.EMERALD] = {
            img: SPRITE.INV_EMERALD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CHRISTMAS_HAT] = {
            img: SPRITE.INV_CHRISTMAS_HAT,
            recycle: 0
        };
        Q[ItemType.ELF_HAT] = {
            img: SPRITE.INV_ELF_HAT,
            recycle: 0
        };
        Q[ItemType.GARLAND] = {
            img: SPRITE.INV_GARLAND,
            recycle: 0,
            grid: 0
        };
        Q[ItemType.CANDY] = {
            img: ItemType.CANDY,
            recycle: 0
        };
        Q[ItemType.SUGAR_CAN] = {
            img: SPRITE.INV_SUGAR_CAN,
            recycle: 0
        };
        Q[ItemType.PIRATE_SWORD] = {
            img: SPRITE.INV_PIRATE_SWORD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CRAB_STICK] = {
            img: SPRITE.INV_CRAB_STICK,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.REIDITE] = {
            img: SPRITE.INV_REIDITE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.FLAME] = {
            img: SPRITE.INV_FLAME,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.FIRE] = {
            img: SPRITE.CRAFT_FIRE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.BED] = {
            img: SPRITE.CRAFT_BED,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WORKBENCH] = {
            img: SPRITE.CRAFT_WORK,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_SWORD] = {
            img: SPRITE.CRAFT_SWORD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_PICK] = {
            img: SPRITE.CRAFT_PICK,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.BERRY_SEED] = {
            img: SPRITE.CRAFT_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GOLD_PICK] = {
            img: SPRITE.CRAFT_PICK_GOLD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_PICK] = {
            img: SPRITE.CRAFT_PICK_DIAMOND,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_SWORD] = {
            img: SPRITE.CRAFT_SWORD_WOOD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_SWORD] = {
            img: SPRITE.CRAFT_SWORD_GOLD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_SWORD] = {
            img: SPRITE.CRAFT_SWORD_DIAMOND,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_PICK] = {
            img: SPRITE.CRAFT_PICK_WOOD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_WALL] = {
            img: SPRITE.CRAFT_WALL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_SPIKE] = {
            img: SPRITE.CRAFT_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.COOKED_MEAT] = {
            img: SPRITE.CRAFT_COOKED_MEAT,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BIG_FIRE] = {
            img: SPRITE.CRAFT_BIG_FIRE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.BANDAGE] = {
            img: SPRITE.CRAFT_BANDAGE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_WALL] = {
            img: SPRITE.CRAFT_STONE_WALL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_WALL] = {
            img: SPRITE.CRAFT_GOLD_WALL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_WALL] = {
            img: SPRITE.CRAFT_DIAMOND_WALL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_DOOR] = {
            img: SPRITE.CRAFT_DOOR_WOOD_CLOSE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.CHEST] = {
            img: SPRITE.CRAFT_CHEST,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_SPIKE] = {
            img: SPRITE.CRAFT_STONE_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_SPIKE] = {
            img: SPRITE.CRAFT_GOLD_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_SPIKE] = {
            img: SPRITE.CRAFT_DIAMOND_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_DOOR] = {
            img: SPRITE.CRAFT_DOOR_STONE_CLOSE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_DOOR] = {
            img: SPRITE.CRAFT_DOOR_GOLD_CLOSE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_DOOR] = {
            img: SPRITE.CRAFT_DOOR_DIAMOND_CLOSE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.EARMUFFS] = {
            img: SPRITE.CRAFT_EARMUFFS,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.COAT] = {
            img: SPRITE.CRAFT_COAT,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_SPEAR] = {
            img: SPRITE.CRAFT_WOOD_SPEAR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_SPEAR] = {
            img: SPRITE.CRAFT_SPEAR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_SPEAR] = {
            img: SPRITE.CRAFT_GOLD_SPEAR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_SPEAR] = {
            img: SPRITE.CRAFT_DIAMOND_SPEAR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DRAGON_SPEAR] = {
            img: SPRITE.CRAFT_DRAGON_SPEAR,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.LAVA_SPEAR] = {
            img: SPRITE.CRAFT_LAVA_SPEAR,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CRAB_SPEAR] = {
            img: SPRITE.CRAFT_CRAB_SPEAR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.CRAB_LOOT] = {
            img: SPRITE.INV_CRAB_LOOT,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.FURNACE] = {
            img: SPRITE.CRAFT_FURNACE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.EXPLORER_HAT] = {
            img: SPRITE.CRAFT_EXPLORER_HAT,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.PIRATE_HAT] = {
            img: SPRITE.CRAFT_PIRATE_HAT,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.FLOWER_HAT] = {
            img: SPRITE.CRAFT_FLOWER_HAT,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.FUR_HAT] = {
            img: SPRITE.CRAFT_FUR_HAT,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_HELMET] = {
            img: SPRITE.CRAFT_WOOD_HELMET,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_HELMET] = {
            img: SPRITE.CRAFT_STONE_HELMET,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_HELMET] = {
            img: SPRITE.CRAFT_GOLD_HELMET,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_HELMET] = {
            img: SPRITE.CRAFT_DIAMOND_HELMET,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.BOOK] = {
            img: SPRITE.CRAFT_BOOK,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.PAPER] = {
            img: SPRITE.CRAFT_PAPER,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BAG] = {
            img: SPRITE.CRAFT_BAG,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_SWORD] = {
            img: SPRITE.CRAFT_SWORD_AMETHYST,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_PICK] = {
            img: SPRITE.CRAFT_PICK_AMETHYST,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_SPEAR] = {
            img: SPRITE.CRAFT_AMETHYST_SPEAR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_HAMMER] = {
            img: SPRITE.CRAFT_HAMMER,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_HAMMER] = {
            img: SPRITE.CRAFT_HAMMER_GOLD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_HAMMER] = {
            img: SPRITE.CRAFT_HAMMER_DIAMOND,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_HAMMER] = {
            img: SPRITE.CRAFT_HAMMER_AMETHYST,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_HAMMER] = {
            img: SPRITE.CRAFT_HAMMER_REIDITE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_WALL] = {
            img: SPRITE.CRAFT_AMETHYST_WALL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_SPIKE] = {
            img: SPRITE.CRAFT_AMETHYST_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_DOOR] = {
            img: SPRITE.CRAFT_DOOR_AMETHYST_CLOSE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.CAP_SCARF] = {
            img: SPRITE.CRAFT_CAP_SCARF,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_CORD] = {
            img: SPRITE.CRAFT_BLUE_CORD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.LOCK] = {
            img: SPRITE.CRAFT_LOCK,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.RESURRECTION] = {
            img: SPRITE.CRAFT_RESURRECTION,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.LOCK_PICK] = {
            img: SPRITE.CRAFT_LOCKPICK,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.TOTEM] = {
            img: SPRITE.CRAFT_TOTEM,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_HELMET] = {
            img: SPRITE.CRAFT_AMETHYST_HELMET,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.SUPER_HAMMER] = {
            img: SPRITE.CRAFT_SUPER_HAMMER,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.BRIDGE] = {
            img: SPRITE.CRAFT_BRIDGE,
            grid: 1,
            recycle: 1
        };
        Q[ItemType.TOWER] = {
            img: SPRITE.CRAFT_WOOD_TOWER,
            grid: 1,
            recycle: 1
        };
        Q[ItemType.BOTTLE_FULL_3] = {
            img: SPRITE.CRAFT_BOTTLE_FULL,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BOTTLE_FULL_2] = {
            img: SPRITE.CRAFT_BOTTLE_FULL,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BOTTLE_FULL] = {
            img: SPRITE.CRAFT_BOTTLE_FULL,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BOTTLE_EMPTY] = {
            img: SPRITE.CRAFT_BOTTLE_EMPTY,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.STONE_SHOVEL] = {
            img: SPRITE.CRAFT_SHOVEL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WATERING_CAN_EMPTY] = {
            img: SPRITE.CRAFT_WATERING_CAN,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WHEAT_SEED] = {
            img: SPRITE.CRAFT_WHEAT_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.COOKIE] = {
            img: SPRITE.CRAFT_COOKIE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WINDMILL] = {
            img: SPRITE.CRAFT_WINDMILL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.SUPER_DIVING_SUIT] = {
            img: SPRITE.CRAFT_SUPER_DIVING_SUIT,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIVING_MASK] = {
            img: SPRITE.CRAFT_DIVING_MASK,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WATERING_CAN_FULL] = {
            img: SPRITE.CRAFT_WATERING_CAN_FULL,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CAKE] = {
            img: SPRITE.CRAFT_CAKE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.FISH_COOKED] = {
            img: SPRITE.CRAFT_FOODFISH_COOKED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.PLOT] = {
            img: SPRITE.CRAFT_PLOT,
            grid: 1,
            recycle: 1
        };
        Q[ItemType.BREAD] = {
            img: SPRITE.CRAFT_BREAD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GOLD_SHOVEL] = {
            img: SPRITE.CRAFT_SHOVEL_GOLD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_SHOVEL] = {
            img: SPRITE.CRAFT_SHOVEL_DIAMOND,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_SHOVEL] = {
            img: SPRITE.CRAFT_SHOVEL_AMETHYST,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_SHOVEL] = {
            img: SPRITE.CRAFT_SHOVEL_REIDITE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WRENCH] = {
            img: SPRITE.CRAFT_SPANNER,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_WRENCH] = {
            img: SPRITE.INV_GOLD_WRENCH,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.MACHETE] = {
            img: SPRITE.CRAFT_MACHETE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.BREAD_OVEN] = {
            img: SPRITE.CRAFT_BREAD_OVEN,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.SANDWICH] = {
            img: SPRITE.CRAFT_SANDWICH,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.DRAGON_HELMET] = {
            img: SPRITE.CRAFT_DRAGON_HELMET,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.LAVA_HELMET] = {
            img: SPRITE.CRAFT_LAVA_HELMET,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WITCH_HAT] = {
            img: SPRITE.CRAFT_WITCH,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.NIMBUS] = {
            img: SPRITE.CRAFT_NIMBUS,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WAND1] = {
            img: SPRITE.CRAFT_WAND1,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WAND2] = {
            img: SPRITE.CRAFT_WAND2,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.DRAGON_SWORD] = {
            img: SPRITE.CRAFT_DRAGON_SWORD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.LAVA_SWORD] = {
            img: SPRITE.CRAFT_LAVA_SWORD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CURSED_SWORD] = {
            img: SPRITE.CRAFT_CURSED_SWORD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WOOD_SHIELD] = {
            img: SPRITE.CRAFT_WOOD_SHIELD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_SHIELD] = {
            img: SPRITE.CRAFT_STONE_SHIELD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_SHIELD] = {
            img: SPRITE.CRAFT_GOLD_SHIELD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_SHIELD] = {
            img: SPRITE.CRAFT_DIAMOND_SHIELD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_SHIELD] = {
            img: SPRITE.CRAFT_AMETHYST_SHIELD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_SHIELD] = {
            img: SPRITE.CRAFT_REIDITE_SHIELD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_BOW] = {
            img: SPRITE.CRAFT_WOOD_BOW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_BOW] = {
            img: SPRITE.CRAFT_STONE_BOW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_BOW] = {
            img: SPRITE.CRAFT_GOLD_BOW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_BOW] = {
            img: SPRITE.CRAFT_DIAMOND_BOW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_BOW] = {
            img: SPRITE.CRAFT_AMETHYST_BOW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_BOW] = {
            img: SPRITE.CRAFT_REIDITE_BOW,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DRAGON_BOW] = {
            img: SPRITE.CRAFT_DRAGON_BOW,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CROWN_GREEN] = {
            img: SPRITE.CRAFT_CROWN_GREEN,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GEM_GREEN] = {
            img: ItemType.GEM_GREEN,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.DRAGON_ORB] = {
            img: SPRITE.INV_DRAGON_ORB,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.LAVA_ORB] = {
            img: SPRITE.INV_LAVA_ORB,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.DRAGON_CUBE] = {
            img: SPRITE.INV_DRAGON_CUBE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.LAVA_CUBE] = {
            img: SPRITE.INV_LAVA_CUBE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CROWN_ORANGE] = {
            img: SPRITE.CRAFT_CROWN_ORANGE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GEM_ORANGE] = {
            img: ItemType.GEM_ORANGE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CROWN_BLUE] = {
            img: SPRITE.CRAFT_CROWN_BLUE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GEM_BLUE] = {
            img: ItemType.GEM_BLUE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.DRAGON_HEART] = {
            img: SPRITE.INV_DRAGON_HEART,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.LAVA_HEART] = {
            img: SPRITE.INV_LAVA_HEART,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.HOOD] = {
            img: SPRITE.CRAFT_HOOD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.PEASANT] = {
            img: SPRITE.CRAFT_PEASANT,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WINTER_PEASANT] = {
            img: SPRITE.CRAFT_WINTER_PEASANT,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WINTER_HOOD] = {
            img: SPRITE.CRAFT_WINTER_HOOD,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BUCKET_FULL] = {
            img: SPRITE.CRAFT_BUCKET_FULL,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BUCKET_EMPTY] = {
            img: SPRITE.CRAFT_BUCKET_EMPTY,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WELL] = {
            img: SPRITE.CRAFT_WELL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.PUMPKIN_SEED] = {
            img: SPRITE.CRAFT_PUMPKIN_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GARLIC_SEED] = {
            img: SPRITE.CRAFT_GARLIC_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.THORNBUSH_SEED] = {
            img: SPRITE.CRAFT_THORNBUSH_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.ROOF] = {
            img: SPRITE.CRAFT_ROOF,
            grid: 1,
            recycle: 1
        };
        Q[ItemType.CRAB_HELMET] = {
            img: SPRITE.CRAFT_CROWN_CRAB,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.CARROT_SEED] = {
            img: SPRITE.CRAFT_CARROT_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.TOMATO_SEED] = {
            img: SPRITE.CRAFT_TOMATO_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.WATERMELON_SEED] = {
            img: SPRITE.CRAFT_WATERMELON_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.ALOE_VERA_SEED] = {
            img: SPRITE.CRAFT_ALOE_VERA_SEED,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.TURBAN1] = {
            img: SPRITE.CRAFT_TURBAN1,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.TURBAN2] = {
            img: SPRITE.CRAFT_TURBAN2,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.PILOT_HAT] = {
            img: SPRITE.CRAFT_PILOT_HELMET,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.EMERALD_MACHINE] = {
            img: SPRITE.CRAFT_EMERALD_MACHINE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.STONE_EXTRACTOR] = {
            img: SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_EXTRACTOR] = {
            img: SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_EXTRACTOR] = {
            img: SPRITE.CRAFT_DIAMOND_EXTRACTOR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_EXTRACTOR] = {
            img: SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_EXTRACTOR] = {
            img: SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.PITCHFORK] = {
            img: SPRITE.CRAFT_PITCHFORK,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.WOOD_DOOR_SPIKE] = {
            img: SPRITE.CRAFT_WOOD_DOOR_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.STONE_DOOR_SPIKE] = {
            img: SPRITE.CRAFT_STONE_DOOR_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.GOLD_DOOR_SPIKE] = {
            img: SPRITE.CRAFT_GOLD_DOOR_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_DOOR_SPIKE] = {
            img: SPRITE.CRAFT_DIAMOND_DOOR_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_DOOR_SPIKE] = {
            img: SPRITE.CRAFT_AMETHYST_DOOR_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.DIAMOND_PROTECTION] = {
            img: SPRITE.CRAFT_DIAMOND_PROTECTION,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.AMETHYST_PROTECTION] = {
            img: SPRITE.CRAFT_AMETHYST_PROTECTION,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_PROTECTION] = {
            img: SPRITE.CRAFT_REIDITE_PROTECTION,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_SWORD] = {
            img: SPRITE.CRAFT_REIDITE_SWORD,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_SPEAR] = {
            img: SPRITE.CRAFT_REIDITE_SPEAR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_HELMET] = {
            img: SPRITE.CRAFT_REIDITE_HELMET,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_DOOR_SPIKE] = {
            img: SPRITE.CRAFT_REIDITE_DOOR_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_DOOR] = {
            img: SPRITE.CRAFT_REIDITE_DOOR,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_SPIKE] = {
            img: SPRITE.CRAFT_REIDITE_SPIKE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_WALL] = {
            img: SPRITE.CRAFT_REIDITE_WALL,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.REIDITE_PICK] = {
            img: SPRITE.CRAFT_PICK_REIDITE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.BOAT] = {
            img: SPRITE.CRAFT_BOAT,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.SLED] = {
            img: SPRITE.CRAFT_SLED,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.SADDLE] = {
            img: SPRITE.CRAFT_SADDLE,
            grid: 0,
            recycle: 1
        };
        Q[ItemType.BOAR] = {
            img: SPRITE.CRAFT_MOUNT_BOAR,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.CRAB_BOSS] = {
            img: SPRITE.CRAFT_CRAB_BOSS,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BABY_DRAGON] = {
            img: SPRITE.CRAFT_BABY_DRAGON,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BABY_LAVA] = {
            img: SPRITE.CRAFT_BABY_LAVA,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.HAWK] = {
            img: SPRITE.CRAFT_HAWK,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.PLANE] = {
            img: SPRITE.CRAFT_PLANE,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.GOLD_PITCHFORK] = {
            img: SPRITE.CRAFT_PITCHFORK2,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.YUSUKEDAO_ITEM1] = {
            img: SPRITE.CRAFT_YUSUKEDAO_ITEM1,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.YUSUKEDAO_ITEM2] = {
            img: SPRITE.CRAFT_YUSUKEDAO_ITEM2,
            grid: 0,
            recycle: 0
        };
        Q[ItemType.BABY_MAMMOTH] = {
            img: SPRITE.CRAFT_BABY_MAMMOTH,
            grid: 0,
            recycle: 0
        };
        var ee = undefined;
        var te = [];
        let ie = [];
        te[ItemType.STONE_EXTRACTOR] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        te[ItemType.GOLD_EXTRACTOR] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        te[ItemType.DIAMOND_EXTRACTOR] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        te[ItemType.AMETHYST_EXTRACTOR] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        te[ItemType.REIDITE_EXTRACTOR] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        te[ItemType.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        te[ItemType.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        te[ItemType.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        te[ItemType.GOLD_SHIELD] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        te[ItemType.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        te[ItemType.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        te[ItemType.MACHETE] = ["Machete", "You gather more from mob boxes", "Damage: 5"];
        te[ItemType.TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        te[ItemType.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        te[ItemType.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        te[ItemType.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        te[ItemType.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        te[ItemType.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        te[ItemType.AMETHYST_BOW] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        te[ItemType.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        te[ItemType.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        te[ItemType.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        te[ItemType.GOLD_BOW] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        te[ItemType.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        te[ItemType.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        te[ItemType.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        te[ItemType.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        te[ItemType.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        te[ItemType.BOAR_FUR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        te[ItemType.MAMMOTH_FUR] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        te[ItemType.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"];
        te[ItemType.EMERALD] = ["Emerald", "How many golden breads can you get from it?"];
        te[ItemType.SANDWORM_JUICE] = ["Sand Worm Juice", "I don't want to know how you got this."];
        te[ItemType.TURBAN1] = ["Turban", "Useful to survive in the desert."];
        te[ItemType.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"];
        te[ItemType.PILOT_HAT] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        te[ItemType.PILOT_GLASSES] = ["Pilot Glasses"];
        te[ItemType.BOAR] = ["Tamed Boar", "Fast on lands and slow on water."];
        te[ItemType.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        te[ItemType.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        te[ItemType.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        te[ItemType.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        te[ItemType.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        te[ItemType.SADDLE] = ["Saddle", "Hit a boar with it to tame it."];
        te[ItemType.WITCH_HAT] = ["Witch Hat", "You're a wizard Starvy!"];
        te[ItemType.NIMBUS] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        te[ItemType.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        te[ItemType.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        te[ItemType.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        te[ItemType.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        te[ItemType.SLED] = ["Sled", "You are faster with it in the snow"];
        te[ItemType.BOAT] = ["Boat", "You are faster with it in the water"];
        te[ItemType.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        te[ItemType.REIDITE_HAMMER] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        te[ItemType.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."];
        te[ItemType.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."];
        te[ItemType.CACTUS] = ["Cactus", "Food : 20", "Water : 10"];
        te[ItemType.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        te[ItemType.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        te[ItemType.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        te[ItemType.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        te[ItemType.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        te[ItemType.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        te[ItemType.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        te[ItemType.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        te[ItemType.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        te[ItemType.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        te[ItemType.GOLD_DOOR_SPIKE] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        te[ItemType.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        te[ItemType.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        te[ItemType.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        te[ItemType.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        te[ItemType.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        te[ItemType.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        te[ItemType.PITCHFORK] = ["Pitchfork", "Perfect for gathering"];
        te[ItemType.GOLD_PITCHFORK] = ["Golden Pitchfork", "Essential for a real farmer."];
        te[ItemType.YUSUKEDAO_ITEM1] = ["CustomITEM2", "CustomITEM2"];
        te[ItemType.YUSUKEDAO_ITEM2] = ["CustomITEM2", "CustomITEM2"];
        te[ItemType.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        te[ItemType.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        te[ItemType.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        te[ItemType.LAVA_SWORD] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        te[ItemType.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        te[ItemType.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        te[ItemType.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        te[ItemType.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        te[ItemType.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        te[ItemType.FLAME] = ["Flame", "It's hot!"];
        te[ItemType.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        te[ItemType.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        te[ItemType.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        te[ItemType.REIDITE] = ["Reidite", "The ultimate ore"];
        te[ItemType.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        ie[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        ie[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        ie[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        ie[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        ie[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        ie[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        ie[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab kings claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        ie[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        ie[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        ie[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        ie[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        ie[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        ie[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        ie[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        ie[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        ie[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        ie[38] = ["You died crushed by an angry baby mammoth."];
        ie[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        ie[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        te[ItemType.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        te[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.";
        te[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.";
        te[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.";
        te[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.";
        te[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        te[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        te[TEXT.POINTS] = "points";
        te[TEXT.SCORE] = "Score";
        te[TEXT.KILL] = "Kill";
        te[TEXT.DAYS_SURVIVED] = "Days survived";
        te[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        te[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        te[ItemType.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        te[ItemType.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        te[ItemType.CRAB_HELMET] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        te[ItemType.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        window.document.getElementById("typequest").innerHTML = "Chrono Quests";
        window.document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        window.document.getElementById("constraintquest").innerHTML = " Constraints";
        window.document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        window.document.getElementById("rewardquest").innerHTML = " Reward";
        window.document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        window.document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        window.document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        window.document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        window.document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        window.document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        window.document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var oe = 0; oe < 7; oe++) {
            window.document.getElementById("claim_reward_" + oe).innerHTML = "CLAIM REWARD!";
        }
        window.document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        te[ItemType.HAND] = ["Hand"];
        te[ItemType.GROUND] = ["Dirt", "Dirty!"];
        te[ItemType.SAND] = ["Sand", "I got it in my eyes!"];
        te[ItemType.WOOD] = ["Wood", "You can't get enough of it!"];
        te[ItemType.STONE] = ["Stone", "Also called a rock"];
        te[ItemType.GOLD] = ["Gold", "Be generous, give it to others"];
        te[ItemType.DIAMOND] = ["Diamond", "What will you make with it?"];
        te[ItemType.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"];
        te[ItemType.FLOUR] = ["Flour", "Used in cooking"];
        te[ItemType.COOKIE] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        te[ItemType.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        te[ItemType.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        te[ItemType.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        te[ItemType.FISH] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        te[ItemType.FISH_COOKED] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        te[ItemType.BREAD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        te[ItemType.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        te[ItemType.CANDY] = ["Candies", "Only for children!", "Food: 20"];
        te[ItemType.SUGAR_CAN] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        te[ItemType.GARLAND] = ["Garland", "Perfect decoration for roofs"];
        te[ItemType.BERRY_SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        te[ItemType.BERRY] = ["Berry", "Berry tasty!", "Food: 10"];
        te[ItemType.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        te[ItemType.WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        te[ItemType.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        te[ItemType.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        te[ItemType.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        te[ItemType.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        te[ItemType.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        te[ItemType.THORNBUSH] = ["Thorn bush", "It stings!"];
        te[ItemType.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        te[ItemType.ICE] = ["Ice", "Useful for making cakes and water"];
        te[ItemType.WRENCH] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        te[ItemType.GOLD_WRENCH] = ["Gold Wrench", "To repair doors, walls and spike", "Damage: 2"];
        te[ItemType.WOLF_FUR] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        te[ItemType.RABBIT_FUR] = ["Rabbit Fur", "That rabbit was so cute..."];
        te[ItemType.WINTER_PEASANT_FUR] = ["Pure Fur", "You're a bread factory"];
        te[ItemType.WINTER_HOOD_FUR] = ["Dark Fur", "You get ready to do something wrong"];
        te[ItemType.WINTER_FUR] = ["Winter Fur", "These animals just wanted a hug..."];
        te[ItemType.PIRANHA_SCALES] = ["Scales", "It smells like fish!"];
        te[ItemType.KRAKEN_FUR] = ["Kraken Skin", "Weren't you too scared?"];
        te[ItemType.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        te[ItemType.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        te[ItemType.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"];
        te[ItemType.CORD] = ["Cord", "Used in crafting Hats and Bag"];
        te[ItemType.DIAMOND_CORD] = ["Diamond Cord", "Used in crafting Special Hats"];
        te[ItemType.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"];
        te[ItemType.WOOD_SWORD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        te[ItemType.STONE_SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        te[ItemType.GOLD_SWORD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        te[ItemType.DIAMOND_SWORD] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        te[ItemType.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        te[ItemType.AMETHYST_SWORD] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        te[ItemType.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        te[ItemType.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        te[ItemType.WOOD_PICK] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        te[ItemType.STONE_PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        te[ItemType.GOLD_PICK] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        te[ItemType.DIAMOND_PICK] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        te[ItemType.AMETHYST_PICK] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        te[ItemType.REIDITE_PICK] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 2"];
        te[ItemType.STONE_HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        te[ItemType.GOLD_HAMMER] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        te[ItemType.DIAMOND_HAMMER] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        te[ItemType.AMETHYST_HAMMER] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        te[ItemType.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        te[ItemType.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        te[ItemType.CURSED_SWORD] = ["Cursed Sword", "Whispers of suffering surround its malevolent blade.", "Damage: 40", "Building Damage: 30"];
        te[ItemType.STONE_SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        te[ItemType.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        te[ItemType.DIAMOND_SPEAR] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        te[ItemType.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        te[ItemType.STONE_SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        te[ItemType.GOLD_SHOVEL] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        te[ItemType.DIAMOND_SHOVEL] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        te[ItemType.AMETHYST_SHOVEL] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        te[ItemType.REIDITE_SHOVEL] = ["Reidite Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 6", "Buildings Damage: 2"];
        te[ItemType.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        te[ItemType.STONE_HELMET] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        te[ItemType.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        te[ItemType.DIAMOND_HELMET] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        te[ItemType.AMETHYST_HELMET] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        te[ItemType.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        te[ItemType.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        te[ItemType.EXPLORER_HAT] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        te[ItemType.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        te[ItemType.ELF_HAT] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        te[ItemType.HOOD] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        te[ItemType.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        te[ItemType.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        te[ItemType.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        te[ItemType.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        te[ItemType.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        te[ItemType.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        te[ItemType.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        te[ItemType.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        te[ItemType.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        te[ItemType.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        te[ItemType.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        te[ItemType.GEM_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"];
        te[ItemType.GEM_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"];
        te[ItemType.GEM_BLUE] = ["Blue Gemstone", "For too kind people"];
        te[ItemType.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        te[ItemType.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        te[ItemType.CROWN_BLUE] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        te[ItemType.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        te[ItemType.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        te[ItemType.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        te[ItemType.BOTTLE_FULL_2] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        te[ItemType.BOTTLE_FULL_3] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        te[ItemType.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"];
        te[ItemType.WATERING_CAN_EMPTY] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        te[ItemType.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        te[ItemType.BAG] = ["Bag", "More space for your items!"];
        te[ItemType.PAPER] = ["Paper", "Used in book-crafting"];
        te[ItemType.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        te[ItemType.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        te[ItemType.LOCK] = ["Lock", "Allow you to lock your chest"];
        te[ItemType.LOCK_PICK] = ["Lock-pick", "Allows you to unlock one chest"];
        te[ItemType.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        te[ItemType.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        te[ItemType.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        te[ItemType.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"];
        te[ItemType.WOOD_WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        te[ItemType.STONE_WALL] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        te[ItemType.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        te[ItemType.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        te[ItemType.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        te[ItemType.WOOD_SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        te[ItemType.STONE_SPIKE] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        te[ItemType.GOLD_SPIKE] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        te[ItemType.DIAMOND_SPIKE] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        te[ItemType.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        te[ItemType.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        te[ItemType.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        te[ItemType.GOLD_DOOR] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        te[ItemType.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        te[ItemType.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        te[ItemType.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        te[ItemType.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        te[ItemType.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        te[ItemType.RESURRECTION] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        te[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server";
        te[TEXT.KICKED] = "Kicked: ";
        te[TEXT.KEY_ALREADY] = "Your key is already used by someone else";
        te[TEXT.KEY_WRONG] = "Your key is wrong";
        te[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache";
        te[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated";
        te[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starver.io/?password=...";
        te[TEXT.NO_MORE_RESOURCES] = "There are no more new resources";
        te[TEXT.SURVIVED_1DAY] = "You survived 1 day";
        te[TEXT.SURVIVED] = "You survived ";
        te[TEXT.DAYS] = " days";
        te[TEXT.DEAD_SAD] = "You are dead ;-;";
        te[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!";
        te[TEXT.SPAM_ME2] = "Server is full! Spam the play button!";
        te[TEXT.EMPTY] = "Resource is empty";
        te[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)";
        te[TEXT.DEAD] = " is dead";
        te[TEXT.WRONG_TOOL] = "This is not the right tool";
        te[TEXT.JOIN_TEAM] = "You joined a team";
        te[TEXT.YOU_DEAD] = "You are dead";
        te[TEXT.JOINED_TEAM] = " joined the team";
        te[TEXT.TEAM_DESTROYED] = "Your team was destroyed";
        te[TEXT.LEFT_TEAM] = "You left the team";
        te[TEXT.LEFT_TEAM2] = " left the team";
        te[TEXT.TOKEN] = "Someone stole your token :>";
        te[TEXT.CHOOSE] = "Choose a server";
        te[TEXT.PLAYERS] = "players";
        te[TEXT.TOTAL_PLAYERS] = "total players";
        te[TEXT.TOTAL_MODE] = "players on this mode";
        te[TEXT.COMMING_SOON] = "Coming soon...";
        window.document.getElementById("nickname_input").placeholder = "Nickname";
        ie[0] = ["You were killed for no reason"];
        ie[1] = ["You starved to death, as the name of the game implies"];
        ie[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        ie[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        ie[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        ie[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        ie[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        ie[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        ie[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        ie[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        ie[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        ie[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        ie[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        ie[13] = ["You died of thirst. Better drink your own piss."];
        ie[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        ie[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        ie[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        ie[17] = ["Your skin's falling apart, the sun killed you."];
        ie[18] = ["Garlic stored in your pockets boiled your brain."];
        ie[19] = ["As a vampire, don't stand near the garlic cloves."];
        ie[20] = ["You ate garlic as a vampire, what did you expect?"];
        ie[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        let Te = {};
        for (var oe in S) {
            Te[oe] = S[oe];
        }
        let re = [];
        re[10000] = [new Image()];
        re[10001] = [new Image()];
        re[10002] = [new Image()];
        re[10003] = [new Image()];
        re[10004] = [new Image()];
        re[10005] = [new Image()];
        re[10006] = [new Image()];
        re[10007] = [new Image()];
        re[10008] = [new Image()];
        re[10009] = [new Image()];
        re[10010] = [new Image()];
        re[10011] = [new Image()];
        re[10012] = [new Image()];
        re[10013] = [new Image()];
        re[10014] = [new Image()];
        re[10015] = [new Image()];
        re[10016] = [new Image()];
        re[10017] = [new Image()];
        re[10018] = [new Image()];
        re[10019] = [new Image()];
        re[10020] = [new Image()];
        re[10021] = [new Image()];
        re[10022] = [new Image()];
        re[10023] = [new Image()];
        re[10024] = [new Image()];
        re[10025] = [new Image()];
        re[10026] = [new Image()];
        re[10027] = [new Image()];
        re[10028] = [new Image()];
        re[10029] = [new Image()];
        re[10030] = [new Image()];
        re[10031] = [new Image()];
        re[10032] = [new Image()];
        re[10033] = [new Image()];
        re[10034] = [new Image()];
        re[10035] = [new Image()];
        re[10000][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-ally.png";
        re[10001][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-enemy.png";
        re[10002][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-ally.png";
        re[10003][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-enemy.png";
        re[10004][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-ally.png";
        re[10005][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-enemy.png";
        re[10006][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-ally.png";
        re[10007][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-enemy.png";
        re[10008][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-ally.png";
        re[10009][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-enemy.png";
        re[10010][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-ally.png";
        re[10011][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-enemy.png";
        re[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
        re[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
        re[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
        re[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
        re[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
        re[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
        re[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
        re[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
        re[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
        re[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
        re[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
        re[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
        re[10024][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-ally.png";
        re[10025][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-enemy.png";
        re[10026][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-ally.png";
        re[10027][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-enemy.png";
        re[10028][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-ally.png";
        re[10029][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-enemy.png";
        re[10030][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-ally.png";
        re[10031][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-enemy.png";
        re[10032][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-ally.png";
        re[10033][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-enemy.png";
        re[10034][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-ally.png";
        re[10035][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-enemy.png";
        re[10000][1] = re[10000][0];
        re[10001][1] = re[10001][0];
        re[10002][1] = re[10002][0];
        re[10003][1] = re[10003][0];
        re[10004][1] = re[10004][0];
        re[10005][1] = re[10005][0];
        re[10006][1] = re[10006][0];
        re[10007][1] = re[10007][0];
        re[10008][1] = re[10008][0];
        re[10009][1] = re[10009][0];
        re[10010][1] = re[10010][0];
        re[10011][1] = re[10011][0];
        re[10012][1] = re[10012][0];
        re[10013][1] = re[10013][0];
        re[10014][1] = re[10014][0];
        re[10015][1] = re[10015][0];
        re[10016][1] = re[10016][0];
        re[10017][1] = re[10017][0];
        re[10018][1] = re[10018][0];
        re[10019][1] = re[10019][0];
        re[10020][1] = re[10020][0];
        re[10021][1] = re[10021][0];
        re[10022][1] = re[10022][0];
        re[10023][1] = re[10023][0];
        re[10024][1] = re[10024][0];
        re[10025][1] = re[10025][0];
        re[10026][1] = re[10026][0];
        re[10027][1] = re[10027][0];
        re[10028][1] = re[10028][0];
        re[10029][1] = re[10029][0];
        re[10030][1] = re[10030][0];
        re[10031][1] = re[10031][0];
        re[10032][1] = re[10032][0];
        re[10033][1] = re[10033][0];
        re[10034][1] = re[10034][0];
        re[10035][1] = re[10035][0];
        window.sprite = re;
        let ne = {};
        let ae = [];
        find_cosmetics_per_id = __p_5863156023((e, t) => {
            for (var i = 0; i < e.length; i++) {
            if (e[i].id === t) {
                return i;
            }
            }
            return -1;
        }, 2);
        var Ie = [];
        function Ee(e, t) {
            for (var i = 0; i < Ie.length; i += t) {
            var o = Ie[i];
            if (o[0] === e) {
                _e(o[0], o[1], o[2], o[3]);
            }
            }
        }
        function _e(e, t, i, o) {
            var T = ae[e];
            if (T !== undefined) {
            for (var r = 0; r < 2; r++) {
                var n = T[t][r];
                var a = o * 193 / Wn.nw;
                var I = i * 193 / Wn.nh;
                var E = n.width / 3.5;
                var _ = n.height / 3.5;
                re[SPRITE.MINIMAP_CTX][r].drawImage(n, a - E / 2, I - _ / 2, E, _);
                a = o * 600 / Wn.nw;
                I = i * 600 / Wn.nh;
                E = n.width / 1.5;
                _ = n.height / 1.5;
                re[SPRITE.BIGMAP_CTX][r].drawImage(n, a - E / 2, I - _ / 2, E, _);
            }
            }
        }
        function se(e, t, i, o) {
            if (t) {
            e.fillStyle = t;
            e.fill();
            }
            if (i) {
            e.lineWidth = o;
            e.strokeStyle = i;
            e.stroke();
            }
        }
        function Re(e, t, i, o, T, r) {
            if (o < r * 2) {
            r = o / 2;
            }
            if (T < r * 2) {
            r = T / 2;
            }
            if (r < 0) {
            r = 0;
            }
            e.beginPath();
            e.moveTo(t + r, i);
            e.arcTo(t + o, i, t + o, i + T, r);
            e.arcTo(t + o, i + T, t, i + T, r);
            e.arcTo(t, i + T, t, i, r);
            e.arcTo(t, i, t + o, i, r);
            e.closePath();
        }
        function he(e, t, i, o) {
            e.beginPath();
            e.arc(t, i, o, 0, T);
        }
        function de(e, t, i, o, r) {
            e.beginPath();
            e.lineCap = "round";
            e.arc(t, i, o, 0, T * r);
        }
        function ue(e, t, i, o) {
            var r = T / t;
            e.beginPath();
            var n = [{
            x: i,
            y: 0
            }];
            var a = [];
            for (var I = 1; I < t; I++) {
            n.push({
                x: window.Math.cos(I * r) * i,
                y: window.Math.sin(I * r) * i
            });
            var E = n.length;
            a.push(v.middle_point(n[E - 2], n[E - 1]));
            }
            a.push(v.middle_point(n[n.length - 1], n[0]));
            var _ = a[a.length - 1];
            e.moveTo(_.x, _.y);
            for (I = 0; I < t; I++) {
            e.arcTo(n[I].x, n[I].y, a[I].x, a[I].y, o);
            }
            e.closePath();
        }
        function Ae(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = window.Math.sqrt(t.width * t.width + t.height * t.height);
            d2 = T / 2;
            i.width = T;
            i.height = T;
            o.translate(d2, d2);
            o.rotate(e);
            o.drawImage(t, -t.width / 2, -t.height / 2);
            return i;
        }
        function Oe(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = window.Math.floor(e * 28);
            var r = window.Math.floor(e * 20);
            o.font = r + "px Baloo Paaji";
            var n = e * 8;
            var a = o.measureText(t).width + n * 2;
            i.width = a;
            i.height = T;
            Re(o, 0, 0, a, T, e * 10);
            o.globalAlpha = 0.5;
            se(o, "#000000");
            o.globalAlpha = 1;
            o.textBaseline = "middle";
            o.font = r + "px Baloo Paaji";
            o.beginPath();
            o.fillStyle = "#FFF";
            o.fillText(t, n, T / 2);
            return i;
        }
        function le(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 120;
            var r = e * 110;
            var n = T / 2;
            var a = r / 2;
            var I = e * 20;
            var E = e * 112;
            var _ = e * 82;
            var s = E / 2;
            var R = _ / 2;
            var h = e * 4;
            i.width = T;
            i.height = r;
            o.globalAlpha = 1;
            o.translate(n, a);
            Re(o, -s, -R, E, _, I);
            se(o, t, t, h);
            return i;
        }
        function Se(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 264;
            o.height = e * 246;
            T.translate(0, e * 10);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 75, e * 54);
            T.bezierCurveTo(e * 79, e * 21, e * 131, e * 13, e * 153, e * 36);
            T.bezierCurveTo(e * 204, e * 27, e * 221, e * 52, e * 216, e * 83);
            T.bezierCurveTo(e * 241, e * 103, e * 232, e * 138, e * 214, e * 147);
            T.bezierCurveTo(e * 223, e * 184, e * 201, e * 200, e * 175, e * 199);
            T.bezierCurveTo(e * 156, e * 218, e * 135, e * 222, e * 114, e * 203);
            T.bezierCurveTo(e * 62, e * 213, e * 66, e * 189, e * 59, e * 170);
            T.bezierCurveTo(e * 27, e * 164, e * 31, e * 134, e * 38, e * 123);
            T.bezierCurveTo(e * 11, e * 80, e * 51, e * 52, e * 75, e * 54);
            T.closePath();
            se(T, i[0]);
            T.translate(0, e * -10);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 75, e * 54);
            T.bezierCurveTo(e * 79, e * 21, e * 131, e * 13, e * 153, e * 36);
            T.bezierCurveTo(e * 204, e * 27, e * 221, e * 52, e * 216, e * 83);
            T.bezierCurveTo(e * 241, e * 103, e * 232, e * 138, e * 214, e * 147);
            T.bezierCurveTo(e * 223, e * 184, e * 201, e * 200, e * 175, e * 199);
            T.bezierCurveTo(e * 156, e * 218, e * 135, e * 222, e * 114, e * 203);
            T.bezierCurveTo(e * 62, e * 213, e * 66, e * 189, e * 59, e * 170);
            T.bezierCurveTo(e * 27, e * 164, e * 31, e * 134, e * 38, e * 123);
            T.bezierCurveTo(e * 11, e * 80, e * 51, e * 52, e * 75, e * 54);
            T.closePath();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 121, e * 102);
            T.bezierCurveTo(e * 111, e * 80, e * 110, e * 66, e * 108, e * 51);
            T.bezierCurveTo(e * 119, e * 65, e * 129, e * 85, e * 135, e * 99);
            T.bezierCurveTo(e * 142, e * 67, e * 146, e * 60, e * 152, e * 50);
            T.bezierCurveTo(e * 154, e * 71, e * 152, e * 85, e * 149, e * 104);
            T.bezierCurveTo(e * 166, e * 88, e * 175, e * 83, e * 188, e * 78);
            T.bezierCurveTo(e * 179, e * 91, e * 170, e * 103, e * 160, e * 112);
            T.bezierCurveTo(e * 186, e * 107, e * 191, e * 107, e * 204, e * 108);
            T.bezierCurveTo(e * 195, e * 114, e * 179, e * 120, e * 163, e * 123);
            T.bezierCurveTo(e * 183, e * 130, e * 186, e * 135, e * 192, e * 140);
            T.bezierCurveTo(e * 179, e * 141, e * 164, e * 139, e * 153, e * 135);
            T.bezierCurveTo(e * 158, e * 145, e * 163, e * 159, e * 165, e * 177);
            T.bezierCurveTo(e * 154, e * 166, e * 145, e * 153, e * 138, e * 139);
            T.bezierCurveTo(e * 133, e * 155, e * 125, e * 170, e * 117, e * 182);
            T.bezierCurveTo(e * 116, e * 160, e * 119, e * 151, e * 124, e * 138);
            T.bezierCurveTo(e * 107, e * 150, e * 95, e * 156, e * 82, e * 159);
            T.bezierCurveTo(e * 94, e * 140, e * 101, e * 136, e * 113, e * 128);
            T.bezierCurveTo(e * 78, e * 123, e * 75, e * 121, e * 67, e * 118);
            T.bezierCurveTo(e * 85, e * 112, e * 94, e * 112, e * 111, e * 113);
            T.bezierCurveTo(e * 89, e * 97, e * 85, e * 93, e * 78, e * 82);
            T.bezierCurveTo(e * 92, e * 85, e * 101, e * 90, e * 121, e * 102);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 128, e * 103);
            T.bezierCurveTo(e * 111, e * 112, e * 117, e * 136, e * 140, e * 130);
            T.bezierCurveTo(e * 151, e * 126, e * 156, e * 115, e * 155, e * 107);
            T.bezierCurveTo(e * 155, e * 96, e * 154, e * 94, e * 148, e * 94);
            T.bezierCurveTo(e * 141, e * 94, e * 146, e * 104, e * 136, e * 104);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            return o;
        }
        function Ce(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 70;
            o.height = e * 70;
            T.globalAlpha = 0.5;
            he(T, e * 26, e * 26, e * 9);
            se(T, i[0]);
            he(T, e * 56, e * 36, e * 9);
            se(T, i[1]);
            he(T, e * 40, e * 50, e * 9);
            se(T, i[2]);
            T.globalAlpha = 1;
            he(T, e * 26, e * 26, e * 5);
            se(T, i[0]);
            he(T, e * 56, e * 36, e * 5);
            se(T, i[1]);
            he(T, e * 40, e * 50, e * 5);
            se(T, i[2]);
            return o;
        }
        function be(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 22;
            o.height = e * 22;
            T.globalAlpha = 0.4;
            he(T, e * 11, e * 11, e * 10);
            se(T, i[0]);
            T.globalAlpha = 0.7;
            he(T, e * 11, e * 11, e * 7);
            se(T, i[0]);
            T.globalAlpha = 1;
            he(T, e * 11, e * 11, e * 4);
            se(T, i[0]);
            return o;
        }
        function Ne(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 248;
            o.height = e * 247;
            T.save();
            T.translate(e * 69.5, e * 145);
            Re(T, e * -8.5, e * -63, e * 17, e * 127, e * 1);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 183, e * 145);
            Re(T, e * -8, e * -63, e * 16, e * 126, e * 1);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 123.5, e * 62.5);
            T.rotate(6.28);
            Re(T, e * -84.5, e * -25.5, e * 169, e * 51, e * 5);
            T.restore();
            se(T, i[2], i[1], e * 6);
            T.save();
            T.translate(e * 123.5, e * 118);
            T.rotate(6.24);
            Re(T, e * -85.5, e * -24, e * 169, e * 48, e * 5);
            T.restore();
            se(T, i[3], i[1], e * 6);
            T.save();
            T.translate(e * 122, e * 177.5);
            T.rotate(6.32);
            Re(T, e * -84, e * -23.5, e * 169, e * 47, e * 5);
            T.restore();
            se(T, i[2], i[1], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 37, e * 157);
            T.bezierCurveTo(e * 49, e * 160, e * 49, e * 160, e * 61, e * 163);
            T.bezierCurveTo(e * 49.5, e * 165.5, e * 49.5, e * 165.5, e * 38, e * 168);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 205, e * 175);
            T.bezierCurveTo(e * 192.5, e * 180, e * 192.5, e * 180, e * 180, e * 185);
            T.bezierCurveTo(e * 193, e * 188, e * 193, e * 188, e * 206, e * 191);
            T.closePath();
            se(T, i[1]);
            return o;
        }
        function De(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 248;
            o.height = e * 247;
            T.save();
            T.translate(e * 182, e * 120);
            Re(T, e * -8, e * -67, e * 16, e * 134, e * 1);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 68.5, e * 127.5);
            Re(T, e * -8.5, e * -70.5, e * 17, e * 141, e * 1);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 123.5, e * 68);
            Re(T, e * -82.5, e * -24, e * 165, e * 48, e * 4);
            T.restore();
            se(T, i[2], i[1], e * 6);
            T.save();
            T.translate(e * 123, e * 179.5);
            Re(T, e * -83, e * -24.5, e * 166, e * 49, e * 4);
            T.restore();
            se(T, i[2], i[1], e * 6);
            T.save();
            T.translate(e * 123.5, e * 123.5);
            T.rotate(6.24);
            Re(T, e * -82.5, e * -24.5, e * 165, e * 49, e * 4);
            T.restore();
            se(T, i[3], i[1], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 204, e * 112);
            T.bezierCurveTo(e * 149, e * 121.5, e * 96, e * 130, e * 94, e * 131);
            T.bezierCurveTo(e * 149.5, e * 127.5, e * 149.5, e * 127.5, e * 205, e * 124);
            T.closePath();
            se(T, i[1]);
            return o;
        }
        function me(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 248;
            o.height = e * 247;
            T.save();
            T.translate(e * 183, e * 107);
            Re(T, e * -8, e * -70.5, e * 16, e * 141, e * 1);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 69.5, e * 110);
            Re(T, e * -8.5, e * -71, e * 17, e * 143, e * 1);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 123.5, e * 181);
            Re(T, e * -84.5, e * -26, e * 169, e * 52, e * 5);
            T.restore();
            se(T, i[2], i[1], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 41, e * 95);
            T.bezierCurveTo(e * 105, e * 96, e * 113, e * 99, e * 134, e * 102);
            T.bezierCurveTo(e * 147, e * 106, e * 173, e * 100, e * 207, e * 105);
            T.bezierCurveTo(e * 210, e * 105, e * 207, e * 140, e * 207, e * 154);
            T.bezierCurveTo(e * 123.5, e * 151.5, e * 123.5, e * 151.5, e * 40, e * 149);
            T.bezierCurveTo(e * 37, e * 145, e * 39, e * 95, e * 41, e * 96);
            T.closePath();
            se(T, i[2], i[1], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 68, e * 75);
            T.bezierCurveTo(e * 54, e * 72.5, e * 54, e * 72.5, e * 40, e * 70);
            T.bezierCurveTo(e * 38, e * 46, e * 40, e * 46, e * 53, e * 46);
            T.bezierCurveTo(e * 201, e * 41, e * 201, e * 41, e * 201, e * 42);
            T.bezierCurveTo(e * 211, e * 40, e * 208, e * 53, e * 208, e * 72);
            T.bezierCurveTo(e * 209, e * 91, e * 210, e * 96, e * 194, e * 94);
            T.bezierCurveTo(e * 119, e * 97, e * 119, e * 97, e * 44, e * 100);
            T.bezierCurveTo(e * 39, e * 99, e * 40, e * 96, e * 40, e * 80);
            T.bezierCurveTo(e * 54, e * 77.5, e * 54, e * 77.5, e * 68, e * 75);
            T.closePath();
            se(T, i[3], i[1], e * 6);
            return o;
        }
        function ce(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 191;
            o.height = e * 153;
            T.globalAlpha = 0.5;
            T.translate(0, e * 10);
            T.save();
            T.translate(e * 97.49996948242188, e * 95.12844848632812);
            Re(T, e * -62.5, e * -41.5, e * 125, e * 83, e * 20);
            T.restore();
            se(T, i[0], i[0], e * 4);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.save();
            T.translate(e * 97.49996948242188, e * 95.12844848632812);
            Re(T, e * -62.5, e * -41.5, e * 125, e * 83, e * 20);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.globalCompositeOperation = "destination-out";
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 26.999969482421875, e * 50.850677490234375);
            T.bezierCurveTo(e * 46.499969482421875, e * 64.85067749023438, e * 46.499969482421875, e * 64.85067749023438, e * 65.99996948242188, e * 78.85067749023438);
            T.bezierCurveTo(e * 80.99996948242188, e * 87.85067749023438, e * 105.99996948242188, e * 82.85067749023438, e * 114.99996948242188, e * 80.85067749023438);
            T.bezierCurveTo(e * 130.99996948242188, e * 69.85067749023438, e * 152.99996948242188, e * 70.85067749023438, e * 166.99996948242188, e * 67.85067749023438);
            T.bezierCurveTo(e * 156.99996948242188, e * 52.850677490234375, e * 156.99996948242188, e * 52.850677490234375, e * 146.99996948242188, e * 37.850677490234375);
            T.bezierCurveTo(e * 101.49996948242188, e * 37.350677490234375, e * 101.49996948242188, e * 37.350677490234375, e * 55.999969482421875, e * 36.850677490234375);
            T.closePath();
            se(T, i[2], i[3], e * 4);
            T.globalCompositeOperation = "source-over";
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 40.999969482421875, e * 59.850677490234375);
            T.bezierCurveTo(e * 41.999969482421875, e * 50.850677490234375, e * 47.999969482421875, e * 47.850677490234375, e * 56.999969482421875, e * 49.850677490234375);
            T.bezierCurveTo(e * 65.99996948242188, e * 41.850677490234375, e * 76.99996948242188, e * 42.850677490234375, e * 90.99996948242188, e * 47.850677490234375);
            T.bezierCurveTo(e * 94.99996948242188, e * 42.850677490234375, e * 104.99996948242188, e * 42.850677490234375, e * 114.99996948242188, e * 47.850677490234375);
            T.bezierCurveTo(e * 131.99996948242188, e * 42.850677490234375, e * 142.99996948242188, e * 48.850677490234375, e * 145.99996948242188, e * 56.850677490234375);
            T.bezierCurveTo(e * 160.99996948242188, e * 63.850677490234375, e * 154.99996948242188, e * 69.85067749023438, e * 155.99996948242188, e * 70.85067749023438);
            T.bezierCurveTo(e * 141.99996948242188, e * 71.85067749023438, e * 141.99996948242188, e * 71.85067749023438, e * 127.99996948242188, e * 72.85067749023438);
            T.bezierCurveTo(e * 110.99996948242188, e * 83.85067749023438, e * 107.99996948242188, e * 82.85067749023438, e * 90.99996948242188, e * 85.85067749023438);
            T.bezierCurveTo(e * 70.99996948242188, e * 83.85067749023438, e * 64.99996948242188, e * 79.85067749023438, e * 53.999969482421875, e * 70.85067749023438);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 33.999969482421875, e * 65.85067749023438);
            T.bezierCurveTo(e * 36.999969482421875, e * 59.850677490234375, e * 34.999969482421875, e * 60.850677490234375, e * 39.999969482421875, e * 59.850677490234375);
            T.bezierCurveTo(e * 47.999969482421875, e * 61.850677490234375, e * 62.999969482421875, e * 76.85067749023438, e * 74.99996948242188, e * 79.85067749023438);
            T.bezierCurveTo(e * 93.99996948242188, e * 85.85067749023438, e * 111.99996948242188, e * 83.85067749023438, e * 124.99996948242188, e * 70.85067749023438);
            T.bezierCurveTo(e * 129.99996948242188, e * 67.85067749023438, e * 145.99996948242188, e * 65.85067749023438, e * 159.99996948242188, e * 67.85067749023438);
            T.bezierCurveTo(e * 159.99996948242188, e * 71.85067749023438, e * 159.99996948242188, e * 71.85067749023438, e * 159.99996948242188, e * 75.85067749023438);
            T.bezierCurveTo(e * 146.99996948242188, e * 72.85067749023438, e * 144.99996948242188, e * 75.85067749023438, e * 143.99996948242188, e * 82.85067749023438);
            T.bezierCurveTo(e * 144.99996948242188, e * 86.85067749023438, e * 140.99996948242188, e * 90.85067749023438, e * 137.99996948242188, e * 86.85067749023438);
            T.bezierCurveTo(e * 139.99996948242188, e * 72.85067749023438, e * 135.99996948242188, e * 72.85067749023438, e * 133.99996948242188, e * 82.85067749023438);
            T.bezierCurveTo(e * 127.99996948242188, e * 88.85067749023438, e * 124.99996948242188, e * 70.85067749023438, e * 116.99996948242188, e * 86.85067749023438);
            T.bezierCurveTo(e * 110.99996948242188, e * 91.85067749023438, e * 96.99996948242188, e * 81.85067749023438, e * 89.99996948242188, e * 90.85067749023438);
            T.bezierCurveTo(e * 85.99996948242188, e * 92.85067749023438, e * 81.99996948242188, e * 95.85067749023438, e * 76.99996948242188, e * 86.85067749023438);
            T.bezierCurveTo(e * 67.99996948242188, e * 93.85067749023438, e * 67.99996948242188, e * 91.85067749023438, e * 60.999969482421875, e * 79.85067749023438);
            T.bezierCurveTo(e * 53.999969482421875, e * 71.85067749023438, e * 52.999969482421875, e * 72.85067749023438, e * 46.999969482421875, e * 77.85067749023438);
            T.bezierCurveTo(e * 41.999969482421875, e * 78.85067749023438, e * 42.999969482421875, e * 69.85067749023438, e * 33.999969482421875, e * 65.85067749023438);
            T.closePath();
            se(T, i[5], i[6], e * 4);
            he(T, e * 68, e * 111.29513549804688, e * 15);
            se(T, i[7], i[8], e * 4);
            he(T, e * 123, e * 111.29510498046875, e * 15);
            se(T, i[7], i[8], e * 4);
            he(T, e * 63, e * 106, e * 5);
            se(T, i[9]);
            he(T, e * 118, e * 106, e * 5);
            se(T, i[9]);
            return o;
        }
        function ve(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 191;
            o.height = e * 153;
            T.globalAlpha = 0.5;
            T.translate(0, e * 10);
            T.save();
            T.translate(e * 96.49996948242188, e * 66.79510498046875);
            T.rotate(0);
            Re(T, e * -79.5, e * -48.5, e * 159, e * 97, e * 22);
            T.restore();
            se(T, i[0], i[0], e * 4);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.save();
            T.translate(e * 96.49996948242188, e * 66.79510498046875);
            T.rotate(0);
            Re(T, e * -79.5, e * -48.5, e * 159, e * 97, e * 22);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.translate(e * 2, 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 119, e * 28);
            T.bezierCurveTo(e * 119, e * 22, e * 119, e * 20, e * 122, e * 16);
            T.bezierCurveTo(e * 149, e * 39, e * 149, e * 39, e * 176, e * 63);
            T.bezierCurveTo(e * 176, e * 75, e * 176, e * 75, e * 175, e * 88);
            T.bezierCurveTo(e * 174, e * 90, e * 174, e * 90, e * 172, e * 93);
            T.bezierCurveTo(e * 171, e * 101, e * 169, e * 109, e * 164, e * 113);
            T.bezierCurveTo(e * 163, e * 104, e * 163, e * 104, e * 162, e * 95);
            T.bezierCurveTo(e * 155, e * 105, e * 155, e * 105, e * 147, e * 116);
            T.bezierCurveTo(e * 87, e * 114, e * 87, e * 114, e * 26, e * 112);
            T.bezierCurveTo(e * 27, e * 106, e * 27, e * 106, e * 27, e * 101);
            T.bezierCurveTo(e * 24, e * 104, e * 24, e * 104, e * 20, e * 108);
            T.bezierCurveTo(e * 17, e * 103, e * 20, e * 86, e * 23, e * 72);
            T.bezierCurveTo(e * 15, e * 74, e * 14, e * 78, e * 12, e * 83);
            T.bezierCurveTo(e * 12, e * 65, e * 12, e * 54, e * 16, e * 42);
            T.bezierCurveTo(e * 14, e * 39, e * 14, e * 39, e * 12, e * 36);
            T.bezierCurveTo(e * 16, e * 33, e * 16, e * 33, e * 19, e * 30);
            T.bezierCurveTo(e * 18, e * 27, e * 18, e * 27, e * 17, e * 25);
            T.bezierCurveTo(e * 24, e * 24, e * 31, e * 21, e * 29, e * 19);
            T.bezierCurveTo(e * 37, e * 25, e * 37, e * 25, e * 45, e * 31);
            T.bezierCurveTo(e * 40, e * 23, e * 40, e * 21, e * 42, e * 16);
            T.bezierCurveTo(e * 74, e * 16, e * 74, e * 16, e * 106, e * 16);
            T.bezierCurveTo(e * 113, e * 21, e * 113, e * 21, e * 119, e * 26);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            return o;
        }
        function Pe(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 191;
            i.height = e * 153;
            o.save();
            o.translate(e * 96.49996948242188, e * 66.79510498046875);
            Re(o, e * -79.5, e * -48.5, e * 159, e * 97, e * 22);
            o.restore();
            se(o, t[0], t[0], e * 4);
            o.translate(e * 2, 0);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 119, e * 28);
            o.bezierCurveTo(e * 119, e * 22, e * 119, e * 20, e * 122, e * 16);
            o.bezierCurveTo(e * 149, e * 39, e * 149, e * 39, e * 176, e * 63);
            o.bezierCurveTo(e * 176, e * 75, e * 176, e * 75, e * 175, e * 88);
            o.bezierCurveTo(e * 174, e * 90, e * 174, e * 90, e * 172, e * 93);
            o.bezierCurveTo(e * 171, e * 101, e * 169, e * 109, e * 164, e * 113);
            o.bezierCurveTo(e * 163, e * 104, e * 163, e * 104, e * 162, e * 95);
            o.bezierCurveTo(e * 155, e * 105, e * 155, e * 105, e * 147, e * 116);
            o.bezierCurveTo(e * 87, e * 114, e * 87, e * 114, e * 26, e * 112);
            o.bezierCurveTo(e * 27, e * 106, e * 27, e * 106, e * 27, e * 101);
            o.bezierCurveTo(e * 24, e * 104, e * 24, e * 104, e * 20, e * 108);
            o.bezierCurveTo(e * 17, e * 103, e * 20, e * 86, e * 23, e * 72);
            o.bezierCurveTo(e * 15, e * 74, e * 14, e * 78, e * 12, e * 83);
            o.bezierCurveTo(e * 12, e * 65, e * 12, e * 54, e * 16, e * 42);
            o.bezierCurveTo(e * 14, e * 39, e * 14, e * 39, e * 12, e * 36);
            o.bezierCurveTo(e * 16, e * 33, e * 16, e * 33, e * 19, e * 30);
            o.bezierCurveTo(e * 18, e * 27, e * 18, e * 27, e * 17, e * 25);
            o.bezierCurveTo(e * 24, e * 24, e * 31, e * 21, e * 29, e * 19);
            o.bezierCurveTo(e * 37, e * 25, e * 37, e * 25, e * 45, e * 31);
            o.bezierCurveTo(e * 40, e * 23, e * 40, e * 21, e * 42, e * 16);
            o.bezierCurveTo(e * 74, e * 16, e * 74, e * 16, e * 106, e * 16);
            o.bezierCurveTo(e * 113, e * 21, e * 113, e * 21, e * 119, e * 26);
            o.closePath();
            se(o, t[0], t[0], e * 4);
            o.save();
            o.translate(e * 97.49996948242188, e * 95.12844848632812);
            Re(o, e * -62.5, e * -41.5, e * 125, e * 83, e * 20);
            o.restore();
            se(o, t[0], t[0], e * 4);
            return i;
        }
        function ye(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 40;
            var n = e * 40;
            o.width = r;
            o.height = n;
            var a = e * r / 2;
            var I = e * n / 2;
            var E = e * 15;
            T.save();
            T.translate(a, I);
            T.globalAlpha = 1;
            he(T, 0, 0, E);
            se(T, i[0]);
            E = e * 5;
            a = e * 2;
            I = e * 1;
            T.translate(a, I);
            T.globalAlpha = 1;
            he(T, 0, 0, E);
            se(T, i[1]);
            T.restore();
            return o;
        }
        function pe(e) {
            var t = window.document.createElement("canvas");
            var i = t.getContext("2d");
            var o = e * 200;
            var T = e * 200;
            t.width = o;
            t.height = T;
            var r = yt(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
            i.drawImage(r, 10, 10);
            r = pt(0.9, false, ["#3d2a6e", "#8255b5"]);
            i.drawImage(r, 21, 20);
            r = pt(0.9, false, ["#3d2a6e", "#8255b5"]);
            i.drawImage(r, 38, 28);
            r = pt(0.9, false, ["#3d2a6e", "#8255b5"]);
            i.drawImage(r, 15, 37);
            r = pt(0.9, false, ["#3d2a6e", "#8255b5"]);
            i.drawImage(r, 32, 45);
            return t;
        }
        function ge(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var r = e * 100;
            var a = e * 100;
            var I = r / 2;
            var E = a / 2;
            i.width = r;
            i.height = a;
            var _ = e * 5;
            var s = e * 28;
            var R = _ / 2;
            var h = s / 2;
            o.translate(I, E);
            for (var d = 0; d < 4; d++) {
            Re(o, -R, -h, _, s, e * 2);
            o.rotate(n);
            se(o, t);
            }
            o.arc(0, 0, e * 10, 0, T);
            se(o, t);
            o.globalCompositeOperation = "destination-out";
            he(o, 0, 0, e * 4);
            o.fill();
            return i;
        }
        function Me(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 32;
            var a = e * 32;
            var I = r / 2;
            var E = a / 2;
            o.width = r;
            o.height = a;
            var _ = e * 5;
            var s = e * 28;
            var R = _ / 2;
            var h = s / 2;
            T.translate(e * 0, e * 0);
            T.translate(I, E);
            if (i == 1) {
            he(T, 0, 0, e * 10);
            se(T, t[2], t[2], e * 3);
            for (var d = 0; d < 4; d++) {
                Re(T, -R, -h, _, s, e * 2);
                T.rotate(n);
                se(T, t[2], t[2], e * 4);
            }
            }
            he(T, 0, 0, e * 10);
            se(T, t[0], t[1], e * 1.5);
            for (d = 0; d < 4; d++) {
            Re(T, -R, -h, _, s, e * 2);
            T.rotate(n);
            se(T, t[0], t[1], e * 1.5);
            }
            he(T, 0, 0, e * 10);
            se(T, t[0]);
            he(T, 0, 0, e * 4);
            se(T, t[2], t[1], e * 1.5);
            T.globalCompositeOperation = "destination-out";
            he(T, 0, 0, e * 4);
            se(T, t[0], t[1], e * 2);
            T.globalCompositeOperation = "source-over";
            he(T, 0, 0, e * 4);
            se(T, undefined, t[1], e * 2);
            return o;
        }
        function Le(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = (d = e * 125) / 2;
            var n = (u = e * 95) / 2;
            var a = e * 10;
            var I = e * 8;
            var E = e * 112;
            var _ = e * 82;
            var s = E / 2;
            var R = _ / 2;
            var h = e * 4;
            o.width = d;
            o.height = u;
            T.translate(r - e * 4, n + e * 4);
            T.globalAlpha = t ? 0.5 : 1;
            Re(T, -s, -R, E, _, a);
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, -I);
            Re(T, -s, -R, E, _, a);
            se(T, i[1], i[2], h);
            var d = e * 55;
            var u = e * 45;
            a = 5;
            T.translate(e * -40, e * -30);
            Re(T, 0, 0, d, u, a);
            se(T, i[3]);
            var A = ge(e * 0.7, i[3]);
            T.drawImage(A, e * 45, e * -25);
            A = ge(e * 0.7, i[3]);
            T.drawImage(A, e * 45, e * 15);
            A = ge(e * 1.2, i[3]);
            T.drawImage(A, e * 28, e * -30);
            d = e * 15;
            u = e * 70;
            a = e * 5;
            T.translate(e * 78, e * -5);
            Re(T, 0, 0, d, u, a);
            se(T, i[4]);
            d = e * 9;
            u = e * 50;
            a = e * 3;
            T.translate(e * -20, e * 20);
            T.rotate(window.Math.PI / 5);
            T.globalAlpha = 0.6;
            Re(T, 0, 0, d, u, a);
            se(T, i[5]);
            T.translate(e * -20, e * 29);
            T.rotate(window.Math.PI / 5);
            T.globalAlpha = 0.6;
            T.beginPath();
            T.lineJoin = "round";
            T.moveTo(0, 0);
            T.lineTo(0, e * 30);
            T.lineTo(e * 30, e * 30);
            T.closePath();
            se(T, null, i[5], e * 8);
            return o;
        }
        function He(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 85;
            var r = e * 115;
            var n = e * 6;
            i.width = T;
            i.height = r;
            o.translate(e * -130, e * -60 + n);
            o.globalAlpha = 0.5;
            o.beginPath();
            o.bezierCurveTo(e * 190, e * 87, e * 201, e * 59, e * 208, e * 64);
            o.bezierCurveTo(e * 213, e * 68, e * 204, e * 93, e * 195, e * 109);
            o.bezierCurveTo(e * 195, e * 109, e * 202, e * 124, e * 191, e * 141);
            o.bezierCurveTo(e * 182, e * 151, e * 164, e * 155, e * 148, e * 144);
            o.bezierCurveTo(e * 136, e * 135, e * 138, e * 111, e * 145, e * 104);
            o.bezierCurveTo(e * 140, e * 92, e * 131, e * 67, e * 138, e * 63);
            o.bezierCurveTo(e * 145, e * 61, e * 153, e * 82, e * 155, e * 96);
            o.bezierCurveTo(e * 167, e * 91, e * 178, e * 92, e * 187, e * 98);
            o.closePath();
            se(o, t[0]);
            o.translate(0, -n);
            o.globalAlpha = 1;
            o.beginPath();
            o.bezierCurveTo(e * 190, e * 87, e * 201, e * 59, e * 208, e * 64);
            o.bezierCurveTo(e * 213, e * 68, e * 204, e * 93, e * 195, e * 109);
            o.bezierCurveTo(e * 195, e * 109, e * 202, e * 124, e * 191, e * 141);
            o.bezierCurveTo(e * 182, e * 151, e * 164, e * 155, e * 148, e * 144);
            o.bezierCurveTo(e * 136, e * 135, e * 138, e * 111, e * 145, e * 104);
            o.bezierCurveTo(e * 140, e * 92, e * 131, e * 67, e * 138, e * 63);
            o.bezierCurveTo(e * 145, e * 61, e * 153, e * 82, e * 155, e * 96);
            o.bezierCurveTo(e * 167, e * 91, e * 178, e * 92, e * 187, e * 98);
            o.closePath();
            se(o, t[1], t[2], 4);
            var a = e * 155;
            var I = e * 133;
            var E = e * 10;
            var _ = e * 3;
            var s = a + e * -3;
            var R = I + e * -5;
            o.save();
            o.translate(a, I);
            o.globalAlpha = 1;
            he(o, 0, 0, E);
            se(o, t[3]);
            o.restore();
            o.save();
            o.translate(s, R);
            o.globalAlpha = 1;
            he(o, 0, 0, _);
            se(o, t[4]);
            o.restore();
            o.save();
            o.translate(a + e * 27, I);
            o.globalAlpha = 1;
            he(o, 0, 0, E);
            se(o, t[3]);
            o.restore();
            o.save();
            o.translate(e * 27 + s, R);
            o.globalAlpha = 1;
            he(o, 0, 0, _);
            se(o, t[4]);
            return i;
        }
        function we(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 188;
            i.height = e * 190;
            o.globalAlpha = 0.5;
            o.translate(0, e * 5);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 33.00567626953125, e * 95.44320678710938);
            o.bezierCurveTo(e * 42.00567626953125, e * 87.44320678710938, e * 48.00567626953125, e * 51.443206787109375, e * 74.00567626953125, e * 47.443206787109375);
            o.bezierCurveTo(e * 100.00567626953125, e * 42.443206787109375, e * 118.00567626953125, e * 49.443206787109375, e * 131.00567626953125, e * 55.443206787109375);
            o.bezierCurveTo(e * 140.00567626953125, e * 70.44320678710938, e * 145.00567626953125, e * 87.44320678710938, e * 152.00567626953125, e * 94.44320678710938);
            o.bezierCurveTo(e * 149.00567626953125, e * 99.44320678710938, e * 147.00567626953125, e * 98.44320678710938, e * 141.00567626953125, e * 101.44320678710938);
            o.bezierCurveTo(e * 147.00567626953125, e * 108.44320678710938, e * 147.00567626953125, e * 111.44320678710938, e * 147.00567626953125, e * 112.44320678710938);
            o.bezierCurveTo(e * 143.00567626953125, e * 112.44320678710938, e * 141.00567626953125, e * 112.44320678710938, e * 137.00567626953125, e * 111.44320678710938);
            o.bezierCurveTo(e * 138.00567626953125, e * 117.44320678710938, e * 138.00567626953125, e * 120.44320678710938, e * 138.00567626953125, e * 124.44320678710938);
            o.bezierCurveTo(e * 125.00567626953125, e * 107.44320678710938, e * 121.00567626953125, e * 124.44320678710938, e * 110.00567626953125, e * 141.44320678710938);
            o.bezierCurveTo(e * 102.00567626953125, e * 158.44320678710938, e * 89.00567626953125, e * 158.44320678710938, e * 80.00567626953125, e * 144.44320678710938);
            o.bezierCurveTo(e * 61.00567626953125, e * 111.44320678710938, e * 56.00567626953125, e * 117.44320678710938, e * 48.00567626953125, e * 120.44320678710938);
            o.bezierCurveTo(e * 46.00567626953125, e * 118.44320678710938, e * 47.00567626953125, e * 112.44320678710938, e * 48.00567626953125, e * 107.44320678710938);
            o.bezierCurveTo(e * 43.00567626953125, e * 111.44320678710938, e * 40.00567626953125, e * 111.44320678710938, e * 37.00567626953125, e * 110.44320678710938);
            o.bezierCurveTo(e * 39.50567626953125, e * 104.94320678710938, e * 39.50567626953125, e * 104.94320678710938, e * 42.00567626953125, e * 99.44320678710938);
            o.bezierCurveTo(e * 33.00567626953125, e * 99.44320678710938, e * 33.00567626953125, e * 98.44320678710938, e * 33.00567626953125, e * 96.44320678710938);
            o.closePath();
            se(o, t[0], t[0], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 60.00567626953125, e * 99.35227966308594);
            o.bezierCurveTo(e * 70.00567626953125, e * 82.35227966308594, e * 85.00567626953125, e * 86.35227966308594, e * 87.00567626953125, e * 97.35227966308594);
            o.bezierCurveTo(e * 89.00567626953125, e * 101.35227966308594, e * 88.00567626953125, e * 105.35227966308594, e * 87.00567626953125, e * 110.35227966308594);
            o.bezierCurveTo(e * 89.00567626953125, e * 111.35227966308594, e * 91.00567626953125, e * 112.35227966308594, e * 93.00567626953125, e * 115.35227966308594);
            o.bezierCurveTo(e * 96.00567626953125, e * 111.35227966308594, e * 99.00567626953125, e * 111.35227966308594, e * 100.00567626953125, e * 110.35227966308594);
            o.bezierCurveTo(e * 98.00567626953125, e * 92.35227966308594, e * 103.00567626953125, e * 86.35227966308594, e * 113.00567626953125, e * 89.35227966308594);
            o.bezierCurveTo(e * 122.00567626953125, e * 92.35227966308594, e * 123.00567626953125, e * 94.35227966308594, e * 126.00567626953125, e * 98.35227966308594);
            o.bezierCurveTo(e * 124.00567626953125, e * 102.35227966308594, e * 123.00567626953125, e * 103.35227966308594, e * 121.00567626953125, e * 104.35227966308594);
            o.bezierCurveTo(e * 124.00567626953125, e * 105.35227966308594, e * 126.00567626953125, e * 107.35227966308594, e * 129.00567626953125, e * 111.35227966308594);
            o.bezierCurveTo(e * 115.00567626953125, e * 122.35227966308594, e * 113.00567626953125, e * 145.35227966308594, e * 100.00567626953125, e * 152.35227966308594);
            o.bezierCurveTo(e * 91.00567626953125, e * 158.35227966308594, e * 83.00567626953125, e * 149.35227966308594, e * 76.00567626953125, e * 138.35227966308594);
            o.bezierCurveTo(e * 67.00567626953125, e * 114.35227966308594, e * 63.00567626953125, e * 113.35227966308594, e * 59.00567626953125, e * 111.35227966308594);
            o.bezierCurveTo(e * 62.00567626953125, e * 107.35227966308594, e * 64.00567626953125, e * 105.35227966308594, e * 66.00567626953125, e * 104.35227966308594);
            o.bezierCurveTo(e * 63.00567626953125, e * 100.35227966308594, e * 62.00567626953125, e * 100.35227966308594, e * 60.00567626953125, e * 99.35227966308594);
            o.closePath();
            se(o, t[0], t[0], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 51.00567626953125, e * 72.53409576416016);
            o.bezierCurveTo(e * 48.00567626953125, e * 56.534095764160156, e * 48.00567626953125, e * 49.534095764160156, e * 54.00567626953125, e * 35.534095764160156);
            o.bezierCurveTo(e * 58.00567626953125, e * 26.534095764160156, e * 65.00567626953125, e * 27.534095764160156, e * 73.00567626953125, e * 40.534095764160156);
            o.bezierCurveTo(e * 81.00567626953125, e * 49.534095764160156, e * 82.00567626953125, e * 50.534095764160156, e * 83.00567626953125, e * 51.534095764160156);
            o.bezierCurveTo(e * 77.00567626953125, e * 71.53409576416016, e * 64.00567626953125, e * 75.53409576416016, e * 51.00567626953125, e * 72.53409576416016);
            o.closePath();
            se(o, t[0], t[0], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 105.00567626953125, e * 50.53410339355469);
            o.bezierCurveTo(e * 112.00567626953125, e * 48.53410339355469, e * 125.00567626953125, e * 21.534103393554688, e * 132.00567626953125, e * 33.53410339355469);
            o.bezierCurveTo(e * 138.00567626953125, e * 42.53410339355469, e * 140.00567626953125, e * 64.53410339355469, e * 136.00567626953125, e * 75.53410339355469);
            o.closePath();
            se(o, t[0], t[0], e * 2);
            o.globalAlpha = 1;
            o.translate(0, e * -5);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 33.00567626953125, e * 95.44320678710938);
            o.bezierCurveTo(e * 42.00567626953125, e * 87.44320678710938, e * 48.00567626953125, e * 51.443206787109375, e * 74.00567626953125, e * 47.443206787109375);
            o.bezierCurveTo(e * 100.00567626953125, e * 42.443206787109375, e * 118.00567626953125, e * 49.443206787109375, e * 131.00567626953125, e * 55.443206787109375);
            o.bezierCurveTo(e * 140.00567626953125, e * 70.44320678710938, e * 145.00567626953125, e * 87.44320678710938, e * 152.00567626953125, e * 94.44320678710938);
            o.bezierCurveTo(e * 149.00567626953125, e * 99.44320678710938, e * 147.00567626953125, e * 98.44320678710938, e * 141.00567626953125, e * 101.44320678710938);
            o.bezierCurveTo(e * 147.00567626953125, e * 108.44320678710938, e * 147.00567626953125, e * 111.44320678710938, e * 147.00567626953125, e * 112.44320678710938);
            o.bezierCurveTo(e * 143.00567626953125, e * 112.44320678710938, e * 141.00567626953125, e * 112.44320678710938, e * 137.00567626953125, e * 111.44320678710938);
            o.bezierCurveTo(e * 138.00567626953125, e * 117.44320678710938, e * 138.00567626953125, e * 120.44320678710938, e * 138.00567626953125, e * 124.44320678710938);
            o.bezierCurveTo(e * 125.00567626953125, e * 107.44320678710938, e * 121.00567626953125, e * 124.44320678710938, e * 110.00567626953125, e * 141.44320678710938);
            o.bezierCurveTo(e * 102.00567626953125, e * 158.44320678710938, e * 89.00567626953125, e * 158.44320678710938, e * 80.00567626953125, e * 144.44320678710938);
            o.bezierCurveTo(e * 61.00567626953125, e * 111.44320678710938, e * 56.00567626953125, e * 117.44320678710938, e * 48.00567626953125, e * 120.44320678710938);
            o.bezierCurveTo(e * 46.00567626953125, e * 118.44320678710938, e * 47.00567626953125, e * 112.44320678710938, e * 48.00567626953125, e * 107.44320678710938);
            o.bezierCurveTo(e * 43.00567626953125, e * 111.44320678710938, e * 40.00567626953125, e * 111.44320678710938, e * 37.00567626953125, e * 110.44320678710938);
            o.bezierCurveTo(e * 39.50567626953125, e * 104.94320678710938, e * 39.50567626953125, e * 104.94320678710938, e * 42.00567626953125, e * 99.44320678710938);
            o.bezierCurveTo(e * 33.00567626953125, e * 99.44320678710938, e * 33.00567626953125, e * 98.44320678710938, e * 33.00567626953125, e * 96.44320678710938);
            o.closePath();
            se(o, t[1], t[2], e * 3);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 60.00567626953125, e * 99.35227966308594);
            o.bezierCurveTo(e * 70.00567626953125, e * 82.35227966308594, e * 85.00567626953125, e * 86.35227966308594, e * 87.00567626953125, e * 97.35227966308594);
            o.bezierCurveTo(e * 89.00567626953125, e * 101.35227966308594, e * 88.00567626953125, e * 105.35227966308594, e * 87.00567626953125, e * 110.35227966308594);
            o.bezierCurveTo(e * 89.00567626953125, e * 111.35227966308594, e * 91.00567626953125, e * 112.35227966308594, e * 93.00567626953125, e * 115.35227966308594);
            o.bezierCurveTo(e * 96.00567626953125, e * 111.35227966308594, e * 99.00567626953125, e * 111.35227966308594, e * 100.00567626953125, e * 110.35227966308594);
            o.bezierCurveTo(e * 98.00567626953125, e * 92.35227966308594, e * 103.00567626953125, e * 86.35227966308594, e * 113.00567626953125, e * 89.35227966308594);
            o.bezierCurveTo(e * 122.00567626953125, e * 92.35227966308594, e * 123.00567626953125, e * 94.35227966308594, e * 126.00567626953125, e * 98.35227966308594);
            o.bezierCurveTo(e * 124.00567626953125, e * 102.35227966308594, e * 123.00567626953125, e * 103.35227966308594, e * 121.00567626953125, e * 104.35227966308594);
            o.bezierCurveTo(e * 124.00567626953125, e * 105.35227966308594, e * 126.00567626953125, e * 107.35227966308594, e * 129.00567626953125, e * 111.35227966308594);
            o.bezierCurveTo(e * 115.00567626953125, e * 122.35227966308594, e * 113.00567626953125, e * 145.35227966308594, e * 100.00567626953125, e * 152.35227966308594);
            o.bezierCurveTo(e * 91.00567626953125, e * 158.35227966308594, e * 83.00567626953125, e * 149.35227966308594, e * 76.00567626953125, e * 138.35227966308594);
            o.bezierCurveTo(e * 67.00567626953125, e * 114.35227966308594, e * 63.00567626953125, e * 113.35227966308594, e * 59.00567626953125, e * 111.35227966308594);
            o.bezierCurveTo(e * 62.00567626953125, e * 107.35227966308594, e * 64.00567626953125, e * 105.35227966308594, e * 66.00567626953125, e * 104.35227966308594);
            o.bezierCurveTo(e * 63.00567626953125, e * 100.35227966308594, e * 62.00567626953125, e * 100.35227966308594, e * 60.00567626953125, e * 99.35227966308594);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 33.00567626953125, e * 95.44320678710938);
            o.bezierCurveTo(e * 42.00567626953125, e * 87.44320678710938, e * 48.00567626953125, e * 51.443206787109375, e * 74.00567626953125, e * 47.443206787109375);
            o.bezierCurveTo(e * 100.00567626953125, e * 42.443206787109375, e * 118.00567626953125, e * 49.443206787109375, e * 131.00567626953125, e * 55.443206787109375);
            o.bezierCurveTo(e * 140.00567626953125, e * 70.44320678710938, e * 145.00567626953125, e * 87.44320678710938, e * 152.00567626953125, e * 94.44320678710938);
            o.bezierCurveTo(e * 149.00567626953125, e * 99.44320678710938, e * 147.00567626953125, e * 98.44320678710938, e * 141.00567626953125, e * 101.44320678710938);
            o.bezierCurveTo(e * 147.00567626953125, e * 108.44320678710938, e * 147.00567626953125, e * 111.44320678710938, e * 147.00567626953125, e * 112.44320678710938);
            o.bezierCurveTo(e * 143.00567626953125, e * 112.44320678710938, e * 141.00567626953125, e * 112.44320678710938, e * 137.00567626953125, e * 111.44320678710938);
            o.bezierCurveTo(e * 138.00567626953125, e * 117.44320678710938, e * 138.00567626953125, e * 120.44320678710938, e * 138.00567626953125, e * 124.44320678710938);
            o.bezierCurveTo(e * 125.00567626953125, e * 107.44320678710938, e * 121.00567626953125, e * 124.44320678710938, e * 110.00567626953125, e * 141.44320678710938);
            o.bezierCurveTo(e * 102.00567626953125, e * 158.44320678710938, e * 89.00567626953125, e * 158.44320678710938, e * 80.00567626953125, e * 144.44320678710938);
            o.bezierCurveTo(e * 61.00567626953125, e * 111.44320678710938, e * 56.00567626953125, e * 117.44320678710938, e * 48.00567626953125, e * 120.44320678710938);
            o.bezierCurveTo(e * 46.00567626953125, e * 118.44320678710938, e * 47.00567626953125, e * 112.44320678710938, e * 48.00567626953125, e * 107.44320678710938);
            o.bezierCurveTo(e * 43.00567626953125, e * 111.44320678710938, e * 40.00567626953125, e * 111.44320678710938, e * 37.00567626953125, e * 110.44320678710938);
            o.bezierCurveTo(e * 39.50567626953125, e * 104.94320678710938, e * 39.50567626953125, e * 104.94320678710938, e * 42.00567626953125, e * 99.44320678710938);
            o.bezierCurveTo(e * 33.00567626953125, e * 99.44320678710938, e * 33.00567626953125, e * 98.44320678710938, e * 33.00567626953125, e * 96.44320678710938);
            o.closePath();
            se(o, undefined, t[2], e * 3);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 51.00567626953125, e * 72.53409576416016);
            o.bezierCurveTo(e * 48.00567626953125, e * 56.534095764160156, e * 48.00567626953125, e * 49.534095764160156, e * 54.00567626953125, e * 35.534095764160156);
            o.bezierCurveTo(e * 58.00567626953125, e * 26.534095764160156, e * 65.00567626953125, e * 27.534095764160156, e * 73.00567626953125, e * 40.534095764160156);
            o.bezierCurveTo(e * 81.00567626953125, e * 49.534095764160156, e * 82.00567626953125, e * 50.534095764160156, e * 83.00567626953125, e * 51.534095764160156);
            se(o, t[1], t[2], e * 3);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 105.00567626953125, e * 50.53410339355469);
            o.bezierCurveTo(e * 112.00567626953125, e * 48.53410339355469, e * 125.00567626953125, e * 21.534103393554688, e * 132.00567626953125, e * 33.53410339355469);
            o.bezierCurveTo(e * 138.00567626953125, e * 42.53410339355469, e * 140.00567626953125, e * 64.53410339355469, e * 136.00567626953125, e * 75.53410339355469);
            se(o, t[1], t[2], e * 3);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 57.00567626953125, e * 68.53410339355469);
            o.bezierCurveTo(e * 63.00567626953125, e * 69.53410339355469, e * 69.00567626953125, e * 66.53410339355469, e * 73.00567626953125, e * 60.53410339355469);
            o.bezierCurveTo(e * 66.00567626953125, e * 47.53410339355469, e * 61.00567626953125, e * 42.53410339355469, e * 58.00567626953125, e * 49.53410339355469);
            o.bezierCurveTo(e * 56.00567626953125, e * 59.53410339355469, e * 56.00567626953125, e * 64.53410339355469, e * 57.00567626953125, e * 67.53410339355469);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 115.00567626953125, e * 59.715911865234375);
            o.bezierCurveTo(e * 119.00567626953125, e * 48.715911865234375, e * 126.00567626953125, e * 41.715911865234375, e * 129.00567626953125, e * 48.715911865234375);
            o.bezierCurveTo(e * 131.00567626953125, e * 56.715911865234375, e * 133.00567626953125, e * 71.71591186523438, e * 127.00567626953125, e * 68.71591186523438);
            o.bezierCurveTo(e * 120.00567626953125, e * 67.71591186523438, e * 114.00567626953125, e * 59.715911865234375, e * 116.00567626953125, e * 58.715911865234375);
            o.closePath();
            se(o, t[3]);
            he(o, e * 77, e * 107, e * 6);
            se(o, t[2]);
            he(o, e * 110, e * 107, e * 6);
            se(o, t[2]);
            he(o, e * 75, e * 105, e * 3);
            se(o, t[4]);
            he(o, e * 108, e * 105, e * 3);
            se(o, t[4]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 88.00567626953125, e * 141.4431915283203);
            o.bezierCurveTo(e * 93.00567626953125, e * 137.4431915283203, e * 96.00567626953125, e * 138.4431915283203, e * 100.00567626953125, e * 141.4431915283203);
            o.bezierCurveTo(e * 103.00567626953125, e * 143.4431915283203, e * 101.00567626953125, e * 149.4431915283203, e * 95.00567626953125, e * 148.4431915283203);
            o.bezierCurveTo(e * 85.00567626953125, e * 148.4431915283203, e * 86.00567626953125, e * 145.4431915283203, e * 88.00567626953125, e * 142.4431915283203);
            o.closePath();
            se(o, t[1]);
            return i;
        }
        function fe(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 55;
            var n = e * 55;
            var a = e * 8;
            o.width = r;
            o.height = n;
            T.translate(e * -65, e * -55 + a);
            T.globalAlpha = 1;
            T.beginPath();
            T.moveTo(e * 95, e * 60);
            T.bezierCurveTo(e * 107, e * 62, e * 110, e * 73, e * 107, e * 79);
            T.bezierCurveTo(e * 104, e * 85, e * 85, e * 93, e * 81, e * 88);
            T.bezierCurveTo(e * 74, e * 80, e * 85, e * 60, e * 95, e * 60);
            T.closePath();
            se(T, i[0], i[1], 3);
            T.globalAlpha = 1;
            T.beginPath();
            T.moveTo(e * 91, e * 70);
            T.bezierCurveTo(e * 91, e * 75, e * 100, e * 76, e * 100, e * 73);
            T.bezierCurveTo(e * 100, e * 69, e * 89, e * 65, e * 91, e * 70);
            T.closePath();
            se(T, i[2], i[3], 3);
            return o;
        }
        function ze(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 238;
            i.height = e * 230;
            o.translate(e * -93, e * -110 + e * 5);
            o.globalAlpha = 0.3;
            he(o, e * 213.5, e * 256.75, e * 75);
            se(o, t[5]);
            he(o, e * 213.5, e * 175.75, e * 25);
            se(o, t[5]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 156.5, e * 137.75);
            o.bezierCurveTo(e * 170.5, e * 173.75, e * 195.5, e * 177.75, e * 209.5, e * 177.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[5];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 217.5, e * 178.75);
            o.bezierCurveTo(e * 251.5, e * 177.75, e * 263.5, e * 153.75, e * 270.5, e * 140.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[5];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 130.5, e * 124.75);
            o.bezierCurveTo(e * 153.5, e * 185.75, e * 198.5, e * 185.75, e * 213.5, e * 185.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[5];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.5, e * 183.75);
            o.bezierCurveTo(e * 265.5, e * 192.75, e * 293.5, e * 141.75, e * 297.5, e * 124.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[5];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 107.5, e * 213.75);
            o.bezierCurveTo(e * 151.5, e * 190.75, e * 198.5, e * 184.75, e * 210.5, e * 184.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[5];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 212.5, e * 187.75);
            o.bezierCurveTo(e * 258.5, e * 182.75, e * 286.5, e * 194.75, e * 314.5, e * 206.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[5];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 102.5, e * 258.75);
            o.bezierCurveTo(e * 142.5, e * 200.75, e * 193.5, e * 194.75, e * 211.5, e * 185.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[5];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.5, e * 192.75);
            o.bezierCurveTo(e * 276.5, e * 194.75, e * 306.5, e * 233.75, e * 316.5, e * 246.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[5];
            o.stroke();
            o.translate(0, -5);
            o.globalAlpha = 1;
            he(o, e * 213.5, e * 256.75, e * 75);
            se(o, t[3]);
            he(o, e * 213.5, e * 175.75, e * 25);
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 219.5, e * 158.75);
            o.bezierCurveTo(e * 226.5, e * 159.75, e * 227.5, e * 147.75, e * 219.5, e * 145.75);
            o.closePath();
            o.lineWidth = e * 10;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 210.5, e * 160.75);
            o.bezierCurveTo(e * 203.5, e * 159.75, e * 199.5, e * 146.75, e * 210.5, e * 145.75);
            o.closePath();
            o.lineWidth = e * 10;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 219.5, e * 158.75);
            o.bezierCurveTo(e * 226.5, e * 159.75, e * 227.5, e * 147.75, e * 219.5, e * 145.75);
            o.closePath();
            o.fillStyle = t[0];
            o.fill();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 210.5, e * 160.75);
            o.bezierCurveTo(e * 203.5, e * 159.75, e * 199.5, e * 146.75, e * 210.5, e * 145.75);
            o.closePath();
            o.fillStyle = t[0];
            o.fill();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 156.5, e * 137.75);
            o.bezierCurveTo(e * 170.5, e * 173.75, e * 195.5, e * 177.75, e * 209.5, e * 177.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 217.5, e * 178.75);
            o.bezierCurveTo(e * 251.5, e * 177.75, e * 263.5, e * 153.75, e * 270.5, e * 140.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 130.5, e * 124.75);
            o.bezierCurveTo(e * 153.5, e * 185.75, e * 198.5, e * 185.75, e * 213.5, e * 185.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.5, e * 183.75);
            o.bezierCurveTo(e * 265.5, e * 192.75, e * 293.5, e * 141.75, e * 297.5, e * 124.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 107.5, e * 213.75);
            o.bezierCurveTo(e * 151.5, e * 190.75, e * 198.5, e * 184.75, e * 210.5, e * 184.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 212.5, e * 187.75);
            o.bezierCurveTo(e * 258.5, e * 182.75, e * 286.5, e * 194.75, e * 314.5, e * 206.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 102.5, e * 258.75);
            o.bezierCurveTo(e * 142.5, e * 200.75, e * 193.5, e * 194.75, e * 211.5, e * 185.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.5, e * 192.75);
            o.bezierCurveTo(e * 276.5, e * 194.75, e * 306.5, e * 233.75, e * 316.5, e * 246.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t[3];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 156.5, e * 137.75);
            o.bezierCurveTo(e * 170.5, e * 173.75, e * 195.5, e * 177.75, e * 209.5, e * 177.75);
            o.lineWidth = e * 8;
            o.strokeStyle = t[0];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 217.5, e * 178.75);
            o.bezierCurveTo(e * 251.5, e * 177.75, e * 263.5, e * 153.75, e * 270.5, e * 140.75);
            o.lineWidth = e * 8;
            o.strokeStyle = t[0];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 130.5, e * 124.75);
            o.bezierCurveTo(e * 153.5, e * 185.75, e * 198.5, e * 185.75, e * 213.5, e * 185.75);
            o.lineWidth = e * 8;
            o.strokeStyle = t[0];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.5, e * 183.75);
            o.bezierCurveTo(e * 265.5, e * 192.75, e * 293.5, e * 141.75, e * 297.5, e * 124.75);
            o.lineWidth = e * 8;
            o.strokeStyle = t[0];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 107.5, e * 213.75);
            o.bezierCurveTo(e * 151.5, e * 190.75, e * 198.5, e * 184.75, e * 210.5, e * 184.75);
            o.lineWidth = e * 8;
            o.strokeStyle = t[0];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 212.5, e * 187.75);
            o.bezierCurveTo(e * 258.5, e * 182.75, e * 286.5, e * 194.75, e * 314.5, e * 206.75);
            o.lineWidth = e * 8;
            o.strokeStyle = t[0];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 102.5, e * 258.75);
            o.bezierCurveTo(e * 142.5, e * 200.75, e * 193.5, e * 194.75, e * 211.5, e * 185.75);
            o.lineWidth = e * 8;
            o.strokeStyle = t[0];
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.5, e * 192.75);
            o.bezierCurveTo(e * 276.5, e * 194.75, e * 306.5, e * 233.75, e * 316.5, e * 246.75);
            o.lineWidth = e * 8;
            o.strokeStyle = t[0];
            o.stroke();
            he(o, e * 213.5, e * 256.75, e * 70);
            se(o, t[0]);
            he(o, e * 213.5, e * 175.75, e * 20);
            se(o, t[0]);
            he(o, e * 222, e * 166, e * 5);
            o.fillStyle = t[2];
            o.fill();
            he(o, e * 205, e * 166, e * 5);
            o.fillStyle = t[2];
            o.fill();
            he(o, e * 206.2, e * 167, e * 2.5);
            o.fillStyle = t[4];
            o.fill();
            he(o, e * 223.2, e * 167, e * 2.5);
            o.fillStyle = t[4];
            o.fill();
            o.save();
            o.translate(e * 213.5, e * 293.75);
            o.rotate(0.76);
            Re(o, e * -22, e * -21, e * 44, e * 42, e * 6);
            o.restore();
            o.fillStyle = t[1];
            o.fill();
            o.save();
            o.translate(e * 212.5, e * 258.25);
            o.rotate(0.8);
            Re(o, e * -15, e * -14.5, e * 30, e * 29, e * 6);
            o.restore();
            o.fillStyle = t[1];
            o.fill();
            return i;
        }
        function Be(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.save();
            T.translate(e * 202.5, e * 147.5);
            Re(T, e * -96.5, e * -21.5, e * 193, e * 193, e * 0);
            T.restore();
            se(T, t[0], t[1], e * 12);
            T.save();
            T.translate(e * 202.5, e * 190.5);
            Re(T, e * 96.5, e * -21.5, e * -193, e * 43, e * 0);
            T.restore();
            se(T, t[2], t[1], e * 12);
            T.save();
            T.save();
            T.translate(e * 202.5, e * 233.5);
            Re(T, e * -96.5, e * -20.5, e * 193, e * 41, e * 0);
            T.restore();
            se(T, t[3], t[1], e * 12);
            T.save();
            T.translate(e * 202.5, e * 275);
            Re(T, e * 96.5, e * -21, e * -193, e * 42, e * 0);
            T.restore();
            se(T, t[0], t[1], e * 12);
            T.save();
            T.translate(e * 201, e * 212);
            T.rotate(8.64);
            Re(T, e * -116, e * -22, e * 232, e * 44, e * 10);
            T.restore();
            se(T, t[3], t[1], e * 12);
            T.save();
            T.translate(e * 203.5, e * 121.5);
            Re(T, e * -115.5, e * -20.5, e * 231, e * 41, e * 10);
            T.restore();
            se(T, t[3], t[1], e * 12);
            T.save();
            T.translate(e * 203.5, e * 299);
            Re(T, e * -115.5, e * -20, e * 231, e * 40, e * 10);
            T.restore();
            se(T, t[3], t[1], e * 12);
            T.save();
            T.translate(e * 298.5, e * 210);
            Re(T, e * -20.5, e * -109, e * 41, e * 218, e * 10);
            T.restore();
            se(T, t[3], t[1], e * 12);
            T.save();
            T.translate(e * 108.5, e * 210);
            Re(T, e * -20.5, e * -109, e * 41, e * 218, e * 10);
            T.restore();
            se(T, t[3], t[1], e * 12);
            T.save();
            T.translate(e * 204, e * 121.5);
            Re(T, e * -92, e * -9.5, e * 184, e * 19, e * 10);
            T.restore();
            se(T, t[3], t[3], e * 10);
            T.save();
            T.translate(e * 197, e * 299);
            Re(T, e * 85, e * -9, e * -170, e * 18, e * 10);
            T.restore();
            se(T, t[3], t[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 94, e * 317);
            T.bezierCurveTo(e * 110.5, e * 299.5, e * 110.5, e * 299.5, e * 127, e * 282);
            T.closePath();
            se(T, undefined, t[1], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 279, e * 142);
            T.bezierCurveTo(e * 296.5, e * 125.5, e * 296.5, e * 125.5, e * 314, e * 109);
            T.closePath();
            se(T, undefined, t[1], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 93, e * 106);
            T.bezierCurveTo(e * 110.5, e * 124, e * 110.5, e * 124, e * 128, e * 142);
            T.closePath();
            se(T, undefined, t[1], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 281, e * 282);
            T.bezierCurveTo(e * 296, e * 297.5, e * 296, e * 297.5, e * 311, e * 313);
            T.closePath();
            se(T, undefined, t[1], e * 12);
            if (i == 0) {
            T.scale(2, 2);
            T.translate(e * -7, e * 55);
            T.rotate(-0.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 60, e * 47);
            T.bezierCurveTo(e * 81, e * 46, e * 85, e * 47, e * 83, e * 63);
            T.bezierCurveTo(e * 83, e * 72, e * 83, e * 75, e * 72, e * 73);
            T.bezierCurveTo(e * 68, e * 80, e * 69, e * 82, e * 66, e * 73);
            T.bezierCurveTo(e * 62, e * 81, e * 61, e * 82, e * 59, e * 73);
            T.bezierCurveTo(e * 54, e * 81, e * 55, e * 81, e * 52, e * 74);
            T.bezierCurveTo(e * 38, e * 76, e * 41, e * 74, e * 40, e * 66);
            T.bezierCurveTo(e * 38, e * 45, e * 39, e * 49, e * 59, e * 47);
            T.closePath();
            se(T, t[4], t[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 68, e * 54);
            T.bezierCurveTo(e * 75, e * 54, e * 77, e * 62, e * 71, e * 64);
            T.bezierCurveTo(e * 62, e * 65, e * 63, e * 54, e * 68, e * 54);
            T.closePath();
            se(T, t[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 50, e * 55);
            T.bezierCurveTo(e * 57, e * 55, e * 58, e * 65, e * 52, e * 65);
            T.bezierCurveTo(e * 44, e * 66, e * 44, e * 54, e * 50, e * 55);
            T.closePath();
            se(T, t[3]);
            } else if (i == 1) {
            T.scale(0.6, 0.6);
            T.translate(e * 185, e * 165);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 108, e * 56);
            T.bezierCurveTo(e * 136, e * 58, e * 203, e * 69, e * 234, e * 75);
            T.bezierCurveTo(e * 246, e * 77, e * 247, e * 78, e * 245, e * 90);
            T.bezierCurveTo(e * 238, e * 143, e * 228, e * 197, e * 214, e * 259);
            T.bezierCurveTo(e * 212, e * 267, e * 209, e * 270, e * 189, e * 268);
            T.bezierCurveTo(e * 142, e * 264, e * 106, e * 260, e * 75, e * 253);
            T.bezierCurveTo(e * 60, e * 250, e * 64, e * 250, e * 66, e * 221);
            T.bezierCurveTo(e * 71, e * 168, e * 87, e * 95, e * 98, e * 67);
            T.bezierCurveTo(e * 101, e * 57, e * 103, e * 56, e * 106, e * 56);
            T.closePath();
            se(T, t[4], t[4], e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 112, e * 72);
            T.bezierCurveTo(e * 132, e * 73, e * 227, e * 85, e * 226, e * 91);
            T.bezierCurveTo(e * 231, e * 89, e * 217, e * 196, e * 200, e * 250);
            T.bezierCurveTo(e * 196, e * 254, e * 175, e * 249, e * 166, e * 249);
            T.bezierCurveTo(e * 91, e * 241, e * 82, e * 236, e * 83, e * 232);
            T.bezierCurveTo(e * 90, e * 144, e * 108, e * 71, e * 111, e * 72);
            T.closePath();
            se(T, undefined, t[0], e * 13);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 132, e * 117);
            T.bezierCurveTo(e * 171, e * 86, e * 191, e * 101, e * 188, e * 134);
            T.bezierCurveTo(e * 185, e * 154, e * 170, e * 158, e * 153, e * 158);
            T.bezierCurveTo(e * 143, e * 172, e * 146, e * 180, e * 147, e * 193);
            se(T, undefined, t[0], e * 20);
            he(T, e * 142, e * 221, e * 16.1245154965971);
            se(T, t[0]);
            }
            return o;
        }
        function Ge(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 101, e * 255);
            T.bezierCurveTo(e * 113, e * 243, e * 179, e * 210, e * 219, e * 196);
            T.bezierCurveTo(e * 252, e * 203, e * 288, e * 215, e * 318, e * 233);
            T.bezierCurveTo(e * 304, e * 254, e * 258, e * 273, e * 215, e * 296);
            T.bezierCurveTo(e * 161, e * 287, e * 119, e * 270, e * 102, e * 257);
            T.closePath();
            se(T, i[0], i[1], e * 14);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 99, e * 258);
            T.bezierCurveTo(e * 99, e * 272.5, e * 99, e * 272.5, e * 99, e * 287);
            T.bezierCurveTo(e * 166, e * 319, e * 193, e * 320, e * 212, e * 324);
            T.bezierCurveTo(e * 292, e * 286, e * 312, e * 271, e * 319, e * 263);
            T.bezierCurveTo(e * 320, e * 249, e * 320, e * 241, e * 318, e * 234);
            T.bezierCurveTo(e * 300, e * 254, e * 254, e * 277, e * 216, e * 294);
            T.bezierCurveTo(e * 190, e * 296, e * 135, e * 276, e * 102, e * 258);
            T.closePath();
            se(T, i[2], i[1], e * 14);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 212, e * 323);
            T.bezierCurveTo(e * 211.5, e * 310.5, e * 211.5, e * 310.5, e * 211, e * 298);
            T.closePath();
            se(T, undefined, i[1], e * 14);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 212, e * 210);
            T.bezierCurveTo(e * 286, e * 210, e * 331, e * 254, e * 212, e * 276);
            T.bezierCurveTo(e * 108, e * 276, e * 112, e * 222, e * 213, e * 208);
            T.closePath();
            se(T, i[3], i[4], e * 14);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 98, e * 200);
            T.bezierCurveTo(e * 126, e * 216, e * 177, e * 232, e * 213, e * 237);
            T.bezierCurveTo(e * 266, e * 218, e * 288, e * 209, e * 318, e * 190);
            T.bezierCurveTo(e * 269, e * 164, e * 239, e * 158, e * 214, e * 153);
            T.bezierCurveTo(e * 148, e * 172, e * 131, e * 182, e * 98, e * 200);
            T.closePath();
            se(T, i[0], i[1], e * 14);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 97, e * 204);
            T.bezierCurveTo(e * 97, e * 215.5, e * 97, e * 215.5, e * 97, e * 227);
            T.bezierCurveTo(e * 148, e * 250, e * 179, e * 256, e * 212, e * 262);
            T.bezierCurveTo(e * 268, e * 244, e * 281, e * 233, e * 318, e * 214);
            T.bezierCurveTo(e * 318, e * 203, e * 318, e * 203, e * 318, e * 192);
            T.bezierCurveTo(e * 250, e * 225, e * 236, e * 231, e * 214, e * 239);
            T.bezierCurveTo(e * 158, e * 228, e * 126, e * 215, e * 99, e * 201);
            T.closePath();
            se(T, i[2], i[1], e * 14);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 212, e * 260);
            T.bezierCurveTo(e * 212, e * 251.5, e * 212, e * 251.5, e * 212, e * 243);
            T.closePath();
            se(T, undefined, i[1], e * 14);
            he(T, e * 161, e * 201, e * 13);
            se(T, i[5]);
            he(T, e * 216, e * 205, e * 8.06225774829855);
            se(T, i[5]);
            he(T, e * 216, e * 175, e * 6.708203932499369);
            se(T, i[5]);
            he(T, e * 271, e * 191, e * 5.0990195135927845);
            se(T, i[5]);
            he(T, e * 206, e * 180, e * 11.180339887498949);
            se(T, i[5]);
            return o;
        }
        function We(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.save();
            T.translate(e * 85, e * 237);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 54.585977194239184, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 178, e * 238);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 52.53573932334064, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 270, e * 239);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 53.58058329516393, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 222, e * 312);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 52.53573932334064, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 317, e * 159);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 57.63465889766331, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 223.5, e * 139.0625);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 51.66236541235796, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 132.5, e * 137.0625);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 52.009614495783374, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 178.5, e * 58.0625);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 53.16013544000805, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 177.5, e * 216.0625);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 50, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 84.5, e * 215.0625);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 54, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 319.5, e * 138.0625);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 55.08175741568164, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 269.5, e * 216.0625);
            T.rotate(1.5707963267948966);
            ue(T, 6, e * 54.589376255824725, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.save();
            T.translate(e * 221.5, e * 293.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 49.49747468305833, e * 1);
            T.restore();
            se(T, i[1], i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 221.5, e * 342.0625);
            T.bezierCurveTo(e * 221.5, e * 350.5625, e * 221.5, e * 350.5625, e * 221.5, e * 359.0625);
            T.closePath();
            se(T, undefined, i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84.5, e * 270.0625);
            T.bezierCurveTo(e * 84.5, e * 277.0625, e * 84.5, e * 277.0625, e * 84.5, e * 284.0625);
            T.closePath();
            se(T, undefined, i[2], e * 12);
            T.save();
            T.translate(e * 84.5, e * 215.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 30, e * 15);
            T.restore();
            se(T, i[3]);
            T.save();
            T.translate(e * 177.5, e * 215.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 30, e * 15);
            T.restore();
            se(T, i[3]);
            T.save();
            T.translate(e * 222.5, e * 294.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 30, e * 15);
            T.restore();
            se(T, i[3]);
            T.save();
            T.translate(e * 270.5, e * 216.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 30, e * 15);
            T.restore();
            se(T, i[3]);
            T.save();
            T.translate(e * 320.5, e * 134.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 30, e * 15);
            T.restore();
            se(T, i[3]);
            T.save();
            T.translate(e * 224.5, e * 138.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 30, e * 15);
            T.restore();
            se(T, i[3]);
            T.save();
            T.translate(e * 133.5, e * 137.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 30, e * 15);
            T.restore();
            se(T, i[3]);
            T.save();
            T.translate(e * 178.5, e * 56.0625);
            T.rotate(0.5235987755982988);
            ue(T, 6, e * 30, e * 15);
            T.restore();
            se(T, i[3]);
            return o;
        }
        function Ve(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 52;
            o.height = e * 65;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 9.833328247070312, e * 12.078125);
            T.bezierCurveTo(e * 15.333328247070312, e * 28.078125, e * 15.333328247070312, e * 28.078125, e * 20.833328247070312, e * 44.078125);
            T.closePath();
            se(T, undefined, i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 7.8333282470703125, e * 20.078125);
            T.bezierCurveTo(e * 16.833328247070312, e * 32.578125, e * 16.833328247070312, e * 32.578125, e * 25.833328247070312, e * 45.078125);
            T.closePath();
            se(T, undefined, i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 23.833328247070312, e * 26.078125);
            T.bezierCurveTo(e * 25.833328247070312, e * 11.078125, e * 16.833328247070312, e * 8.078125, e * 14.833328247070312, e * 7.078125);
            T.bezierCurveTo(e * 11.833328247070312, e * 17.078125, e * 13.833328247070312, e * 22.078125, e * 23.833328247070312, e * 27.078125);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35.83332824707031, e * 8.078125);
            T.bezierCurveTo(e * 34.83332824707031, e * 27.078125, e * 28.833328247070312, e * 27.078125, e * 23.833328247070312, e * 28.078125);
            T.bezierCurveTo(e * 21.833328247070312, e * 14.078125, e * 26.833328247070312, e * 11.078125, e * 35.83332824707031, e * 8.078125);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 25.833328247070312, e * 39.078125);
            T.bezierCurveTo(e * 20.833328247070312, e * 29.078125, e * 14.833328247070312, e * 27.078125, e * 5.8333282470703125, e * 29.078125);
            T.bezierCurveTo(e * 9.833328247070312, e * 39.078125, e * 16.833328247070312, e * 42.078125, e * 25.833328247070312, e * 40.078125);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42.83332824707031, e * 23.078125);
            T.bezierCurveTo(e * 35.83332824707031, e * 35.078125, e * 31.833328247070312, e * 37.078125, e * 25.833328247070312, e * 36.078125);
            T.bezierCurveTo(e * 25.833328247070312, e * 24.078125, e * 33.83332824707031, e * 21.078125, e * 42.83332824707031, e * 23.078125);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 23.833328247070312, e * 24.078125);
            T.bezierCurveTo(e * 20.833328247070312, e * 34.078125, e * 23.833328247070312, e * 40.078125, e * 27.833328247070312, e * 43.078125);
            T.bezierCurveTo(e * 37.33332824707031, e * 28.078125, e * 37.33332824707031, e * 28.078125, e * 46.83332824707031, e * 13.078125);
            se(T, undefined, i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 38.83332824707031, e * 14.078125);
            T.bezierCurveTo(e * 34.83332824707031, e * 24.078125, e * 34.83332824707031, e * 24.078125, e * 30.833328247070312, e * 34.078125);
            se(T, undefined, i[1], e * 2);
            return o;
        }
        function Ke(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 170;
            o.height = e * 173;
            T.translate(e * 5, e * 5);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 86.25, e * 84.953125);
            T.rotate(0.32);
            ue(T, 7, e * 42.15447781671598, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 86.25, e * 84.953125);
            T.rotate(0.32);
            ue(T, 7, e * 42.15447781671598, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 86.25, e * 84.953125);
            T.rotate(0.28);
            ue(T, 7, e * 30.463092423455635, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 86.25, e * 84.953125);
            T.rotate(0.28);
            ue(T, 7, e * 30.463092423455635, e * 10);
            T.restore();
            se(T, i[3], i[4], e * 4);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            he(T, e * 86.25, e * 84.953125, e * 18.867962264113206);
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            he(T, e * 86.25, e * 84.953125, e * 18.867962264113206);
            se(T, i[5], i[6], e * 4);
            return o;
        }
        function Ye(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 170;
            o.height = e * 173;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 85.25, e * 82.953125);
            T.bezierCurveTo(e * 98.25, e * 46.453125, e * 98.25, e * 46.453125, e * 111.25, e * 9.953125);
            T.closePath();
            se(T, undefined, i[0], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 111.25, e * 8.953125);
            T.bezierCurveTo(e * 117.75, e * 12.453125, e * 117.75, e * 12.453125, e * 124.25, e * 15.953125);
            T.bezierCurveTo(e * 113.75, e * 39.953125, e * 113.75, e * 39.953125, e * 103.25, e * 63.953125);
            T.bezierCurveTo(e * 97.75, e * 64.953125, e * 97.75, e * 64.953125, e * 92.25, e * 65.953125);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 111.25, e * 8.953125);
            T.bezierCurveTo(e * 117.75, e * 12.453125, e * 117.75, e * 12.453125, e * 124.25, e * 15.953125);
            T.bezierCurveTo(e * 113.75, e * 39.953125, e * 113.75, e * 39.953125, e * 103.25, e * 63.953125);
            T.bezierCurveTo(e * 97.75, e * 64.953125, e * 97.75, e * 64.953125, e * 92.25, e * 65.953125);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 85.25, e * 82.953125);
            T.bezierCurveTo(e * 98.25, e * 46.453125, e * 98.25, e * 46.453125, e * 111.25, e * 9.953125);
            T.closePath();
            se(T, undefined, i[6], e * 4);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87.25, e * 84.953125);
            T.bezierCurveTo(e * 123.75, e * 100.453125, e * 123.75, e * 100.453125, e * 160.25, e * 115.953125);
            T.closePath();
            se(T, undefined, i[0], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 160.25, e * 114.953125);
            T.bezierCurveTo(e * 156.25, e * 122.453125, e * 156.25, e * 122.453125, e * 152.25, e * 129.953125);
            T.bezierCurveTo(e * 130.25, e * 117.953125, e * 130.25, e * 117.953125, e * 108.25, e * 105.953125);
            T.bezierCurveTo(e * 107.25, e * 98.953125, e * 107.25, e * 98.953125, e * 106.25, e * 91.953125);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 160.25, e * 114.953125);
            T.bezierCurveTo(e * 156.25, e * 122.453125, e * 156.25, e * 122.453125, e * 152.25, e * 129.953125);
            T.bezierCurveTo(e * 130.25, e * 117.953125, e * 130.25, e * 117.953125, e * 108.25, e * 105.953125);
            T.bezierCurveTo(e * 107.25, e * 98.953125, e * 107.25, e * 98.953125, e * 106.25, e * 91.953125);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87.25, e * 84.953125);
            T.bezierCurveTo(e * 123.75, e * 100.453125, e * 123.75, e * 100.453125, e * 160.25, e * 115.953125);
            T.closePath();
            se(T, undefined, i[6], e * 4);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 83.25, e * 83.953125);
            T.bezierCurveTo(e * 47.75, e * 68.453125, e * 47.75, e * 68.453125, e * 12.25, e * 52.953125);
            T.closePath();
            se(T, undefined, i[0], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 13.25, e * 53.953125);
            T.bezierCurveTo(e * 17.25, e * 46.953125, e * 17.25, e * 46.953125, e * 21.25, e * 39.953125);
            T.bezierCurveTo(e * 42.75, e * 52.453125, e * 42.75, e * 52.453125, e * 64.25, e * 64.953125);
            T.bezierCurveTo(e * 64.25, e * 70.953125, e * 64.25, e * 70.953125, e * 64.25, e * 76.953125);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 13.25, e * 53.953125);
            T.bezierCurveTo(e * 17.25, e * 46.953125, e * 17.25, e * 46.953125, e * 21.25, e * 39.953125);
            T.bezierCurveTo(e * 42.75, e * 52.453125, e * 42.75, e * 52.453125, e * 64.25, e * 64.953125);
            T.bezierCurveTo(e * 64.25, e * 70.953125, e * 64.25, e * 70.953125, e * 64.25, e * 76.953125);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 83.25, e * 83.953125);
            T.bezierCurveTo(e * 47.75, e * 68.453125, e * 47.75, e * 68.453125, e * 12.25, e * 52.953125);
            T.closePath();
            se(T, undefined, i[6], e * 4);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84.25, e * 86.953125);
            T.bezierCurveTo(e * 70.25, e * 123.953125, e * 70.25, e * 123.953125, e * 56.25, e * 160.953125);
            T.closePath();
            se(T, undefined, i[0], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56.25, e * 159.953125);
            T.bezierCurveTo(e * 49.25, e * 155.453125, e * 49.25, e * 155.453125, e * 42.25, e * 150.953125);
            T.bezierCurveTo(e * 54.25, e * 127.953125, e * 54.25, e * 127.953125, e * 66.25, e * 104.953125);
            T.bezierCurveTo(e * 71.25, e * 104.953125, e * 71.25, e * 104.953125, e * 76.25, e * 104.953125);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56.25, e * 159.953125);
            T.bezierCurveTo(e * 49.25, e * 155.453125, e * 49.25, e * 155.453125, e * 42.25, e * 150.953125);
            T.bezierCurveTo(e * 54.25, e * 127.953125, e * 54.25, e * 127.953125, e * 66.25, e * 104.953125);
            T.bezierCurveTo(e * 71.25, e * 104.953125, e * 71.25, e * 104.953125, e * 76.25, e * 104.953125);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84.25, e * 86.953125);
            T.bezierCurveTo(e * 70.25, e * 123.953125, e * 70.25, e * 123.953125, e * 56.25, e * 160.953125);
            T.closePath();
            se(T, undefined, i[6], e * 4);
            return o;
        }
        function Ue(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 170;
            o.height = e * 173;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 86.25, e * 84.953125);
            ue(T, 7, e * 9.848857801796104, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 86.25, e * 84.953125);
            ue(T, 7, e * 9.848857801796104, e * 5);
            T.restore();
            se(T, i[8], i[9], e * 4);
            return o;
        }
        function ke(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 75;
            var n = e * 55;
            o.width = r;
            o.height = n;
            T.translate(e * -30, e * -40);
            T.globalAlpha = 1;
            T.beginPath();
            T.bezierCurveTo(e * 67, e * 56, e * 72, e * 71, e * 72, e * 71);
            T.bezierCurveTo(e * 72, e * 71, e * 84, e * 70, e * 75, e * 82);
            T.bezierCurveTo(e * 70, e * 88, e * 61, e * 89, e * 58, e * 89);
            T.bezierCurveTo(e * 55, e * 89, e * 40, e * 89, e * 46, e * 77);
            T.bezierCurveTo(e * 46, e * 77, e * 43, e * 63, e * 43, e * 63);
            T.bezierCurveTo(e * 35, e * 61, e * 35, e * 53, e * 42, e * 47);
            T.bezierCurveTo(e * 48, e * 42, e * 62, e * 41, e * 66, e * 43);
            T.bezierCurveTo(e * 70, e * 45, e * 72, e * 48, e * 67, e * 56);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.bezierCurveTo(e * 68, e * 61, e * 72, e * 76, e * 72, e * 76);
            T.bezierCurveTo(e * 65, e * 85, e * 61, e * 85, e * 49, e * 83);
            T.bezierCurveTo(e * 49, e * 83, e * 44, e * 63, e * 44, e * 63);
            T.bezierCurveTo(e * 54, e * 63, e * 60, e * 63, e * 67, e * 55);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.moveTo(e * 69, e * 65);
            T.bezierCurveTo(e * 70, e * 61, e * 81, e * 66, e * 86, e * 66);
            T.bezierCurveTo(e * 90, e * 66, e * 97, e * 63, e * 97, e * 56);
            T.bezierCurveTo(e * 97, e * 50, e * 93, e * 47, e * 88, e * 44);
            se(T, false, i[1], 2);
            T.beginPath();
            T.moveTo(e * 50, e * 48);
            T.bezierCurveTo(e * 43, e * 52, e * 50, e * 54, e * 51, e * 54);
            T.bezierCurveTo(e * 54, e * 54, e * 59, e * 52, e * 59, e * 49);
            T.bezierCurveTo(e * 59, e * 48, e * 55, e * 46, e * 50, e * 48);
            se(T, i[2]);
            return o;
        }
        function Fe(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 195;
            var n = e * 190;
            var a = r / 2;
            var I = n / 2;
            o.width = r;
            o.height = n;
            var E = e * 10;
            var _ = e * 35;
            var s = e * 150;
            var R = _ / 2;
            var h = s / 2;
            var d = e * 4;
            T.translate(a - e * 5, I - e * 5);
            T.rotate(-window.Math.PI / 1.25);
            T.globalAlpha = 1;
            Re(T, -R, -h, _, s, E);
            se(T, i[0], i[1], d);
            T.translate(0, 0);
            T.rotate(window.Math.PI / 3);
            T.globalAlpha = 1;
            Re(T, -R, -h, _, s, E);
            se(T, i[0], i[1], d);
            T.translate(0, 5);
            Re(T, -R / 2, -h / 2, _ / 2, s / 3, E - 2);
            se(T, i[1]);
            return o;
        }
        function xe(e, t, i, o, T) {
            var r = window.document.createElement("canvas");
            var n = r.getContext("2d");
            var a = e * 70;
            var I = e * 70;
            var E = e * 10;
            var _ = e * 5;
            r.width = a;
            r.height = I + _;
            for (var s = 0; s < t.length; s++) {
            var R = t[s];
            n.globalAlpha = R.a;
            var h = R.f(i, false, R.c);
            n.save();
            n.translate(a / 2 + R.x * e, I / 2 + R.y * e);
            n.rotate(R.r);
            n.drawImage(h, -h.width / 2, -h.height / 2);
            n.restore();
            }
            var d = [];
            for (s = 0; s < o.length; s++) {
            var u = window.document.createElement("canvas");
            var A = u.getContext("2d");
            u.width = a;
            u.height = I + _;
            A.globalAlpha = T / 2;
            if (s == 2) {
                Re(A, 0, _, a, I, E);
            } else {
                Re(A, 0, 0, a, I + _, E);
            }
            se(A, "#081a19");
            A.globalAlpha = T;
            Re(A, 0, s == 2 ? _ : 0, a, I, E);
            se(A, o[s]);
            A.globalAlpha = 1;
            if (s == 2) {
                A.drawImage(r, 0, _);
            } else {
                A.drawImage(r, 0, 0);
            }
            d.push(Y(u));
            }
            return d;
        }
        function Je(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 193;
            var n = e * 198;
            var a = e * 140;
            var I = e * 90;
            o.width = r;
            o.height = n;
            var E = e * 10;
            var _ = e * 25;
            var s = e * 180;
            var R = _ / 2;
            var h = s / 2;
            var d = e * 4;
            T.translate(e * -25, e * 1);
            T.translate(a, I);
            T.rotate(-window.Math.PI / 5);
            Re(T, -R, -h, _, s, E);
            se(T, i[0], i[1], d);
            T.translate(e * -30, e * -25);
            T.rotate(window.Math.PI / 3);
            Re(T, -R, -h, _, s, E);
            se(T, i[0], i[1], d);
            T.translate(e * 35, e * 30);
            T.rotate(window.Math.PI / 3);
            Re(T, -R, -h, _, s, E);
            se(T, i[0], i[1], d);
            return o;
        }
        function Xe(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 145;
            var n = e * 145;
            var a = r / 2;
            var I = n / 2;
            o.width = r;
            o.height = n;
            var E = e * 70;
            T.translate(a, I);
            T.globalAlpha = 0.4;
            he(T, 0, 0, E);
            se(T, i[0]);
            E = e * 50;
            T.translate(0, 0);
            T.globalAlpha = 0.8;
            he(T, 0, 0, E);
            se(T, i[0]);
            E = e * 35;
            T.translate(0, 0);
            T.globalAlpha = 0.8;
            he(T, 0, 0, E);
            se(T, i[1]);
            E = e * 20;
            T.translate(0, 0);
            T.globalAlpha = 0.8;
            he(T, 0, 0, E);
            se(T, i[2]);
            return o;
        }
        function qe(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 135;
            var n = e * 190;
            var a = r / 2;
            var I = n / 2;
            o.width = r;
            o.height = n;
            var E = e * 10;
            var _ = e * 25;
            var s = e * 180;
            var R = _ / 2;
            var h = s / 2;
            var d = e * 4;
            T.translate(a, I);
            T.rotate(-window.Math.PI / 5);
            T.globalAlpha = 1;
            Re(T, -R, -h, _, s, E);
            se(T, i[0], i[1], d);
            T.translate(0, 0);
            T.rotate(window.Math.PI / 5);
            T.globalAlpha = 1;
            Re(T, -R, -h, _, s, E);
            se(T, i[0], i[1], d);
            return o;
        }
        function je(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 205;
            var n = e * 205;
            var a = r / 2;
            var I = n / 2;
            o.width = r;
            o.height = n;
            var E = e * 100;
            T.translate(a, I);
            T.globalAlpha = 1;
            he(T, 0, 0, E);
            se(T, i[0]);
            return o;
        }
        function Ze(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 370;
            var n = e * 370;
            var a = r / 2;
            var I = n / 2;
            o.width = r;
            o.height = n;
            var E = e * 180;
            T.globalAlpha = 0.2;
            he(T, a, I, E);
            se(T, i[0]);
            return o;
        }
        function $e(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 155;
            o.height = e * 127;
            T.globalAlpha = 0.5;
            T.translate(0, e * 8);
            T.translate(e * -7, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 68);
            T.bezierCurveTo(e * 86, e * 64, e * 117, e * 66, e * 134, e * 68);
            T.bezierCurveTo(e * 152, e * 69, e * 165, e * 86, e * 152, e * 104);
            T.bezierCurveTo(e * 146, e * 87, e * 122, e * 89, e * 98, e * 90);
            T.bezierCurveTo(e * 64, e * 89, e * 41, e * 91, e * 36, e * 106);
            T.bezierCurveTo(e * 19, e * 92, e * 31, e * 71, e * 54, e * 69);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -8);
            T.translate(e * 7, e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 24, e * 28);
            T.bezierCurveTo(e * 39, e * 30, e * 37, e * 31, e * 40, e * 32);
            T.bezierCurveTo(e * 22, e * 45, e * 26, e * 58, e * 29, e * 66);
            T.bezierCurveTo(e * 86.5, e * 65, e * 86.5, e * 65, e * 144, e * 64);
            T.bezierCurveTo(e * 151, e * 42, e * 132, e * 20, e * 120, e * 16);
            T.bezierCurveTo(e * 106, e * 12, e * 89, e * 0, e * 73, e * 3);
            T.bezierCurveTo(e * 51, e * 5, e * 36, e * 20, e * 25, e * 28);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 41);
            T.bezierCurveTo(e * 49, e * 31, e * 53, e * 29, e * 62, e * 27);
            T.bezierCurveTo(e * 59, e * 24, e * 56, e * 25, e * 53, e * 24);
            T.bezierCurveTo(e * 67, e * 15, e * 84, e * 12, e * 120, e * 16);
            T.bezierCurveTo(e * 107, e * 11, e * 96, e * 6, e * 85, e * 2);
            T.bezierCurveTo(e * 59, e * 3, e * 54, e * 7, e * 40, e * 17);
            T.bezierCurveTo(e * 32.5, e * 22.5, e * 32.5, e * 22.5, e * 25, e * 28);
            T.bezierCurveTo(e * 32, e * 30, e * 32, e * 30, e * 39, e * 32);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 24, e * 28);
            T.bezierCurveTo(e * 39, e * 30, e * 37, e * 31, e * 40, e * 32);
            T.bezierCurveTo(e * 22, e * 45, e * 26, e * 58, e * 29, e * 66);
            T.bezierCurveTo(e * 86.5, e * 65, e * 86.5, e * 65, e * 144, e * 64);
            T.bezierCurveTo(e * 151, e * 42, e * 132, e * 20, e * 120, e * 16);
            T.bezierCurveTo(e * 106, e * 12, e * 89, e * 0, e * 73, e * 3);
            T.bezierCurveTo(e * 51, e * 5, e * 36, e * 20, e * 25, e * 28);
            T.closePath();
            se(T, undefined, i[2], e * 4);
            he(T, e * 18, e * 38, e * 14.866068747318506);
            se(T, i[4], i[5], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 39, e * 30);
            T.bezierCurveTo(e * 27, e * 38, e * 25, e * 50, e * 26, e * 60);
            T.bezierCurveTo(e * 36.5, e * 58.5, e * 36.5, e * 58.5, e * 47, e * 57);
            se(T, i[1], i[2], e * 4);
            T.translate(e * -7, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 27, e * 74);
            T.bezierCurveTo(e * 38, e * 77.5, e * 38, e * 77.5, e * 49, e * 81);
            T.bezierCurveTo(e * 54.5, e * 75.5, e * 54.5, e * 75.5, e * 60, e * 70);
            T.bezierCurveTo(e * 64, e * 72, e * 64, e * 72, e * 68, e * 74);
            T.bezierCurveTo(e * 80.5, e * 67.5, e * 80.5, e * 67.5, e * 93, e * 61);
            T.bezierCurveTo(e * 104.5, e * 68, e * 104.5, e * 68, e * 116, e * 75);
            T.bezierCurveTo(e * 120.5, e * 72.5, e * 120.5, e * 72.5, e * 125, e * 70);
            T.bezierCurveTo(e * 129, e * 75, e * 129, e * 75, e * 133, e * 80);
            T.bezierCurveTo(e * 145.5, e * 76.5, e * 145.5, e * 76.5, e * 158, e * 73);
            T.bezierCurveTo(e * 158, e * 87, e * 158, e * 93, e * 155, e * 95);
            T.bezierCurveTo(e * 152.5, e * 96, e * 152.5, e * 96, e * 150, e * 97);
            T.bezierCurveTo(e * 121, e * 85, e * 108, e * 86, e * 93, e * 85);
            T.bezierCurveTo(e * 64, e * 85, e * 52, e * 95, e * 38, e * 99);
            T.bezierCurveTo(e * 36, e * 98.5, e * 36, e * 98.5, e * 34, e * 98);
            T.bezierCurveTo(e * 25, e * 98, e * 27, e * 91, e * 27, e * 76);
            T.closePath();
            se(T, i[6], i[7], e * 6);
            return o;
        }
        function Qe(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 155;
            o.height = e * 127;
            T.globalAlpha = 0.5;
            T.translate(0, e * 8);
            T.translate(e * -7, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 68);
            T.bezierCurveTo(e * 86, e * 64, e * 117, e * 66, e * 134, e * 68);
            T.bezierCurveTo(e * 152, e * 69, e * 165, e * 86, e * 152, e * 104);
            T.bezierCurveTo(e * 146, e * 87, e * 122, e * 89, e * 98, e * 90);
            T.bezierCurveTo(e * 64, e * 89, e * 41, e * 91, e * 36, e * 106);
            T.bezierCurveTo(e * 19, e * 92, e * 31, e * 71, e * 54, e * 69);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -8);
            T.translate(e * 7, e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 24, e * 28);
            T.bezierCurveTo(e * 39, e * 30, e * 37, e * 31, e * 40, e * 32);
            T.bezierCurveTo(e * 22, e * 45, e * 26, e * 58, e * 29, e * 66);
            T.bezierCurveTo(e * 86.5, e * 65, e * 86.5, e * 65, e * 144, e * 64);
            T.bezierCurveTo(e * 151, e * 42, e * 132, e * 20, e * 120, e * 16);
            T.bezierCurveTo(e * 106, e * 12, e * 89, e * 0, e * 73, e * 3);
            T.bezierCurveTo(e * 51, e * 5, e * 36, e * 20, e * 25, e * 28);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 41);
            T.bezierCurveTo(e * 49, e * 31, e * 53, e * 29, e * 62, e * 27);
            T.bezierCurveTo(e * 59, e * 24, e * 56, e * 25, e * 53, e * 24);
            T.bezierCurveTo(e * 67, e * 15, e * 84, e * 12, e * 120, e * 16);
            T.bezierCurveTo(e * 107, e * 11, e * 96, e * 6, e * 85, e * 2);
            T.bezierCurveTo(e * 59, e * 3, e * 54, e * 7, e * 40, e * 17);
            T.bezierCurveTo(e * 32.5, e * 22.5, e * 32.5, e * 22.5, e * 25, e * 28);
            T.bezierCurveTo(e * 32, e * 30, e * 32, e * 30, e * 39, e * 32);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 24, e * 28);
            T.bezierCurveTo(e * 39, e * 30, e * 37, e * 31, e * 40, e * 32);
            T.bezierCurveTo(e * 22, e * 45, e * 26, e * 58, e * 29, e * 66);
            T.bezierCurveTo(e * 86.5, e * 65, e * 86.5, e * 65, e * 144, e * 64);
            T.bezierCurveTo(e * 151, e * 42, e * 132, e * 20, e * 120, e * 16);
            T.bezierCurveTo(e * 106, e * 12, e * 89, e * 0, e * 73, e * 3);
            T.bezierCurveTo(e * 51, e * 5, e * 36, e * 20, e * 25, e * 28);
            T.closePath();
            se(T, undefined, i[2], e * 4);
            he(T, e * 18, e * 38, e * 14.866068747318506);
            se(T, i[4], i[5], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 39, e * 30);
            T.bezierCurveTo(e * 27, e * 38, e * 25, e * 50, e * 26, e * 60);
            T.bezierCurveTo(e * 36.5, e * 58.5, e * 36.5, e * 58.5, e * 47, e * 57);
            se(T, i[1], i[2], e * 4);
            T.translate(e * -7, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 68);
            T.bezierCurveTo(e * 86, e * 64, e * 117, e * 66, e * 134, e * 68);
            T.bezierCurveTo(e * 152, e * 69, e * 165, e * 86, e * 152, e * 104);
            T.bezierCurveTo(e * 146, e * 87, e * 122, e * 89, e * 98, e * 90);
            T.bezierCurveTo(e * 64, e * 89, e * 41, e * 91, e * 36, e * 106);
            T.bezierCurveTo(e * 19, e * 92, e * 31, e * 71, e * 54, e * 69);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            return o;
        }
        function et(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 220;
            var r = e * 220;
            var n = e * 32;
            var a = e * 4;
            i.width = T;
            i.height = r;
            o.translate(T / 2, r / 2 + e * 10);
            o.globalAlpha = 0.5;
            he(o, 0, 0, n);
            se(o, t[0], t[0]);
            o.translate(0, e * -8);
            o.globalAlpha = 1;
            he(o, 0, 0, n);
            se(o, t[1], t[2], a);
            return i;
        }
        function tt(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 40;
            var r = e * 40;
            var n = e * 16;
            var a = e * 4;
            i.width = T;
            i.height = r;
            o.translate(T / 2, r / 2);
            o.globalAlpha = 1;
            he(o, 0, 0, n);
            se(o, t[0], t[1], a);
            return i;
        }
        function it(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 220;
            var r = e * 220;
            var n = e * 16;
            i.width = T;
            i.height = r;
            o.translate(T / 2, r / 2);
            o.globalAlpha = 0.5;
            he(o, 0, 0, n);
            se(o, t[0]);
            o.globalAlpha = 1;
            return i;
        }
        function ot(e, t, i, o) {
            var T = window.document.createElement("canvas");
            var r = T.getContext("2d");
            var n = e * 210;
            var a = e * 205;
            var I = e * 30;
            var E = e * 20;
            var _ = e * 200;
            var s = e * 180;
            var R = _ / 2;
            var h = s / 2;
            T.width = n;
            T.height = a;
            T.width = e * 419;
            T.height = e * 412;
            if (o == 1) {
            r.save();
            r.translate(e * 10, e * 0);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 117.99996948242188, e * 216.40621948242188);
            r.bezierCurveTo(e * 86.99996948242188, e * 221.40621948242188, e * 74.99996948242188, e * 217.40621948242188, e * 60.999969482421875, e * 205.40621948242188);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 114.99996948242188, e * 227.40621948242188);
            r.bezierCurveTo(e * 90.99996948242188, e * 233.40621948242188, e * 66.99996948242188, e * 228.40621948242188, e * 43.999969482421875, e * 225.40621948242188);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 110.99996948242188, e * 236.40621948242188);
            r.bezierCurveTo(e * 94.99996948242188, e * 244.40621948242188, e * 79.99996948242188, e * 249.40621948242188, e * 60.999969482421875, e * 249.40621948242188);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 111.99996948242188, e * 206.29513549804688);
            r.bezierCurveTo(e * 91.99996948242188, e * 206.29513549804688, e * 87.99996948242188, e * 201.29513549804688, e * 79.99996948242188, e * 192.29513549804688);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 109.99996948242188, e * 249.18402099609375);
            r.bezierCurveTo(e * 97.99996948242188, e * 263.18402099609375, e * 85.99996948242188, e * 271.18402099609375, e * 65.99996948242188, e * 277.18402099609375);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 105.99996948242188, e * 192.18402099609375);
            r.bezierCurveTo(e * 99.49996948242188, e * 197.68402099609375, e * 99.49996948242188, e * 197.68402099609375, e * 92.99996948242188, e * 203.18402099609375);
            r.bezierCurveTo(e * 95.99996948242188, e * 213.18402099609375, e * 95.99996948242188, e * 215.18402099609375, e * 89.99996948242188, e * 219.18402099609375);
            r.bezierCurveTo(e * 91.99996948242188, e * 223.18402099609375, e * 91.99996948242188, e * 226.18402099609375, e * 87.99996948242188, e * 230.18402099609375);
            r.bezierCurveTo(e * 89.99996948242188, e * 234.18402099609375, e * 91.99996948242188, e * 237.18402099609375, e * 90.99996948242188, e * 244.18402099609375);
            r.bezierCurveTo(e * 96.99996948242188, e * 252.18402099609375, e * 96.99996948242188, e * 256.18402099609375, e * 95.99996948242188, e * 262.18402099609375);
            r.bezierCurveTo(e * 106.49996948242188, e * 264.18402099609375, e * 106.49996948242188, e * 264.18402099609375, e * 116.99996948242188, e * 266.18402099609375);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 104.99996948242188, e * 183.29513549804688);
            r.bezierCurveTo(e * 99.99996948242188, e * 193.29513549804688, e * 93.99996948242188, e * 195.29513549804688, e * 89.99996948242188, e * 201.29513549804688);
            r.bezierCurveTo(e * 86.99996948242188, e * 212.29513549804688, e * 85.99996948242188, e * 214.29513549804688, e * 81.99996948242188, e * 215.29513549804688);
            r.bezierCurveTo(e * 83.99996948242188, e * 223.29513549804688, e * 83.99996948242188, e * 227.29513549804688, e * 79.99996948242188, e * 230.29513549804688);
            r.bezierCurveTo(e * 83.99996948242188, e * 235.29513549804688, e * 84.99996948242188, e * 240.29513549804688, e * 79.99996948242188, e * 246.29513549804688);
            r.bezierCurveTo(e * 86.99996948242188, e * 251.29513549804688, e * 91.99996948242188, e * 256.2951354980469, e * 89.99996948242188, e * 266.2951354980469);
            r.bezierCurveTo(e * 102.99996948242188, e * 269.2951354980469, e * 102.99996948242188, e * 269.2951354980469, e * 115.99996948242188, e * 272.2951354980469);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 107.99996948242188, e * 177.85067749023438);
            r.bezierCurveTo(e * 95.99996948242188, e * 187.35067749023438, e * 95.99996948242188, e * 187.35067749023438, e * 83.99996948242188, e * 196.85067749023438);
            r.bezierCurveTo(e * 82.99996948242188, e * 203.85067749023438, e * 80.99996948242188, e * 209.85067749023438, e * 72.99996948242188, e * 210.85067749023438);
            r.bezierCurveTo(e * 73.99996948242188, e * 220.85067749023438, e * 73.99996948242188, e * 221.85067749023438, e * 66.99996948242188, e * 227.85067749023438);
            r.bezierCurveTo(e * 71.99996948242188, e * 235.85067749023438, e * 73.99996948242188, e * 239.85067749023438, e * 71.99996948242188, e * 247.85067749023438);
            r.bezierCurveTo(e * 80.99996948242188, e * 257.8506774902344, e * 81.99996948242188, e * 263.8506774902344, e * 77.99996948242188, e * 271.8506774902344);
            r.bezierCurveTo(e * 95.49996948242188, e * 272.8506774902344, e * 95.49996948242188, e * 272.8506774902344, e * 112.99996948242188, e * 273.8506774902344);
            se(r, undefined, t[4], e * 3);
            r.restore();
            } else if (o == 2) {
            r.save();
            r.translate(e * 130, e * 35);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 170.99996948242188, e * 133.85067749023438);
            r.bezierCurveTo(e * 195.99996948242188, e * 129.85067749023438, e * 196.99996948242188, e * 111.85067749023438, e * 200.99996948242188, e * 88.85067749023438);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 169.99996948242188, e * 143.85067749023438);
            r.bezierCurveTo(e * 189.99996948242188, e * 145.85067749023438, e * 207.99996948242188, e * 126.85067749023438, e * 222.99996948242188, e * 100.85067749023438);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 170.99996948242188, e * 157.85067749023438);
            r.bezierCurveTo(e * 193.99996948242188, e * 160.85067749023438, e * 210.99996948242188, e * 151.85067749023438, e * 232.99996948242188, e * 139.85067749023438);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 169.99996948242188, e * 168.85067749023438);
            r.bezierCurveTo(e * 192.99996948242188, e * 175.85067749023438, e * 203.99996948242188, e * 177.85067749023438, e * 245.99996948242188, e * 168.85067749023438);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 167.99996948242188, e * 168.85067749023438);
            r.bezierCurveTo(e * 183.99996948242188, e * 189.85067749023438, e * 191.99996948242188, e * 193.85067749023438, e * 220.99996948242188, e * 196.85067749023438);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 176.99996948242188, e * 117.85067749023438);
            r.bezierCurveTo(e * 181.99996948242188, e * 120.85067749023438, e * 181.99996948242188, e * 120.85067749023438, e * 186.99996948242188, e * 123.85067749023438);
            r.bezierCurveTo(e * 183.99996948242188, e * 137.85067749023438, e * 185.99996948242188, e * 136.85067749023438, e * 190.99996948242188, e * 136.85067749023438);
            r.bezierCurveTo(e * 186.99996948242188, e * 147.85067749023438, e * 189.99996948242188, e * 152.85067749023438, e * 193.99996948242188, e * 155.85067749023438);
            r.bezierCurveTo(e * 187.99996948242188, e * 165.85067749023438, e * 190.99996948242188, e * 169.85067749023438, e * 190.99996948242188, e * 172.85067749023438);
            r.bezierCurveTo(e * 186.99996948242188, e * 183.85067749023438, e * 186.99996948242188, e * 185.85067749023438, e * 189.99996948242188, e * 188.85067749023438);
            r.bezierCurveTo(e * 182.49996948242188, e * 195.35067749023438, e * 182.49996948242188, e * 195.35067749023438, e * 174.99996948242188, e * 201.85067749023438);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 176.99996948242188, e * 112.18402099609375);
            r.bezierCurveTo(e * 183.99996948242188, e * 119.18402099609375, e * 186.99996948242188, e * 117.18402099609375, e * 192.99996948242188, e * 116.18402099609375);
            r.bezierCurveTo(e * 191.99996948242188, e * 126.18402099609375, e * 193.99996948242188, e * 130.18402099609375, e * 199.99996948242188, e * 130.18402099609375);
            r.bezierCurveTo(e * 194.99996948242188, e * 145.18402099609375, e * 197.99996948242188, e * 147.18402099609375, e * 201.99996948242188, e * 153.18402099609375);
            r.bezierCurveTo(e * 196.99996948242188, e * 164.18402099609375, e * 197.99996948242188, e * 169.18402099609375, e * 201.99996948242188, e * 174.18402099609375);
            r.bezierCurveTo(e * 194.99996948242188, e * 184.18402099609375, e * 196.99996948242188, e * 187.18402099609375, e * 200.99996948242188, e * 193.18402099609375);
            r.bezierCurveTo(e * 185.99996948242188, e * 195.18402099609375, e * 181.99996948242188, e * 201.18402099609375, e * 174.99996948242188, e * 210.18402099609375);
            se(r, undefined, t[4], e * 3);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 176.99996948242188, e * 101.29513549804688);
            r.bezierCurveTo(e * 181.99996948242188, e * 108.29513549804688, e * 189.99996948242188, e * 110.29513549804688, e * 195.99996948242188, e * 107.29513549804688);
            r.bezierCurveTo(e * 197.99996948242188, e * 121.29513549804688, e * 200.99996948242188, e * 122.29513549804688, e * 206.99996948242188, e * 122.29513549804688);
            r.bezierCurveTo(e * 201.99996948242188, e * 138.29513549804688, e * 204.99996948242188, e * 142.29513549804688, e * 211.99996948242188, e * 148.29513549804688);
            r.bezierCurveTo(e * 201.99996948242188, e * 156.29513549804688, e * 205.99996948242188, e * 167.29513549804688, e * 213.99996948242188, e * 173.29513549804688);
            r.bezierCurveTo(e * 204.99996948242188, e * 181.29513549804688, e * 204.99996948242188, e * 187.29513549804688, e * 205.99996948242188, e * 193.29513549804688);
            r.bezierCurveTo(e * 190.99996948242188, e * 198.29513549804688, e * 181.99996948242188, e * 205.29513549804688, e * 174.99996948242188, e * 214.29513549804688);
            se(r, undefined, t[4], e * 3);
            r.restore();
            }
            r.translate(T.width / 2, T.height / 2);
            if (!o) {
            r.globalAlpha = 0.5;
            Re(r, -R, -h, _, s + E, I);
            se(r, t[0]);
            if (i) {
                r.rotate(window.Math.PI);
            }
            r.globalAlpha = 1;
            Re(r, -R, -h, _, s, I);
            se(r, t[1], t[2], 4);
            r.globalAlpha = 1;
            Re(r, e * 35 - R, e * 20 - h, _ - e * 50, s - e * 50, I - e * 10);
            se(r, t[3]);
            }
            if (o == 3) {
            r.translate(-T.width / 2, -T.height / 2);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 121, e * 190);
            r.bezierCurveTo(e * 129, e * 186, e * 137, e * 183, e * 135, e * 163);
            r.bezierCurveTo(e * 131, e * 135, e * 153, e * 127, e * 177, e * 124);
            r.bezierCurveTo(e * 198, e * 120, e * 208, e * 122, e * 226, e * 128);
            r.bezierCurveTo(e * 261, e * 112, e * 271, e * 126, e * 287, e * 147);
            r.bezierCurveTo(e * 310, e * 163, e * 304, e * 183, e * 283, e * 196);
            r.bezierCurveTo(e * 296, e * 249, e * 278, e * 262, e * 253, e * 263);
            r.bezierCurveTo(e * 210, e * 264, e * 188, e * 252, e * 177, e * 234);
            r.bezierCurveTo(e * 133, e * 242, e * 123, e * 241, e * 115, e * 225);
            r.bezierCurveTo(e * 109, e * 206, e * 115, e * 193, e * 121, e * 190);
            r.closePath();
            se(r, t[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 219, e * 144);
            r.bezierCurveTo(e * 251, e * 121, e * 277, e * 136, e * 276, e * 159);
            r.bezierCurveTo(e * 276, e * 176, e * 273, e * 191, e * 242, e * 193);
            r.bezierCurveTo(e * 226, e * 228, e * 155, e * 219, e * 150, e * 183);
            r.bezierCurveTo(e * 142, e * 144, e * 174, e * 127, e * 219, e * 144);
            r.closePath();
            se(r, t[5]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 123, e * 214);
            r.bezierCurveTo(e * 119, e * 198, e * 129, e * 189, e * 146, e * 194);
            r.bezierCurveTo(e * 158, e * 201, e * 165, e * 218, e * 147, e * 226);
            r.bezierCurveTo(e * 135, e * 230, e * 125, e * 222, e * 123, e * 214);
            r.closePath();
            se(r, t[5]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 257, e * 199);
            r.bezierCurveTo(e * 264, e * 199, e * 275, e * 213, e * 261, e * 220);
            r.bezierCurveTo(e * 246, e * 225, e * 235, e * 200, e * 257, e * 199);
            r.closePath();
            se(r, t[5]);
            r.translate(e * -5, e * 55);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 186, e * 123);
            r.bezierCurveTo(e * 198, e * 115, e * 219, e * 110, e * 219, e * 123);
            r.bezierCurveTo(e * 216, e * 135, e * 171, e * 143, e * 186, e * 123);
            r.closePath();
            se(r, t[5]);
            r.translate(e * 5, e * -55);
            r.translate(e * -5, e * 15);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 171, e * 241);
            r.bezierCurveTo(e * 189, e * 234, e * 200, e * 248, e * 189, e * 254);
            r.bezierCurveTo(e * 179, e * 260, e * 158, e * 246, e * 171, e * 241);
            r.closePath();
            se(r, t[5]);
            } else if (o == 4) {
            r.translate(-T.width / 2, -T.height / 2);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 30, e * 167);
            r.bezierCurveTo(e * 47, e * 144, e * 64, e * 140, e * 80, e * 147);
            r.bezierCurveTo(e * 95, e * 154, e * 95, e * 159, e * 100, e * 179);
            r.bezierCurveTo(e * 105, e * 202, e * 95, e * 218, e * 69, e * 218);
            r.bezierCurveTo(e * 48, e * 236, e * 26, e * 223, e * 28, e * 213);
            r.bezierCurveTo(e * 28, e * 205, e * 29, e * 199, e * 32, e * 195);
            r.bezierCurveTo(e * 21, e * 183, e * 27, e * 173, e * 30, e * 167);
            r.closePath();
            se(r, t[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 26, e * 145);
            r.bezierCurveTo(e * 32, e * 138, e * 37, e * 137, e * 40, e * 139);
            r.bezierCurveTo(e * 43, e * 140, e * 41, e * 150, e * 31, e * 159);
            r.bezierCurveTo(e * 23, e * 166, e * 17, e * 158, e * 26, e * 145);
            r.closePath();
            se(r, t[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 13, e * 193);
            r.bezierCurveTo(e * 21, e * 187, e * 30, e * 190, e * 20, e * 202);
            r.bezierCurveTo(e * 13, e * 208, e * 7, e * 202, e * 13, e * 193);
            r.closePath();
            se(r, t[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 121, e * 190);
            r.bezierCurveTo(e * 129, e * 186, e * 137, e * 183, e * 135, e * 163);
            r.bezierCurveTo(e * 131, e * 135, e * 153, e * 127, e * 177, e * 124);
            r.bezierCurveTo(e * 198, e * 120, e * 208, e * 122, e * 226, e * 128);
            r.bezierCurveTo(e * 261, e * 112, e * 271, e * 126, e * 287, e * 147);
            r.bezierCurveTo(e * 310, e * 163, e * 304, e * 183, e * 283, e * 196);
            r.bezierCurveTo(e * 296, e * 249, e * 278, e * 262, e * 253, e * 263);
            r.bezierCurveTo(e * 210, e * 264, e * 188, e * 252, e * 177, e * 234);
            r.bezierCurveTo(e * 133, e * 242, e * 123, e * 241, e * 115, e * 225);
            r.bezierCurveTo(e * 109, e * 206, e * 115, e * 193, e * 121, e * 190);
            r.closePath();
            se(r, t[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 335, e * 196);
            r.bezierCurveTo(e * 312, e * 208, e * 300, e * 185, e * 309, e * 167);
            r.bezierCurveTo(e * 314, e * 141, e * 339, e * 127, e * 359, e * 144);
            r.bezierCurveTo(e * 363, e * 148, e * 364, e * 150, e * 364, e * 150);
            r.bezierCurveTo(e * 392, e * 143, e * 396, e * 183, e * 378, e * 204);
            r.bezierCurveTo(e * 367, e * 215, e * 339, e * 208, e * 335, e * 196);
            r.closePath();
            se(r, t[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 349, e * 212);
            r.bezierCurveTo(e * 339, e * 216, e * 334, e * 208, e * 341, e * 203);
            r.bezierCurveTo(e * 353, e * 198, e * 361, e * 205, e * 349, e * 212);
            r.closePath();
            se(r, t[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 46, e * 165);
            r.bezierCurveTo(e * 55, e * 148, e * 85, e * 157, e * 83, e * 175);
            r.bezierCurveTo(e * 99, e * 185, e * 89, e * 212, e * 66, e * 204);
            r.bezierCurveTo(e * 55, e * 212, e * 43, e * 212, e * 41, e * 202);
            r.bezierCurveTo(e * 39, e * 194, e * 42, e * 187, e * 49, e * 185);
            r.bezierCurveTo(e * 44, e * 175, e * 45, e * 172, e * 46, e * 165);
            r.closePath();
            se(r, t[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 219, e * 144);
            r.bezierCurveTo(e * 251, e * 121, e * 277, e * 136, e * 276, e * 159);
            r.bezierCurveTo(e * 276, e * 176, e * 273, e * 191, e * 242, e * 193);
            r.bezierCurveTo(e * 226, e * 228, e * 155, e * 219, e * 150, e * 183);
            r.bezierCurveTo(e * 142, e * 144, e * 174, e * 127, e * 219, e * 144);
            r.closePath();
            se(r, t[5]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 123, e * 214);
            r.bezierCurveTo(e * 119, e * 198, e * 129, e * 189, e * 146, e * 194);
            r.bezierCurveTo(e * 158, e * 201, e * 165, e * 218, e * 147, e * 226);
            r.bezierCurveTo(e * 135, e * 230, e * 125, e * 222, e * 123, e * 214);
            r.closePath();
            se(r, t[5]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 257, e * 199);
            r.bezierCurveTo(e * 264, e * 199, e * 275, e * 213, e * 261, e * 220);
            r.bezierCurveTo(e * 246, e * 225, e * 235, e * 200, e * 257, e * 199);
            r.closePath();
            se(r, t[5]);
            r.translate(e * -5, e * 55);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 186, e * 123);
            r.bezierCurveTo(e * 198, e * 115, e * 219, e * 110, e * 219, e * 123);
            r.bezierCurveTo(e * 216, e * 135, e * 171, e * 143, e * 186, e * 123);
            r.closePath();
            se(r, t[5]);
            r.translate(e * 5, e * -55);
            r.translate(e * -5, e * 15);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 171, e * 241);
            r.bezierCurveTo(e * 189, e * 234, e * 200, e * 248, e * 189, e * 254);
            r.bezierCurveTo(e * 179, e * 260, e * 158, e * 246, e * 171, e * 241);
            r.closePath();
            se(r, t[5]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 367, e * 164);
            r.bezierCurveTo(e * 380, e * 160, e * 391, e * 185, e * 371, e * 189);
            r.bezierCurveTo(e * 362, e * 192, e * 354, e * 191, e * 350, e * 185);
            r.bezierCurveTo(e * 326, e * 205, e * 314, e * 182, e * 316, e * 171);
            r.bezierCurveTo(e * 317, e * 150, e * 332, e * 143, e * 347, e * 147);
            r.bezierCurveTo(e * 361, e * 151, e * 366, e * 158, e * 367, e * 164);
            r.closePath();
            se(r, t[4]);
            }
            return T;
        }
        function Tt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = (R = e * 450) / 2;
            var n = (h = e * 145) / 2;
            var a = e * 10;
            var I = e * 300;
            var E = e * 30;
            var _ = I / 2;
            var s = E / 2;
            if (i) {
            var R = e * 145;
            var h = e * 450;
            o.width = R;
            o.height = h;
            T.rotate(window.Math.PI / 2);
            T.save();
            T.globalAlpha = 0.5;
            Re(T, e * 100, e * -110, I, E, a);
            se(T, t[0]);
            T.translate(e * 178, e * -98);
            Re(T, -_, -s - e * 6, e * 100, e * 100, a);
            se(T, t[0]);
            T.translate(e * -50, e * 5);
            Re(T, e * 220, e * -15, e * 90, e * 90, a);
            se(T, t[0]);
            T.restore();
            T.save();
            T.globalAlpha = 1;
            T.translate(e * 250, e * -63);
            Re(T, -_ - e * 20, -s, I, E, a);
            se(T, t[1], t[2], 4);
            T.translate(e * -70, e * -40);
            Re(T, -_ - e * 20, -s, e * 100, e * 100, a);
            se(T, t[3], t[4], 4);
            T.translate(e * -70, e * 15);
            Re(T, e * 220, e * -22, e * 90, e * 90, a);
            se(T, t[3], t[4], 4);
            Re(T, e * 230, e * -12, e * 55, e * 55, a);
            se(T, t[5]);
            T.translate(e * -70, 0);
            Re(T, e * -15, e * -2, e * 60, e * 60, a);
            se(T, t[5]);
            T.restore();
            } else {
            o.width = R;
            o.height = h;
            T.save();
            T.globalAlpha = 0.5;
            T.translate(r, n + e * 10);
            Re(T, -_, -s, I, E, a);
            se(T, t[0]);
            T.translate(e * -65, e * -25);
            Re(T, -_, -s - e * 6, e * 100, e * 100, e * 15);
            se(T, t[0]);
            T.translate(e * -35, e * -5);
            Re(T, e * 220, e * -15, e * 90, e * 90, e * 15);
            se(T, t[0]);
            T.restore();
            T.save();
            T.globalAlpha = 1;
            T.translate(e * 240, e * 70);
            Re(T, -_, -s, I, E, a);
            se(T, t[1], t[2], 4);
            T.translate(e * -60, e * -40);
            Re(T, -_ - e * 20, -s, e * 100, e * 100, e * 15);
            se(T, t[3], t[4], 4);
            T.translate(e * -55, e * 10);
            Re(T, e * 220, e * -22, e * 90, e * 90, e * 15);
            se(T, t[3], t[4], 4);
            Re(T, e * 240, e * -12, e * 55, e * 55, e * 12);
            se(T, t[5]);
            T.translate(e * 45, e * 0);
            Re(T, e * -145, e * -2, e * 60, e * 60, e * 12);
            se(T, t[5]);
            T.restore();
            }
            return o;
        }
        function rt(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = window.Math.max(t.width, e.width);
            var r = window.Math.max(t.height, e.height);
            i.width = T;
            i.height = r;
            o.drawImage(e, (T - e.width) / 2, (r - e.height) / 2);
            o.drawImage(t, (T - t.width) / 2, (r - t.height) / 2);
            return i;
        }
        function nt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 105;
            var n = e * 125;
            var a = e * 4;
            var I = e * 10;
            var E = e * 5;
            var _ = e * 10;
            var s = e * 110;
            var R = _ / 2;
            var h = s / 2;
            o.width = r;
            o.height = n;
            T.save();
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(r / 2 + e * 8, n / 2 + E);
            Re(T, -R, -h, _, s, I);
            se(T, t ? i[0] : i[1]);
            T.translate(e * -130 + E, e * -128 + E);
            T.beginPath();
            T.bezierCurveTo(e * 159, e * 93, e * 156, e * 99, e * 154, e * 102);
            T.bezierCurveTo(e * 128, e * 92, e * 90, e * 93, e * 72, e * 96);
            T.bezierCurveTo(e * 68, e * 84, e * 143, e * 73, e * 162, e * 86);
            T.closePath();
            se(T, i[2]);
            T.restore();
            T.translate(r / 2 + 8, n / 2);
            T.globalAlpha = 1;
            Re(T, -R, -h, _, s, I);
            se(T, i[3], i[4], a);
            T.translate(e * -130, e * -125);
            T.beginPath();
            T.bezierCurveTo(e * 159, e * 93, e * 156, e * 99, e * 154, e * 102);
            T.bezierCurveTo(e * 128, e * 92, e * 90, e * 93, e * 72, e * 96);
            T.bezierCurveTo(e * 68, e * 84, e * 143, e * 73, e * 162, e * 86);
            T.closePath();
            se(T, i[5], i[6], a);
            return o;
        }
        function at(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 170;
            o.height = e * 469;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 20, e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 88, e * 30);
            T.bezierCurveTo(e * 96, e * 49.5, e * 96, e * 49.5, e * 104, e * 69);
            T.bezierCurveTo(e * 105.5, e * 41.5, e * 105.5, e * 41.5, e * 107, e * 14);
            T.bezierCurveTo(e * 114, e * 9.5, e * 114, e * 9.5, e * 121, e * 5);
            T.bezierCurveTo(e * 135.5, e * 27.5, e * 135.5, e * 27.5, e * 150, e * 50);
            T.bezierCurveTo(e * 110.5, e * 286, e * 110.5, e * 286, e * 103, e * 331);
            T.bezierCurveTo(e * 69.5, e * 325, e * 69.5, e * 325, e * 36, e * 319);
            T.bezierCurveTo(e * 56.5, e * 180, e * 56.5, e * 180, e * 77, e * 41);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 118, e * 31);
            T.bezierCurveTo(e * 125, e * 43, e * 125, e * 43, e * 132, e * 55);
            T.bezierCurveTo(e * 109.5, e * 185.5, e * 109.5, e * 185.5, e * 87, e * 316);
            T.bezierCurveTo(e * 72, e * 313.5, e * 72, e * 313.5, e * 57, e * 311);
            T.bezierCurveTo(e * 76.5, e * 181, e * 76.5, e * 181, e * 96, e * 51);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56, e * 328);
            T.bezierCurveTo(e * 47, e * 385.5, e * 47, e * 385.5, e * 38, e * 443);
            T.bezierCurveTo(e * 52, e * 446, e * 52, e * 446, e * 66, e * 449);
            T.bezierCurveTo(e * 76.5, e * 388.5, e * 76.5, e * 388.5, e * 87, e * 328);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 74, e * 302);
            T.bezierCurveTo(e * 104, e * 316.5, e * 104, e * 316.5, e * 134, e * 331);
            T.bezierCurveTo(e * 133, e * 341, e * 133, e * 341, e * 132, e * 351);
            T.bezierCurveTo(e * 69.5, e * 342, e * 69.5, e * 342, e * 7, e * 333);
            T.bezierCurveTo(e * 8, e * 323, e * 8, e * 323, e * 9, e * 313);
            T.closePath();
            se(T, i[0]);
            T.save();
            T.translate(e * 51.5, e * 440.5);
            T.rotate(0.2);
            Re(T, e * -20.5, e * -18.5, e * 41, e * 37, e * 10);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 73, e * 316);
            T.bezierCurveTo(e * 90, e * 324.5, e * 90, e * 324.5, e * 107, e * 333);
            T.bezierCurveTo(e * 70, e * 327.5, e * 70, e * 327.5, e * 33, e * 322);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -20, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 88, e * 30);
            T.bezierCurveTo(e * 96, e * 49.5, e * 96, e * 49.5, e * 104, e * 69);
            T.bezierCurveTo(e * 105.5, e * 41.5, e * 105.5, e * 41.5, e * 107, e * 14);
            T.bezierCurveTo(e * 114, e * 9.5, e * 114, e * 9.5, e * 121, e * 5);
            T.bezierCurveTo(e * 135.5, e * 27.5, e * 135.5, e * 27.5, e * 150, e * 50);
            T.bezierCurveTo(e * 110.5, e * 286, e * 110.5, e * 286, e * 103, e * 331);
            T.bezierCurveTo(e * 69.5, e * 325, e * 69.5, e * 325, e * 36, e * 319);
            T.bezierCurveTo(e * 56.5, e * 180, e * 56.5, e * 180, e * 77, e * 41);
            T.closePath();
            se(T, i[1], i[2], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 118, e * 31);
            T.bezierCurveTo(e * 125, e * 43, e * 125, e * 43, e * 132, e * 55);
            T.bezierCurveTo(e * 109.5, e * 185.5, e * 109.5, e * 185.5, e * 87, e * 316);
            T.bezierCurveTo(e * 72, e * 313.5, e * 72, e * 313.5, e * 57, e * 311);
            T.bezierCurveTo(e * 76.5, e * 181, e * 76.5, e * 181, e * 96, e * 51);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 88, e * 30);
            T.bezierCurveTo(e * 96, e * 49.5, e * 96, e * 49.5, e * 104, e * 69);
            T.bezierCurveTo(e * 105.5, e * 41.5, e * 105.5, e * 41.5, e * 107, e * 14);
            T.bezierCurveTo(e * 114, e * 9.5, e * 114, e * 9.5, e * 121, e * 5);
            T.bezierCurveTo(e * 135.5, e * 27.5, e * 135.5, e * 27.5, e * 150, e * 50);
            T.bezierCurveTo(e * 110.5, e * 286, e * 110.5, e * 286, e * 103, e * 331);
            T.bezierCurveTo(e * 69.5, e * 325, e * 69.5, e * 325, e * 36, e * 319);
            T.bezierCurveTo(e * 56.5, e * 180, e * 56.5, e * 180, e * 77, e * 41);
            T.closePath();
            se(T, undefined, i[2], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56, e * 328);
            T.bezierCurveTo(e * 47, e * 385.5, e * 47, e * 385.5, e * 38, e * 443);
            T.bezierCurveTo(e * 52, e * 446, e * 52, e * 446, e * 66, e * 449);
            T.bezierCurveTo(e * 76.5, e * 388.5, e * 76.5, e * 388.5, e * 87, e * 328);
            T.closePath();
            se(T, i[4], i[5], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 74, e * 302);
            T.bezierCurveTo(e * 104, e * 316.5, e * 104, e * 316.5, e * 134, e * 331);
            T.bezierCurveTo(e * 133, e * 341, e * 133, e * 341, e * 132, e * 351);
            T.bezierCurveTo(e * 69.5, e * 342, e * 69.5, e * 342, e * 7, e * 333);
            T.bezierCurveTo(e * 8, e * 323, e * 8, e * 323, e * 9, e * 313);
            T.closePath();
            se(T, i[4], i[5], e * 7);
            T.save();
            T.translate(e * 51.5, e * 440.5);
            T.rotate(0.2);
            Re(T, e * -20.5, e * -18.5, e * 41, e * 37, e * 10);
            T.restore();
            se(T, i[4], i[5], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 73, e * 316);
            T.bezierCurveTo(e * 90, e * 324.5, e * 90, e * 324.5, e * 107, e * 333);
            T.bezierCurveTo(e * 70, e * 327.5, e * 70, e * 327.5, e * 33, e * 322);
            T.closePath();
            se(T, i[6]);
            return o;
        }
        function It(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 424;
            o.height = e * 788;
            T.translate(e * 25, e * 25);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 193.5, e * 602.5);
            T.rotate(-0.12);
            Re(T, e * -26.5, e * -97.5, e * 53, e * 195, e * 25);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 137, e * 519);
            T.bezierCurveTo(e * 182, e * 513, e * 182, e * 513, e * 227, e * 507);
            T.bezierCurveTo(e * 214, e * 417, e * 189, e * 304, e * 221, e * 180);
            T.bezierCurveTo(e * 191, e * 126, e * 192, e * 105, e * 198, e * 64);
            T.bezierCurveTo(e * 123, e * 102, e * 99, e * 285, e * 137, e * 517);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 175, e * 119);
            T.bezierCurveTo(e * 176, e * 142, e * 184, e * 165, e * 197, e * 183);
            T.bezierCurveTo(e * 167, e * 325, e * 191, e * 405, e * 202, e * 502);
            T.bezierCurveTo(e * 180, e * 503, e * 180, e * 503, e * 158, e * 504);
            T.bezierCurveTo(e * 135, e * 396, e * 134, e * 185, e * 175, e * 119);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 110, e * 518);
            T.bezierCurveTo(e * 111.5, e * 533, e * 111.5, e * 533, e * 113, e * 548);
            T.bezierCurveTo(e * 162.5, e * 544, e * 162.5, e * 544, e * 212, e * 540);
            T.bezierCurveTo(e * 312, e * 535, e * 281, e * 665, e * 225, e * 665);
            T.bezierCurveTo(e * 227, e * 686.5, e * 227, e * 686.5, e * 229, e * 708);
            T.bezierCurveTo(e * 343, e * 684, e * 354, e * 496, e * 222, e * 498);
            T.bezierCurveTo(e * 165.5, e * 503, e * 165.5, e * 503, e * 109, e * 508);
            T.closePath();
            se(T, i[0]);
            he(T, e * 204, e * 693, e * 36.013886210738214);
            se(T, i[0]);
            he(T, e * 105, e * 518, e * 30);
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 171, e * 535);
            T.bezierCurveTo(e * 139.5, e * 537.5, e * 139.5, e * 537.5, e * 108, e * 540);
            T.bezierCurveTo(e * 110, e * 527.5, e * 110, e * 527.5, e * 112, e * 515);
            T.bezierCurveTo(e * 148, e * 513, e * 148, e * 513, e * 184, e * 511);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 244, e * 669);
            T.bezierCurveTo(e * 248.5, e * 680, e * 248.5, e * 680, e * 253, e * 691);
            T.bezierCurveTo(e * 239.5, e * 697, e * 239.5, e * 697, e * 226, e * 703);
            T.bezierCurveTo(e * 223, e * 691.5, e * 223, e * 691.5, e * 220, e * 680);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -25, e * -25);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 193.5, e * 602.5);
            T.rotate(-0.12);
            Re(T, e * -26.5, e * -97.5, e * 53, e * 195, e * 25);
            T.restore();
            se(T, i[1], i[2], e * 16);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 137, e * 519);
            T.bezierCurveTo(e * 182, e * 513, e * 182, e * 513, e * 227, e * 507);
            T.bezierCurveTo(e * 214, e * 417, e * 189, e * 304, e * 221, e * 180);
            T.bezierCurveTo(e * 191, e * 126, e * 192, e * 105, e * 198, e * 64);
            T.bezierCurveTo(e * 123, e * 102, e * 99, e * 285, e * 137, e * 517);
            T.closePath();
            se(T, i[3], i[4], e * 16);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 175, e * 119);
            T.bezierCurveTo(e * 176, e * 142, e * 184, e * 165, e * 197, e * 183);
            T.bezierCurveTo(e * 167, e * 325, e * 191, e * 405, e * 202, e * 502);
            T.bezierCurveTo(e * 180, e * 503, e * 180, e * 503, e * 158, e * 504);
            T.bezierCurveTo(e * 135, e * 396, e * 134, e * 185, e * 175, e * 119);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 110, e * 518);
            T.bezierCurveTo(e * 111.5, e * 533, e * 111.5, e * 533, e * 113, e * 548);
            T.bezierCurveTo(e * 162.5, e * 544, e * 162.5, e * 544, e * 212, e * 540);
            T.bezierCurveTo(e * 312, e * 535, e * 281, e * 665, e * 225, e * 665);
            T.bezierCurveTo(e * 227, e * 686.5, e * 227, e * 686.5, e * 229, e * 708);
            T.bezierCurveTo(e * 343, e * 684, e * 354, e * 496, e * 222, e * 498);
            T.bezierCurveTo(e * 165.5, e * 503, e * 165.5, e * 503, e * 109, e * 508);
            T.closePath();
            se(T, i[6], i[4], e * 16);
            he(T, e * 204, e * 693, e * 36.013886210738214);
            se(T, i[6], i[4], e * 16);
            he(T, e * 105, e * 518, e * 30);
            se(T, i[6], i[4], e * 16);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 171, e * 535);
            T.bezierCurveTo(e * 139.5, e * 537.5, e * 139.5, e * 537.5, e * 108, e * 540);
            T.bezierCurveTo(e * 110, e * 527.5, e * 110, e * 527.5, e * 112, e * 515);
            T.bezierCurveTo(e * 148, e * 513, e * 148, e * 513, e * 184, e * 511);
            T.closePath();
            se(T, i[6]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 244, e * 669);
            T.bezierCurveTo(e * 248.5, e * 680, e * 248.5, e * 680, e * 253, e * 691);
            T.bezierCurveTo(e * 239.5, e * 697, e * 239.5, e * 697, e * 226, e * 703);
            T.bezierCurveTo(e * 223, e * 691.5, e * 223, e * 691.5, e * 220, e * 680);
            T.closePath();
            se(T, i[6]);
            he(T, e * 204, e * 693, e * 17.029386365926403);
            se(T, i[7]);
            he(T, e * 106, e * 518, e * 12);
            se(T, i[7]);
            return o;
        }
        function Et(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 290;
            o.height = e * 525;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 20, e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 111, e * 351);
            T.bezierCurveTo(e * 129, e * 218, e * 129, e * 218, e * 147, e * 85);
            T.bezierCurveTo(e * 167, e * 65.5, e * 167, e * 65.5, e * 187, e * 46);
            T.bezierCurveTo(e * 201.5, e * 70.5, e * 201.5, e * 70.5, e * 216, e * 95);
            T.bezierCurveTo(e * 194.5, e * 227.5, e * 194.5, e * 227.5, e * 173, e * 360);
            T.closePath();
            se(T, i[0]);
            T.save();
            T.translate(e * 131, e * 425.5);
            T.rotate(0.16);
            Re(T, e * -14, e * -56.5, e * 28, e * 113, e * 8);
            T.restore();
            se(T, i[0]);
            he(T, e * 122, e * 480, e * 18.439088914585774);
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 79, e * 371);
            T.bezierCurveTo(e * 131, e * 373, e * 145, e * 378, e * 197, e * 388);
            T.bezierCurveTo(e * 205, e * 382.5, e * 205, e * 382.5, e * 213, e * 377);
            T.bezierCurveTo(e * 167, e * 352, e * 117, e * 345, e * 69, e * 355);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -20, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 111, e * 351);
            T.bezierCurveTo(e * 129, e * 218, e * 129, e * 218, e * 147, e * 85);
            T.bezierCurveTo(e * 167, e * 65.5, e * 167, e * 65.5, e * 187, e * 46);
            T.bezierCurveTo(e * 201.5, e * 70.5, e * 201.5, e * 70.5, e * 216, e * 95);
            T.bezierCurveTo(e * 194.5, e * 227.5, e * 194.5, e * 227.5, e * 173, e * 360);
            T.closePath();
            se(T, i[1], i[2], e * 12.5);
            T.save();
            T.translate(e * 131, e * 425.5);
            T.rotate(0.16);
            Re(T, e * -14, e * -56.5, e * 28, e * 113, e * 8);
            T.restore();
            se(T, i[4], i[5], e * 12.5);
            he(T, e * 122, e * 480, e * 18.439088914585774);
            se(T, i[4], i[5], e * 12.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 79, e * 371);
            T.bezierCurveTo(e * 131, e * 373, e * 145, e * 378, e * 197, e * 388);
            T.bezierCurveTo(e * 205, e * 382.5, e * 205, e * 382.5, e * 213, e * 377);
            T.bezierCurveTo(e * 167, e * 352, e * 117, e * 345, e * 69, e * 355);
            T.closePath();
            se(T, i[4], i[5], e * 12.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 128, e * 345);
            T.bezierCurveTo(e * 142, e * 345, e * 147, e * 346, e * 158, e * 349);
            T.bezierCurveTo(e * 177.5, e * 224.5, e * 177.5, e * 224.5, e * 197, e * 100);
            T.bezierCurveTo(e * 190.5, e * 84.5, e * 190.5, e * 84.5, e * 184, e * 69);
            T.bezierCurveTo(e * 173.5, e * 82, e * 173.5, e * 82, e * 163, e * 95);
            T.closePath();
            se(T, i[3]);
            return o;
        }
        function _t(e, t, i, o) {
            var T = window.document.createElement("canvas");
            var r = T.getContext("2d");
            T.width = e * 283;
            T.height = e * 224;
            r.translate(0, e * 15);
            r.globalAlpha = 0.5;
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 93, e * 55);
            r.bezierCurveTo(e * 127, e * 27, e * 195, e * 42, e * 213, e * 78);
            r.bezierCurveTo(e * 254, e * 134, e * 226, e * 198, e * 153, e * 197);
            r.bezierCurveTo(e * 59, e * 204, e * 56, e * 158, e * 51, e * 115);
            r.bezierCurveTo(e * 50, e * 93, e * 81, e * 62, e * 90, e * 57);
            r.closePath();
            se(r, i[0]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 100, e * 33);
            r.bezierCurveTo(e * 85, e * 62, e * 102, e * 66, e * 110, e * 83);
            r.closePath();
            se(r, i[0]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 181, e * 32);
            r.bezierCurveTo(e * 196, e * 62, e * 181, e * 68, e * 178, e * 69);
            se(r, i[0]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 225, e * 52);
            r.bezierCurveTo(e * 228, e * 78, e * 207, e * 77, e * 192, e * 88);
            se(r, i[0]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 34, e * 134);
            r.bezierCurveTo(e * 46, e * 111, e * 57, e * 111, e * 79, e * 109);
            se(r, i[0]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 249, e * 135);
            r.bezierCurveTo(e * 233, e * 107, e * 212, e * 112, e * 202, e * 115);
            se(r, i[0]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 56, e * 50);
            r.bezierCurveTo(e * 56, e * 82, e * 73, e * 82, e * 93, e * 89);
            se(r, i[0]);
            r.translate(0, e * -15);
            r.globalAlpha = 1;
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 100, e * 33);
            r.bezierCurveTo(e * 85, e * 62, e * 102, e * 66, e * 110, e * 83);
            se(r, undefined, i[2], e * 40);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 181, e * 32);
            r.bezierCurveTo(e * 196, e * 62, e * 181, e * 68, e * 178, e * 69);
            se(r, undefined, i[2], e * 40);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 225, e * 52);
            r.bezierCurveTo(e * 228, e * 78, e * 207, e * 77, e * 192, e * 88);
            se(r, undefined, i[2], e * 40);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 34, e * 134);
            r.bezierCurveTo(e * 46, e * 111, e * 57, e * 111, e * 79, e * 109);
            se(r, undefined, i[2], e * 40);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 249, e * 135);
            r.bezierCurveTo(e * 233, e * 107, e * 212, e * 112, e * 202, e * 115);
            se(r, undefined, i[2], e * 40);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 56, e * 50);
            r.bezierCurveTo(e * 56, e * 82, e * 73, e * 82, e * 93, e * 89);
            se(r, undefined, i[2], e * 40);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 93, e * 55);
            r.bezierCurveTo(e * 127, e * 27, e * 195, e * 42, e * 213, e * 78);
            r.bezierCurveTo(e * 254, e * 134, e * 226, e * 198, e * 153, e * 197);
            r.bezierCurveTo(e * 59, e * 204, e * 56, e * 158, e * 51, e * 115);
            r.bezierCurveTo(e * 50, e * 93, e * 81, e * 62, e * 90, e * 57);
            r.closePath();
            se(r, i[1], i[2], e * 10);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 100, e * 33);
            r.bezierCurveTo(e * 85, e * 62, e * 102, e * 66, e * 110, e * 83);
            se(r, undefined, i[1], e * 20);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 181, e * 32);
            r.bezierCurveTo(e * 196, e * 62, e * 181, e * 68, e * 178, e * 69);
            se(r, undefined, i[1], e * 20);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 225, e * 52);
            r.bezierCurveTo(e * 228, e * 78, e * 207, e * 77, e * 192, e * 88);
            se(r, undefined, i[1], e * 20);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 34, e * 134);
            r.bezierCurveTo(e * 46, e * 111, e * 57, e * 111, e * 79, e * 109);
            se(r, undefined, i[1], e * 20);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 249, e * 135);
            r.bezierCurveTo(e * 233, e * 107, e * 212, e * 112, e * 202, e * 115);
            se(r, undefined, i[1], e * 20);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 56, e * 50);
            r.bezierCurveTo(e * 56, e * 82, e * 73, e * 82, e * 93, e * 89);
            se(r, undefined, i[1], e * 20);
            he(r, e * 101, e * 155, e * 20.591260281974);
            se(r, i[3]);
            he(r, e * 180, e * 155, e * 20.591260281974);
            se(r, i[3]);
            he(r, e * 95, e * 148, e * 7.211102550927978);
            se(r, i[4]);
            he(r, e * 173, e * 148, e * 7.211102550927978);
            se(r, i[4]);
            if (o === 1) {
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 191, e * 107);
            r.bezierCurveTo(e * 180, e * 104, e * 175, e * 101, e * 180, e * 95);
            r.bezierCurveTo(e * 180, e * 95, e * 181, e * 99, e * 188, e * 103);
            r.bezierCurveTo(e * 191, e * 101, e * 191, e * 95, e * 190, e * 91);
            r.bezierCurveTo(e * 190, e * 91, e * 196, e * 89, e * 195, e * 99);
            r.closePath();
            se(r, i[2]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 206, e * 98);
            r.bezierCurveTo(e * 203, e * 95, e * 200, e * 93, e * 198, e * 101);
            r.bezierCurveTo(e * 194, e * 109, e * 193, e * 109, e * 196, e * 110);
            r.bezierCurveTo(e * 206, e * 115, e * 209, e * 114, e * 211, e * 111);
            r.bezierCurveTo(e * 211, e * 106, e * 208, e * 108, e * 203, e * 108);
            r.bezierCurveTo(e * 193, e * 107, e * 204, e * 101, e * 206, e * 99);
            r.closePath();
            se(r, i[2]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 172, e * 111);
            r.bezierCurveTo(e * 172, e * 106, e * 174, e * 105, e * 185, e * 109);
            r.bezierCurveTo(e * 190, e * 109, e * 189, e * 114, e * 185, e * 120);
            r.bezierCurveTo(e * 181, e * 125, e * 180, e * 126, e * 176, e * 122);
            r.bezierCurveTo(e * 182, e * 119, e * 187, e * 110, e * 182, e * 112);
            r.closePath();
            se(r, i[2]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 202, e * 125);
            r.bezierCurveTo(e * 197, e * 117, e * 193, e * 116, e * 193, e * 120);
            r.bezierCurveTo(e * 192.5, e * 124.5, e * 192.5, e * 124.5, e * 192, e * 129);
            r.bezierCurveTo(e * 188, e * 129, e * 187, e * 124, e * 189, e * 120);
            r.bezierCurveTo(e * 191, e * 110, e * 192, e * 110, e * 200, e * 116);
            r.bezierCurveTo(e * 208, e * 120, e * 207, e * 123, e * 202, e * 125);
            r.closePath();
            se(r, i[2]);
            }
            return T;
        }
        function st(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 283;
            i.height = e * 224;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 100, e * 33);
            o.bezierCurveTo(e * 85, e * 62, e * 102, e * 66, e * 110, e * 83);
            se(o, undefined, t[0], e * 40);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 181, e * 32);
            o.bezierCurveTo(e * 196, e * 62, e * 181, e * 68, e * 178, e * 69);
            se(o, undefined, t[0], e * 40);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 225, e * 52);
            o.bezierCurveTo(e * 228, e * 78, e * 207, e * 77, e * 192, e * 88);
            se(o, undefined, t[0], e * 40);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 34, e * 134);
            o.bezierCurveTo(e * 46, e * 111, e * 57, e * 111, e * 79, e * 109);
            se(o, undefined, t[0], e * 40);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 249, e * 135);
            o.bezierCurveTo(e * 233, e * 107, e * 212, e * 112, e * 202, e * 115);
            se(o, undefined, t[0], e * 40);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 56, e * 50);
            o.bezierCurveTo(e * 56, e * 82, e * 73, e * 82, e * 93, e * 89);
            se(o, undefined, t[0], e * 40);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 93, e * 55);
            o.bezierCurveTo(e * 124, e * 29, e * 179, e * 44, e * 188, e * 52);
            o.bezierCurveTo(e * 207, e * 64, e * 226, e * 94, e * 231, e * 118);
            o.bezierCurveTo(e * 236, e * 145, e * 222, e * 184, e * 193, e * 192);
            o.bezierCurveTo(e * 147, e * 201, e * 116, e * 200, e * 93, e * 193);
            o.bezierCurveTo(e * 61, e * 180, e * 48, e * 147, e * 50, e * 123);
            o.bezierCurveTo(e * 50, e * 93, e * 76, e * 66, e * 92, e * 56);
            o.closePath();
            se(o, t[0]);
            return i;
        }
        function Rt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 131;
            o.height = e * 121;
            T.translate(0, e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 110, e * 59);
            T.bezierCurveTo(e * 93, e * 61.5, e * 93, e * 61.5, e * 76, e * 64);
            T.bezierCurveTo(e * 84.5, e * 78.5, e * 84.5, e * 78.5, e * 93, e * 93);
            T.bezierCurveTo(e * 70, e * 111, e * 43, e * 103, e * 30, e * 82);
            T.bezierCurveTo(e * 17, e * 61, e * 25, e * 30, e * 51, e * 21);
            T.bezierCurveTo(e * 66, e * 15, e * 83, e * 18, e * 96, e * 29);
            T.bezierCurveTo(e * 104, e * 35, e * 109, e * 47, e * 110, e * 58);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 110, e * 59);
            T.bezierCurveTo(e * 93, e * 61.5, e * 93, e * 61.5, e * 76, e * 64);
            T.bezierCurveTo(e * 84.5, e * 78.5, e * 84.5, e * 78.5, e * 93, e * 93);
            T.bezierCurveTo(e * 70, e * 111, e * 43, e * 103, e * 30, e * 82);
            T.bezierCurveTo(e * 17, e * 61, e * 25, e * 30, e * 51, e * 21);
            T.bezierCurveTo(e * 66, e * 15, e * 83, e * 18, e * 96, e * 29);
            T.bezierCurveTo(e * 104, e * 35, e * 109, e * 47, e * 110, e * 58);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            return o;
        }
        function ht(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 104;
            o.height = e * 112;
            T.translate(0, e * 15);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 16, e * 44);
            T.bezierCurveTo(e * 30.5, e * 48, e * 30.5, e * 48, e * 45, e * 52);
            T.bezierCurveTo(e * 36.5, e * 63, e * 36.5, e * 63, e * 28, e * 74);
            T.bezierCurveTo(e * 32, e * 86, e * 61, e * 92, e * 78, e * 76);
            T.bezierCurveTo(e * 93, e * 62, e * 92, e * 40, e * 80, e * 26);
            T.bezierCurveTo(e * 65, e * 11, e * 42, e * 16, e * 34, e * 21);
            T.bezierCurveTo(e * 22, e * 27, e * 16, e * 39, e * 16, e * 44);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -15);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 16, e * 44);
            T.bezierCurveTo(e * 30.5, e * 48, e * 30.5, e * 48, e * 45, e * 52);
            T.bezierCurveTo(e * 36.5, e * 63, e * 36.5, e * 63, e * 28, e * 74);
            T.bezierCurveTo(e * 32, e * 86, e * 61, e * 92, e * 78, e * 76);
            T.bezierCurveTo(e * 93, e * 62, e * 92, e * 40, e * 80, e * 26);
            T.bezierCurveTo(e * 65, e * 11, e * 42, e * 16, e * 34, e * 21);
            T.bezierCurveTo(e * 22, e * 27, e * 16, e * 39, e * 16, e * 44);
            T.closePath();
            se(T, i[1], i[2], e * 8);
            return o;
        }
        function dt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 321;
            o.height = e * 284;
            T.translate(e * 100, e * 30);
            T.translate(e * 5, e * 10);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 58, e * 33);
            T.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
            T.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
            T.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
            T.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
            T.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
            T.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 58, e * 33);
            T.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
            T.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
            T.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
            T.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
            T.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
            T.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 167, e * 120);
            T.bezierCurveTo(e * 196, e * 106, e * 207, e * 111, e * 199, e * 135);
            T.bezierCurveTo(e * 185, e * 172, e * 166, e * 187, e * 145, e * 179);
            T.bezierCurveTo(e * 118, e * 166, e * 127, e * 139, e * 166, e * 121);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 25, e * 64);
            T.bezierCurveTo(e * 59, e * 96, e * 97, e * 128, e * 129, e * 151);
            T.bezierCurveTo(e * 126, e * 163, e * 134, e * 174, e * 142, e * 180);
            T.bezierCurveTo(e * 114, e * 170, e * 68, e * 134, e * 31, e * 85);
            T.bezierCurveTo(e * 24, e * 71, e * 24, e * 70, e * 25, e * 65);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 161, e * 141);
            T.bezierCurveTo(e * 181, e * 131, e * 186, e * 135, e * 173, e * 152);
            T.bezierCurveTo(e * 163, e * 163, e * 155, e * 161, e * 151, e * 150);
            T.bezierCurveTo(e * 147, e * 140, e * 155, e * 131, e * 175, e * 125);
            T.bezierCurveTo(e * 190, e * 120, e * 196, e * 121, e * 189, e * 143);
            T.bezierCurveTo(e * 182, e * 167, e * 169, e * 174, e * 157, e * 174);
            T.bezierCurveTo(e * 138, e * 172, e * 139, e * 162, e * 140, e * 156);
            se(T, undefined, i[4], e * 4);
            T.translate(e * -100, e * -30);
            T.translate(e * 10, e * 70);
            T.translate(e * 5, e * 10);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 58, e * 33);
            T.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
            T.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
            T.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
            T.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
            T.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
            T.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 58, e * 33);
            T.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
            T.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
            T.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
            T.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
            T.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
            T.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 167, e * 120);
            T.bezierCurveTo(e * 196, e * 106, e * 207, e * 111, e * 199, e * 135);
            T.bezierCurveTo(e * 185, e * 172, e * 166, e * 187, e * 145, e * 179);
            T.bezierCurveTo(e * 118, e * 166, e * 127, e * 139, e * 166, e * 121);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 25, e * 64);
            T.bezierCurveTo(e * 59, e * 96, e * 97, e * 128, e * 129, e * 151);
            T.bezierCurveTo(e * 126, e * 163, e * 134, e * 174, e * 142, e * 180);
            T.bezierCurveTo(e * 114, e * 170, e * 68, e * 134, e * 31, e * 85);
            T.bezierCurveTo(e * 24, e * 71, e * 24, e * 70, e * 25, e * 65);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 161, e * 141);
            T.bezierCurveTo(e * 181, e * 131, e * 186, e * 135, e * 173, e * 152);
            T.bezierCurveTo(e * 163, e * 163, e * 155, e * 161, e * 151, e * 150);
            T.bezierCurveTo(e * 147, e * 140, e * 155, e * 131, e * 175, e * 125);
            T.bezierCurveTo(e * 190, e * 120, e * 196, e * 121, e * 189, e * 143);
            T.bezierCurveTo(e * 182, e * 167, e * 169, e * 174, e * 157, e * 174);
            T.bezierCurveTo(e * 138, e * 172, e * 139, e * 162, e * 140, e * 156);
            se(T, undefined, i[4], e * 4);
            T.translate(e * 20, e * -80);
            T.translate(e * 5, e * 10);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 58, e * 33);
            T.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
            T.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
            T.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
            T.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
            T.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
            T.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 58, e * 33);
            T.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
            T.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
            T.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
            T.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
            T.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
            T.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 167, e * 120);
            T.bezierCurveTo(e * 196, e * 106, e * 207, e * 111, e * 199, e * 135);
            T.bezierCurveTo(e * 185, e * 172, e * 166, e * 187, e * 145, e * 179);
            T.bezierCurveTo(e * 118, e * 166, e * 127, e * 139, e * 166, e * 121);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 25, e * 64);
            T.bezierCurveTo(e * 59, e * 96, e * 97, e * 128, e * 129, e * 151);
            T.bezierCurveTo(e * 126, e * 163, e * 134, e * 174, e * 142, e * 180);
            T.bezierCurveTo(e * 114, e * 170, e * 68, e * 134, e * 31, e * 85);
            T.bezierCurveTo(e * 24, e * 71, e * 24, e * 70, e * 25, e * 65);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 161, e * 141);
            T.bezierCurveTo(e * 181, e * 131, e * 186, e * 135, e * 173, e * 152);
            T.bezierCurveTo(e * 163, e * 163, e * 155, e * 161, e * 151, e * 150);
            T.bezierCurveTo(e * 147, e * 140, e * 155, e * 131, e * 175, e * 125);
            T.bezierCurveTo(e * 190, e * 120, e * 196, e * 121, e * 189, e * 143);
            T.bezierCurveTo(e * 182, e * 167, e * 169, e * 174, e * 157, e * 174);
            T.bezierCurveTo(e * 138, e * 172, e * 139, e * 162, e * 140, e * 156);
            se(T, undefined, i[4], e * 4);
            return o;
        }
        function ut(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 290;
            o.height = e * 525;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 20, e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 111, e * 351);
            T.bezierCurveTo(e * 128.5, e * 218.5, e * 128.5, e * 218.5, e * 146, e * 86);
            T.bezierCurveTo(e * 166.5, e * 66.5, e * 166.5, e * 66.5, e * 187, e * 47);
            T.bezierCurveTo(e * 201, e * 71.5, e * 201, e * 71.5, e * 215, e * 96);
            T.bezierCurveTo(e * 193, e * 228.5, e * 193, e * 228.5, e * 171, e * 361);
            T.closePath();
            se(T, i[0]);
            T.save();
            T.translate(e * 129.5, e * 424);
            T.rotate(0.16);
            Re(T, e * -15.5, e * -63, e * 31, e * 126, e * 10);
            T.restore();
            se(T, i[0]);
            he(T, e * 121, e * 480, e * 20.396078054371138);
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 90, e * 311);
            T.bezierCurveTo(e * 95, e * 324, e * 95, e * 324, e * 100, e * 337);
            T.bezierCurveTo(e * 141.5, e * 345.5, e * 141.5, e * 345.5, e * 183, e * 354);
            T.bezierCurveTo(e * 193.5, e * 342.5, e * 193.5, e * 342.5, e * 204, e * 331);
            T.bezierCurveTo(e * 202, e * 354, e * 202, e * 354, e * 200, e * 377);
            T.bezierCurveTo(e * 147, e * 388, e * 106, e * 371, e * 79, e * 356);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -20, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 111, e * 351);
            T.bezierCurveTo(e * 128.5, e * 218.5, e * 128.5, e * 218.5, e * 146, e * 86);
            T.bezierCurveTo(e * 166.5, e * 66.5, e * 166.5, e * 66.5, e * 187, e * 47);
            T.bezierCurveTo(e * 201, e * 71.5, e * 201, e * 71.5, e * 215, e * 96);
            T.bezierCurveTo(e * 193, e * 228.5, e * 193, e * 228.5, e * 171, e * 361);
            T.closePath();
            se(T, i[1], i[2], e * 12.5);
            T.save();
            T.translate(e * 129.5, e * 424);
            T.rotate(0.16);
            Re(T, e * -15.5, e * -63, e * 31, e * 126, e * 10);
            T.restore();
            se(T, i[4], i[5], e * 12.5);
            he(T, e * 121, e * 480, e * 20.396078054371138);
            se(T, i[4], i[5], e * 12.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 90, e * 311);
            T.bezierCurveTo(e * 95, e * 324, e * 95, e * 324, e * 100, e * 337);
            T.bezierCurveTo(e * 141.5, e * 345.5, e * 141.5, e * 345.5, e * 183, e * 354);
            T.bezierCurveTo(e * 193.5, e * 342.5, e * 193.5, e * 342.5, e * 204, e * 331);
            T.bezierCurveTo(e * 202, e * 354, e * 202, e * 354, e * 200, e * 377);
            T.bezierCurveTo(e * 147, e * 388, e * 106, e * 371, e * 79, e * 356);
            T.closePath();
            se(T, i[1], i[2], e * 12.5);
            return o;
        }
        function At(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 290;
            o.height = e * 525;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 20, e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 112, e * 356);
            T.bezierCurveTo(e * 124, e * 220.5, e * 124, e * 220.5, e * 136, e * 85);
            T.bezierCurveTo(e * 162.5, e * 65.5, e * 162.5, e * 65.5, e * 189, e * 46);
            T.bezierCurveTo(e * 208.5, e * 72.5, e * 208.5, e * 72.5, e * 228, e * 99);
            T.bezierCurveTo(e * 200, e * 232, e * 200, e * 232, e * 172, e * 365);
            T.closePath();
            se(T, i[0]);
            T.save();
            T.translate(e * 131, e * 423);
            T.rotate(0.16);
            Re(T, e * -14, e * -53, e * 28, e * 106, e * 10);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 122, e * 480);
            T.rotate(1.72);
            ue(T, 4, e * 26.476404589747453, e * 10);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 210, e * 387);
            T.bezierCurveTo(e * 138, e * 376, e * 138, e * 376, e * 66, e * 365);
            T.bezierCurveTo(e * 76, e * 355, e * 76, e * 355, e * 86, e * 345);
            T.bezierCurveTo(e * 99, e * 346.5, e * 99, e * 346.5, e * 112, e * 348);
            T.bezierCurveTo(e * 128.5, e * 344, e * 128.5, e * 344, e * 145, e * 340);
            T.bezierCurveTo(e * 158, e * 348, e * 158, e * 348, e * 171, e * 356);
            T.bezierCurveTo(e * 184, e * 358, e * 184, e * 358, e * 197, e * 360);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 129, e * 338);
            T.bezierCurveTo(e * 137, e * 336, e * 137, e * 336, e * 145, e * 334);
            T.bezierCurveTo(e * 152.5, e * 338, e * 152.5, e * 338, e * 160, e * 342);
            T.bezierCurveTo(e * 184, e * 224, e * 184, e * 224, e * 208, e * 106);
            T.bezierCurveTo(e * 197, e * 88, e * 187, e * 70, e * 186, e * 70);
            T.bezierCurveTo(e * 169.5, e * 83, e * 169.5, e * 83, e * 153, e * 96);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -20, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 112, e * 356);
            T.bezierCurveTo(e * 124, e * 220.5, e * 124, e * 220.5, e * 136, e * 85);
            T.bezierCurveTo(e * 162.5, e * 65.5, e * 162.5, e * 65.5, e * 189, e * 46);
            T.bezierCurveTo(e * 208.5, e * 72.5, e * 208.5, e * 72.5, e * 228, e * 99);
            T.bezierCurveTo(e * 200, e * 232, e * 200, e * 232, e * 172, e * 365);
            T.closePath();
            se(T, i[1], i[2], e * 12.5);
            T.save();
            T.translate(e * 131, e * 423);
            T.rotate(0.16);
            Re(T, e * -14, e * -53, e * 28, e * 106, e * 10);
            T.restore();
            se(T, i[4], i[5], e * 12.5);
            T.save();
            T.translate(e * 122, e * 480);
            T.rotate(1.72);
            ue(T, 4, e * 26.476404589747453, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 12.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 210, e * 387);
            T.bezierCurveTo(e * 138, e * 376, e * 138, e * 376, e * 66, e * 365);
            T.bezierCurveTo(e * 76, e * 355, e * 76, e * 355, e * 86, e * 345);
            T.bezierCurveTo(e * 99, e * 346.5, e * 99, e * 346.5, e * 112, e * 348);
            T.bezierCurveTo(e * 128.5, e * 344, e * 128.5, e * 344, e * 145, e * 340);
            T.bezierCurveTo(e * 158, e * 348, e * 158, e * 348, e * 171, e * 356);
            T.bezierCurveTo(e * 184, e * 358, e * 184, e * 358, e * 197, e * 360);
            T.closePath();
            se(T, i[1], i[2], e * 12.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 129, e * 338);
            T.bezierCurveTo(e * 137, e * 336, e * 137, e * 336, e * 145, e * 334);
            T.bezierCurveTo(e * 152.5, e * 338, e * 152.5, e * 338, e * 160, e * 342);
            T.bezierCurveTo(e * 184, e * 224, e * 184, e * 224, e * 208, e * 106);
            T.bezierCurveTo(e * 197, e * 88, e * 187, e * 70, e * 186, e * 70);
            T.bezierCurveTo(e * 169.5, e * 83, e * 169.5, e * 83, e * 153, e * 96);
            T.closePath();
            se(T, i[3]);
            T.globalAlpha = 0.3;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 134, e * 178);
            T.bezierCurveTo(e * 174, e * 157, e * 174, e * 157, e * 214, e * 136);
            T.bezierCurveTo(e * 211.5, e * 147.5, e * 211.5, e * 147.5, e * 209, e * 159);
            T.bezierCurveTo(e * 170.5, e * 181, e * 170.5, e * 181, e * 132, e * 203);
            T.closePath();
            se(T, i[6]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 130, e * 215);
            T.bezierCurveTo(e * 192, e * 183, e * 168, e * 195, e * 206, e * 175);
            T.bezierCurveTo(e * 200, e * 205, e * 200, e * 205, e * 194, e * 235);
            T.bezierCurveTo(e * 159.5, e * 251, e * 159.5, e * 251, e * 125, e * 267);
            T.closePath();
            se(T, i[6]);
            return o;
        }
        function Ot(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 290;
            o.height = e * 525;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 20, e * 20);
            T.translate(e * -20, e * -20);
            T.save();
            T.translate(e * 132, e * 423);
            T.rotate(0.16);
            Re(T, e * -14, e * -61, e * 28, e * 122, e * 10);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 100, e * 344);
            T.bezierCurveTo(e * 123, e * 214, e * 123, e * 214, e * 146, e * 84);
            T.bezierCurveTo(e * 166.5, e * 65, e * 166.5, e * 65, e * 187, e * 46);
            T.bezierCurveTo(e * 201, e * 71, e * 201, e * 71, e * 215, e * 96);
            T.bezierCurveTo(e * 199.5, e * 226.5, e * 199.5, e * 226.5, e * 184, e * 357);
            T.bezierCurveTo(e * 162.5, e * 362.5, e * 162.5, e * 362.5, e * 141, e * 368);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 75, e * 328);
            T.bezierCurveTo(e * 88, e * 336.5, e * 88, e * 336.5, e * 101, e * 345);
            T.bezierCurveTo(e * 123.5, e * 337.5, e * 123.5, e * 337.5, e * 146, e * 330);
            T.bezierCurveTo(e * 165, e * 343.5, e * 165, e * 343.5, e * 184, e * 357);
            T.bezierCurveTo(e * 198.5, e * 353, e * 198.5, e * 353, e * 213, e * 349);
            T.bezierCurveTo(e * 200.5, e * 364.5, e * 200.5, e * 364.5, e * 188, e * 380);
            T.bezierCurveTo(e * 163, e * 380.5, e * 163, e * 380.5, e * 138, e * 381);
            T.bezierCurveTo(e * 112, e * 373.5, e * 112, e * 373.5, e * 86, e * 366);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 121, e * 332);
            T.bezierCurveTo(e * 133.5, e * 327.5, e * 133.5, e * 327.5, e * 146, e * 323);
            T.bezierCurveTo(e * 157, e * 330.5, e * 157, e * 330.5, e * 168, e * 338);
            T.bezierCurveTo(e * 182.5, e * 219.5, e * 182.5, e * 219.5, e * 197, e * 101);
            T.bezierCurveTo(e * 190, e * 84.5, e * 190, e * 84.5, e * 183, e * 68);
            T.bezierCurveTo(e * 172.5, e * 81, e * 172.5, e * 81, e * 162, e * 94);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105, e * 463);
            T.bezierCurveTo(e * 124.5, e * 466, e * 124.5, e * 466, e * 144, e * 469);
            T.bezierCurveTo(e * 145.5, e * 478.5, e * 145.5, e * 478.5, e * 147, e * 488);
            T.bezierCurveTo(e * 133.5, e * 495.5, e * 133.5, e * 495.5, e * 120, e * 503);
            T.bezierCurveTo(e * 108.5, e * 492, e * 108.5, e * 492, e * 97, e * 481);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -20, e * -20);
            T.save();
            T.translate(e * 132, e * 423);
            T.rotate(0.16);
            Re(T, e * -14, e * -61, e * 28, e * 122, e * 10);
            T.restore();
            se(T, i[4], i[5], e * 12.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 100, e * 344);
            T.bezierCurveTo(e * 123, e * 214, e * 123, e * 214, e * 146, e * 84);
            T.bezierCurveTo(e * 166.5, e * 65, e * 166.5, e * 65, e * 187, e * 46);
            T.bezierCurveTo(e * 201, e * 71, e * 201, e * 71, e * 215, e * 96);
            T.bezierCurveTo(e * 199.5, e * 226.5, e * 199.5, e * 226.5, e * 184, e * 357);
            T.bezierCurveTo(e * 162.5, e * 362.5, e * 162.5, e * 362.5, e * 141, e * 368);
            T.closePath();
            se(T, i[1], i[2], e * 12.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 75, e * 328);
            T.bezierCurveTo(e * 88, e * 336.5, e * 88, e * 336.5, e * 101, e * 345);
            T.bezierCurveTo(e * 123.5, e * 337.5, e * 123.5, e * 337.5, e * 146, e * 330);
            T.bezierCurveTo(e * 165, e * 343.5, e * 165, e * 343.5, e * 184, e * 357);
            T.bezierCurveTo(e * 198.5, e * 353, e * 198.5, e * 353, e * 213, e * 349);
            T.bezierCurveTo(e * 200.5, e * 364.5, e * 200.5, e * 364.5, e * 188, e * 380);
            T.bezierCurveTo(e * 163, e * 380.5, e * 163, e * 380.5, e * 138, e * 381);
            T.bezierCurveTo(e * 112, e * 373.5, e * 112, e * 373.5, e * 86, e * 366);
            T.closePath();
            se(T, i[1], i[2], e * 12.5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 121, e * 332);
            T.bezierCurveTo(e * 133.5, e * 327.5, e * 133.5, e * 327.5, e * 146, e * 323);
            T.bezierCurveTo(e * 157, e * 330.5, e * 157, e * 330.5, e * 168, e * 338);
            T.bezierCurveTo(e * 182.5, e * 219.5, e * 182.5, e * 219.5, e * 197, e * 101);
            T.bezierCurveTo(e * 190, e * 84.5, e * 190, e * 84.5, e * 183, e * 68);
            T.bezierCurveTo(e * 172.5, e * 81, e * 172.5, e * 81, e * 162, e * 94);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105, e * 463);
            T.bezierCurveTo(e * 124.5, e * 466, e * 124.5, e * 466, e * 144, e * 469);
            T.bezierCurveTo(e * 145.5, e * 478.5, e * 145.5, e * 478.5, e * 147, e * 488);
            T.bezierCurveTo(e * 133.5, e * 495.5, e * 133.5, e * 495.5, e * 120, e * 503);
            T.bezierCurveTo(e * 108.5, e * 492, e * 108.5, e * 492, e * 97, e * 481);
            T.closePath();
            se(T, i[1], i[2], e * 12.5);
            T.globalAlpha = 0.2;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 139, e * 157);
            T.bezierCurveTo(e * 171.5, e * 145, e * 171.5, e * 145, e * 204, e * 133);
            T.bezierCurveTo(e * 203, e * 144.5, e * 203, e * 144.5, e * 202, e * 156);
            T.bezierCurveTo(e * 168.5, e * 168, e * 168.5, e * 168, e * 135, e * 180);
            T.closePath();
            se(T, i[6]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 133, e * 192);
            T.bezierCurveTo(e * 166.5, e * 181.5, e * 166.5, e * 181.5, e * 200, e * 171);
            T.bezierCurveTo(e * 195.5, e * 205, e * 195.5, e * 205, e * 191, e * 239);
            T.bezierCurveTo(e * 156, e * 249, e * 156, e * 249, e * 121, e * 259);
            T.closePath();
            se(T, i[6]);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 143, e * 346);
            T.bezierCurveTo(e * 125, e * 352, e * 125, e * 352, e * 107, e * 358);
            T.bezierCurveTo(e * 124, e * 363, e * 140, e * 368, e * 141, e * 368);
            T.bezierCurveTo(e * 156.5, e * 367, e * 156.5, e * 367, e * 172, e * 366);
            T.closePath();
            se(T, i[3]);
            return o;
        }
        function lt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 154;
            o.height = e * 261;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 125, e * 69);
            T.bezierCurveTo(e * 123.5, e * 141.5, e * 123.5, e * 141.5, e * 122, e * 214);
            T.bezierCurveTo(e * 123, e * 228, e * 119, e * 239, e * 102, e * 239);
            T.bezierCurveTo(e * 90, e * 238, e * 86, e * 225, e * 89, e * 197);
            T.bezierCurveTo(e * 92, e * 159, e * 92, e * 141, e * 94, e * 84);
            T.bezierCurveTo(e * 94, e * 58, e * 87, e * 50, e * 73, e * 52);
            T.bezierCurveTo(e * 53, e * 54, e * 54, e * 92, e * 34, e * 87);
            T.bezierCurveTo(e * 13, e * 85, e * 22, e * 58, e * 34, e * 40);
            T.bezierCurveTo(e * 44, e * 24, e * 68, e * 17, e * 86, e * 21);
            T.bezierCurveTo(e * 111, e * 23, e * 123, e * 39, e * 125, e * 67);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 125, e * 69);
            T.bezierCurveTo(e * 123.5, e * 141.5, e * 123.5, e * 141.5, e * 122, e * 214);
            T.bezierCurveTo(e * 123, e * 228, e * 119, e * 239, e * 102, e * 239);
            T.bezierCurveTo(e * 90, e * 238, e * 86, e * 225, e * 89, e * 197);
            T.bezierCurveTo(e * 92, e * 159, e * 92, e * 141, e * 94, e * 84);
            T.bezierCurveTo(e * 94, e * 58, e * 87, e * 50, e * 73, e * 52);
            T.bezierCurveTo(e * 53, e * 54, e * 54, e * 92, e * 34, e * 87);
            T.bezierCurveTo(e * 13, e * 85, e * 22, e * 58, e * 34, e * 40);
            T.bezierCurveTo(e * 44, e * 24, e * 68, e * 17, e * 86, e * 21);
            T.bezierCurveTo(e * 111, e * 23, e * 123, e * 39, e * 125, e * 67);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31, e * 43);
            T.bezierCurveTo(e * 31, e * 61, e * 43, e * 70, e * 51, e * 75);
            T.bezierCurveTo(e * 48, e * 84, e * 41, e * 89, e * 33, e * 86);
            T.bezierCurveTo(e * 23, e * 88, e * 20, e * 76, e * 23, e * 62);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 45, e * 29);
            T.bezierCurveTo(e * 49, e * 45, e * 61, e * 54, e * 64, e * 55);
            T.bezierCurveTo(e * 67.5, e * 53, e * 67.5, e * 53, e * 71, e * 51);
            T.bezierCurveTo(e * 80, e * 44, e * 83, e * 33, e * 82, e * 20);
            T.bezierCurveTo(e * 59, e * 17, e * 51, e * 23, e * 45, e * 30);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 86, e * 56);
            T.bezierCurveTo(e * 90, e * 33, e * 103, e * 25, e * 105, e * 27);
            T.bezierCurveTo(e * 116, e * 31, e * 121, e * 45, e * 122, e * 50);
            T.bezierCurveTo(e * 112, e * 62, e * 103, e * 63, e * 91, e * 62);
            T.bezierCurveTo(e * 89, e * 59.5, e * 89, e * 59.5, e * 87, e * 57);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 93, e * 81);
            T.bezierCurveTo(e * 109, e * 82, e * 123, e * 70, e * 124, e * 63);
            T.bezierCurveTo(e * 124, e * 75.5, e * 124, e * 75.5, e * 124, e * 88);
            T.bezierCurveTo(e * 119, e * 99, e * 103, e * 103, e * 94, e * 103);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 93, e * 124);
            T.bezierCurveTo(e * 108, e * 125, e * 122, e * 113, e * 124, e * 106);
            T.bezierCurveTo(e * 124, e * 119, e * 124, e * 129, e * 124, e * 132);
            T.bezierCurveTo(e * 110, e * 147, e * 94, e * 148, e * 90, e * 147);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 90, e * 170);
            T.bezierCurveTo(e * 104, e * 166, e * 122, e * 158, e * 122, e * 151);
            T.bezierCurveTo(e * 122, e * 162.5, e * 122, e * 162.5, e * 122, e * 174);
            T.bezierCurveTo(e * 111, e * 191, e * 97, e * 191, e * 89, e * 191);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 88, e * 208);
            T.bezierCurveTo(e * 100, e * 209, e * 115, e * 205, e * 122, e * 193);
            T.bezierCurveTo(e * 122, e * 205.5, e * 122, e * 205.5, e * 122, e * 218);
            T.bezierCurveTo(e * 115, e * 229, e * 103, e * 235, e * 90, e * 228);
            T.bezierCurveTo(e * 88, e * 224, e * 88, e * 217, e * 88, e * 211);
            T.closePath();
            se(T, i[3]);
            T.globalAlpha = 0.4;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 22, e * 81);
            T.bezierCurveTo(e * 32, e * 84, e * 41, e * 81, e * 45, e * 68);
            T.bezierCurveTo(e * 50, e * 50, e * 62, e * 40, e * 79, e * 43);
            T.bezierCurveTo(e * 95, e * 45, e * 102, e * 58, e * 101, e * 81);
            T.bezierCurveTo(e * 99.5, e * 120.5, e * 99.5, e * 120.5, e * 98, e * 160);
            T.bezierCurveTo(e * 96.5, e * 191.5, e * 96.5, e * 191.5, e * 95, e * 223);
            T.bezierCurveTo(e * 93, e * 232, e * 101, e * 235, e * 108, e * 238);
            T.bezierCurveTo(e * 100, e * 240, e * 90, e * 233, e * 90, e * 224);
            T.bezierCurveTo(e * 92, e * 157, e * 92, e * 157, e * 94, e * 90);
            T.bezierCurveTo(e * 94, e * 56, e * 89, e * 53, e * 77, e * 51);
            T.bezierCurveTo(e * 58, e * 50, e * 54, e * 59, e * 49, e * 75);
            T.bezierCurveTo(e * 44, e * 91, e * 28, e * 90, e * 23, e * 81);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 82, e * 123);
            T.bezierCurveTo(e * 88, e * 130, e * 88, e * 127, e * 94, e * 128);
            T.bezierCurveTo(e * 91, e * 136, e * 94, e * 137, e * 99, e * 142);
            T.bezierCurveTo(e * 97, e * 149, e * 99, e * 152, e * 105, e * 155);
            T.bezierCurveTo(e * 107, e * 159, e * 113, e * 159, e * 120, e * 158);
            T.bezierCurveTo(e * 121, e * 160, e * 125, e * 163, e * 132, e * 163);
            T.bezierCurveTo(e * 133, e * 166, e * 136, e * 169, e * 138, e * 170);
            T.bezierCurveTo(e * 133, e * 171, e * 132, e * 172, e * 129, e * 174);
            T.bezierCurveTo(e * 122, e * 170, e * 120, e * 170, e * 116, e * 174);
            T.bezierCurveTo(e * 108, e * 170.5, e * 108, e * 170.5, e * 100, e * 167);
            T.bezierCurveTo(e * 95, e * 172, e * 94, e * 179, e * 95, e * 184);
            T.bezierCurveTo(e * 87, e * 185, e * 87, e * 189, e * 88, e * 194);
            T.bezierCurveTo(e * 82, e * 194, e * 81, e * 195, e * 79, e * 197);
            T.bezierCurveTo(e * 78, e * 192, e * 78, e * 191, e * 77, e * 189);
            T.bezierCurveTo(e * 81, e * 185, e * 82, e * 183, e * 80, e * 176);
            T.bezierCurveTo(e * 89, e * 170, e * 92, e * 168, e * 95, e * 163);
            T.bezierCurveTo(e * 91, e * 151, e * 88, e * 151, e * 82, e * 147);
            T.bezierCurveTo(e * 85, e * 142, e * 85, e * 137, e * 81, e * 133);
            T.bezierCurveTo(e * 84, e * 127, e * 84, e * 125, e * 82, e * 124);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            he(T, e * 107, e * 152, e * 9);
            se(T, i[6]);
            he(T, e * 105, e * 173, e * 9);
            se(T, i[6]);
            he(T, e * 87, e * 161, e * 9);
            se(T, i[6]);
            he(T, e * 106, e * 147, e * 4);
            se(T, i[7]);
            he(T, e * 104, e * 167, e * 4);
            se(T, i[7]);
            he(T, e * 86, e * 154, e * 4);
            se(T, i[7]);
            return o;
        }
        function St(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 350;
            o.height = e * 140;
            T.translate(e * -50, e * -150);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 184.5, e * 222.0625);
            T.bezierCurveTo(e * 185.5, e * 184.0625, e * 302.5, e * 171.0625, e * 313.5, e * 222.0625);
            T.bezierCurveTo(e * 330.5, e * 263.0625, e * 181.5, e * 274.0625, e * 184.5, e * 223.0625);
            T.closePath();
            se(T, i[0], i[1], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 131.5, e * 241.0625);
            T.bezierCurveTo(e * 144.5, e * 278.0625, e * 270.5, e * 209.0625, e * 228.5, e * 174.0625);
            T.bezierCurveTo(e * 196.5, e * 147.0625, e * 117.5, e * 196.0625, e * 131.5, e * 240.0625);
            T.closePath();
            se(T, i[0], i[1], e * 8);
            he(T, e * 270.5, e * 225.0625, e * 15.811388300841896);
            se(T, i[2]);
            he(T, e * 243.5, e * 225.0625, e * 6.082762530298219);
            se(T, i[2]);
            he(T, e * 255.5, e * 210.0625, e * 10.816653826391969);
            se(T, i[2]);
            he(T, e * 167.5, e * 215.0625, e * 15.297058540778355);
            se(T, i[2]);
            he(T, e * 176.5, e * 204.0625, e * 7.280109889280518);
            se(T, i[2]);
            he(T, e * 206.5, e * 189.0625, e * 7.280109889280518);
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 151.5, e * 212.0625);
            T.bezierCurveTo(e * 161.5, e * 204.0625, e * 173.5, e * 214.0625, e * 158.5, e * 221.0625);
            T.bezierCurveTo(e * 145.5, e * 228.0625, e * 144.5, e * 216.0625, e * 151.5, e * 212.0625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 194.5, e * 209.0625);
            T.bezierCurveTo(e * 205.5, e * 202.0625, e * 215.5, e * 207.0625, e * 199.5, e * 217.0625);
            T.bezierCurveTo(e * 187.5, e * 224.0625, e * 182.5, e * 217.0625, e * 194.5, e * 209.0625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 188.5, e * 183.0625);
            T.bezierCurveTo(e * 201.5, e * 176.0625, e * 213.5, e * 187.0625, e * 193.5, e * 193.0625);
            T.bezierCurveTo(e * 185.5, e * 194.0625, e * 175.5, e * 189.0625, e * 188.5, e * 183.0625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 261.5, e * 202.0625);
            T.bezierCurveTo(e * 274.5, e * 201.0625, e * 282.5, e * 214.0625, e * 261.5, e * 215.0625);
            T.bezierCurveTo(e * 246.5, e * 214.0625, e * 248.5, e * 203.0625, e * 261.5, e * 202.0625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 240.5, e * 231.0625);
            T.bezierCurveTo(e * 255.5, e * 231.0625, e * 254.5, e * 243.0625, e * 240.5, e * 242.0625);
            T.bezierCurveTo(e * 225.5, e * 239.0625, e * 225.5, e * 232.0625, e * 240.5, e * 231.0625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            return o;
        }
        function Ct(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 217;
            o.height = e * 215;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 79, e * 113);
            T.bezierCurveTo(e * 135, e * 98, e * 136, e * 96, e * 142, e * 97);
            T.bezierCurveTo(e * 167, e * 106, e * 167, e * 106, e * 171, e * 109);
            T.bezierCurveTo(e * 173, e * 120, e * 173, e * 134, e * 169, e * 141);
            T.bezierCurveTo(e * 140, e * 149.5, e * 140, e * 149.5, e * 111, e * 158);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 154, e * 103);
            T.bezierCurveTo(e * 167, e * 91, e * 175, e * 87, e * 176, e * 94);
            T.bezierCurveTo(e * 175, e * 102, e * 176, e * 102, e * 186, e * 103);
            T.bezierCurveTo(e * 191, e * 104, e * 192, e * 105, e * 185, e * 116);
            T.bezierCurveTo(e * 183, e * 120, e * 191, e * 124, e * 189, e * 129);
            T.bezierCurveTo(e * 185, e * 139, e * 178, e * 134, e * 166, e * 131);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 60, e * 46);
            T.bezierCurveTo(e * 60, e * 34, e * 60, e * 29, e * 56, e * 19);
            T.bezierCurveTo(e * 52, e * 12, e * 52, e * 16, e * 49, e * 24);
            T.bezierCurveTo(e * 48, e * 27, e * 46, e * 28, e * 39, e * 27);
            T.bezierCurveTo(e * 33, e * 26, e * 34, e * 31, e * 35, e * 37);
            T.bezierCurveTo(e * 36, e * 41, e * 27, e * 46, e * 29, e * 52);
            T.bezierCurveTo(e * 36, e * 55, e * 35, e * 56, e * 31, e * 59);
            T.bezierCurveTo(e * 27, e * 65, e * 32, e * 64, e * 35, e * 62);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 46, e * 50);
            T.bezierCurveTo(e * 51, e * 35, e * 70, e * 32, e * 78, e * 29);
            T.bezierCurveTo(e * 84, e * 27, e * 113, e * 36, e * 127, e * 41);
            T.bezierCurveTo(e * 140, e * 47, e * 147, e * 69, e * 137, e * 73);
            T.bezierCurveTo(e * 124, e * 92, e * 117, e * 92, e * 109, e * 94);
            T.bezierCurveTo(e * 101, e * 96, e * 89, e * 92, e * 65, e * 83);
            T.bezierCurveTo(e * 54, e * 80, e * 46, e * 58, e * 46, e * 51);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 51, e * 40);
            T.bezierCurveTo(e * 49, e * 34, e * 49, e * 34, e * 47, e * 28);
            T.bezierCurveTo(e * 38, e * 28, e * 34, e * 27, e * 37, e * 37);
            T.bezierCurveTo(e * 43, e * 40.5, e * 43, e * 40.5, e * 49, e * 44);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 29, e * 48);
            T.bezierCurveTo(e * 38, e * 49, e * 38, e * 49, e * 47, e * 50);
            T.bezierCurveTo(e * 46.5, e * 51.5, e * 46.5, e * 51.5, e * 46, e * 53);
            T.bezierCurveTo(e * 40, e * 53.5, e * 40, e * 53.5, e * 34, e * 54);
            T.bezierCurveTo(e * 29, e * 51, e * 32, e * 51.5, e * 30, e * 49);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 89, e * 61);
            T.bezierCurveTo(e * 101, e * 70, e * 109, e * 90, e * 102, e * 90);
            T.bezierCurveTo(e * 97, e * 91, e * 87, e * 91, e * 60, e * 80);
            T.bezierCurveTo(e * 48, e * 65, e * 46, e * 56, e * 48, e * 53);
            T.bezierCurveTo(e * 50, e * 52, e * 66, e * 56, e * 89, e * 61);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 99, e * 59);
            T.bezierCurveTo(e * 115, e * 45, e * 125, e * 42, e * 129, e * 47);
            T.bezierCurveTo(e * 138, e * 56, e * 140, e * 63, e * 138, e * 67);
            T.bezierCurveTo(e * 131, e * 80, e * 122, e * 87, e * 114, e * 90);
            T.bezierCurveTo(e * 105, e * 80, e * 95, e * 62, e * 98, e * 61);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 118, e * 62);
            T.bezierCurveTo(e * 139, e * 45, e * 153, e * 40, e * 150, e * 48);
            T.bezierCurveTo(e * 145, e * 57, e * 157, e * 63, e * 157, e * 70);
            T.bezierCurveTo(e * 157, e * 74, e * 142, e * 77, e * 142, e * 85);
            T.bezierCurveTo(e * 143, e * 91, e * 141, e * 92, e * 135, e * 90);
            T.bezierCurveTo(e * 132, e * 90, e * 132, e * 96, e * 124, e * 99);
            T.bezierCurveTo(e * 118, e * 93, e * 116, e * 77, e * 116, e * 64);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 90, e * 130);
            T.bezierCurveTo(e * 157, e * 115, e * 165, e * 111, e * 167, e * 115);
            T.bezierCurveTo(e * 170, e * 117, e * 171, e * 135, e * 167, e * 141);
            T.bezierCurveTo(e * 135.5, e * 149.5, e * 135.5, e * 149.5, e * 104, e * 158);
            T.closePath();
            se(T, i[8]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 53, e * 119);
            T.bezierCurveTo(e * 46, e * 120, e * 40, e * 118, e * 34, e * 116);
            T.bezierCurveTo(e * 28, e * 111, e * 41, e * 112, e * 39, e * 108);
            T.bezierCurveTo(e * 36, e * 100, e * 49, e * 102, e * 53, e * 95);
            T.bezierCurveTo(e * 57, e * 84, e * 58, e * 85, e * 63, e * 93);
            T.bezierCurveTo(e * 68, e * 96, e * 72, e * 94, e * 80, e * 88);
            T.bezierCurveTo(e * 80, e * 96, e * 78, e * 107, e * 66, e * 115);
            T.closePath();
            se(T, i[9], i[10], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 118, e * 64);
            T.bezierCurveTo(e * 133.5, e * 57, e * 133.5, e * 57, e * 149, e * 50);
            T.bezierCurveTo(e * 145, e * 54, e * 154, e * 65, e * 157, e * 68);
            T.bezierCurveTo(e * 138.5, e * 66.5, e * 138.5, e * 66.5, e * 120, e * 65);
            T.closePath();
            se(T, i[8]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 118, e * 65);
            T.bezierCurveTo(e * 129, e * 77, e * 129, e * 77, e * 140, e * 89);
            T.bezierCurveTo(e * 131, e * 89, e * 130, e * 92, e * 128, e * 96);
            T.bezierCurveTo(e * 123.5, e * 82, e * 123.5, e * 82, e * 119, e * 68);
            T.closePath();
            se(T, i[8]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 51, e * 112);
            T.bezierCurveTo(e * 63, e * 108, e * 78, e * 111, e * 88, e * 112);
            T.bezierCurveTo(e * 98, e * 122, e * 117, e * 136, e * 125, e * 157);
            T.bezierCurveTo(e * 123, e * 180, e * 123, e * 185, e * 118, e * 186);
            T.bezierCurveTo(e * 101, e * 190, e * 89, e * 191, e * 79, e * 187);
            T.bezierCurveTo(e * 53, e * 165, e * 50, e * 153, e * 47, e * 144);
            T.bezierCurveTo(e * 46, e * 128, e * 46, e * 124, e * 50, e * 112);
            T.closePath();
            se(T, i[9], i[10], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 50, e * 114);
            T.bezierCurveTo(e * 81, e * 149, e * 80, e * 147, e * 80, e * 149);
            T.bezierCurveTo(e * 82, e * 155, e * 80, e * 182, e * 74, e * 182);
            T.bezierCurveTo(e * 60, e * 172, e * 52, e * 157, e * 47, e * 144);
            T.closePath();
            se(T, i[11], i[11], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 85, e * 152);
            T.bezierCurveTo(e * 99, e * 150, e * 109, e * 152, e * 119, e * 156);
            T.bezierCurveTo(e * 122, e * 163, e * 122, e * 174, e * 117, e * 182);
            T.closePath();
            T.bezierCurveTo(e * 93, e * 188, e * 82, e * 187, e * 83, e * 179);
            se(T, i[11], i[11], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 104, e * 166);
            T.bezierCurveTo(e * 133, e * 165, e * 142, e * 168, e * 137, e * 173);
            T.bezierCurveTo(e * 127, e * 177, e * 137, e * 195, e * 126, e * 196);
            T.bezierCurveTo(e * 112, e * 195, e * 112, e * 194, e * 109, e * 199);
            T.bezierCurveTo(e * 105, e * 205, e * 102, e * 195, e * 96, e * 197);
            T.bezierCurveTo(e * 84, e * 201, e * 88, e * 198, e * 90, e * 187);
            T.bezierCurveTo(e * 96, e * 171, e * 97, e * 170, e * 103, e * 167);
            T.closePath();
            se(T, i[9], i[10], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105, e * 168);
            T.bezierCurveTo(e * 118, e * 172.5, e * 118, e * 172.5, e * 131, e * 177);
            T.bezierCurveTo(e * 133, e * 190, e * 132, e * 199, e * 116, e * 194);
            T.bezierCurveTo(e * 110, e * 182, e * 110, e * 182, e * 104, e * 170);
            T.closePath();
            se(T, i[10]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 169);
            T.bezierCurveTo(e * 100.5, e * 182, e * 100.5, e * 182, e * 99, e * 195);
            T.bezierCurveTo(e * 93.5, e * 196.5, e * 93.5, e * 196.5, e * 88, e * 198);
            T.bezierCurveTo(e * 94, e * 176, e * 96, e * 174, e * 101, e * 168);
            T.closePath();
            se(T, i[9], i[9], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 64, e * 107);
            T.bezierCurveTo(e * 64, e * 101, e * 64, e * 101, e * 64, e * 95);
            T.bezierCurveTo(e * 57, e * 86, e * 57, e * 84, e * 53, e * 97);
            T.bezierCurveTo(e * 55, e * 103.5, e * 55, e * 103.5, e * 57, e * 110);
            T.closePath();
            se(T, i[11], i[11], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 40, e * 108);
            T.bezierCurveTo(e * 46.5, e * 111, e * 46.5, e * 111, e * 53, e * 114);
            T.bezierCurveTo(e * 50.5, e * 117, e * 50.5, e * 117, e * 48, e * 120);
            T.bezierCurveTo(e * 40.5, e * 117.5, e * 40.5, e * 117.5, e * 33, e * 115);
            T.bezierCurveTo(e * 36, e * 112, e * 36, e * 112, e * 39, e * 109);
            T.closePath();
            se(T, i[11], i[11], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 189, e * 106);
            T.bezierCurveTo(e * 178.5, e * 110.5, e * 178.5, e * 110.5, e * 168, e * 115);
            T.bezierCurveTo(e * 168.5, e * 119, e * 168.5, e * 119, e * 169, e * 123);
            T.bezierCurveTo(e * 179, e * 124.5, e * 179, e * 124.5, e * 189, e * 126);
            T.bezierCurveTo(e * 182, e * 118, e * 183, e * 115, e * 188, e * 106);
            T.closePath();
            se(T, i[8]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 69, e * 178);
            T.bezierCurveTo(e * 69, e * 141, e * 70, e * 136, e * 77, e * 137);
            T.bezierCurveTo(e * 88, e * 133, e * 101, e * 134, e * 108, e * 137);
            se(T, undefined, i[3], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 161);
            T.bezierCurveTo(e * 54, e * 124, e * 55, e * 119, e * 62, e * 119);
            T.bezierCurveTo(e * 74, e * 117, e * 85, e * 117, e * 93, e * 119);
            se(T, undefined, i[3], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 91, e * 29);
            T.bezierCurveTo(e * 74, e * 33, e * 62, e * 46, e * 57, e * 54);
            T.bezierCurveTo(e * 57, e * 63, e * 68, e * 76, e * 77, e * 87);
            se(T, undefined, i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 107, e * 33);
            T.bezierCurveTo(e * 82, e * 51, e * 80, e * 52, e * 79, e * 59);
            T.bezierCurveTo(e * 78, e * 65, e * 93, e * 86, e * 101, e * 93);
            se(T, undefined, i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 130, e * 98);
            T.bezierCurveTo(e * 126.5, e * 103, e * 126.5, e * 103, e * 123, e * 108);
            T.bezierCurveTo(e * 133.5, e * 107, e * 133.5, e * 107, e * 144, e * 106);
            T.bezierCurveTo(e * 138.5, e * 110, e * 138.5, e * 110, e * 133, e * 114);
            T.bezierCurveTo(e * 142, e * 114, e * 142, e * 114, e * 151, e * 114);
            T.bezierCurveTo(e * 146.5, e * 119.5, e * 146.5, e * 119.5, e * 142, e * 125);
            T.bezierCurveTo(e * 146.5, e * 127, e * 146.5, e * 127, e * 151, e * 129);
            T.bezierCurveTo(e * 147.5, e * 132, e * 147.5, e * 132, e * 144, e * 135);
            T.bezierCurveTo(e * 148, e * 137, e * 148, e * 137, e * 152, e * 139);
            T.bezierCurveTo(e * 149, e * 142.5, e * 149, e * 142.5, e * 146, e * 146);
            se(T, undefined, i[3], e * 4);
            return o;
        }
        function bt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 118;
            o.height = e * 114;
            T.translate(0, e * 10);
            he(T, e * 42, e * 43, e * 24.758836806279895);
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 65, e * 90);
            T.bezierCurveTo(e * 72, e * 91, e * 75, e * 92, e * 71, e * 96);
            T.bezierCurveTo(e * 65, e * 98, e * 65, e * 94, e * 65, e * 91);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87, e * 45);
            T.bezierCurveTo(e * 108, e * 59, e * 100, e * 86, e * 85, e * 91);
            T.bezierCurveTo(e * 80, e * 96, e * 68, e * 95, e * 58, e * 87);
            T.bezierCurveTo(e * 53, e * 80, e * 61, e * 64, e * 66, e * 58);
            T.bezierCurveTo(e * 73, e * 48, e * 78, e * 44, e * 87, e * 45);
            T.closePath();
            se(T, i[0]);
            T.translate(0, e * -10);
            he(T, e * 42, e * 43, e * 24.758836806279895);
            se(T, i[1], i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 65, e * 90);
            T.bezierCurveTo(e * 72, e * 91, e * 75, e * 92, e * 71, e * 96);
            T.bezierCurveTo(e * 65, e * 98, e * 65, e * 94, e * 65, e * 91);
            T.closePath();
            se(T, i[1], i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87, e * 45);
            T.bezierCurveTo(e * 108, e * 59, e * 100, e * 86, e * 85, e * 91);
            T.bezierCurveTo(e * 80, e * 96, e * 68, e * 95, e * 58, e * 87);
            T.bezierCurveTo(e * 53, e * 80, e * 61, e * 64, e * 66, e * 58);
            T.bezierCurveTo(e * 73, e * 48, e * 78, e * 44, e * 87, e * 45);
            T.closePath();
            se(T, i[1], i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 16);
            T.bezierCurveTo(e * 55, e * 19, e * 54, e * 20, e * 55, e * 22);
            T.bezierCurveTo(e * 52, e * 24.5, e * 52, e * 24.5, e * 49, e * 27);
            T.bezierCurveTo(e * 45, e * 25, e * 45, e * 25, e * 41, e * 23);
            T.bezierCurveTo(e * 45, e * 19, e * 48, e * 16, e * 52, e * 16);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 62, e * 30);
            T.bezierCurveTo(e * 66, e * 29, e * 64, e * 30, e * 66, e * 30);
            T.bezierCurveTo(e * 67, e * 31, e * 67, e * 31, e * 68, e * 32);
            T.bezierCurveTo(e * 66.5, e * 33.5, e * 66.5, e * 33.5, e * 65, e * 35);
            T.bezierCurveTo(e * 63.5, e * 32.5, e * 63.5, e * 32.5, e * 62, e * 30);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 29, e * 21);
            T.bezierCurveTo(e * 31, e * 22, e * 31, e * 26, e * 29, e * 29);
            T.bezierCurveTo(e * 26, e * 28.5, e * 26, e * 28.5, e * 23, e * 28);
            T.bezierCurveTo(e * 23, e * 26.5, e * 23, e * 26.5, e * 23, e * 25);
            T.bezierCurveTo(e * 25, e * 23, e * 25, e * 23, e * 27, e * 21);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 18, e * 36);
            T.bezierCurveTo(e * 23, e * 36, e * 24, e * 42, e * 19, e * 46);
            T.bezierCurveTo(e * 12, e * 39, e * 15, e * 38, e * 18, e * 37);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 34);
            T.bezierCurveTo(e * 35, e * 36, e * 36, e * 39, e * 32, e * 45);
            T.bezierCurveTo(e * 25, e * 46, e * 25, e * 44, e * 30, e * 34);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 59, e * 35);
            T.bezierCurveTo(e * 58, e * 27, e * 57, e * 27, e * 52, e * 31);
            T.bezierCurveTo(e * 50, e * 36, e * 53, e * 38, e * 58, e * 36);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 63, e * 46);
            T.bezierCurveTo(e * 64.5, e * 46.5, e * 64.5, e * 46.5, e * 66, e * 47);
            T.bezierCurveTo(e * 70, e * 50, e * 70, e * 53, e * 61, e * 55);
            T.bezierCurveTo(e * 62, e * 50.5, e * 62, e * 50.5, e * 63, e * 46);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 41, e * 42);
            T.bezierCurveTo(e * 47, e * 41, e * 53, e * 47, e * 46, e * 51);
            T.bezierCurveTo(e * 38, e * 49, e * 39, e * 46, e * 41, e * 43);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 44, e * 57);
            T.bezierCurveTo(e * 54, e * 57, e * 54, e * 58, e * 55, e * 61);
            T.bezierCurveTo(e * 54, e * 63, e * 52, e * 64, e * 48, e * 65);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 20, e * 52);
            T.bezierCurveTo(e * 25, e * 51, e * 27, e * 50, e * 28, e * 54);
            T.bezierCurveTo(e * 27, e * 58, e * 24, e * 58, e * 22, e * 58);
            T.bezierCurveTo(e * 21, e * 55.5, e * 21, e * 55.5, e * 20, e * 53);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 61);
            T.bezierCurveTo(e * 37, e * 61, e * 39, e * 63, e * 39, e * 68);
            T.bezierCurveTo(e * 36, e * 68.5, e * 36, e * 68.5, e * 33, e * 69);
            T.bezierCurveTo(e * 30.5, e * 67.5, e * 30.5, e * 67.5, e * 28, e * 66);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 88, e * 45);
            T.bezierCurveTo(e * 90, e * 46.5, e * 90, e * 46.5, e * 92, e * 48);
            T.bezierCurveTo(e * 92, e * 50, e * 92, e * 50, e * 92, e * 52);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 96, e * 53);
            T.bezierCurveTo(e * 97.5, e * 55, e * 97.5, e * 55, e * 99, e * 57);
            T.bezierCurveTo(e * 97.5, e * 59.5, e * 97.5, e * 59.5, e * 96, e * 62);
            T.bezierCurveTo(e * 93.5, e * 60.5, e * 93.5, e * 60.5, e * 91, e * 59);
            T.bezierCurveTo(e * 91.5, e * 57, e * 91.5, e * 57, e * 92, e * 55);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 92, e * 71);
            T.bezierCurveTo(e * 94.5, e * 70.5, e * 94.5, e * 70.5, e * 97, e * 70);
            T.bezierCurveTo(e * 98.5, e * 72.5, e * 98.5, e * 72.5, e * 100, e * 75);
            T.bezierCurveTo(e * 97, e * 76.5, e * 97, e * 76.5, e * 94, e * 78);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 95, e * 82);
            T.bezierCurveTo(e * 96, e * 83, e * 96, e * 83, e * 97, e * 84);
            T.bezierCurveTo(e * 97, e * 85.5, e * 97, e * 85.5, e * 97, e * 87);
            T.bezierCurveTo(e * 93.5, e * 87.5, e * 93.5, e * 87.5, e * 90, e * 88);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 86, e * 72);
            T.bezierCurveTo(e * 89, e * 76, e * 88, e * 81, e * 85, e * 82);
            T.bezierCurveTo(e * 80, e * 80, e * 82, e * 78, e * 85, e * 72);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80, e * 86);
            T.bezierCurveTo(e * 84, e * 88, e * 86, e * 88, e * 85, e * 93);
            T.bezierCurveTo(e * 80, e * 96, e * 79, e * 96, e * 76, e * 91);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84, e * 46);
            T.bezierCurveTo(e * 93, e * 51, e * 91, e * 62, e * 80, e * 78);
            T.bezierCurveTo(e * 74, e * 86, e * 66, e * 90, e * 60, e * 86);
            T.bezierCurveTo(e * 55, e * 79, e * 57, e * 73, e * 67, e * 57);
            T.bezierCurveTo(e * 71, e * 51, e * 79, e * 44, e * 84, e * 46);
            T.closePath();
            se(T, i[5], i[6], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 76, e * 60);
            T.bezierCurveTo(e * 80, e * 66, e * 75, e * 74, e * 68, e * 74);
            T.bezierCurveTo(e * 60, e * 64, e * 68, e * 59, e * 76, e * 59);
            T.closePath();
            se(T, i[7], i[8], e * 5);
            return o;
        }
        function Nt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 70;
            var n = e * 90;
            var a = e * 4;
            var I = e * 5;
            o.width = r;
            o.height = n;
            T.save();
            T.translate(e * -80, e * -70 + I);
            T.globalAlpha = 0.5;
            T.beginPath();
            T.bezierCurveTo(e * 130, e * 79, e * 132, e * 86, e * 130, e * 93);
            T.bezierCurveTo(e * 128, e * 100, e * 121, e * 107, e * 120, e * 107);
            T.bezierCurveTo(e * 120, e * 107, e * 115, e * 98, e * 115, e * 92);
            T.bezierCurveTo(e * 115, e * 86, e * 119, e * 76, e * 127, e * 73);
            T.closePath();
            se(T, "#0d1b1c");
            T.restore();
            T.save();
            T.translate(e * -80, e * -70 + I);
            T.globalAlpha = 0.5;
            T.beginPath();
            T.bezierCurveTo(e * 112, e * 109, e * 111, e * 100, e * 106, e * 93);
            T.bezierCurveTo(e * 104, e * 90, e * 91, e * 87, e * 91, e * 87);
            T.bezierCurveTo(e * 91, e * 88, e * 91, e * 96, e * 94, e * 102);
            T.bezierCurveTo(e * 97, e * 108, e * 106, e * 112, e * 113, e * 112);
            T.closePath();
            se(T, "#0d1b1c");
            T.restore();
            T.save();
            T.translate(e * -80, e * -70 + I);
            T.globalAlpha = 0.5;
            T.beginPath();
            T.bezierCurveTo(e * 108, e * 120, e * 100, e * 119, e * 91, e * 127);
            T.bezierCurveTo(e * 83, e * 134, e * 82, e * 146, e * 83, e * 146);
            T.bezierCurveTo(e * 84, e * 146, e * 98, e * 142, e * 103, e * 138);
            T.bezierCurveTo(e * 107, e * 135, e * 110, e * 130, e * 112, e * 121);
            T.closePath();
            se(T, "#0d1b1c");
            T.restore();
            T.save();
            T.translate(e * 3, e * -93 + I);
            T.rotate(window.Math.PI / 5);
            T.globalAlpha = 0.5;
            T.beginPath();
            T.bezierCurveTo(e * 130, e * 79, e * 132, e * 86, e * 130, e * 93);
            T.bezierCurveTo(e * 128, e * 100, e * 121, e * 107, e * 120, e * 107);
            T.bezierCurveTo(e * 120, e * 107, e * 115, e * 98, e * 115, e * 92);
            T.bezierCurveTo(e * 115, e * 86, e * 119, e * 76, e * 127, e * 73);
            T.closePath();
            se(T, "#0d1b1c");
            T.restore();
            T.save();
            T.translate(e * -80, e * -70);
            T.globalAlpha = 1;
            T.beginPath();
            T.bezierCurveTo(e * 130, e * 79, e * 132, e * 86, e * 130, e * 93);
            T.bezierCurveTo(e * 128, e * 100, e * 121, e * 107, e * 120, e * 107);
            T.bezierCurveTo(e * 120, e * 107, e * 115, e * 98, e * 115, e * 92);
            T.bezierCurveTo(e * 115, e * 86, e * 119, e * 76, e * 127, e * 73);
            T.closePath();
            se(T, i[0], i[1], a);
            T.restore();
            T.save();
            T.translate(e * -80, e * -70);
            T.globalAlpha = 1;
            T.beginPath();
            T.bezierCurveTo(e * 112, e * 109, e * 111, e * 100, e * 106, e * 93);
            T.bezierCurveTo(e * 104, e * 90, e * 91, e * 87, e * 91, e * 87);
            T.bezierCurveTo(e * 91, e * 88, e * 91, e * 96, e * 94, e * 102);
            T.bezierCurveTo(e * 97, e * 108, e * 106, e * 112, e * 113, e * 112);
            T.closePath();
            se(T, i[0], i[1], a);
            T.restore();
            T.save();
            T.translate(e * -80, e * -70);
            T.globalAlpha = 1;
            T.beginPath();
            T.bezierCurveTo(e * 108, e * 120, e * 100, e * 119, e * 91, e * 127);
            T.bezierCurveTo(e * 83, e * 134, e * 82, e * 146, e * 83, e * 146);
            T.bezierCurveTo(e * 84, e * 146, e * 98, e * 142, e * 103, e * 138);
            T.bezierCurveTo(e * 107, e * 135, e * 110, e * 130, e * 112, e * 121);
            T.closePath();
            se(T, i[0], i[1], a);
            T.restore();
            T.save();
            T.translate(e * 3, e * -93);
            T.rotate(window.Math.PI / 5);
            T.globalAlpha = 1;
            T.beginPath();
            T.bezierCurveTo(e * 130, e * 79, e * 132, e * 86, e * 130, e * 93);
            T.bezierCurveTo(e * 128, e * 100, e * 121, e * 107, e * 120, e * 107);
            T.bezierCurveTo(e * 120, e * 107, e * 115, e * 98, e * 115, e * 92);
            T.bezierCurveTo(e * 115, e * 86, e * 119, e * 76, e * 127, e * 73);
            T.closePath();
            se(T, i[0], i[1], a);
            T.restore();
            return o;
        }
        function Dt(e, t, i, o, T, r, n, a, I, E, _ = 0) {
            var s = window.document.createElement("canvas");
            var R = s.getContext("2d");
            r = r ? r * e : 0;
            var h = window.Math.floor(e * i);
            R.font = h + "px Baloo Paaji";
            R.lineJoin = "round";
            a *= e;
            var d = n ? a * 2 : 0;
            if (I) {
            var u = window.Math.min(R.measureText(t).width + e * 2 + d, I);
            } else {
            u = R.measureText(t).width + e * 2 + d + _ * e * 2;
            }
            h = (h + r + _) * e + d;
            s.width = u;
            s.height = h;
            if (n) {
            R.fillStyle = n;
            Re(R, 0, 0, u, h, a * 2);
            R.fill();
            R.translate(a, a);
            }
            R.textBaseline = "middle";
            R.font = i + "px Baloo Paaji";
            R.lineJoin = "round";
            if (T) {
            R.beginPath();
            R.fillStyle = T;
            R.fillText(t, 0, h / 2 + r - d / 2, u);
            }
            R.beginPath();
            if (E) {
            R.strokeStyle = E;
            R.lineWidth = _;
            R.strokeText(t, _, (h - d) / 2, u);
            }
            R.fillStyle = o;
            R.fillText(t, _, (h - d) / 2, u);
            return s;
        }
        function mt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 220;
            var n = e * 230;
            var a = e * 100;
            var I = a / 4;
            var E = e * 20;
            o.width = r;
            o.height = n;
            T.translate(r / 2, n / 2 + E);
            T.globalAlpha = 0.5;
            ue(T, 7, a, I);
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, -E);
            ue(T, 7, a, I);
            se(T, i[1]);
            ue(T, 6, a * 0.65, I * 0.65);
            se(T, i[2]);
            return o;
        }
        function ct(e, t, i, o) {
            var T = window.document.createElement("canvas");
            var r = T.getContext("2d");
            var n = e * 220;
            var a = e * 220;
            var I = e * 100;
            var E = I / 4;
            T.width = n;
            T.height = a;
            r.translate(n / 2, a / 2);
            r.globalAlpha = t ? 0.5 : 1;
            if (!t) {
            r.translate(e * 0, e * -8);
            }
            ue(r, 7, I, E);
            se(r, t ? i[0] : i[1]);
            r.globalAlpha = 1;
            if (o == 0) {
            ue(r, 6, I * 0.65, E * 0.65);
            se(r, i[2]);
            } else if (o == 1) {
            r.translate(e * 20, e * 20);
            ue(r, 6, I * 0.45, E * 0.4);
            se(r, i[2]);
            }
            return T;
        }
        function vt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 120;
            var n = e * 150;
            var a = e * 60;
            var I = a / 4;
            var E = e * 15;
            o.width = r;
            o.height = n;
            T.save();
            T.translate(r / 2 + e * 0, n / 2 + e * 0 + E);
            T.rotate(window.Math.PI / 3);
            T.globalAlpha = 0.5;
            ue(T, 8, a, I);
            se(T, i[0]);
            T.restore();
            T.save();
            T.translate(r / 2 - e * 11, n / 2 + e * 12);
            T.globalAlpha = 1;
            T.rotate(window.Math.PI / 3);
            T.translate(0, -E);
            ue(T, 8, a, I);
            se(T, i[1]);
            T.restore();
            T.save();
            T.translate(r / 2 - e * 9, n / 2 - e * 12);
            T.rotate(window.Math.PI / 2.8);
            ue(T, 5, a * 0.5, I * 0.4);
            se(T, i[2]);
            T.restore();
            T.save();
            T.translate(r / 2 + e * 19, n / 2 + e * 5);
            T.rotate(window.Math.PI / 1);
            ue(T, 5, a * 0.5, I * 0.4);
            se(T, i[2]);
            T.restore();
            T.save();
            T.translate(r / 2 - e * 8, n / 2 + e * 20);
            T.rotate(window.Math.PI / 2.25);
            ue(T, 5, a * 0.5, I * 0.4);
            se(T, i[2]);
            T.restore();
            return o;
        }
        function Pt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 180;
            var n = e * 210;
            var a = (E = e * 60) / 4;
            var I = e * 20;
            o.width = r;
            o.height = n;
            T.save();
            T.translate(r / 2 - e * 0, n / 2 - e * 35 + I);
            T.rotate(window.Math.PI / -1.8);
            T.globalAlpha = 0.5;
            T.translate(e * 0, e * -20);
            ue(T, 5, E, a);
            se(T, i[0]);
            T.restore();
            T.save();
            T.translate(r / 2 + e * 10, n / 2 + e * 15 + I);
            T.rotate(window.Math.PI / 2);
            T.globalAlpha = 0.5;
            T.translate(e * 0, e * -20);
            ue(T, 5, E, a);
            se(T, i[0]);
            T.restore();
            T.save();
            T.translate(r / 2 - e * 50, n / 2 + e * 40 + I);
            T.rotate(window.Math.PI / 3);
            T.globalAlpha = 0.5;
            T.translate(0, e * -20);
            ue(T, 5, E, a);
            se(T, i[0]);
            T.restore();
            T.save();
            T.translate(r / 2 - e * 0, n / 2 - e * 35);
            T.rotate(window.Math.PI / -1.8);
            T.globalAlpha = 1;
            T.translate(e * 0, e * -20);
            ue(T, 5, E, a);
            se(T, i[1]);
            T.restore();
            T.save();
            T.translate(r / 2 + e * 10, n / 2 + e * 15);
            T.rotate(window.Math.PI / 2);
            T.globalAlpha = 1;
            T.translate(0, e * -20);
            ue(T, 5, E, a);
            se(T, i[1]);
            T.restore();
            T.save();
            T.translate(r / 2 - e * 50, n / 2 + e * 40);
            T.rotate(window.Math.PI / 3);
            T.globalAlpha = 1;
            T.translate(0, e * -20);
            ue(T, 5, E, a);
            se(T, i[1]);
            T.restore();
            var E;
            a = (E = e * 30) / 4;
            T.save();
            T.translate(r / 2 + e * 5, n / 2 - e * 20);
            T.rotate(window.Math.PI / -1.8);
            T.globalAlpha = 1;
            T.translate(0, e * -20);
            ue(T, 5, E, a);
            se(T, i[2]);
            T.restore();
            T.save();
            T.translate(r / 2 + e * 0, n / 2 + e * 10);
            T.rotate(window.Math.PI / 2);
            T.globalAlpha = 1;
            T.translate(0, e * -20);
            ue(T, 5, E, a);
            se(T, i[2]);
            T.restore();
            T.save();
            T.translate(r / 2 - e * 45, n / 2 + e * 35);
            T.rotate(window.Math.PI / 3);
            T.globalAlpha = 1;
            T.translate(0, e * -20);
            ue(T, 5, E, a);
            se(T, i[2]);
            T.restore();
            he(T, r / 2 - e * 7, n / 2 + e * 7, 5);
            se(T, i[2]);
            return o;
        }
        function yt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 140;
            var n = e * 150;
            var a = e * 10;
            var I = e * 4;
            o.width = r;
            o.height = n;
            T.translate(e * -50, e * -38 + a);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.bezierCurveTo(e * 160, e * 65, e * 160, e * 85, e * 152, e * 95);
            T.bezierCurveTo(e * 152, e * 95, e * 173, e * 94, e * 187, e * 102);
            T.bezierCurveTo(e * 187, e * 102, e * 180, e * 120, e * 155, e * 126);
            T.bezierCurveTo(e * 154, e * 126, e * 166, e * 138, e * 169, e * 148);
            T.bezierCurveTo(e * 169, e * 148, e * 148, e * 152, e * 133, e * 140);
            T.bezierCurveTo(e * 133, e * 140, e * 134, e * 160, e * 122, e * 175);
            T.bezierCurveTo(e * 122, e * 175, e * 107, e * 162, e * 107, e * 144);
            T.bezierCurveTo(e * 107, e * 144, e * 98, e * 164, e * 73, e * 167);
            T.bezierCurveTo(e * 73, e * 167, e * 72, e * 134, e * 90, e * 127);
            T.bezierCurveTo(e * 90, e * 127, e * 70, e * 134, e * 55, e * 123);
            T.bezierCurveTo(e * 55, e * 123, e * 58, e * 115, e * 75, e * 104);
            T.bezierCurveTo(e * 75, e * 104, e * 66, e * 96, e * 61, e * 77);
            T.bezierCurveTo(e * 61, e * 77, e * 83, e * 74, e * 102, e * 89);
            T.bezierCurveTo(e * 102, e * 89, e * 92, e * 66, e * 110, e * 41);
            T.bezierCurveTo(e * 111, e * 40, e * 130, e * 54, e * 130, e * 82);
            T.bezierCurveTo(e * 130, e * 82, e * 143, e * 67, e * 159, e * 65);
            T.closePath();
            se(T, i[0]);
            T.translate(0, 0 - a);
            T.globalAlpha = 1;
            T.beginPath();
            T.bezierCurveTo(e * 160, e * 65, e * 160, e * 85, e * 152, e * 95);
            T.bezierCurveTo(e * 152, e * 95, e * 173, e * 94, e * 187, e * 102);
            T.bezierCurveTo(e * 187, e * 102, e * 180, e * 120, e * 155, e * 126);
            T.bezierCurveTo(e * 154, e * 126, e * 166, e * 138, e * 169, e * 148);
            T.bezierCurveTo(e * 169, e * 148, e * 148, e * 152, e * 133, e * 140);
            T.bezierCurveTo(e * 133, e * 140, e * 134, e * 160, e * 122, e * 175);
            T.bezierCurveTo(e * 122, e * 175, e * 107, e * 162, e * 107, e * 144);
            T.bezierCurveTo(e * 107, e * 144, e * 98, e * 164, e * 73, e * 167);
            T.bezierCurveTo(e * 73, e * 167, e * 72, e * 134, e * 90, e * 127);
            T.bezierCurveTo(e * 90, e * 127, e * 70, e * 134, e * 55, e * 123);
            T.bezierCurveTo(e * 55, e * 123, e * 58, e * 115, e * 75, e * 104);
            T.bezierCurveTo(e * 75, e * 104, e * 66, e * 96, e * 61, e * 77);
            T.bezierCurveTo(e * 61, e * 77, e * 83, e * 74, e * 102, e * 89);
            T.bezierCurveTo(e * 102, e * 89, e * 92, e * 66, e * 110, e * 41);
            T.bezierCurveTo(e * 111, e * 40, e * 130, e * 54, e * 130, e * 82);
            T.bezierCurveTo(e * 130, e * 82, e * 143, e * 67, e * 159, e * 65);
            T.closePath();
            se(T, i[1], i[2], I);
            return o;
        }
        function pt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 18;
            var n = e * 18;
            o.width = r;
            o.height = n;
            var a = e * 9;
            var I = e * 9;
            var E = e * 8;
            T.save();
            T.translate(a, I);
            T.globalAlpha = 1;
            he(T, 0, 0, E);
            se(T, i[0]);
            E = e * 3;
            a = 0;
            I = e * -3;
            T.translate(a, I);
            T.globalAlpha = 1;
            he(T, 0, 0, E);
            se(T, i[1]);
            T.restore();
            return o;
        }
        function gt(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 234;
            i.height = e * 183;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 76, e * 25);
            o.bezierCurveTo(e * 150, e * 3, e * 181, e * 22, e * 203, e * 41);
            o.bezierCurveTo(e * 225, e * 63, e * 225, e * 105, e * 198, e * 133);
            o.bezierCurveTo(e * 179, e * 157, e * 134, e * 178, e * 81, e * 164);
            o.bezierCurveTo(e * 19, e * 148, e * 6, e * 95, e * 21, e * 66);
            o.bezierCurveTo(e * 34, e * 39, e * 52, e * 33, e * 75, e * 25);
            o.closePath();
            se(o, t[0], t[0], e * 4);
            return i;
        }
        function Mt(e, t, i, o, T) {
            var r = window.document.createElement("canvas");
            var n = r.getContext("2d");
            if (o == 0) {
            var a = e * 270;
            var I = e * 250;
            r.width = a;
            r.height = I;
            n.beginPath();
            n.moveTo(e * 140, e * 3);
            n.translate(e * -25, e * -20);
            n.bezierCurveTo(e * 218, e * 31, e * 251, e * 61, e * 265, e * 85);
            n.bezierCurveTo(e * 278, e * 108, e * 295, e * 160, e * 285, e * 195);
            n.bezierCurveTo(e * 271, e * 242, e * 213, e * 268, e * 188, e * 266);
            n.bezierCurveTo(e * 139, e * 262, e * 70, e * 244, e * 47, e * 204);
            n.bezierCurveTo(e * 20, e * 158, e * 35, e * 78, e * 59, e * 56);
            n.bezierCurveTo(e * 90, e * 28, e * 124, e * 23, e * 140, e * 23);
            n.closePath();
            se(n, i[0]);
            } else if (o == 1) {
            a = e * 430;
            I = e * 350;
            r.width = a;
            r.height = I;
            n.beginPath();
            n.moveTo(e * 180, e * 5);
            n.translate(e * -30, e * -60);
            n.bezierCurveTo(e * 283, e * 60, e * 265, e * 163, e * 335, e * 206);
            n.bezierCurveTo(e * 376, e * 231, e * 492, e * 299, e * 434, e * 357);
            n.bezierCurveTo(e * 371, e * 421, e * 289, e * 394, e * 255, e * 386);
            n.bezierCurveTo(e * 218, e * 377, e * 91, e * 359, e * 50, e * 272);
            n.bezierCurveTo(e * 12, e * 192, e * 107, e * 75, e * 178, e * 69);
            n.closePath();
            se(n, i[0]);
            } else if (o == 2) {
            a = e * 400;
            I = e * 300;
            r.width = a;
            r.height = I;
            n.beginPath();
            n.moveTo(e * 80, e * 52);
            n.translate(e * -40, e * -30);
            n.bezierCurveTo(e * 124, e * 77, e * 241, e * 22, e * 311, e * 65);
            n.bezierCurveTo(e * 352, e * 90, e * 404, e * 176, e * 346, e * 234);
            n.bezierCurveTo(e * 283, e * 298, e * 179, e * 299, e * 145, e * 291);
            n.bezierCurveTo(e * 108, e * 282, e * 100, e * 239, e * 63, e * 205);
            n.bezierCurveTo(e * 37, e * 181, e * 45, e * 131, e * 80, e * 107);
            n.closePath();
            se(n, i[0]);
            }
            return r;
        }
        function Lt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * t * 2;
            var n = e * t * 2;
            var a = r / 2;
            var I = n / 2;
            o.width = r;
            o.height = n;
            T.translate(a, I);
            he(T, 0, 0, t * e);
            se(T, i);
            return o;
        }
        function Ht(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 373;
            o.height = e * 314;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 184.048583984375, e * 69.1805419921875);
            Re(T, e * -40, e * -28.5, e * 80, e * 57, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 185.048583984375, e * 61.6805419921875);
            T.bezierCurveTo(e * 145.048583984375, e * 59.6805419921875, e * 138.048583984375, e * 41.6805419921875, e * 148.048583984375, e * 33.6805419921875);
            T.bezierCurveTo(e * 169.048583984375, e * 17.6805419921875, e * 194.048583984375, e * 20.6805419921875, e * 210.048583984375, e * 27.6805419921875);
            T.bezierCurveTo(e * 234.048583984375, e * 40.6805419921875, e * 225.048583984375, e * 57.6805419921875, e * 186.048583984375, e * 61.6805419921875);
            T.closePath();
            se(T, i[0], i[0], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 224.048583984375, e * 56.6805419921875);
            T.bezierCurveTo(e * 326.048583984375, e * 69.6805419921875, e * 363.048583984375, e * 148.6805419921875, e * 349.048583984375, e * 206.6805419921875);
            T.bezierCurveTo(e * 329.048583984375, e * 278.6805419921875, e * 252.048583984375, e * 283.6805419921875, e * 206.048583984375, e * 275.6805419921875);
            T.bezierCurveTo(e * 206.548583984375, e * 266.6805419921875, e * 206.548583984375, e * 266.6805419921875, e * 207.048583984375, e * 257.6805419921875);
            T.bezierCurveTo(e * 276.048583984375, e * 268.6805419921875, e * 308.048583984375, e * 239.6805419921875, e * 323.048583984375, e * 208.6805419921875);
            T.bezierCurveTo(e * 352.048583984375, e * 145.6805419921875, e * 292.048583984375, e * 86.6805419921875, e * 223.048583984375, e * 74.6805419921875);
            T.closePath();
            se(T, i[0], i[0], e * 6);
            T.save();
            T.translate(e * 183.548583984375, e * 119.6805419921875);
            Re(T, e * -121.5, e * -45, e * 243, e * 90, e * 40);
            T.restore();
            se(T, i[0], i[0], e * 6);
            T.save();
            T.translate(e * 183.048583984375, e * 155.6805419921875);
            Re(T, e * -121, e * -52, e * 242, e * 104, e * 40);
            T.restore();
            se(T, i[0], i[0], e * 6);
            T.save();
            T.translate(e * 183.048583984375, e * 205.1805419921875);
            Re(T, e * -121, e * -50.5, e * 242, e * 101, e * 40);
            T.restore();
            se(T, i[0], i[0], e * 6);
            T.save();
            T.translate(e * 185.048583984375, e * 204.1805419921875);
            Re(T, e * -100, e * -34.5, e * 200, e * 69, e * 40);
            T.restore();
            se(T, i[0], i[0], e * 6);
            he(T, e * 185.048583984375, e * 257.6805419921875, e * 27.018512172212592);
            se(T, i[0], i[0], e * 6);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 224.048583984375, e * 56.6805419921875);
            T.bezierCurveTo(e * 326.048583984375, e * 69.6805419921875, e * 363.048583984375, e * 148.6805419921875, e * 349.048583984375, e * 206.6805419921875);
            T.bezierCurveTo(e * 329.048583984375, e * 278.6805419921875, e * 252.048583984375, e * 283.6805419921875, e * 206.048583984375, e * 275.6805419921875);
            T.bezierCurveTo(e * 206.548583984375, e * 266.6805419921875, e * 206.548583984375, e * 266.6805419921875, e * 207.048583984375, e * 257.6805419921875);
            T.bezierCurveTo(e * 276.048583984375, e * 268.6805419921875, e * 308.048583984375, e * 239.6805419921875, e * 323.048583984375, e * 208.6805419921875);
            T.bezierCurveTo(e * 352.048583984375, e * 145.6805419921875, e * 292.048583984375, e * 86.6805419921875, e * 223.048583984375, e * 74.6805419921875);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            T.save();
            T.translate(e * 184.048583984375, e * 69.1805419921875);
            Re(T, e * -40, e * -28.5, e * 80, e * 57, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 185.048583984375, e * 61.6805419921875);
            T.bezierCurveTo(e * 145.048583984375, e * 59.6805419921875, e * 138.048583984375, e * 41.6805419921875, e * 148.048583984375, e * 33.6805419921875);
            T.bezierCurveTo(e * 169.048583984375, e * 17.6805419921875, e * 194.048583984375, e * 20.6805419921875, e * 210.048583984375, e * 27.6805419921875);
            T.bezierCurveTo(e * 234.048583984375, e * 40.6805419921875, e * 225.048583984375, e * 57.6805419921875, e * 186.048583984375, e * 61.6805419921875);
            T.closePath();
            se(T, i[1], i[2], e * 6);
            T.save();
            T.translate(e * 183.548583984375, e * 119.6805419921875);
            Re(T, e * -121.5, e * -45, e * 243, e * 90, e * 40);
            T.restore();
            se(T, i[5], i[4], e * 6);
            T.save();
            T.translate(e * 183.048583984375, e * 155.6805419921875);
            Re(T, e * -121, e * -52, e * 242, e * 104, e * 40);
            T.restore();
            se(T, i[3], i[4], e * 6);
            T.save();
            T.translate(e * 183.048583984375, e * 205.1805419921875);
            Re(T, e * -121, e * -50.5, e * 242, e * 101, e * 40);
            T.restore();
            se(T, i[6], i[4], e * 6);
            T.globalCompositeOperation = "destination-out";
            T.save();
            T.translate(e * 185.048583984375, e * 204.1805419921875);
            Re(T, e * -100, e * -34.5, e * 200, e * 69, e * 40);
            T.restore();
            se(T, i[7], i[8], e * 6);
            T.globalCompositeOperation = "source-over";
            T.globalAlpha = 0.5;
            T.save();
            T.translate(e * 185.048583984375, e * 204.1805419921875);
            Re(T, e * -100, e * -34.5, e * 200, e * 69, e * 40);
            T.restore();
            se(T, i[7], i[8], e * 6);
            T.globalAlpha = 1;
            T.save();
            he(T, e * 185.048583984375, e * 257.6805419921875, e * 27.018512172212592);
            se(T, i[3], i[4], e * 6);
            T.restore();
            return o;
        }
        function wt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 220;
            o.height = e * 180;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * -90, e * -150);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 104, e * 237.8000030517578);
            T.bezierCurveTo(e * 110, e * 237.8000030517578, e * 110, e * 237.8000030517578, e * 116, e * 237.8000030517578);
            T.bezierCurveTo(e * 116, e * 241.8000030517578, e * 116, e * 241.8000030517578, e * 116, e * 245.8000030517578);
            T.bezierCurveTo(e * 115, e * 245.3000030517578, e * 115, e * 245.3000030517578, e * 114, e * 244.8000030517578);
            T.bezierCurveTo(e * 109.5, e * 244.8000030517578, e * 109.5, e * 244.8000030517578, e * 105, e * 244.8000030517578);
            T.closePath();
            se(T, i[5], i[5], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115, e * 211.20000457763672);
            T.bezierCurveTo(e * 106, e * 216.20000457763672, e * 101, e * 234.20000457763672, e * 102, e * 241.20000457763672);
            T.bezierCurveTo(e * 102, e * 260.2000045776367, e * 115, e * 269.2000045776367, e * 115, e * 269.2000045776367);
            T.bezierCurveTo(e * 116, e * 265.2000045776367, e * 115.5, e * 265.2000045776367, e * 116, e * 261.2000045776367);
            T.bezierCurveTo(e * 112, e * 264, e * 108, e * 254, e * 106, e * 242);
            T.bezierCurveTo(e * 105, e * 232, e * 110, e * 222, e * 115, e * 218);
            T.bezierCurveTo(e * 116, e * 216.75, e * 115.5, e * 217.375, e * 116, e * 216.75);
            T.closePath();
            se(T, i[5], i[5], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 120, e * 207);
            T.bezierCurveTo(e * 115, e * 206, e * 114, e * 209, e * 114, e * 211);
            T.bezierCurveTo(e * 114, e * 268, e * 114, e * 241, e * 114, e * 271);
            T.bezierCurveTo(e * 115, e * 276, e * 118, e * 276, e * 120, e * 276);
            T.bezierCurveTo(e * 122, e * 273, e * 120.5, e * 274.5, e * 121, e * 273);
            T.bezierCurveTo(e * 121, e * 241, e * 121, e * 241, e * 121, e * 209);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 284, e * 238);
            T.bezierCurveTo(e * 289.5, e * 238, e * 289.5, e * 238, e * 295, e * 238);
            T.bezierCurveTo(e * 295, e * 241.5, e * 295, e * 241.5, e * 295, e * 245);
            T.bezierCurveTo(e * 289.5, e * 245, e * 289.5, e * 245, e * 284, e * 245);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 283, e * 211);
            T.bezierCurveTo(e * 293, e * 216, e * 297, e * 231, e * 297, e * 241);
            T.bezierCurveTo(e * 298, e * 254, e * 290, e * 265, e * 284, e * 269);
            T.bezierCurveTo(e * 283, e * 266, e * 283.5, e * 266, e * 283, e * 263);
            T.bezierCurveTo(e * 290, e * 260, e * 292, e * 251, e * 293, e * 242);
            T.bezierCurveTo(e * 292, e * 223, e * 289, e * 224, e * 284, e * 218);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 280, e * 206);
            T.bezierCurveTo(e * 284, e * 206, e * 285, e * 208, e * 285, e * 211);
            T.bezierCurveTo(e * 285, e * 241.5, e * 285, e * 241.5, e * 285, e * 272);
            T.bezierCurveTo(e * 284, e * 275, e * 284, e * 275, e * 280, e * 275);
            T.bezierCurveTo(e * 279, e * 273.5, e * 279, e * 273.5, e * 278, e * 272);
            T.bezierCurveTo(e * 278, e * 240.5, e * 278, e * 240.5, e * 278, e * 209);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 138, e * 298.40000915527344);
            T.bezierCurveTo(e * 141, e * 311.40000915527344, e * 151, e * 314.40000915527344, e * 162, e * 316.40000915527344);
            T.bezierCurveTo(e * 224, e * 316.40000915527344, e * 200, e * 315.90000915527344, e * 238, e * 315.40000915527344);
            T.bezierCurveTo(e * 254, e * 316.40000915527344, e * 261, e * 306.40000915527344, e * 264, e * 298.40000915527344);
            T.bezierCurveTo(e * 255, e * 304.40000915527344, e * 250, e * 306.40000915527344, e * 244, e * 306.40000915527344);
            T.bezierCurveTo(e * 201, e * 306.90000915527344, e * 201, e * 306.90000915527344, e * 158, e * 307.40000915527344);
            T.bezierCurveTo(e * 150, e * 306.40000915527344, e * 148, e * 306.40000915527344, e * 139, e * 300.40000915527344);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 161, e * 177.5999984741211);
            T.bezierCurveTo(e * 130, e * 175.5999984741211, e * 123, e * 190.5999984741211, e * 122, e * 205.5999984741211);
            T.bezierCurveTo(e * 121, e * 277.5999984741211, e * 122, e * 242.5999984741211, e * 122, e * 279.5999984741211);
            T.bezierCurveTo(e * 128, e * 297.5999984741211, e * 137, e * 299.5999984741211, e * 143, e * 300.5999984741211);
            T.bezierCurveTo(e * 163, e * 301.0999984741211, e * 163, e * 301.0999984741211, e * 183, e * 301.5999984741211);
            T.bezierCurveTo(e * 150, e * 300.5999984741211, e * 135, e * 290.5999984741211, e * 134, e * 267.5999984741211);
            T.bezierCurveTo(e * 133, e * 245.5999984741211, e * 146, e * 235.5999984741211, e * 164, e * 235.5999984741211);
            T.bezierCurveTo(e * 206, e * 236.0999984741211, e * 206, e * 236.0999984741211, e * 248, e * 236.5999984741211);
            T.bezierCurveTo(e * 266, e * 243.5999984741211, e * 268, e * 259.5999984741211, e * 267, e * 266.5999984741211);
            T.bezierCurveTo(e * 266, e * 288.5999984741211, e * 251, e * 294.5999984741211, e * 244, e * 297.5999984741211);
            T.bezierCurveTo(e * 228.5, e * 299.5999984741211, e * 228.5, e * 299.5999984741211, e * 213, e * 301.5999984741211);
            T.bezierCurveTo(e * 236, e * 301.0999984741211, e * 236, e * 301.0999984741211, e * 259, e * 300.5999984741211);
            T.bezierCurveTo(e * 272, e * 295.5999984741211, e * 277, e * 288.5999984741211, e * 278, e * 271.5999984741211);
            T.bezierCurveTo(e * 277.5, e * 236.5999984741211, e * 277.5, e * 236.5999984741211, e * 277, e * 201.5999984741211);
            T.bezierCurveTo(e * 276, e * 186.5999984741211, e * 265, e * 178.5999984741211, e * 254, e * 177.5999984741211);
            T.bezierCurveTo(e * 247.5, e * 177.5999984741211, e * 247.5, e * 177.5999984741211, e * 241, e * 177.5999984741211);
            T.bezierCurveTo(e * 255, e * 202.5999984741211, e * 214, e * 217.5999984741211, e * 201, e * 215.5999984741211);
            T.bezierCurveTo(e * 170, e * 215.5999984741211, e * 152, e * 197.5999984741211, e * 161, e * 178.5999984741211);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 162, e * 175.5999984741211);
            T.bezierCurveTo(e * 153, e * 176.0999984741211, e * 153, e * 176.0999984741211, e * 144, e * 176.5999984741211);
            T.bezierCurveTo(e * 125, e * 178.5999984741211, e * 121, e * 196.5999984741211, e * 121, e * 207.5999984741211);
            T.bezierCurveTo(e * 121, e * 243.20000076293945, e * 121, e * 243.20000076293945, e * 121, e * 278.8000030517578);
            T.bezierCurveTo(e * 126, e * 298.8000030517578, e * 137, e * 300.8000030517578, e * 146, e * 302.8000030517578);
            T.bezierCurveTo(e * 200.5, e * 302.8000030517578, e * 200.5, e * 302.8000030517578, e * 255, e * 302.8000030517578);
            T.bezierCurveTo(e * 271, e * 301.8000030517578, e * 279, e * 288.8000030517578, e * 279, e * 273.8000030517578);
            T.bezierCurveTo(e * 279, e * 236.8000030517578, e * 279, e * 236.8000030517578, e * 279, e * 199.8000030517578);
            T.bezierCurveTo(e * 274, e * 178.8000030517578, e * 263, e * 177.8000030517578, e * 255, e * 175.8000030517578);
            T.bezierCurveTo(e * 248, e * 175.8000030517578, e * 248, e * 175.8000030517578, e * 241, e * 175.8000030517578);
            T.bezierCurveTo(e * 240, e * 175.8000030517578, e * 240, e * 175.8000030517578, e * 239, e * 175.8000030517578);
            T.bezierCurveTo(e * 254, e * 200.8000030517578, e * 222, e * 211.8000030517578, e * 202, e * 212.8000030517578);
            T.bezierCurveTo(e * 168, e * 213.8000030517578, e * 151, e * 190.8000030517578, e * 163, e * 176.8000030517578);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 198, e * 161.4000015258789);
            T.bezierCurveTo(e * 198, e * 186.9000015258789, e * 198, e * 186.9000015258789, e * 198, e * 212.4000015258789);
            T.bezierCurveTo(e * 201, e * 212.4000015258789, e * 201, e * 212.4000015258789, e * 204, e * 212.4000015258789);
            T.bezierCurveTo(e * 204, e * 186.9000015258789, e * 204, e * 186.9000015258789, e * 204, e * 161.4000015258789);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 161, e * 194);
            T.bezierCurveTo(e * 188, e * 169, e * 231, e * 179, e * 241, e * 194);
            T.bezierCurveTo(e * 239.5, e * 196, e * 239.5, e * 196, e * 238, e * 198);
            T.bezierCurveTo(e * 221, e * 179, e * 182, e * 182, e * 165, e * 198);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 157, e * 188.80000019073486);
            T.bezierCurveTo(e * 162, e * 150.80000019073486, e * 241, e * 150.80000019073486, e * 245, e * 188.80000019073486);
            T.bezierCurveTo(e * 242, e * 224.80000019073486, e * 162, e * 228.80000019073486, e * 157, e * 188.80000019073486);
            T.bezierCurveTo(e * 159, e * 188.80000019073486, e * 159, e * 188.80000019073486, e * 161, e * 188.80000019073486);
            T.bezierCurveTo(e * 168, e * 216.80000019073486, e * 231, e * 218.80000019073486, e * 241, e * 188.80000019073486);
            T.bezierCurveTo(e * 236, e * 156.80000019073486, e * 169, e * 152.80000019073486, e * 161, e * 188.80000019073486);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 156, e * 188);
            T.bezierCurveTo(e * 160, e * 164, e * 183, e * 159, e * 201, e * 158);
            T.bezierCurveTo(e * 232, e * 159, e * 244, e * 174, e * 246, e * 188);
            T.bezierCurveTo(e * 245, e * 212, e * 213, e * 219, e * 201, e * 218);
            T.bezierCurveTo(e * 181, e * 221, e * 158, e * 207, e * 156, e * 190);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 162, e * 189);
            T.bezierCurveTo(e * 166, e * 170, e * 185, e * 165, e * 201, e * 164);
            T.bezierCurveTo(e * 227, e * 165, e * 240, e * 178, e * 239, e * 188);
            T.bezierCurveTo(e * 239, e * 204, e * 210, e * 210, e * 201, e * 210);
            T.bezierCurveTo(e * 182, e * 211, e * 166, e * 200, e * 162, e * 190);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 131, e * 262);
            T.bezierCurveTo(e * 136, e * 241, e * 144, e * 236, e * 158, e * 233);
            T.bezierCurveTo(e * 200.5, e * 233, e * 229, e * 232, e * 243, e * 233);
            T.bezierCurveTo(e * 259, e * 235, e * 267, e * 248, e * 269, e * 260);
            T.bezierCurveTo(e * 269, e * 266.5, e * 269, e * 266.5, e * 269, e * 273);
            T.bezierCurveTo(e * 265, e * 290, e * 251, e * 297, e * 242, e * 298);
            T.bezierCurveTo(e * 202, e * 298, e * 202, e * 298, e * 162, e * 298);
            T.bezierCurveTo(e * 148, e * 298, e * 136, e * 289, e * 132, e * 273);
            T.bezierCurveTo(e * 131.5, e * 268, e * 131.5, e * 268, e * 131, e * 263);
            T.bezierCurveTo(e * 135, e * 263, e * 135, e * 263, e * 139, e * 263);
            T.bezierCurveTo(e * 139, e * 281, e * 151, e * 287, e * 160, e * 290);
            T.bezierCurveTo(e * 200.5, e * 290, e * 200.5, e * 290, e * 241, e * 290);
            T.bezierCurveTo(e * 252, e * 290, e * 257, e * 281, e * 262, e * 271);
            T.bezierCurveTo(e * 261.5, e * 267, e * 261.5, e * 267, e * 261, e * 263);
            T.bezierCurveTo(e * 260, e * 249, e * 251, e * 242, e * 241, e * 241);
            T.bezierCurveTo(e * 240.5, e * 240.5, e * 240.5, e * 240.5, e * 240, e * 240);
            T.bezierCurveTo(e * 200, e * 240, e * 200, e * 240, e * 160, e * 240);
            T.bezierCurveTo(e * 145, e * 244, e * 142, e * 250, e * 139, e * 264);
            T.closePath();
            se(T, i[4], i[4], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 130, e * 264);
            T.bezierCurveTo(e * 132, e * 244, e * 144, e * 235, e * 157, e * 232);
            T.bezierCurveTo(e * 245, e * 232, e * 201, e * 232, e * 245, e * 232);
            T.bezierCurveTo(e * 264, e * 235, e * 269, e * 251, e * 270, e * 264);
            T.bezierCurveTo(e * 272, e * 291, e * 248, e * 299, e * 242, e * 299);
            T.bezierCurveTo(e * 200, e * 299, e * 200, e * 299, e * 158, e * 299);
            T.bezierCurveTo(e * 139, e * 298, e * 130, e * 276, e * 130, e * 265);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 140, e * 265.33333587646484);
            T.bezierCurveTo(e * 141, e * 250.33333587646484, e * 148, e * 244.33333587646484, e * 160, e * 241.33333587646484);
            T.bezierCurveTo(e * 200, e * 241.33333587646484, e * 200, e * 241.33333587646484, e * 240, e * 241.33333587646484);
            T.bezierCurveTo(e * 256, e * 243.33333587646484, e * 260, e * 255.33333587646484, e * 260, e * 265.33333587646484);
            T.bezierCurveTo(e * 261, e * 281.33333587646484, e * 247, e * 289.33333587646484, e * 240, e * 289.33333587646484);
            T.bezierCurveTo(e * 161, e * 289.33333587646484, e * 200.5, e * 289.33333587646484, e * 161, e * 289.33333587646484);
            T.bezierCurveTo(e * 149, e * 288.33333587646484, e * 142, e * 278.33333587646484, e * 140, e * 266.33333587646484);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.globalAlpha = 0.5;
            T.scale(1, 1);
            T.translate(e * 105, e * 155);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 59.27557373046875, e * 20.406280517578125);
            T.bezierCurveTo(e * 74.27557373046875, e * 5.406280517578125, e * 90.27557373046875, e * 6.406280517578125, e * 99.27557373046875, e * 5.406280517578125);
            T.bezierCurveTo(e * 120.27557373046875, e * 5.406280517578125, e * 126.27557373046875, e * 10.406280517578125, e * 136.27557373046875, e * 20.406280517578125);
            T.bezierCurveTo(e * 157.77557373046875, e * 37.906280517578125, e * 157.77557373046875, e * 37.906280517578125, e * 179.27557373046875, e * 55.406280517578125);
            T.bezierCurveTo(e * 190.27557373046875, e * 63.406280517578125, e * 192.27557373046875, e * 77.40628051757812, e * 189.27557373046875, e * 91.40628051757812);
            T.bezierCurveTo(e * 183.27557373046875, e * 108.40628051757812, e * 176.27557373046875, e * 110.40628051757812, e * 169.27557373046875, e * 118.40628051757812);
            T.bezierCurveTo(e * 152.27557373046875, e * 133.40628051757812, e * 152.27557373046875, e * 133.40628051757812, e * 135.27557373046875, e * 148.40628051757812);
            T.bezierCurveTo(e * 87.27557373046875, e * 143.40628051757812, e * 87.27557373046875, e * 143.40628051757812, e * 39.27557373046875, e * 138.40628051757812);
            T.bezierCurveTo(e * 26.77557373046875, e * 123.40628051757812, e * 26.77557373046875, e * 123.40628051757812, e * 14.27557373046875, e * 108.40628051757812);
            T.bezierCurveTo(e * 2.27557373046875, e * 95.40628051757812, e * 2.27557373046875, e * 92.40628051757812, e * 3.27557373046875, e * 83.40628051757812);
            T.bezierCurveTo(e * 4.27557373046875, e * 63.406280517578125, e * 12.27557373046875, e * 60.406280517578125, e * 24.27557373046875, e * 40.406280517578125);
            T.closePath();
            se(T, i[5], i[5], e * 4);
            T.globalAlpha = 1;
            T.translate(e * -110, e * -155);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 104, e * 237.8000030517578);
            T.bezierCurveTo(e * 110, e * 237.8000030517578, e * 110, e * 237.8000030517578, e * 116, e * 237.8000030517578);
            T.bezierCurveTo(e * 116, e * 241.8000030517578, e * 116, e * 241.8000030517578, e * 116, e * 245.8000030517578);
            T.bezierCurveTo(e * 115, e * 245.3000030517578, e * 115, e * 245.3000030517578, e * 114, e * 244.8000030517578);
            T.bezierCurveTo(e * 109.5, e * 244.8000030517578, e * 109.5, e * 244.8000030517578, e * 105, e * 244.8000030517578);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115, e * 211.20000457763672);
            T.bezierCurveTo(e * 106, e * 216.20000457763672, e * 101, e * 234.20000457763672, e * 102, e * 241.20000457763672);
            T.bezierCurveTo(e * 102, e * 260.2000045776367, e * 115, e * 269.2000045776367, e * 115, e * 269.2000045776367);
            T.bezierCurveTo(e * 116, e * 265.2000045776367, e * 115.5, e * 265.2000045776367, e * 116, e * 261.2000045776367);
            T.bezierCurveTo(e * 112, e * 264, e * 108, e * 254, e * 106, e * 242);
            T.bezierCurveTo(e * 105, e * 232, e * 110, e * 222, e * 115, e * 218);
            T.bezierCurveTo(e * 116, e * 216.75, e * 115.5, e * 217.375, e * 116, e * 216.75);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 120, e * 207);
            T.bezierCurveTo(e * 115, e * 206, e * 114, e * 209, e * 114, e * 211);
            T.bezierCurveTo(e * 114, e * 268, e * 114, e * 241, e * 114, e * 271);
            T.bezierCurveTo(e * 115, e * 276, e * 118, e * 276, e * 120, e * 276);
            T.bezierCurveTo(e * 122, e * 273, e * 120.5, e * 274.5, e * 121, e * 273);
            T.bezierCurveTo(e * 121, e * 241, e * 121, e * 241, e * 121, e * 209);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 284, e * 238);
            T.bezierCurveTo(e * 289.5, e * 238, e * 289.5, e * 238, e * 295, e * 238);
            T.bezierCurveTo(e * 295, e * 241.5, e * 295, e * 241.5, e * 295, e * 245);
            T.bezierCurveTo(e * 289.5, e * 245, e * 289.5, e * 245, e * 284, e * 245);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 283, e * 211);
            T.bezierCurveTo(e * 293, e * 216, e * 297, e * 231, e * 297, e * 241);
            T.bezierCurveTo(e * 298, e * 254, e * 290, e * 265, e * 284, e * 269);
            T.bezierCurveTo(e * 283, e * 266, e * 283.5, e * 266, e * 283, e * 263);
            T.bezierCurveTo(e * 290, e * 260, e * 292, e * 251, e * 293, e * 242);
            T.bezierCurveTo(e * 292, e * 223, e * 289, e * 224, e * 284, e * 218);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 280, e * 206);
            T.bezierCurveTo(e * 284, e * 206, e * 285, e * 208, e * 285, e * 211);
            T.bezierCurveTo(e * 285, e * 241.5, e * 285, e * 241.5, e * 285, e * 272);
            T.bezierCurveTo(e * 284, e * 275, e * 284, e * 275, e * 280, e * 275);
            T.bezierCurveTo(e * 279, e * 273.5, e * 279, e * 273.5, e * 278, e * 272);
            T.bezierCurveTo(e * 278, e * 240.5, e * 278, e * 240.5, e * 278, e * 209);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 138, e * 298.40000915527344);
            T.bezierCurveTo(e * 141, e * 311.40000915527344, e * 151, e * 314.40000915527344, e * 162, e * 316.40000915527344);
            T.bezierCurveTo(e * 224, e * 316.40000915527344, e * 200, e * 315.90000915527344, e * 238, e * 315.40000915527344);
            T.bezierCurveTo(e * 254, e * 316.40000915527344, e * 261, e * 306.40000915527344, e * 264, e * 298.40000915527344);
            T.bezierCurveTo(e * 255, e * 304.40000915527344, e * 250, e * 306.40000915527344, e * 244, e * 306.40000915527344);
            T.bezierCurveTo(e * 201, e * 306.90000915527344, e * 201, e * 306.90000915527344, e * 158, e * 307.40000915527344);
            T.bezierCurveTo(e * 150, e * 306.40000915527344, e * 148, e * 306.40000915527344, e * 139, e * 300.40000915527344);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 161, e * 177.5999984741211);
            T.bezierCurveTo(e * 130, e * 175.5999984741211, e * 123, e * 190.5999984741211, e * 122, e * 205.5999984741211);
            T.bezierCurveTo(e * 121, e * 277.5999984741211, e * 122, e * 242.5999984741211, e * 122, e * 279.5999984741211);
            T.bezierCurveTo(e * 128, e * 297.5999984741211, e * 137, e * 299.5999984741211, e * 143, e * 300.5999984741211);
            T.bezierCurveTo(e * 163, e * 301.0999984741211, e * 163, e * 301.0999984741211, e * 183, e * 301.5999984741211);
            T.bezierCurveTo(e * 150, e * 300.5999984741211, e * 135, e * 290.5999984741211, e * 134, e * 267.5999984741211);
            T.bezierCurveTo(e * 133, e * 245.5999984741211, e * 146, e * 235.5999984741211, e * 164, e * 235.5999984741211);
            T.bezierCurveTo(e * 206, e * 236.0999984741211, e * 206, e * 236.0999984741211, e * 248, e * 236.5999984741211);
            T.bezierCurveTo(e * 266, e * 243.5999984741211, e * 268, e * 259.5999984741211, e * 267, e * 266.5999984741211);
            T.bezierCurveTo(e * 266, e * 288.5999984741211, e * 251, e * 294.5999984741211, e * 244, e * 297.5999984741211);
            T.bezierCurveTo(e * 228.5, e * 299.5999984741211, e * 228.5, e * 299.5999984741211, e * 213, e * 301.5999984741211);
            T.bezierCurveTo(e * 236, e * 301.0999984741211, e * 236, e * 301.0999984741211, e * 259, e * 300.5999984741211);
            T.bezierCurveTo(e * 272, e * 295.5999984741211, e * 277, e * 288.5999984741211, e * 278, e * 271.5999984741211);
            T.bezierCurveTo(e * 277.5, e * 236.5999984741211, e * 277.5, e * 236.5999984741211, e * 277, e * 201.5999984741211);
            T.bezierCurveTo(e * 276, e * 186.5999984741211, e * 265, e * 178.5999984741211, e * 254, e * 177.5999984741211);
            T.bezierCurveTo(e * 247.5, e * 177.5999984741211, e * 247.5, e * 177.5999984741211, e * 241, e * 177.5999984741211);
            T.bezierCurveTo(e * 255, e * 202.5999984741211, e * 214, e * 217.5999984741211, e * 201, e * 215.5999984741211);
            T.bezierCurveTo(e * 170, e * 215.5999984741211, e * 152, e * 197.5999984741211, e * 161, e * 178.5999984741211);
            T.closePath();
            se(T, i[2], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 162, e * 175.5999984741211);
            T.bezierCurveTo(e * 153, e * 176.0999984741211, e * 153, e * 176.0999984741211, e * 144, e * 176.5999984741211);
            T.bezierCurveTo(e * 125, e * 178.5999984741211, e * 121, e * 196.5999984741211, e * 121, e * 207.5999984741211);
            T.bezierCurveTo(e * 121, e * 243.20000076293945, e * 121, e * 243.20000076293945, e * 121, e * 278.8000030517578);
            T.bezierCurveTo(e * 126, e * 298.8000030517578, e * 137, e * 300.8000030517578, e * 146, e * 302.8000030517578);
            T.bezierCurveTo(e * 200.5, e * 302.8000030517578, e * 200.5, e * 302.8000030517578, e * 255, e * 302.8000030517578);
            T.bezierCurveTo(e * 271, e * 301.8000030517578, e * 279, e * 288.8000030517578, e * 279, e * 273.8000030517578);
            T.bezierCurveTo(e * 279, e * 236.8000030517578, e * 279, e * 236.8000030517578, e * 279, e * 199.8000030517578);
            T.bezierCurveTo(e * 274, e * 178.8000030517578, e * 263, e * 177.8000030517578, e * 255, e * 175.8000030517578);
            T.bezierCurveTo(e * 248, e * 175.8000030517578, e * 248, e * 175.8000030517578, e * 241, e * 175.8000030517578);
            T.bezierCurveTo(e * 240, e * 175.8000030517578, e * 240, e * 175.8000030517578, e * 239, e * 175.8000030517578);
            T.bezierCurveTo(e * 254, e * 200.8000030517578, e * 222, e * 211.8000030517578, e * 202, e * 212.8000030517578);
            T.bezierCurveTo(e * 168, e * 213.8000030517578, e * 151, e * 190.8000030517578, e * 163, e * 176.8000030517578);
            T.closePath();
            se(T, undefined, i[3], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 198, e * 161.4000015258789);
            T.bezierCurveTo(e * 198, e * 186.9000015258789, e * 198, e * 186.9000015258789, e * 198, e * 212.4000015258789);
            T.bezierCurveTo(e * 201, e * 212.4000015258789, e * 201, e * 212.4000015258789, e * 204, e * 212.4000015258789);
            T.bezierCurveTo(e * 204, e * 186.9000015258789, e * 204, e * 186.9000015258789, e * 204, e * 161.4000015258789);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 161, e * 194);
            T.bezierCurveTo(e * 188, e * 169, e * 231, e * 179, e * 241, e * 194);
            T.bezierCurveTo(e * 239.5, e * 196, e * 239.5, e * 196, e * 238, e * 198);
            T.bezierCurveTo(e * 221, e * 179, e * 182, e * 182, e * 165, e * 198);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 157, e * 188.80000019073486);
            T.bezierCurveTo(e * 162, e * 150.80000019073486, e * 241, e * 150.80000019073486, e * 245, e * 188.80000019073486);
            T.bezierCurveTo(e * 242, e * 224.80000019073486, e * 162, e * 228.80000019073486, e * 157, e * 188.80000019073486);
            T.bezierCurveTo(e * 159, e * 188.80000019073486, e * 159, e * 188.80000019073486, e * 161, e * 188.80000019073486);
            T.bezierCurveTo(e * 168, e * 216.80000019073486, e * 231, e * 218.80000019073486, e * 241, e * 188.80000019073486);
            T.bezierCurveTo(e * 236, e * 156.80000019073486, e * 169, e * 152.80000019073486, e * 161, e * 188.80000019073486);
            T.closePath();
            se(T, i[0], i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 156, e * 188);
            T.bezierCurveTo(e * 160, e * 164, e * 183, e * 159, e * 201, e * 158);
            T.bezierCurveTo(e * 232, e * 159, e * 244, e * 174, e * 246, e * 188);
            T.bezierCurveTo(e * 245, e * 212, e * 213, e * 219, e * 201, e * 218);
            T.bezierCurveTo(e * 181, e * 221, e * 158, e * 207, e * 156, e * 190);
            T.closePath();
            se(T, undefined, i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 162, e * 189);
            T.bezierCurveTo(e * 166, e * 170, e * 185, e * 165, e * 201, e * 164);
            T.bezierCurveTo(e * 227, e * 165, e * 240, e * 178, e * 239, e * 188);
            T.bezierCurveTo(e * 239, e * 204, e * 210, e * 210, e * 201, e * 210);
            T.bezierCurveTo(e * 182, e * 211, e * 166, e * 200, e * 162, e * 190);
            T.closePath();
            se(T, undefined, i[1], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 131, e * 262);
            T.bezierCurveTo(e * 136, e * 241, e * 144, e * 236, e * 158, e * 233);
            T.bezierCurveTo(e * 200.5, e * 233, e * 229, e * 232, e * 243, e * 233);
            T.bezierCurveTo(e * 259, e * 235, e * 267, e * 248, e * 269, e * 260);
            T.bezierCurveTo(e * 269, e * 266.5, e * 269, e * 266.5, e * 269, e * 273);
            T.bezierCurveTo(e * 265, e * 290, e * 251, e * 297, e * 242, e * 298);
            T.bezierCurveTo(e * 202, e * 298, e * 202, e * 298, e * 162, e * 298);
            T.bezierCurveTo(e * 148, e * 298, e * 136, e * 289, e * 132, e * 273);
            T.bezierCurveTo(e * 131.5, e * 268, e * 131.5, e * 268, e * 131, e * 263);
            T.bezierCurveTo(e * 135, e * 263, e * 135, e * 263, e * 139, e * 263);
            T.bezierCurveTo(e * 139, e * 281, e * 151, e * 287, e * 160, e * 290);
            T.bezierCurveTo(e * 200.5, e * 290, e * 200.5, e * 290, e * 241, e * 290);
            T.bezierCurveTo(e * 252, e * 290, e * 257, e * 281, e * 262, e * 271);
            T.bezierCurveTo(e * 261.5, e * 267, e * 261.5, e * 267, e * 261, e * 263);
            T.bezierCurveTo(e * 260, e * 249, e * 251, e * 242, e * 241, e * 241);
            T.bezierCurveTo(e * 240.5, e * 240.5, e * 240.5, e * 240.5, e * 240, e * 240);
            T.bezierCurveTo(e * 200, e * 240, e * 200, e * 240, e * 160, e * 240);
            T.bezierCurveTo(e * 145, e * 244, e * 142, e * 250, e * 139, e * 264);
            T.closePath();
            se(T, i[0], i[0], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 130, e * 264);
            T.bezierCurveTo(e * 132, e * 244, e * 144, e * 235, e * 157, e * 232);
            T.bezierCurveTo(e * 245, e * 232, e * 201, e * 232, e * 245, e * 232);
            T.bezierCurveTo(e * 264, e * 235, e * 269, e * 251, e * 270, e * 264);
            T.bezierCurveTo(e * 272, e * 291, e * 248, e * 299, e * 242, e * 299);
            T.bezierCurveTo(e * 200, e * 299, e * 200, e * 299, e * 158, e * 299);
            T.bezierCurveTo(e * 139, e * 298, e * 130, e * 276, e * 130, e * 265);
            T.closePath();
            se(T, undefined, i[1], e * 2);
            return o;
        }
        function ft(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 96.5, e * 277.34375);
            T.bezierCurveTo(e * 197.5, e * 259.84375, e * 197.5, e * 259.84375, e * 298.5, e * 242.34375);
            T.bezierCurveTo(e * 311.5, e * 231.34375, e * 307.5, e * 168.34375, e * 298.5, e * 150.34375);
            T.bezierCurveTo(e * 198, e * 170.34375, e * 198, e * 170.34375, e * 97.5, e * 190.34375);
            T.closePath();
            se(T, i[1], i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 98.5, e * 214.34375);
            T.bezierCurveTo(e * 199, e * 196.34375, e * 199, e * 196.34375, e * 299.5, e * 178.34375);
            T.closePath();
            se(T, undefined, i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 98.5, e * 247.34375);
            T.bezierCurveTo(e * 201.5, e * 229.34375, e * 201.5, e * 229.34375, e * 304.5, e * 211.34375);
            T.closePath();
            se(T, undefined, i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 97.5, e * 189.34375);
            T.bezierCurveTo(e * 97, e * 199.84375, e * 97, e * 199.84375, e * 96.5, e * 210.34375);
            T.bezierCurveTo(e * 110.5, e * 204.34375, e * 110.5, e * 204.34375, e * 124.5, e * 198.34375);
            T.bezierCurveTo(e * 137.5, e * 203.84375, e * 137.5, e * 203.84375, e * 150.5, e * 209.34375);
            T.bezierCurveTo(e * 172, e * 197.84375, e * 172, e * 197.84375, e * 193.5, e * 186.34375);
            T.bezierCurveTo(e * 211.5, e * 189.84375, e * 211.5, e * 189.84375, e * 229.5, e * 193.34375);
            T.bezierCurveTo(e * 240.5, e * 193.34375, e * 240.5, e * 193.34375, e * 251.5, e * 193.34375);
            T.bezierCurveTo(e * 261, e * 182.84375, e * 261, e * 182.84375, e * 270.5, e * 172.34375);
            T.bezierCurveTo(e * 287.5, e * 169.34375, e * 287.5, e * 169.34375, e * 304.5, e * 166.34375);
            T.bezierCurveTo(e * 304.5, e * 156.34375, e * 300.5, e * 145.34375, e * 298.5, e * 147.34375);
            T.closePath();
            se(T, i[3], i[4], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 300.5, e * 147.34375);
            T.bezierCurveTo(e * 293.5, e * 121.34375, e * 278.5, e * 106.34375, e * 256.5, e * 101.34375);
            T.bezierCurveTo(e * 176.5, e * 145.34375, e * 176.5, e * 145.34375, e * 96.5, e * 189.34375);
            T.closePath();
            se(T, i[5], i[6], e * 12);
            he(T, e * 252.5, e * 129.34375, e * 18.027756377319946);
            se(T, i[7]);
            he(T, e * 248.5, e * 121.34375, e * 8.246211251235321);
            se(T, i[8]);
            return o;
        }
        function zt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 10, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 100.5, e * 126.34375);
            T.bezierCurveTo(e * 151.5, e * 104.34375, e * 279.5, e * 188.34375, e * 297.5, e * 292.34375);
            T.bezierCurveTo(e * 222.5, e * 307.34375, e * 106.5, e * 196.34375, e * 100.5, e * 127.34375);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 106.5, e * 131.34375);
            T.bezierCurveTo(e * 140.5, e * 142.34375, e * 225.5, e * 184.34375, e * 290.5, e * 287.34375);
            T.bezierCurveTo(e * 270.5, e * 188.34375, e * 152.5, e * 118.34375, e * 107.5, e * 131.34375);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 157.5, e * 137.34375);
            T.bezierCurveTo(e * 161.5, e * 138.34375, e * 164.5, e * 140.34375, e * 168.5, e * 142.34375);
            T.bezierCurveTo(e * 165.5, e * 156.34375, e * 141.5, e * 176.34375, e * 126.5, e * 179.34375);
            T.bezierCurveTo(e * 123.5, e * 173.34375, e * 120.5, e * 169.34375, e * 120.5, e * 169.34375);
            T.bezierCurveTo(e * 141.5, e * 161.34375, e * 156.5, e * 145.34375, e * 155.5, e * 136.34375);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 196.5, e * 151.34375);
            T.bezierCurveTo(e * 211.5, e * 158.34375, e * 224.5, e * 171.34375, e * 229.5, e * 176.34375);
            T.bezierCurveTo(e * 246.5, e * 163.34375, e * 259.5, e * 166.34375, e * 272.5, e * 168.34375);
            T.bezierCurveTo(e * 254.5, e * 146.34375, e * 214.5, e * 145.34375, e * 198.5, e * 151.34375);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 154.5, e * 222.34375);
            T.bezierCurveTo(e * 164.5, e * 234.34375, e * 173.5, e * 242.34375, e * 178.5, e * 245.34375);
            T.bezierCurveTo(e * 174.5, e * 265.34375, e * 180.5, e * 274.34375, e * 186.5, e * 283.34375);
            T.bezierCurveTo(e * 165.5, e * 277.34375, e * 151.5, e * 245.34375, e * 155.5, e * 224.34375);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 279.5, e * 294.34375);
            T.bezierCurveTo(e * 286.5, e * 285.84375, e * 286.5, e * 285.84375, e * 293.5, e * 277.34375);
            T.bezierCurveTo(e * 315.5, e * 280.34375, e * 315.5, e * 280.34375, e * 337.5, e * 283.34375);
            T.bezierCurveTo(e * 340.5, e * 311.34375, e * 317.5, e * 326.34375, e * 307.5, e * 331.34375);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(e * -10, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 100.5, e * 126.34375);
            T.bezierCurveTo(e * 151.5, e * 104.34375, e * 279.5, e * 188.34375, e * 297.5, e * 292.34375);
            T.bezierCurveTo(e * 222.5, e * 307.34375, e * 106.5, e * 196.34375, e * 100.5, e * 127.34375);
            T.closePath();
            se(T, i[1], i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 106.5, e * 131.34375);
            T.bezierCurveTo(e * 140.5, e * 142.34375, e * 225.5, e * 184.34375, e * 290.5, e * 287.34375);
            T.bezierCurveTo(e * 270.5, e * 188.34375, e * 152.5, e * 118.34375, e * 107.5, e * 131.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 157.5, e * 137.34375);
            T.bezierCurveTo(e * 161.5, e * 138.34375, e * 164.5, e * 140.34375, e * 168.5, e * 142.34375);
            T.bezierCurveTo(e * 165.5, e * 156.34375, e * 141.5, e * 176.34375, e * 126.5, e * 179.34375);
            T.bezierCurveTo(e * 123.5, e * 173.34375, e * 120.5, e * 169.34375, e * 120.5, e * 169.34375);
            T.bezierCurveTo(e * 141.5, e * 161.34375, e * 156.5, e * 145.34375, e * 155.5, e * 136.34375);
            T.closePath();
            se(T, i[4]);
            he(T, e * 125.5, e * 140.34375, e * 11.180339887498949);
            se(T, i[5]);
            he(T, e * 122.5, e * 135.34375, e * 5.0990195135927845);
            se(T, i[6]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 196.5, e * 151.34375);
            T.bezierCurveTo(e * 211.5, e * 158.34375, e * 224.5, e * 171.34375, e * 229.5, e * 176.34375);
            T.bezierCurveTo(e * 246.5, e * 163.34375, e * 259.5, e * 166.34375, e * 272.5, e * 168.34375);
            T.bezierCurveTo(e * 254.5, e * 146.34375, e * 214.5, e * 145.34375, e * 198.5, e * 151.34375);
            T.closePath();
            se(T, i[7], i[8], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 154.5, e * 222.34375);
            T.bezierCurveTo(e * 164.5, e * 234.34375, e * 173.5, e * 242.34375, e * 178.5, e * 245.34375);
            T.bezierCurveTo(e * 174.5, e * 265.34375, e * 180.5, e * 274.34375, e * 186.5, e * 283.34375);
            T.bezierCurveTo(e * 165.5, e * 277.34375, e * 151.5, e * 245.34375, e * 155.5, e * 224.34375);
            T.closePath();
            se(T, i[7], i[8], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 279.5, e * 294.34375);
            T.bezierCurveTo(e * 286.5, e * 285.84375, e * 286.5, e * 285.84375, e * 293.5, e * 277.34375);
            T.bezierCurveTo(e * 315.5, e * 280.34375, e * 315.5, e * 280.34375, e * 337.5, e * 283.34375);
            T.bezierCurveTo(e * 340.5, e * 311.34375, e * 317.5, e * 326.34375, e * 307.5, e * 331.34375);
            T.closePath();
            se(T, i[7], i[8], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 296.5, e * 287.34375);
            T.bezierCurveTo(e * 311.5, e * 291.34375, e * 311.5, e * 291.34375, e * 326.5, e * 295.34375);
            T.closePath();
            se(T, undefined, i[9], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 294.5, e * 289.34375);
            T.bezierCurveTo(e * 308.5, e * 297.34375, e * 308.5, e * 297.34375, e * 322.5, e * 305.34375);
            T.closePath();
            se(T, undefined, i[9], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 294.5, e * 291.34375);
            T.bezierCurveTo(e * 304, e * 303.34375, e * 304, e * 303.34375, e * 313.5, e * 315.34375);
            T.closePath();
            se(T, undefined, i[9], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 226.5, e * 161.34375);
            T.bezierCurveTo(e * 230.5, e * 160.34375, e * 236.5, e * 158.34375, e * 238.5, e * 161.34375);
            T.bezierCurveTo(e * 238.5, e * 157.34375, e * 228.5, e * 159.34375, e * 227.5, e * 161.34375);
            T.closePath();
            se(T, undefined, i[9], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 167.5, e * 248.34375);
            T.bezierCurveTo(e * 165.5, e * 251.34375, e * 168.5, e * 256.34375, e * 168.5, e * 253.34375);
            T.bezierCurveTo(e * 166.5, e * 252.34375, e * 168.5, e * 246.34375, e * 166.5, e * 247.34375);
            T.closePath();
            se(T, undefined, i[9], e * 3);
            return o;
        }
        function Bt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 309;
            o.height = e * 287;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 10, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 34.5, e * 38.53125);
            T.bezierCurveTo(e * 91.5, e * 30.53125, e * 138.5, e * 68.53125, e * 169.5, e * 93.53125);
            T.bezierCurveTo(e * 208.5, e * 128.53125, e * 226.5, e * 157.53125, e * 233.5, e * 209.53125);
            T.bezierCurveTo(e * 195.5, e * 218.53125, e * 138.5, e * 191.53125, e * 105.5, e * 157.53125);
            T.bezierCurveTo(e * 54.5, e * 112.53125, e * 41.5, e * 80.53125, e * 33.5, e * 38.53125);
            T.closePath();
            se(T, i[0], i[0], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 143.5, e * 74.53125);
            T.bezierCurveTo(e * 164.5, e * 73.53125, e * 159, e * 74.53125, e * 174.5, e * 74.53125);
            T.bezierCurveTo(e * 186, e * 86.53125, e * 186, e * 86.53125, e * 197.5, e * 98.53125);
            T.bezierCurveTo(e * 186, e * 97.03125, e * 186, e * 97.03125, e * 174.5, e * 95.53125);
            T.closePath();
            se(T, i[0], i[0], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87.5, e * 142.53125);
            T.bezierCurveTo(e * 92, e * 160.03125, e * 92, e * 160.03125, e * 96.5, e * 177.53125);
            T.bezierCurveTo(e * 108, e * 181.53125, e * 108, e * 181.53125, e * 119.5, e * 185.53125);
            T.bezierCurveTo(e * 116.5, e * 175.53125, e * 116.5, e * 175.53125, e * 113.5, e * 165.53125);
            T.closePath();
            se(T, i[0], i[0], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 236.5, e * 189.53125);
            T.bezierCurveTo(e * 274.5, e * 197.53125, e * 255.5, e * 194.03125, e * 274.5, e * 198.53125);
            T.bezierCurveTo(e * 272.5, e * 236.53125, e * 261.5, e * 237.53125, e * 242.5, e * 248.53125);
            T.bezierCurveTo(e * 230.5, e * 231.03125, e * 230.5, e * 231.03125, e * 218.5, e * 213.53125);
            T.closePath();
            se(T, i[0], i[0], e * 10);
            T.globalAlpha = 1;
            T.translate(e * -10, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 34.5, e * 38.53125);
            T.bezierCurveTo(e * 91.5, e * 30.53125, e * 138.5, e * 68.53125, e * 169.5, e * 93.53125);
            T.bezierCurveTo(e * 208.5, e * 128.53125, e * 226.5, e * 157.53125, e * 233.5, e * 209.53125);
            T.bezierCurveTo(e * 195.5, e * 218.53125, e * 138.5, e * 191.53125, e * 105.5, e * 157.53125);
            T.bezierCurveTo(e * 54.5, e * 112.53125, e * 41.5, e * 80.53125, e * 33.5, e * 38.53125);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 143.5, e * 74.53125);
            T.bezierCurveTo(e * 164.5, e * 73.53125, e * 159, e * 74.53125, e * 174.5, e * 74.53125);
            T.bezierCurveTo(e * 186, e * 86.53125, e * 186, e * 86.53125, e * 197.5, e * 98.53125);
            T.bezierCurveTo(e * 186, e * 97.03125, e * 186, e * 97.03125, e * 174.5, e * 95.53125);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87.5, e * 142.53125);
            T.bezierCurveTo(e * 92, e * 160.03125, e * 92, e * 160.03125, e * 96.5, e * 177.53125);
            T.bezierCurveTo(e * 108, e * 181.53125, e * 108, e * 181.53125, e * 119.5, e * 185.53125);
            T.bezierCurveTo(e * 116.5, e * 175.53125, e * 116.5, e * 175.53125, e * 113.5, e * 165.53125);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 236.5, e * 189.53125);
            T.bezierCurveTo(e * 274.5, e * 197.53125, e * 255.5, e * 194.03125, e * 274.5, e * 198.53125);
            T.bezierCurveTo(e * 272.5, e * 236.53125, e * 261.5, e * 237.53125, e * 242.5, e * 248.53125);
            T.bezierCurveTo(e * 230.5, e * 231.03125, e * 230.5, e * 231.03125, e * 218.5, e * 213.53125);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 109.5, e * 51.53125);
            T.bezierCurveTo(e * 107.5, e * 92.53125, e * 91.5, e * 95.53125, e * 59.5, e * 101.53125);
            se(T, i[1], i[2], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72.5, e * 51.53125);
            T.bezierCurveTo(e * 71, e * 64.53125, e * 69.5, e * 76.53125, e * 69.5, e * 77.53125);
            T.closePath();
            se(T, i[1], i[2], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84.5, e * 63.53125);
            T.bezierCurveTo(e * 70.5, e * 65.03125, e * 70.5, e * 65.03125, e * 56.5, e * 66.53125);
            T.closePath();
            se(T, i[1], i[2], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 125.5, e * 84.53125);
            T.bezierCurveTo(e * 125.5, e * 110.03125, e * 125.5, e * 110.03125, e * 125.5, e * 135.53125);
            T.closePath();
            se(T, i[1], i[2], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 149.5, e * 108.53125);
            T.bezierCurveTo(e * 150, e * 137.03125, e * 150, e * 137.03125, e * 150.5, e * 165.53125);
            T.closePath();
            se(T, i[1], i[2], e * 7);
            return o;
        }
        function Gt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 130;
            var n = e * 142;
            var a = r / 2;
            var I = n / 2;
            o.width = r;
            o.height = n;
            T.translate(a, I + e * 7);
            T.globalAlpha = t ? 0.5 : 1;
            he(T, 0, 0, e * 60);
            se(T, i[0]);
            T.translate(0, e * -7);
            T.globalAlpha = 1;
            he(T, 0, 0, e * 60);
            se(T, i[1], i[2], e * 4);
            he(T, 0, 0, e * 40);
            se(T, i[3]);
            he(T, 0, 0, e * 25);
            se(T, i[4], i[5], e * 8);
            return o;
        }
        function Wt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 130;
            o.height = e * 142;
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 65, e * 80);
            T.rotate(0.2);
            ue(T, 9, e * 60, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 65, e * 71);
            T.rotate(0.2);
            ue(T, 9, e * 60, e * 10);
            se(T, i[1], i[2], 4);
            T.rotate(-0.32);
            ue(T, 9, e * 38, e * 10);
            se(T, i[3], i[4], 4);
            T.rotate(0.68);
            ue(T, 9, e * 20, e * 8);
            se(T, i[5], i[6], 6);
            T.restore();
            return o;
        }
        function Vt(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 372;
            i.height = e * 375;
            o.globalAlpha = 0.5;
            o.translate(e * 15, e * 15);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 313.0000305175781, e * 76.58523559570312);
            o.bezierCurveTo(e * 308.0000305175781, e * 130.58523559570312, e * 279.0000305175781, e * 158.58523559570312, e * 254.00003051757812, e * 175.58523559570312);
            o.bezierCurveTo(e * 287.0000305175781, e * 182.58523559570312, e * 274.0000305175781, e * 181.08523559570312, e * 294.0000305175781, e * 186.58523559570312);
            o.bezierCurveTo(e * 293.5000305175781, e * 196.08523559570312, e * 293.5000305175781, e * 196.08523559570312, e * 293.0000305175781, e * 205.58523559570312);
            o.bezierCurveTo(e * 304.0000305175781, e * 201.08523559570312, e * 304.0000305175781, e * 201.08523559570312, e * 315.0000305175781, e * 196.58523559570312);
            o.bezierCurveTo(e * 350.0000305175781, e * 219.58523559570312, e * 343.0000305175781, e * 221.58523559570312, e * 351.0000305175781, e * 230.58523559570312);
            o.bezierCurveTo(e * 296.0000305175781, e * 260.5852355957031, e * 264.0000305175781, e * 256.5852355957031, e * 220.00003051757812, e * 236.58523559570312);
            o.bezierCurveTo(e * 233.00003051757812, e * 266.5852355957031, e * 232.00003051757812, e * 279.5852355957031, e * 231.00003051757812, e * 295.5852355957031);
            o.bezierCurveTo(e * 222.00003051757812, e * 297.5852355957031, e * 222.00003051757812, e * 297.5852355957031, e * 213.00003051757812, e * 299.5852355957031);
            o.bezierCurveTo(e * 219.50003051757812, e * 308.0852355957031, e * 219.50003051757812, e * 308.0852355957031, e * 226.00003051757812, e * 316.5852355957031);
            o.bezierCurveTo(e * 223.00003051757812, e * 344.5852355957031, e * 216.00003051757812, e * 350.5852355957031, e * 209.00003051757812, e * 363.5852355957031);
            o.bezierCurveTo(e * 154.00003051757812, e * 318.5852355957031, e * 156.00003051757812, e * 268.5852355957031, e * 160.00003051757812, e * 238.58523559570312);
            o.bezierCurveTo(e * 135.00003051757812, e * 268.5852355957031, e * 125.00003051757812, e * 267.5852355957031, e * 112.00003051757812, e * 272.5852355957031);
            o.bezierCurveTo(e * 104.50003051757812, e * 266.5852355957031, e * 104.50003051757812, e * 266.5852355957031, e * 97.00003051757812, e * 260.5852355957031);
            o.bezierCurveTo(e * 93.00003051757812, e * 271.0852355957031, e * 93.00003051757812, e * 271.0852355957031, e * 89.00003051757812, e * 281.5852355957031);
            o.bezierCurveTo(e * 66.00003051757812, e * 288.5852355957031, e * 59.000030517578125, e * 288.5852355957031, e * 39.000030517578125, e * 285.5852355957031);
            o.bezierCurveTo(e * 56.000030517578125, e * 216.58523559570312, e * 91.00003051757812, e * 204.58523559570312, e * 129.00003051757812, e * 189.58523559570312);
            o.bezierCurveTo(e * 90.00003051757812, e * 176.58523559570312, e * 89.00003051757812, e * 173.58523559570312, e * 79.00003051757812, e * 166.58523559570312);
            o.bezierCurveTo(e * 82.00003051757812, e * 155.08523559570312, e * 82.00003051757812, e * 155.08523559570312, e * 85.00003051757812, e * 143.58523559570312);
            o.bezierCurveTo(e * 75.50003051757812, e * 147.58523559570312, e * 75.50003051757812, e * 147.58523559570312, e * 66.00003051757812, e * 151.58523559570312);
            o.bezierCurveTo(e * 44.000030517578125, e * 133.58523559570312, e * 41.000030517578125, e * 124.58523559570312, e * 34.000030517578125, e * 102.58523559570312);
            o.bezierCurveTo(e * 100.00003051757812, e * 81.58523559570312, e * 134.00003051757812, e * 118.58523559570312, e * 150.00003051757812, e * 128.58523559570312);
            o.bezierCurveTo(e * 144.00003051757812, e * 102.58523559570312, e * 147.00003051757812, e * 90.58523559570312, e * 150.00003051757812, e * 80.58523559570312);
            o.bezierCurveTo(e * 159.50003051757812, e * 79.08523559570312, e * 159.50003051757812, e * 79.08523559570312, e * 169.00003051757812, e * 77.58523559570312);
            o.bezierCurveTo(e * 163.00003051757812, e * 72.58523559570312, e * 163.00003051757812, e * 72.58523559570312, e * 157.00003051757812, e * 67.58523559570312);
            o.bezierCurveTo(e * 162.00003051757812, e * 42.585235595703125, e * 169.00003051757812, e * 29.585235595703125, e * 182.00003051757812, e * 14.585235595703125);
            o.bezierCurveTo(e * 219.00003051757812, e * 48.585235595703125, e * 222.00003051757812, e * 92.58523559570312, e * 218.00003051757812, e * 112.58523559570312);
            o.bezierCurveTo(e * 239.00003051757812, e * 95.58523559570312, e * 242.00003051757812, e * 97.58523559570312, e * 249.00003051757812, e * 94.58523559570312);
            o.bezierCurveTo(e * 255.00003051757812, e * 103.08523559570312, e * 255.00003051757812, e * 103.08523559570312, e * 261.0000305175781, e * 111.58523559570312);
            o.bezierCurveTo(e * 261.5000305175781, e * 99.58523559570312, e * 261.5000305175781, e * 99.58523559570312, e * 262.0000305175781, e * 87.58523559570312);
            o.bezierCurveTo(e * 282.0000305175781, e * 77.58523559570312, e * 301.0000305175781, e * 74.58523559570312, e * 314.0000305175781, e * 76.58523559570312);
            o.closePath();
            se(o, t[0]);
            o.globalAlpha = 1;
            o.translate(e * -15, e * -15);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 313.0000305175781, e * 76.58523559570312);
            o.bezierCurveTo(e * 308.0000305175781, e * 130.58523559570312, e * 279.0000305175781, e * 158.58523559570312, e * 254.00003051757812, e * 175.58523559570312);
            o.bezierCurveTo(e * 287.0000305175781, e * 182.58523559570312, e * 274.0000305175781, e * 181.08523559570312, e * 294.0000305175781, e * 186.58523559570312);
            o.bezierCurveTo(e * 293.5000305175781, e * 196.08523559570312, e * 293.5000305175781, e * 196.08523559570312, e * 293.0000305175781, e * 205.58523559570312);
            o.bezierCurveTo(e * 304.0000305175781, e * 201.08523559570312, e * 304.0000305175781, e * 201.08523559570312, e * 315.0000305175781, e * 196.58523559570312);
            o.bezierCurveTo(e * 350.0000305175781, e * 219.58523559570312, e * 343.0000305175781, e * 221.58523559570312, e * 351.0000305175781, e * 230.58523559570312);
            o.bezierCurveTo(e * 296.0000305175781, e * 260.5852355957031, e * 264.0000305175781, e * 256.5852355957031, e * 220.00003051757812, e * 236.58523559570312);
            o.bezierCurveTo(e * 233.00003051757812, e * 266.5852355957031, e * 232.00003051757812, e * 279.5852355957031, e * 231.00003051757812, e * 295.5852355957031);
            o.bezierCurveTo(e * 222.00003051757812, e * 297.5852355957031, e * 222.00003051757812, e * 297.5852355957031, e * 213.00003051757812, e * 299.5852355957031);
            o.bezierCurveTo(e * 219.50003051757812, e * 308.0852355957031, e * 219.50003051757812, e * 308.0852355957031, e * 226.00003051757812, e * 316.5852355957031);
            o.bezierCurveTo(e * 223.00003051757812, e * 344.5852355957031, e * 216.00003051757812, e * 350.5852355957031, e * 209.00003051757812, e * 363.5852355957031);
            o.bezierCurveTo(e * 154.00003051757812, e * 318.5852355957031, e * 156.00003051757812, e * 268.5852355957031, e * 160.00003051757812, e * 238.58523559570312);
            o.bezierCurveTo(e * 135.00003051757812, e * 268.5852355957031, e * 125.00003051757812, e * 267.5852355957031, e * 112.00003051757812, e * 272.5852355957031);
            o.bezierCurveTo(e * 104.50003051757812, e * 266.5852355957031, e * 104.50003051757812, e * 266.5852355957031, e * 97.00003051757812, e * 260.5852355957031);
            o.bezierCurveTo(e * 93.00003051757812, e * 271.0852355957031, e * 93.00003051757812, e * 271.0852355957031, e * 89.00003051757812, e * 281.5852355957031);
            o.bezierCurveTo(e * 66.00003051757812, e * 288.5852355957031, e * 59.000030517578125, e * 288.5852355957031, e * 39.000030517578125, e * 285.5852355957031);
            o.bezierCurveTo(e * 56.000030517578125, e * 216.58523559570312, e * 91.00003051757812, e * 204.58523559570312, e * 129.00003051757812, e * 189.58523559570312);
            o.bezierCurveTo(e * 90.00003051757812, e * 176.58523559570312, e * 89.00003051757812, e * 173.58523559570312, e * 79.00003051757812, e * 166.58523559570312);
            o.bezierCurveTo(e * 82.00003051757812, e * 155.08523559570312, e * 82.00003051757812, e * 155.08523559570312, e * 85.00003051757812, e * 143.58523559570312);
            o.bezierCurveTo(e * 75.50003051757812, e * 147.58523559570312, e * 75.50003051757812, e * 147.58523559570312, e * 66.00003051757812, e * 151.58523559570312);
            o.bezierCurveTo(e * 44.000030517578125, e * 133.58523559570312, e * 41.000030517578125, e * 124.58523559570312, e * 34.000030517578125, e * 102.58523559570312);
            o.bezierCurveTo(e * 100.00003051757812, e * 81.58523559570312, e * 134.00003051757812, e * 118.58523559570312, e * 150.00003051757812, e * 128.58523559570312);
            o.bezierCurveTo(e * 144.00003051757812, e * 102.58523559570312, e * 147.00003051757812, e * 90.58523559570312, e * 150.00003051757812, e * 80.58523559570312);
            o.bezierCurveTo(e * 159.50003051757812, e * 79.08523559570312, e * 159.50003051757812, e * 79.08523559570312, e * 169.00003051757812, e * 77.58523559570312);
            o.bezierCurveTo(e * 163.00003051757812, e * 72.58523559570312, e * 163.00003051757812, e * 72.58523559570312, e * 157.00003051757812, e * 67.58523559570312);
            o.bezierCurveTo(e * 162.00003051757812, e * 42.585235595703125, e * 169.00003051757812, e * 29.585235595703125, e * 182.00003051757812, e * 14.585235595703125);
            o.bezierCurveTo(e * 219.00003051757812, e * 48.585235595703125, e * 222.00003051757812, e * 92.58523559570312, e * 218.00003051757812, e * 112.58523559570312);
            o.bezierCurveTo(e * 239.00003051757812, e * 95.58523559570312, e * 242.00003051757812, e * 97.58523559570312, e * 249.00003051757812, e * 94.58523559570312);
            o.bezierCurveTo(e * 255.00003051757812, e * 103.08523559570312, e * 255.00003051757812, e * 103.08523559570312, e * 261.0000305175781, e * 111.58523559570312);
            o.bezierCurveTo(e * 261.5000305175781, e * 99.58523559570312, e * 261.5000305175781, e * 99.58523559570312, e * 262.0000305175781, e * 87.58523559570312);
            o.bezierCurveTo(e * 282.0000305175781, e * 77.58523559570312, e * 301.0000305175781, e * 74.58523559570312, e * 314.0000305175781, e * 76.58523559570312);
            o.closePath();
            se(o, t[1], t[2], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 186.00003051757812, e * 192.94886779785156);
            o.bezierCurveTo(e * 185.00003051757812, e * 66.94886779785156, e * 184.50003051757812, e * 104.94886779785156, e * 183.00003051757812, e * 16.948867797851562);
            o.bezierCurveTo(e * 216.00003051757812, e * 47.94886779785156, e * 219.00003051757812, e * 80.94886779785156, e * 218.00003051757812, e * 113.94886779785156);
            o.bezierCurveTo(e * 209.00003051757812, e * 165.94886779785156, e * 200.00003051757812, e * 176.94886779785156, e * 189.00003051757812, e * 192.94886779785156);
            o.closePath();
            se(o, t[3], t[3], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 190.00003051757812, e * 191.94886779785156);
            o.bezierCurveTo(e * 207.00003051757812, e * 348.94886779785156, e * 205.00003051757812, e * 323.94886779785156, e * 209.00003051757812, e * 358.94886779785156);
            o.bezierCurveTo(e * 171.00003051757812, e * 334.94886779785156, e * 167.00003051757812, e * 302.94886779785156, e * 161.00003051757812, e * 268.94886779785156);
            o.bezierCurveTo(e * 160.00003051757812, e * 218.94886779785156, e * 181.00003051757812, e * 191.94886779785156, e * 189.00003051757812, e * 186.94886779785156);
            o.closePath();
            se(o, t[3], t[3], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 194.00003051757812, e * 195.94886779785156);
            o.bezierCurveTo(e * 116.00003051757812, e * 150.94886779785156, e * 116.00003051757812, e * 150.94886779785156, e * 38.000030517578125, e * 105.94886779785156);
            o.bezierCurveTo(e * 67.00003051757812, e * 90.94886779785156, e * 96.00003051757812, e * 99.94886779785156, e * 123.00003051757812, e * 111.94886779785156);
            o.bezierCurveTo(e * 183.00003051757812, e * 152.94886779785156, e * 179.00003051757812, e * 180.94886779785156, e * 193.00003051757812, e * 194.94886779785156);
            o.closePath();
            se(o, t[3], t[3], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 189.00003051757812, e * 190.94886779785156);
            o.bezierCurveTo(e * 250.00003051757812, e * 133.94886779785156, e * 311.0000305175781, e * 78.94886779785156, e * 311.0000305175781, e * 76.94886779785156);
            o.bezierCurveTo(e * 306.0000305175781, e * 127.94886779785156, e * 283.0000305175781, e * 148.94886779785156, e * 261.0000305175781, e * 166.94886779785156);
            o.bezierCurveTo(e * 220.00003051757812, e * 197.94886779785156, e * 191.00003051757812, e * 194.94886779785156, e * 189.00003051757812, e * 195.94886779785156);
            o.closePath();
            se(o, t[3], t[3], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 189.00003051757812, e * 194.94886779785156);
            o.bezierCurveTo(e * 268.5000305175781, e * 211.94886779785156, e * 268.5000305175781, e * 211.94886779785156, e * 348.0000305175781, e * 228.94886779785156);
            o.bezierCurveTo(e * 316.0000305175781, e * 247.94886779785156, e * 298.0000305175781, e * 256.94886779785156, e * 250.00003051757812, e * 246.94886779785156);
            o.bezierCurveTo(e * 197.00003051757812, e * 229.94886779785156, e * 189.00003051757812, e * 202.94886779785156, e * 188.00003051757812, e * 199.94886779785156);
            o.closePath();
            se(o, t[3], t[3], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 192.00003051757812, e * 191.94886779785156);
            o.bezierCurveTo(e * 116.50003051757812, e * 238.44886779785156, e * 116.50003051757812, e * 238.44886779785156, e * 41.000030517578125, e * 284.94886779785156);
            o.bezierCurveTo(e * 49.000030517578125, e * 252.94886779785156, e * 56.000030517578125, e * 242.94886779785156, e * 80.00003051757812, e * 215.94886779785156);
            o.bezierCurveTo(e * 125.00003051757812, e * 181.94886779785156, e * 174.00003051757812, e * 183.94886779785156, e * 192.00003051757812, e * 191.94886779785156);
            o.closePath();
            se(o, t[3], t[3], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 313.0000305175781, e * 76.58523559570312);
            o.bezierCurveTo(e * 308.0000305175781, e * 130.58523559570312, e * 279.0000305175781, e * 158.58523559570312, e * 254.00003051757812, e * 175.58523559570312);
            o.bezierCurveTo(e * 287.0000305175781, e * 182.58523559570312, e * 274.0000305175781, e * 181.08523559570312, e * 294.0000305175781, e * 186.58523559570312);
            o.bezierCurveTo(e * 293.5000305175781, e * 196.08523559570312, e * 293.5000305175781, e * 196.08523559570312, e * 293.0000305175781, e * 205.58523559570312);
            o.bezierCurveTo(e * 304.0000305175781, e * 201.08523559570312, e * 304.0000305175781, e * 201.08523559570312, e * 315.0000305175781, e * 196.58523559570312);
            o.bezierCurveTo(e * 350.0000305175781, e * 219.58523559570312, e * 343.0000305175781, e * 221.58523559570312, e * 351.0000305175781, e * 230.58523559570312);
            o.bezierCurveTo(e * 296.0000305175781, e * 260.5852355957031, e * 264.0000305175781, e * 256.5852355957031, e * 220.00003051757812, e * 236.58523559570312);
            o.bezierCurveTo(e * 233.00003051757812, e * 266.5852355957031, e * 232.00003051757812, e * 279.5852355957031, e * 231.00003051757812, e * 295.5852355957031);
            o.bezierCurveTo(e * 222.00003051757812, e * 297.5852355957031, e * 222.00003051757812, e * 297.5852355957031, e * 213.00003051757812, e * 299.5852355957031);
            o.bezierCurveTo(e * 219.50003051757812, e * 308.0852355957031, e * 219.50003051757812, e * 308.0852355957031, e * 226.00003051757812, e * 316.5852355957031);
            o.bezierCurveTo(e * 223.00003051757812, e * 344.5852355957031, e * 216.00003051757812, e * 350.5852355957031, e * 209.00003051757812, e * 363.5852355957031);
            o.bezierCurveTo(e * 154.00003051757812, e * 318.5852355957031, e * 156.00003051757812, e * 268.5852355957031, e * 160.00003051757812, e * 238.58523559570312);
            o.bezierCurveTo(e * 135.00003051757812, e * 268.5852355957031, e * 125.00003051757812, e * 267.5852355957031, e * 112.00003051757812, e * 272.5852355957031);
            o.bezierCurveTo(e * 104.50003051757812, e * 266.5852355957031, e * 104.50003051757812, e * 266.5852355957031, e * 97.00003051757812, e * 260.5852355957031);
            o.bezierCurveTo(e * 93.00003051757812, e * 271.0852355957031, e * 93.00003051757812, e * 271.0852355957031, e * 89.00003051757812, e * 281.5852355957031);
            o.bezierCurveTo(e * 66.00003051757812, e * 288.5852355957031, e * 59.000030517578125, e * 288.5852355957031, e * 39.000030517578125, e * 285.5852355957031);
            o.bezierCurveTo(e * 56.000030517578125, e * 216.58523559570312, e * 91.00003051757812, e * 204.58523559570312, e * 129.00003051757812, e * 189.58523559570312);
            o.bezierCurveTo(e * 90.00003051757812, e * 176.58523559570312, e * 89.00003051757812, e * 173.58523559570312, e * 79.00003051757812, e * 166.58523559570312);
            o.bezierCurveTo(e * 82.00003051757812, e * 155.08523559570312, e * 82.00003051757812, e * 155.08523559570312, e * 85.00003051757812, e * 143.58523559570312);
            o.bezierCurveTo(e * 75.50003051757812, e * 147.58523559570312, e * 75.50003051757812, e * 147.58523559570312, e * 66.00003051757812, e * 151.58523559570312);
            o.bezierCurveTo(e * 44.000030517578125, e * 133.58523559570312, e * 41.000030517578125, e * 124.58523559570312, e * 34.000030517578125, e * 102.58523559570312);
            o.bezierCurveTo(e * 100.00003051757812, e * 81.58523559570312, e * 134.00003051757812, e * 118.58523559570312, e * 150.00003051757812, e * 128.58523559570312);
            o.bezierCurveTo(e * 144.00003051757812, e * 102.58523559570312, e * 147.00003051757812, e * 90.58523559570312, e * 150.00003051757812, e * 80.58523559570312);
            o.bezierCurveTo(e * 159.50003051757812, e * 79.08523559570312, e * 159.50003051757812, e * 79.08523559570312, e * 169.00003051757812, e * 77.58523559570312);
            o.bezierCurveTo(e * 163.00003051757812, e * 72.58523559570312, e * 163.00003051757812, e * 72.58523559570312, e * 157.00003051757812, e * 67.58523559570312);
            o.bezierCurveTo(e * 162.00003051757812, e * 42.585235595703125, e * 169.00003051757812, e * 29.585235595703125, e * 182.00003051757812, e * 14.585235595703125);
            o.bezierCurveTo(e * 219.00003051757812, e * 48.585235595703125, e * 222.00003051757812, e * 92.58523559570312, e * 218.00003051757812, e * 112.58523559570312);
            o.bezierCurveTo(e * 239.00003051757812, e * 95.58523559570312, e * 242.00003051757812, e * 97.58523559570312, e * 249.00003051757812, e * 94.58523559570312);
            o.bezierCurveTo(e * 255.00003051757812, e * 103.08523559570312, e * 255.00003051757812, e * 103.08523559570312, e * 261.0000305175781, e * 111.58523559570312);
            o.bezierCurveTo(e * 261.5000305175781, e * 99.58523559570312, e * 261.5000305175781, e * 99.58523559570312, e * 262.0000305175781, e * 87.58523559570312);
            o.bezierCurveTo(e * 282.0000305175781, e * 77.58523559570312, e * 301.0000305175781, e * 74.58523559570312, e * 314.0000305175781, e * 76.58523559570312);
            o.closePath();
            se(o, undefined, t[2], e * 4);
            return i;
        }
        function Kt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 248;
            o.height = e * 128;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 137, e * 7);
            T.bezierCurveTo(e * 169, e * 14, e * 212, e * 9, e * 241, e * 5);
            T.bezierCurveTo(e * 211, e * 63, e * 158, e * 92, e * 103, e * 109);
            T.bezierCurveTo(e * 73, e * 126, e * 54, e * 124, e * 6, e * 99);
            T.bezierCurveTo(e * 82, e * 63, e * 113, e * 35, e * 137, e * 8);
            T.closePath();
            se(T, i[0], i[1], e * 14);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 73, e * 124);
            T.bezierCurveTo(e * 111, e * 126, e * 162, e * 97, e * 203, e * 61);
            T.bezierCurveTo(e * 156, e * 98, e * 131, e * 106, e * 105, e * 109);
            T.bezierCurveTo(e * 99, e * 121, e * 87, e * 124, e * 72, e * 124);
            T.closePath();
            se(T, i[2], i[3], e * 1);
            return o;
        }
        function Yt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 130;
            o.height = e * 148;
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 65, e * 85);
            T.rotate(1.4);
            ue(T, 7, e * 60, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 65, e * 74);
            T.rotate(1.4);
            ue(T, 7, e * 60, e * 10);
            se(T, i[1], i[2], 4);
            T.rotate(0.64);
            ue(T, 7, e * 40, e * 10);
            se(T, i[3], i[4], 4);
            T.rotate(0.12);
            ue(T, 7, e * 23, e * 5);
            T.restore();
            se(T, i[5]);
            return o;
        }
        function Ut(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 125;
            o.height = e * 139;
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 63, e * 79);
            T.rotate(1);
            ue(T, 8, e * 60, e * 10);
            se(T, i[0]);
            T.restore();
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 63, e * 69);
            T.rotate(1);
            ue(T, 8, e * 60, e * 10);
            se(T, i[1], i[2], 4);
            T.rotate(0.56);
            ue(T, 8, e * 40, e * 10);
            se(T, i[3], i[4], 4);
            T.rotate(0.28);
            ue(T, 8, e * 28, e * 8);
            se(T, i[5]);
            T.restore();
            return o;
        }
        function kt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 90;
            o.height = e * 101;
            T.translate(e * 0, e * 5);
            T.globalAlpha = 1;
            he(T, e * 44, e * 45, e * 41);
            se(T, i[1], i[2], e * 4);
            he(T, e * 44, e * 45, e * 31);
            se(T, i[3]);
            T.save();
            T.translate(e * 45, e * 45);
            Re(T, e * -9, e * -25.5, e * 18, e * 51, e * 30);
            T.restore();
            se(T, i[4], i[4], e * 2);
            T.save();
            T.translate(e * 45, e * 45);
            Re(T, e * -26, e * -9, e * 52, e * 18, e * 30);
            T.restore();
            se(T, i[4], i[4], e * 2);
            he(T, e * 45, e * 29, e * 7);
            se(T, i[5]);
            he(T, e * 45, e * 61, e * 7);
            se(T, i[5]);
            he(T, e * 28, e * 45, e * 7);
            se(T, i[5]);
            he(T, e * 62, e * 45, e * 7);
            se(T, i[5]);
            return o;
        }
        function Ft(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 90;
            o.height = e * 98;
            T.translate(0, e * 4);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 44, e * 44);
            T.rotate(1.4);
            ue(T, 7, e * 41, e * 10);
            se(T, i[1], i[2], e * 4);
            ue(T, 7, e * 35, e * 10);
            se(T, i[3], i[4], e * 4);
            ue(T, 7, e * 23, e * 5);
            T.restore();
            se(T, i[5]);
            T.save();
            T.translate(e * 45, e * 45);
            T.rotate(0);
            Re(T, e * -9, e * -25.5, e * 18, e * 51, e * 30);
            T.restore();
            se(T, i[4], i[4], e * 2);
            T.save();
            T.translate(e * 45, e * 45);
            T.rotate(0);
            Re(T, e * -26, e * -9, e * 52, e * 18, e * 30);
            T.restore();
            se(T, i[4], i[4], e * 2);
            he(T, e * 45, e * 29, e * 7);
            se(T, i[5]);
            he(T, e * 45, e * 61, e * 7);
            se(T, i[5]);
            he(T, e * 28, e * 45, e * 7);
            se(T, i[5]);
            he(T, e * 62, e * 45, e * 7);
            se(T, i[5]);
            return o;
        }
        function xt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 90;
            o.height = e * 98;
            T.translate(0, e * 4);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 44, e * 50);
            T.rotate(1);
            ue(T, 8, e * 41, e * 10);
            se(T, i[0]);
            T.restore();
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 44, e * 44);
            T.rotate(1);
            ue(T, 8, e * 41, e * 10);
            se(T, i[1], i[2], e * 4);
            T.rotate(0.56);
            ue(T, 8, e * 33, e * 10);
            se(T, i[3], i[4], e * 4);
            T.rotate(0.28);
            ue(T, 8, e * 24, e * 8);
            se(T, i[5]);
            T.restore();
            T.save();
            T.translate(e * 45, e * 45);
            T.rotate(0);
            Re(T, e * -9, e * -25.5, e * 18, e * 51, e * 30);
            T.restore();
            se(T, i[4], i[4], e * 2);
            T.save();
            T.translate(e * 45, e * 45);
            T.rotate(0);
            Re(T, e * -26, e * -9, e * 52, e * 18, e * 30);
            T.restore();
            se(T, i[4], i[4], e * 2);
            he(T, e * 45, e * 29, e * 7);
            se(T, i[5]);
            he(T, e * 45, e * 61, e * 7);
            se(T, i[5]);
            he(T, e * 28, e * 45, e * 7);
            se(T, i[5]);
            he(T, e * 62, e * 45, e * 7);
            se(T, i[5]);
            return o;
        }
        function Jt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 300;
            o.height = e * 300;
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 150, e * 160);
            T.rotate(6.28);
            ue(T, 6, e * 146, e * 30);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 150, e * 150);
            T.rotate(6.28);
            ue(T, 6, e * 146, e * 30);
            T.restore();
            se(T, i[1], i[2], e * 8);
            T.save();
            T.translate(e * 150, e * 150);
            T.rotate(0);
            ue(T, 6, e * 105, e * 30);
            T.restore();
            se(T, i[3], i[3], e * 8);
            T.save();
            T.translate(e * 150, e * 150);
            T.rotate(0);
            ue(T, 6, e * 66, e * 30);
            T.restore();
            se(T, i[4], i[2], e * 8);
            T.save();
            T.translate(e * 150, e * 150);
            T.rotate(0);
            ue(T, 6, e * 31, e * 30);
            T.restore();
            se(T, i[5], i[6], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 150, e * 207);
            T.bezierCurveTo(e * 150, e * 151, e * 150, e * 101, e * 150, e * 94);
            T.closePath();
            se(T, undefined, i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 118, e * 100);
            T.bezierCurveTo(e * 118, e * 205, e * 118, e * 207, e * 118, e * 200);
            T.closePath();
            se(T, undefined, i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 183, e * 100);
            T.bezierCurveTo(e * 183, e * 203, e * 183, e * 203, e * 183, e * 200);
            T.closePath();
            se(T, undefined, i[2], e * 8);
            return o;
        }
        function Xt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 300;
            o.height = e * 300;
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 150, e * 160);
            T.rotate(6.28);
            ue(T, 6, e * 146, e * 30);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 150, e * 150);
            T.rotate(6.28);
            ue(T, 6, e * 146, e * 30);
            T.restore();
            se(T, i[1], i[2], e * 8);
            T.save();
            T.translate(e * 150, e * 150);
            T.rotate(0);
            ue(T, 6, e * 105, e * 30);
            T.restore();
            se(T, i[3], i[3], e * 8);
            T.save();
            T.translate(e * 150, e * 150);
            T.rotate(0);
            ue(T, 6, e * 66, e * 30);
            T.restore();
            se(T, i[4], i[2], e * 8);
            T.save();
            T.translate(e * 131, e * 116);
            ue(T, 7, e * 17, e * 8);
            T.restore();
            se(T, i[6]);
            T.save();
            T.translate(e * 163, e * 168);
            ue(T, 7, e * 25, e * 8);
            T.restore();
            se(T, i[6]);
            T.save();
            T.translate(e * 117, e * 151);
            ue(T, 7, e * 11, e * 8);
            T.restore();
            se(T, i[6]);
            T.save();
            T.translate(e * 167, e * 122);
            ue(T, 7, e * 12, e * 8);
            T.restore();
            se(T, i[6]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 150, e * 207);
            T.bezierCurveTo(e * 150, e * 151, e * 150, e * 101, e * 150, e * 94);
            T.closePath();
            se(T, undefined, i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 118, e * 100);
            T.bezierCurveTo(e * 118, e * 205, e * 118, e * 207, e * 118, e * 200);
            T.closePath();
            se(T, undefined, i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 183, e * 100);
            T.bezierCurveTo(e * 183, e * 203, e * 183, e * 203, e * 183, e * 200);
            T.closePath();
            se(T, undefined, i[2], e * 8);
            return o;
        }
        function qt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 90;
            o.height = e * 98;
            T.translate(0, e * 4);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 44, e * 44);
            T.rotate(0.2);
            ue(T, 9, e * 41, e * 10);
            se(T, i[1], i[2], e * 4);
            T.rotate(-0.32);
            ue(T, 9, e * 32, e * 10);
            se(T, i[3], i[4], e * 4);
            T.rotate(0.68);
            ue(T, 9, e * 23, e * 8);
            se(T, i[5], i[6], e * 6);
            T.restore();
            T.save();
            T.translate(e * 45, e * 45);
            T.rotate(0);
            Re(T, e * -9, e * -25.5, e * 18, e * 51, e * 30);
            T.restore();
            se(T, i[4], i[4], e * 2);
            T.save();
            T.translate(e * 45, e * 45);
            T.rotate(0);
            Re(T, e * -26, e * -9, e * 52, e * 18, e * 30);
            T.restore();
            se(T, i[4], i[4], e * 2);
            he(T, e * 45, e * 29, e * 7);
            se(T, i[5]);
            he(T, e * 45, e * 61, e * 7);
            se(T, i[5]);
            he(T, e * 28, e * 45, e * 7);
            se(T, i[5]);
            he(T, e * 62, e * 45, e * 7);
            se(T, i[5]);
            return o;
        }
        function jt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 135;
            o.height = e * 120;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 3.5, e * 55.25);
            T.bezierCurveTo(e * 3.5, e * 114.25, e * 2.5, e * 109.25, e * 3.5, e * 112.25);
            T.bezierCurveTo(e * 5.5, e * 119.25, e * 8.5, e * 119.25, e * 11.5, e * 119.25);
            T.bezierCurveTo(e * 15.5, e * 114.25, e * 13.5, e * 95.25, e * 14.5, e * 82.25);
            T.closePath();
            se(T, i[0], i[1], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 6.5, e * 43.25);
            T.bezierCurveTo(e * 3.5, e * 27.25, e * 7.5, e * 20.25, e * 25.5, e * 11.25);
            T.bezierCurveTo(e * 45.5, e * -0.75, e * 73.5, e * 1.25, e * 107.5, e * 10.25);
            T.bezierCurveTo(e * 131.5, e * 21.25, e * 125.5, e * 34.25, e * 125.5, e * 36.25);
            T.closePath();
            se(T, i[0], i[1], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 120.5, e * 62.25);
            T.bezierCurveTo(e * 121.5, e * 95.25, e * 120.5, e * 80.25, e * 120.5, e * 100.25);
            T.bezierCurveTo(e * 118.5, e * 119.25, e * 123.5, e * 118.25, e * 129.5, e * 113.25);
            T.bezierCurveTo(e * 133.5, e * 107.25, e * 130.5, e * 97.25, e * 130.5, e * 87.25);
            T.bezierCurveTo(e * 129.5, e * 56.25, e * 130, e * 70.75, e * 129.5, e * 54.25);
            T.closePath();
            se(T, i[0], i[1], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 17.5, e * 27);
            T.bezierCurveTo(e * 48.5, e * 5, e * 93.5, e * 14, e * 118.5, e * 26);
            T.bezierCurveTo(e * 132.5, e * 35, e * 133.5, e * 52, e * 132.5, e * 68);
            T.bezierCurveTo(e * 125.5, e * 87, e * 116.5, e * 84, e * 96.5, e * 75);
            T.bezierCurveTo(e * 60.5, e * 66, e * 52.5, e * 74, e * 37.5, e * 78);
            T.bezierCurveTo(e * 2.5, e * 86, e * 3.5, e * 78, e * 1.5, e * 61);
            T.bezierCurveTo(e * 1.5, e * 37, e * 9.5, e * 32, e * 15.5, e * 28);
            T.closePath();
            se(T, i[2], i[3], e * 7);
            return o;
        }
        function Zt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 501;
            o.height = e * 309;
            T.translate(0, e * 6);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 126, e * 184);
            T.bezierCurveTo(e * 169, e * 196, e * 194, e * 198, e * 227, e * 198);
            T.bezierCurveTo(e * 235, e * 222, e * 236, e * 223, e * 241, e * 226);
            T.bezierCurveTo(e * 245, e * 228, e * 257, e * 228, e * 263, e * 226);
            T.bezierCurveTo(e * 267, e * 225, e * 270, e * 211, e * 275, e * 198);
            T.bezierCurveTo(e * 332, e * 194, e * 347, e * 192, e * 372, e * 188);
            T.bezierCurveTo(e * 366, e * 174.5, e * 366, e * 174.5, e * 360, e * 161);
            T.bezierCurveTo(e * 253.5, e * 162, e * 253.5, e * 162, e * 147, e * 163);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 100, e * 116);
            T.bezierCurveTo(e * 90, e * 101, e * 96, e * 89, e * 106, e * 83);
            T.bezierCurveTo(e * 86, e * 79, e * 86, e * 52, e * 93, e * 38);
            T.bezierCurveTo(e * 99, e * 51, e * 107, e * 57, e * 122, e * 63);
            T.bezierCurveTo(e * 130, e * 53, e * 141, e * 46, e * 161, e * 46);
            T.bezierCurveTo(e * 157, e * 31, e * 158, e * 20, e * 169, e * 6);
            T.bezierCurveTo(e * 171, e * 24, e * 186, e * 33, e * 198, e * 45);
            T.bezierCurveTo(e * 252, e * 45, e * 252, e * 45, e * 306, e * 45);
            T.bezierCurveTo(e * 323, e * 33, e * 332, e * 21, e * 335, e * 7);
            T.bezierCurveTo(e * 349, e * 21, e * 347, e * 36, e * 345, e * 46);
            T.bezierCurveTo(e * 364, e * 46, e * 369, e * 48, e * 377, e * 63);
            T.bezierCurveTo(e * 398, e * 58, e * 403, e * 49, e * 409, e * 40);
            T.bezierCurveTo(e * 419, e * 57, e * 411, e * 79, e * 398, e * 85);
            T.bezierCurveTo(e * 405, e * 100, e * 405, e * 106, e * 401, e * 118);
            T.bezierCurveTo(e * 332.5, e * 128.5, e * 332.5, e * 128.5, e * 264, e * 139);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 122, e * 191);
            T.bezierCurveTo(e * 123, e * 237, e * 135, e * 245, e * 153, e * 259);
            T.bezierCurveTo(e * 167, e * 269, e * 158, e * 281, e * 118, e * 276);
            T.bezierCurveTo(e * 104, e * 273, e * 98, e * 268, e * 93, e * 242);
            T.bezierCurveTo(e * 89, e * 220, e * 92, e * 201, e * 102, e * 179);
            T.closePath();
            se(T, i[3], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 403, e * 182);
            T.bezierCurveTo(e * 414, e * 215, e * 412, e * 232, e * 403, e * 260);
            T.bezierCurveTo(e * 395, e * 274, e * 375, e * 272, e * 356, e * 270);
            T.bezierCurveTo(e * 345, e * 268, e * 339, e * 262, e * 354, e * 252);
            T.bezierCurveTo(e * 370, e * 242, e * 380, e * 225, e * 384, e * 184);
            T.closePath();
            se(T, i[3], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 155, e * 157);
            T.bezierCurveTo(e * 146, e * 189, e * 137, e * 198, e * 114, e * 219);
            T.bezierCurveTo(e * 104, e * 212, e * 98, e * 203, e * 89, e * 189);
            T.bezierCurveTo(e * 82, e * 178, e * 91, e * 164, e * 93, e * 136);
            T.closePath();
            se(T, i[4], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 347, e * 162);
            T.bezierCurveTo(e * 357, e * 195, e * 376, e * 209, e * 387, e * 217);
            T.bezierCurveTo(e * 409, e * 201, e * 420, e * 181, e * 416, e * 166);
            T.bezierCurveTo(e * 410, e * 150, e * 412, e * 149, e * 408, e * 130);
            T.closePath();
            se(T, i[4], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 86, e * 134);
            T.bezierCurveTo(e * 79, e * 102, e * 92, e * 84, e * 108, e * 92);
            T.bezierCurveTo(e * 149, e * 108, e * 184, e * 111, e * 242, e * 111);
            T.bezierCurveTo(e * 294, e * 108, e * 341, e * 105, e * 386, e * 98);
            T.bezierCurveTo(e * 412, e * 91, e * 417, e * 86, e * 415, e * 133);
            T.bezierCurveTo(e * 413, e * 160, e * 413, e * 160, e * 368, e * 174);
            T.bezierCurveTo(e * 308, e * 184, e * 291, e * 185, e * 270, e * 186);
            T.bezierCurveTo(e * 264, e * 206, e * 262, e * 215, e * 253, e * 215);
            T.bezierCurveTo(e * 239, e * 217, e * 239, e * 211, e * 231, e * 186);
            T.bezierCurveTo(e * 178, e * 184, e * 156, e * 179, e * 112, e * 162);
            T.bezierCurveTo(e * 87, e * 151, e * 90, e * 144, e * 87, e * 137);
            T.closePath();
            se(T, i[4], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 63, e * 98);
            T.bezierCurveTo(e * 84, e * 121, e * 109, e * 102, e * 124, e * 117);
            T.bezierCurveTo(e * 138, e * 136, e * 123, e * 165, e * 94, e * 150);
            T.bezierCurveTo(e * 66, e * 131, e * 64, e * 115, e * 63, e * 99);
            T.closePath();
            se(T, i[3], i[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 449, e * 97);
            T.bezierCurveTo(e * 446, e * 143, e * 415, e * 151, e * 402, e * 155);
            T.bezierCurveTo(e * 386, e * 157, e * 373, e * 133, e * 391, e * 116);
            T.bezierCurveTo(e * 402, e * 106, e * 432, e * 124, e * 449, e * 97);
            T.closePath();
            se(T, i[3], i[2], e * 10);
            return o;
        }
        function $t(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 304;
            o.height = e * 278;
            T.translate(e * 10, e * 25);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 128, e * 137);
            T.bezierCurveTo(e * 155, e * 144, e * 223, e * 143, e * 256, e * 122);
            T.bezierCurveTo(e * 249, e * 180, e * 210, e * 227, e * 164, e * 242);
            T.bezierCurveTo(e * 74, e * 213, e * 99, e * 166, e * 127, e * 138);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 284, e * 52);
            T.bezierCurveTo(e * 126, e * 112, e * 89, e * 177, e * 170, e * 241);
            T.bezierCurveTo(e * 103, e * 275, e * 20, e * 239, e * 12, e * 159);
            T.bezierCurveTo(e * 5, e * 76, e * 75, e * 4, e * 165, e * 13);
            T.bezierCurveTo(e * 233, e * 15, e * 260, e * 33, e * 284, e * 52);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -10, e * -25);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 128, e * 137);
            T.bezierCurveTo(e * 155, e * 144, e * 223, e * 143, e * 256, e * 122);
            T.bezierCurveTo(e * 249, e * 180, e * 210, e * 227, e * 164, e * 242);
            T.bezierCurveTo(e * 74, e * 213, e * 99, e * 166, e * 127, e * 138);
            T.closePath();
            se(T, i[1], i[2], e * 15);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 284, e * 52);
            T.bezierCurveTo(e * 126, e * 112, e * 89, e * 177, e * 170, e * 241);
            T.bezierCurveTo(e * 103, e * 275, e * 20, e * 239, e * 12, e * 159);
            T.bezierCurveTo(e * 5, e * 76, e * 75, e * 4, e * 165, e * 13);
            T.bezierCurveTo(e * 233, e * 15, e * 260, e * 33, e * 284, e * 52);
            T.closePath();
            se(T, i[3], i[4], e * 15);
            return o;
        }
        function Qt(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 175;
            o.height = e * 169;
            T.globalAlpha = 0.5;
            T.translate(0, e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 19, e * 139);
            T.bezierCurveTo(e * 18, e * 163, e * 22, e * 156, e * 53, e * 157);
            T.bezierCurveTo(e * 97.5, e * 157, e * 97.5, e * 157, e * 142, e * 157);
            T.bezierCurveTo(e * 150, e * 157, e * 153, e * 156, e * 154, e * 142);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -3);
            T.save();
            T.translate(e * 86.5, e * 81.5);
            Re(T, e * -66.5, e * -65.5, e * 133, e * 131, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 5);
            T.save();
            T.translate(e * 84.5, e * 79);
            Re(T, e * -50.5, e * -49, e * 101, e * 98, e * 10);
            T.restore();
            se(T, i[3], i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42, e * 54);
            T.bezierCurveTo(e * 37, e * 48, e * 39, e * 44, e * 38, e * 41);
            T.bezierCurveTo(e * 42, e * 40, e * 45, e * 40, e * 50, e * 41);
            T.bezierCurveTo(e * 85, e * 36, e * 98, e * 37, e * 116, e * 42);
            T.bezierCurveTo(e * 132, e * 39, e * 132, e * 39, e * 133, e * 56);
            T.bezierCurveTo(e * 136, e * 73, e * 136, e * 84, e * 132, e * 106);
            T.bezierCurveTo(e * 47, e * 113, e * 85.5, e * 106, e * 39, e * 106);
            T.bezierCurveTo(e * 32, e * 81, e * 38, e * 60, e * 42, e * 55);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.save();
            T.translate(e * 28, e * 24);
            T.rotate(0);
            Re(T, e * -14, e * -14, e * 28, e * 28, e * 4);
            T.restore();
            se(T, i[1], i[2], e * 5);
            T.save();
            T.translate(e * 143, e * 23);
            T.rotate(0);
            Re(T, e * -14, e * -14, e * 28, e * 28, e * 4);
            T.restore();
            se(T, i[1], i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 80);
            T.bezierCurveTo(e * 73, e * 78, e * 84, e * 74, e * 100, e * 64);
            T.bezierCurveTo(e * 111, e * 57, e * 125, e * 67, e * 108, e * 84);
            T.bezierCurveTo(e * 96, e * 95, e * 86, e * 96, e * 70, e * 88);
            T.bezierCurveTo(e * 62.5, e * 84, e * 62.5, e * 84, e * 55, e * 80);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 17, e * 112);
            T.bezierCurveTo(e * 14, e * 146, e * 27, e * 152, e * 37, e * 149);
            T.bezierCurveTo(e * 78, e * 155, e * 128, e * 150, e * 146, e * 150);
            T.bezierCurveTo(e * 158, e * 144, e * 158, e * 121, e * 153, e * 114);
            T.closePath();
            se(T, i[8], i[9], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 127, e * 111);
            T.bezierCurveTo(e * 133, e * 136, e * 115, e * 149, e * 88, e * 150);
            T.bezierCurveTo(e * 119.5, e * 151, e * 119.5, e * 151, e * 151, e * 152);
            T.bezierCurveTo(e * 159, e * 136, e * 155, e * 126, e * 154, e * 113);
            T.closePath();
            se(T, i[9]);
            T.globalAlpha = 0.5;
            T.translate(0, e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 15, e * 117);
            T.bezierCurveTo(e * 34, e * 109, e * 61, e * 106, e * 94, e * 109);
            T.bezierCurveTo(e * 126, e * 110, e * 142, e * 113, e * 154, e * 119);
            T.bezierCurveTo(e * 154, e * 123, e * 154, e * 123, e * 154, e * 127);
            T.bezierCurveTo(e * 127, e * 118, e * 15, e * 122, e * 18, e * 129);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 14, e * 127);
            T.bezierCurveTo(e * 13, e * 117, e * 12, e * 109, e * 15, e * 103);
            T.bezierCurveTo(e * 16, e * 95, e * 21, e * 92, e * 60, e * 93);
            T.bezierCurveTo(e * 91, e * 93, e * 118, e * 93, e * 143, e * 96);
            T.bezierCurveTo(e * 151, e * 96, e * 155, e * 99, e * 156, e * 112);
            T.bezierCurveTo(e * 157, e * 124, e * 157, e * 127, e * 156, e * 128);
            T.bezierCurveTo(e * 138, e * 112, e * 100, e * 118, e * 84, e * 118);
            T.bezierCurveTo(e * 28, e * 118, e * 20, e * 120, e * 16, e * 127);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.save();
            T.translate(e * 27.5, e * 138.5);
            Re(T, e * -13.5, e * -14.5, e * 27, e * 29, e * 4);
            T.restore();
            se(T, i[1], i[2], e * 5);
            T.save();
            T.translate(e * 143.5, e * 137);
            Re(T, e * -13.5, e * -14, e * 27, e * 28, e * 4);
            T.restore();
            se(T, i[1], i[2], e * 5);
            return o;
        }
        function ei(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 175;
            o.height = e * 169;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 17, e * 112);
            T.bezierCurveTo(e * 14, e * 146, e * 27, e * 152, e * 37, e * 149);
            T.bezierCurveTo(e * 78, e * 155, e * 128, e * 150, e * 146, e * 150);
            T.bezierCurveTo(e * 158, e * 144, e * 158, e * 121, e * 153, e * 114);
            T.closePath();
            se(T, i[8], i[9], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 127, e * 111);
            T.bezierCurveTo(e * 133, e * 136, e * 115, e * 149, e * 88, e * 150);
            T.bezierCurveTo(e * 119.5, e * 151, e * 119.5, e * 151, e * 151, e * 152);
            T.bezierCurveTo(e * 159, e * 136, e * 155, e * 126, e * 154, e * 113);
            T.closePath();
            se(T, i[9]);
            T.globalAlpha = 0.5;
            T.translate(0, e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 15, e * 117);
            T.bezierCurveTo(e * 34, e * 109, e * 61, e * 106, e * 94, e * 109);
            T.bezierCurveTo(e * 126, e * 110, e * 142, e * 113, e * 154, e * 119);
            T.bezierCurveTo(e * 154, e * 123, e * 154, e * 123, e * 154, e * 127);
            T.bezierCurveTo(e * 127, e * 118, e * 15, e * 122, e * 18, e * 129);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 14, e * 127);
            T.bezierCurveTo(e * 13, e * 117, e * 12, e * 109, e * 15, e * 103);
            T.bezierCurveTo(e * 16, e * 95, e * 21, e * 92, e * 60, e * 93);
            T.bezierCurveTo(e * 91, e * 93, e * 118, e * 93, e * 143, e * 96);
            T.bezierCurveTo(e * 151, e * 96, e * 155, e * 99, e * 156, e * 112);
            T.bezierCurveTo(e * 157, e * 124, e * 157, e * 127, e * 156, e * 128);
            T.bezierCurveTo(e * 138, e * 112, e * 100, e * 118, e * 84, e * 118);
            T.bezierCurveTo(e * 28, e * 118, e * 20, e * 120, e * 16, e * 127);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.save();
            T.translate(e * 27.5, e * 138.5);
            Re(T, e * -13.5, e * -14.5, e * 27, e * 29, e * 4);
            T.restore();
            se(T, i[1], i[2], e * 5);
            T.save();
            T.translate(e * 143.5, e * 137);
            Re(T, e * -13.5, e * -14, e * 27, e * 28, e * 4);
            T.restore();
            se(T, i[1], i[2], e * 5);
            return o;
        }
        function ti(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 115;
            o.height = e * 585;
            T.scale(-1, 1);
            T.translate(e * -110, 0);
            T.translate(e * 10, e * 10);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 51.5, e * 342);
            Re(T, e * -14.5, e * -225, e * 29, e * 450, e * 20);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 54, e * 83);
            T.bezierCurveTo(e * 70, e * 69, e * 78, e * 62, e * 82, e * 40);
            T.bezierCurveTo(e * 93, e * 48, e * 103, e * 64, e * 95, e * 102);
            T.bezierCurveTo(e * 60, e * 114, e * 53, e * 103, e * 54, e * 85);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 95, e * 97);
            T.bezierCurveTo(e * 56, e * 102, e * 43, e * 77, e * 71, e * 6);
            T.bezierCurveTo(e * 34, e * 10, e * 6, e * 43, e * 5, e * 76);
            T.bezierCurveTo(e * 4, e * 98, e * 15, e * 130, e * 64, e * 130);
            T.bezierCurveTo(e * 76, e * 129, e * 95, e * 113, e * 97, e * 97);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 176);
            T.bezierCurveTo(e * 74, e * 175, e * 82, e * 169, e * 96, e * 155);
            T.bezierCurveTo(e * 103, e * 183, e * 95, e * 214, e * 54, e * 219);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 50, e * 176);
            T.bezierCurveTo(e * 25, e * 177, e * 16, e * 164, e * 7, e * 156);
            T.bezierCurveTo(e * 0, e * 186, e * 10, e * 201, e * 43, e * 220);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 403);
            T.bezierCurveTo(e * 47, e * 412, e * 58, e * 412, e * 67, e * 403);
            T.bezierCurveTo(e * 66.5, e * 434, e * 66.5, e * 434, e * 66, e * 465);
            T.bezierCurveTo(e * 56, e * 480, e * 40, e * 472, e * 36, e * 465);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 59, e * 67);
            T.bezierCurveTo(e * 47, e * 97, e * 18, e * 117, e * 11, e * 110);
            T.bezierCurveTo(e * 11, e * 115, e * 15, e * 122, e * 23, e * 124);
            T.bezierCurveTo(e * 46, e * 118, e * 52, e * 113, e * 62, e * 86);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 125);
            T.bezierCurveTo(e * 47, e * 136, e * 57, e * 134, e * 77, e * 127);
            T.bezierCurveTo(e * 71, e * 158, e * 71, e * 159, e * 66, e * 159);
            T.bezierCurveTo(e * 50.5, e * 156.5, e * 50.5, e * 156.5, e * 35, e * 154);
            T.bezierCurveTo(e * 31, e * 145, e * 31, e * 136, e * 31, e * 125);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 171);
            T.bezierCurveTo(e * 32, e * 221, e * 43, e * 233, e * 70, e * 247);
            T.bezierCurveTo(e * 75, e * 234, e * 75, e * 230, e * 72, e * 221);
            T.bezierCurveTo(e * 48, e * 206, e * 54, e * 188, e * 50, e * 176);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 60, e * 68);
            T.bezierCurveTo(e * 63, e * 69, e * 65, e * 71, e * 67, e * 77);
            T.bezierCurveTo(e * 61, e * 123, e * 52, e * 137, e * 42, e * 150);
            T.bezierCurveTo(e * 38, e * 151, e * 38, e * 151, e * 34, e * 152);
            T.bezierCurveTo(e * 33, e * 146.5, e * 33, e * 146.5, e * 32, e * 141);
            T.bezierCurveTo(e * 49, e * 118, e * 63, e * 87, e * 59, e * 68);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 71, e * 172);
            T.bezierCurveTo(e * 56, e * 222, e * 49, e * 234, e * 35, e * 248);
            T.bezierCurveTo(e * 30, e * 236, e * 30, e * 230, e * 31, e * 217);
            T.bezierCurveTo(e * 44, e * 202, e * 49, e * 191, e * 52, e * 172);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 151);
            T.bezierCurveTo(e * 27, e * 165, e * 31, e * 173, e * 36, e * 178);
            T.bezierCurveTo(e * 56, e * 185, e * 73, e * 184, e * 71, e * 170);
            T.bezierCurveTo(e * 72, e * 154, e * 71, e * 154, e * 63, e * 155);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -10, e * -10);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 51.5, e * 342);
            Re(T, e * -14.5, e * -225, e * 29, e * 450, e * 20);
            T.restore();
            se(T, i[1], i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 54, e * 83);
            T.bezierCurveTo(e * 70, e * 69, e * 78, e * 62, e * 82, e * 40);
            T.bezierCurveTo(e * 93, e * 48, e * 103, e * 64, e * 95, e * 102);
            T.bezierCurveTo(e * 60, e * 114, e * 53, e * 103, e * 54, e * 85);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 95, e * 97);
            T.bezierCurveTo(e * 56, e * 102, e * 43, e * 77, e * 71, e * 6);
            T.bezierCurveTo(e * 34, e * 10, e * 6, e * 43, e * 5, e * 76);
            T.bezierCurveTo(e * 4, e * 98, e * 15, e * 130, e * 64, e * 130);
            T.bezierCurveTo(e * 76, e * 129, e * 95, e * 113, e * 97, e * 97);
            T.closePath();
            se(T, i[5], i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 403);
            T.bezierCurveTo(e * 47, e * 412, e * 58, e * 412, e * 67, e * 403);
            T.bezierCurveTo(e * 66.5, e * 434, e * 66.5, e * 434, e * 66, e * 465);
            T.bezierCurveTo(e * 56, e * 480, e * 40, e * 472, e * 36, e * 465);
            T.closePath();
            se(T, i[7], i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 37, e * 427);
            T.bezierCurveTo(e * 47, e * 435, e * 55, e * 435, e * 67, e * 427);
            se(T, undefined, i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36, e * 448);
            T.bezierCurveTo(e * 46, e * 454, e * 54, e * 457, e * 65, e * 449);
            se(T, undefined, i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 176);
            T.bezierCurveTo(e * 74, e * 175, e * 82, e * 169, e * 96, e * 155);
            T.bezierCurveTo(e * 103, e * 183, e * 95, e * 214, e * 54, e * 219);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 50, e * 176);
            T.bezierCurveTo(e * 25, e * 177, e * 16, e * 164, e * 7, e * 156);
            T.bezierCurveTo(e * 0, e * 186, e * 10, e * 201, e * 43, e * 220);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 59, e * 67);
            T.bezierCurveTo(e * 47, e * 97, e * 18, e * 117, e * 11, e * 110);
            T.bezierCurveTo(e * 11, e * 115, e * 15, e * 122, e * 23, e * 124);
            T.bezierCurveTo(e * 46, e * 118, e * 52, e * 113, e * 62, e * 86);
            T.closePath();
            se(T, i[7], i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 125);
            T.bezierCurveTo(e * 47, e * 136, e * 57, e * 134, e * 77, e * 127);
            T.bezierCurveTo(e * 71, e * 158, e * 71, e * 159, e * 66, e * 159);
            T.bezierCurveTo(e * 50.5, e * 156.5, e * 50.5, e * 156.5, e * 35, e * 154);
            T.bezierCurveTo(e * 31, e * 145, e * 31, e * 136, e * 31, e * 125);
            T.closePath();
            se(T, i[7], i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 171);
            T.bezierCurveTo(e * 32, e * 221, e * 43, e * 233, e * 70, e * 247);
            T.bezierCurveTo(e * 75, e * 234, e * 75, e * 230, e * 72, e * 221);
            T.bezierCurveTo(e * 48, e * 206, e * 54, e * 188, e * 50, e * 176);
            T.closePath();
            se(T, i[7], i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 60, e * 68);
            T.bezierCurveTo(e * 63, e * 69, e * 65, e * 71, e * 67, e * 77);
            T.bezierCurveTo(e * 61, e * 123, e * 52, e * 137, e * 42, e * 150);
            T.bezierCurveTo(e * 38, e * 151, e * 38, e * 151, e * 34, e * 152);
            T.bezierCurveTo(e * 33, e * 146.5, e * 33, e * 146.5, e * 32, e * 141);
            T.bezierCurveTo(e * 49, e * 118, e * 63, e * 87, e * 59, e * 68);
            T.closePath();
            se(T, i[7], i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 71, e * 172);
            T.bezierCurveTo(e * 56, e * 222, e * 49, e * 234, e * 35, e * 248);
            T.bezierCurveTo(e * 30, e * 236, e * 30, e * 230, e * 31, e * 217);
            T.bezierCurveTo(e * 44, e * 202, e * 49, e * 191, e * 52, e * 172);
            T.closePath();
            se(T, i[7], i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 151);
            T.bezierCurveTo(e * 27, e * 165, e * 31, e * 173, e * 36, e * 178);
            T.bezierCurveTo(e * 56, e * 185, e * 73, e * 184, e * 71, e * 170);
            T.bezierCurveTo(e * 72, e * 154, e * 71, e * 154, e * 63, e * 155);
            T.closePath();
            se(T, i[7], i[8], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 53, e * 113);
            T.bezierCurveTo(e * 65, e * 140, e * 75, e * 166, e * 52, e * 169);
            T.bezierCurveTo(e * 29, e * 168, e * 41, e * 143, e * 53, e * 112);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            return o;
        }
        function ii(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 81;
            o.height = e * 626;
            T.translate(e * 20, e * 20);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 565);
            T.bezierCurveTo(e * 56, e * 586, e * 53, e * 591, e * 40, e * 592);
            T.bezierCurveTo(e * 28, e * 591, e * 27, e * 583, e * 28, e * 557);
            T.bezierCurveTo(e * 27.5, e * 346, e * 27.5, e * 346, e * 27, e * 135);
            T.bezierCurveTo(e * 26, e * 74, e * 36, e * 26, e * 41, e * 15);
            T.bezierCurveTo(e * 54, e * 51, e * 54, e * 81, e * 55, e * 128);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -20, e * -20);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 565);
            T.bezierCurveTo(e * 56, e * 586, e * 53, e * 591, e * 40, e * 592);
            T.bezierCurveTo(e * 28, e * 591, e * 27, e * 583, e * 28, e * 557);
            T.bezierCurveTo(e * 27.5, e * 346, e * 27.5, e * 346, e * 27, e * 135);
            T.bezierCurveTo(e * 26, e * 74, e * 36, e * 26, e * 41, e * 15);
            T.bezierCurveTo(e * 54, e * 51, e * 54, e * 81, e * 55, e * 128);
            T.closePath();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 27, e * 129);
            T.bezierCurveTo(e * 32, e * 135, e * 48, e * 136, e * 53, e * 129);
            T.bezierCurveTo(e * 56, e * 97, e * 53, e * 82, e * 52, e * 64);
            T.bezierCurveTo(e * 49, e * 33, e * 44, e * 27, e * 41, e * 21);
            T.bezierCurveTo(e * 31, e * 40, e * 28, e * 84, e * 27, e * 127);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55, e * 565);
            T.bezierCurveTo(e * 56, e * 586, e * 53, e * 591, e * 40, e * 592);
            T.bezierCurveTo(e * 28, e * 591, e * 27, e * 583, e * 28, e * 557);
            T.bezierCurveTo(e * 27.5, e * 346, e * 27.5, e * 346, e * 27, e * 135);
            T.bezierCurveTo(e * 26, e * 74, e * 36, e * 26, e * 41, e * 15);
            T.bezierCurveTo(e * 54, e * 51, e * 54, e * 81, e * 55, e * 128);
            T.closePath();
            se(T, undefined, i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 28, e * 475);
            T.bezierCurveTo(e * 38, e * 482, e * 48, e * 480, e * 54, e * 474);
            T.bezierCurveTo(e * 54, e * 509.5, e * 54, e * 509.5, e * 54, e * 545);
            T.bezierCurveTo(e * 46, e * 554, e * 36, e * 552, e * 28, e * 545);
            T.closePath();
            se(T, i[4], i[5], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 28, e * 496);
            T.bezierCurveTo(e * 39, e * 506, e * 49, e * 503, e * 54, e * 496);
            se(T, undefined, i[5], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 28, e * 521);
            T.bezierCurveTo(e * 41, e * 529, e * 49, e * 524, e * 54, e * 520);
            se(T, undefined, i[5], e * 8);
            return o;
        }
        function oi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 100;
            o.height = e * 648;
            T.translate(e * 20, e * 20);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 50.5, e * 349.5);
            Re(T, e * -13.5, e * -249.5, e * 27, e * 499, e * 10);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36, e * 538);
            T.bezierCurveTo(e * 49.5, e * 538, e * 49.5, e * 538, e * 63, e * 538);
            T.bezierCurveTo(e * 63.5, e * 568, e * 63.5, e * 568, e * 64, e * 598);
            T.bezierCurveTo(e * 50, e * 598, e * 50, e * 598, e * 36, e * 598);
            T.bezierCurveTo(e * 36, e * 568.5, e * 36, e * 568.5, e * 36, e * 539);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36, e * 554);
            T.bezierCurveTo(e * 45, e * 561, e * 56, e * 558, e * 63, e * 554);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 32, e * 569);
            T.bezierCurveTo(e * 44, e * 576, e * 58, e * 574, e * 68, e * 569);
            T.bezierCurveTo(e * 68, e * 584, e * 68, e * 584, e * 68, e * 599);
            T.bezierCurveTo(e * 68, e * 608, e * 65, e * 618, e * 49, e * 617);
            T.bezierCurveTo(e * 34, e * 617, e * 32, e * 610, e * 32, e * 598);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 41, e * 581);
            T.bezierCurveTo(e * 48, e * 584, e * 55, e * 583, e * 60, e * 581);
            T.bezierCurveTo(e * 60, e * 589.5, e * 60, e * 589.5, e * 60, e * 598);
            T.bezierCurveTo(e * 60, e * 604, e * 59, e * 609, e * 48, e * 608);
            T.bezierCurveTo(e * 40, e * 607, e * 40, e * 606, e * 41, e * 581);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31, e * 106);
            T.bezierCurveTo(e * 31, e * 124.5, e * 31, e * 124.5, e * 31, e * 143);
            T.bezierCurveTo(e * 31, e * 163, e * 38, e * 169, e * 48, e * 168);
            T.bezierCurveTo(e * 57, e * 168, e * 67, e * 165, e * 67, e * 148);
            T.bezierCurveTo(e * 67, e * 123.5, e * 67, e * 123.5, e * 67, e * 99);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 49, e * 27);
            T.bezierCurveTo(e * 64, e * 62.5, e * 64, e * 62.5, e * 79, e * 98);
            T.bezierCurveTo(e * 74, e * 113, e * 63, e * 121, e * 50, e * 122);
            T.bezierCurveTo(e * 35, e * 123, e * 22, e * 109, e * 20, e * 98);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 49, e * 43);
            T.bezierCurveTo(e * 61, e * 70, e * 61, e * 70, e * 73, e * 97);
            T.bezierCurveTo(e * 66, e * 116, e * 43, e * 122, e * 26, e * 99);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -20, e * -20);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 50.5, e * 349.5);
            Re(T, e * -13.5, e * -249.5, e * 27, e * 499, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36, e * 538);
            T.bezierCurveTo(e * 49.5, e * 538, e * 49.5, e * 538, e * 63, e * 538);
            T.bezierCurveTo(e * 63.5, e * 568, e * 63.5, e * 568, e * 64, e * 598);
            T.bezierCurveTo(e * 50, e * 598, e * 50, e * 598, e * 36, e * 598);
            T.bezierCurveTo(e * 36, e * 568.5, e * 36, e * 568.5, e * 36, e * 539);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36, e * 554);
            T.bezierCurveTo(e * 45, e * 561, e * 56, e * 558, e * 63, e * 554);
            T.closePath();
            se(T, undefined, i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 32, e * 569);
            T.bezierCurveTo(e * 44, e * 576, e * 58, e * 574, e * 68, e * 569);
            T.bezierCurveTo(e * 68, e * 584, e * 68, e * 584, e * 68, e * 599);
            T.bezierCurveTo(e * 68, e * 608, e * 65, e * 618, e * 49, e * 617);
            T.bezierCurveTo(e * 34, e * 617, e * 32, e * 610, e * 32, e * 598);
            T.closePath();
            se(T, i[5], i[6], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 41, e * 581);
            T.bezierCurveTo(e * 48, e * 584, e * 55, e * 583, e * 60, e * 581);
            T.bezierCurveTo(e * 60, e * 589.5, e * 60, e * 589.5, e * 60, e * 598);
            T.bezierCurveTo(e * 60, e * 604, e * 59, e * 609, e * 48, e * 608);
            T.bezierCurveTo(e * 40, e * 607, e * 40, e * 606, e * 41, e * 581);
            T.closePath();
            se(T, i[7]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31, e * 106);
            T.bezierCurveTo(e * 31, e * 124.5, e * 31, e * 124.5, e * 31, e * 143);
            T.bezierCurveTo(e * 31, e * 163, e * 38, e * 169, e * 48, e * 168);
            T.bezierCurveTo(e * 57, e * 168, e * 67, e * 165, e * 67, e * 148);
            T.bezierCurveTo(e * 67, e * 123.5, e * 67, e * 123.5, e * 67, e * 99);
            T.closePath();
            se(T, i[5], i[6], e * 8);
            T.save();
            T.translate(e * -46, e * -50);
            T.scale(2, 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 51, e * 80);
            T.bezierCurveTo(e * 51, e * 89.5, e * 51, e * 89.5, e * 51, e * 99);
            T.bezierCurveTo(e * 49, e * 103, e * 46, e * 105, e * 44, e * 99);
            T.bezierCurveTo(e * 44, e * 88.5, e * 44, e * 88.5, e * 44, e * 78);
            T.closePath();
            se(T, i[8]);
            T.restore();
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 49, e * 27);
            T.bezierCurveTo(e * 64, e * 62.5, e * 64, e * 62.5, e * 79, e * 98);
            T.bezierCurveTo(e * 74, e * 113, e * 63, e * 121, e * 50, e * 122);
            T.bezierCurveTo(e * 35, e * 123, e * 22, e * 109, e * 20, e * 98);
            T.closePath();
            se(T, i[8], i[9], e * 8);
            T.scale(2, 2);
            T.translate(e * -23, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 57, e * 69);
            T.bezierCurveTo(e * 50, e * 76, e * 43, e * 75, e * 38, e * 69);
            T.bezierCurveTo(e * 43, e * 57, e * 43, e * 57, e * 48, e * 45);
            T.closePath();
            se(T, i[10]);
            return o;
        }
        function Ti(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 88;
            o.height = e * 647;
            T.translate(e * 20, e * 20);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 45, e * 384.5);
            Re(T, e * -15, e * -216.5, e * 30, e * 433, e * 10);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 27, e * 572);
            T.bezierCurveTo(e * 44, e * 580, e * 55, e * 576, e * 62, e * 572);
            T.bezierCurveTo(e * 65, e * 585.5, e * 65, e * 585.5, e * 68, e * 599);
            T.bezierCurveTo(e * 71, e * 612, e * 68, e * 618, e * 34, e * 616);
            T.bezierCurveTo(e * 14, e * 615, e * 19, e * 607, e * 27, e * 573);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 32, e * 587);
            T.bezierCurveTo(e * 39, e * 590, e * 48, e * 588, e * 54, e * 587);
            T.bezierCurveTo(e * 57, e * 604, e * 59, e * 609, e * 46, e * 609);
            T.bezierCurveTo(e * 27, e * 609, e * 28, e * 605, e * 33, e * 588);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31, e * 113);
            T.bezierCurveTo(e * 27, e * 139, e * 27, e * 139, e * 23, e * 165);
            T.bezierCurveTo(e * 18, e * 187, e * 39, e * 195, e * 57, e * 186);
            T.bezierCurveTo(e * 68, e * 180, e * 65, e * 171, e * 62, e * 153);
            T.bezierCurveTo(e * 58.5, e * 131, e * 58.5, e * 131, e * 55, e * 109);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 39, e * 139);
            T.bezierCurveTo(e * 43, e * 139, e * 43, e * 139, e * 47, e * 139);
            T.bezierCurveTo(e * 51, e * 158, e * 56, e * 176, e * 44, e * 175);
            T.bezierCurveTo(e * 33, e * 177, e * 34, e * 167, e * 39, e * 140);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 44, e * 29);
            T.bezierCurveTo(e * 57, e * 63, e * 57, e * 63, e * 70, e * 97);
            T.bezierCurveTo(e * 60, e * 111, e * 60, e * 111, e * 50, e * 125);
            T.bezierCurveTo(e * 45, e * 128, e * 41, e * 128, e * 35, e * 124);
            T.bezierCurveTo(e * 26.5, e * 110, e * 26.5, e * 110, e * 18, e * 96);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 44, e * 54);
            T.bezierCurveTo(e * 50, e * 72, e * 50, e * 72, e * 56, e * 90);
            T.bezierCurveTo(e * 58, e * 94, e * 59, e * 98, e * 53, e * 105);
            T.bezierCurveTo(e * 47, e * 113, e * 43, e * 113, e * 36, e * 103);
            T.bezierCurveTo(e * 29, e * 96, e * 31, e * 94, e * 35, e * 83);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -20, e * -20);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 45, e * 384.5);
            Re(T, e * -15, e * -216.5, e * 30, e * 433, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 27, e * 572);
            T.bezierCurveTo(e * 44, e * 580, e * 55, e * 576, e * 62, e * 572);
            T.bezierCurveTo(e * 65, e * 585.5, e * 65, e * 585.5, e * 68, e * 599);
            T.bezierCurveTo(e * 71, e * 612, e * 68, e * 618, e * 34, e * 616);
            T.bezierCurveTo(e * 14, e * 615, e * 19, e * 607, e * 27, e * 573);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 32, e * 587);
            T.bezierCurveTo(e * 39, e * 590, e * 48, e * 588, e * 54, e * 587);
            T.bezierCurveTo(e * 57, e * 604, e * 59, e * 609, e * 46, e * 609);
            T.bezierCurveTo(e * 27, e * 609, e * 28, e * 605, e * 33, e * 588);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31, e * 113);
            T.bezierCurveTo(e * 27, e * 139, e * 27, e * 139, e * 23, e * 165);
            T.bezierCurveTo(e * 18, e * 187, e * 39, e * 195, e * 57, e * 186);
            T.bezierCurveTo(e * 68, e * 180, e * 65, e * 171, e * 62, e * 153);
            T.bezierCurveTo(e * 58.5, e * 131, e * 58.5, e * 131, e * 55, e * 109);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 39, e * 139);
            T.bezierCurveTo(e * 43, e * 139, e * 43, e * 139, e * 47, e * 139);
            T.bezierCurveTo(e * 51, e * 158, e * 56, e * 176, e * 44, e * 175);
            T.bezierCurveTo(e * 33, e * 177, e * 34, e * 167, e * 39, e * 140);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 44, e * 29);
            T.bezierCurveTo(e * 57, e * 63, e * 57, e * 63, e * 70, e * 97);
            T.bezierCurveTo(e * 60, e * 111, e * 60, e * 111, e * 50, e * 125);
            T.bezierCurveTo(e * 45, e * 128, e * 41, e * 128, e * 35, e * 124);
            T.bezierCurveTo(e * 26.5, e * 110, e * 26.5, e * 110, e * 18, e * 96);
            T.closePath();
            se(T, i[6], i[7], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 44, e * 54);
            T.bezierCurveTo(e * 50, e * 72, e * 50, e * 72, e * 56, e * 90);
            T.bezierCurveTo(e * 58, e * 94, e * 59, e * 98, e * 53, e * 105);
            T.bezierCurveTo(e * 47, e * 113, e * 43, e * 113, e * 36, e * 103);
            T.bezierCurveTo(e * 29, e * 96, e * 31, e * 94, e * 35, e * 83);
            T.closePath();
            se(T, i[8]);
            return o;
        }
        function ri(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 106;
            o.height = e * 681;
            T.translate(e * 20, e * 20);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 52.5, e * 395);
            T.rotate(0);
            Re(T, e * -11.5, e * -226, e * 23, e * 452, e * 10);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 588);
            T.bezierCurveTo(e * 47, e * 596, e * 61, e * 594, e * 69, e * 588);
            T.bezierCurveTo(e * 79, e * 615, e * 78, e * 632, e * 59, e * 643);
            T.bezierCurveTo(e * 41, e * 650, e * 27, e * 632, e * 30, e * 610);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 135);
            T.bezierCurveTo(e * 61.5, e * 142, e * 61.5, e * 142, e * 71, e * 149);
            T.bezierCurveTo(e * 69.5, e * 166, e * 69.5, e * 166, e * 68, e * 183);
            T.bezierCurveTo(e * 60.5, e * 187.5, e * 60.5, e * 187.5, e * 53, e * 192);
            T.bezierCurveTo(e * 45, e * 187.5, e * 45, e * 187.5, e * 37, e * 183);
            T.bezierCurveTo(e * 35.5, e * 167, e * 35.5, e * 167, e * 34, e * 151);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 64, e * 150);
            T.bezierCurveTo(e * 63, e * 164, e * 63, e * 164, e * 62, e * 178);
            T.bezierCurveTo(e * 58, e * 181, e * 58, e * 181, e * 54, e * 184);
            T.bezierCurveTo(e * 48.5, e * 181.5, e * 48.5, e * 181.5, e * 43, e * 179);
            T.bezierCurveTo(e * 42, e * 164.5, e * 42, e * 164.5, e * 41, e * 150);
            T.bezierCurveTo(e * 46, e * 152.5, e * 46, e * 152.5, e * 51, e * 155);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 39);
            T.bezierCurveTo(e * 65.5, e * 82, e * 65.5, e * 82, e * 79, e * 125);
            T.bezierCurveTo(e * 66, e * 137.5, e * 66, e * 137.5, e * 53, e * 150);
            T.bezierCurveTo(e * 39, e * 138, e * 39, e * 138, e * 25, e * 126);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 64);
            T.bezierCurveTo(e * 60, e * 92.5, e * 60, e * 92.5, e * 68, e * 121);
            T.bezierCurveTo(e * 61, e * 127.5, e * 61, e * 127.5, e * 54, e * 134);
            T.bezierCurveTo(e * 46.5, e * 127.5, e * 46.5, e * 127.5, e * 39, e * 121);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -20, e * -20);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 52.5, e * 395);
            T.rotate(0);
            Re(T, e * -11.5, e * -226, e * 23, e * 452, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 588);
            T.bezierCurveTo(e * 47, e * 596, e * 61, e * 594, e * 69, e * 588);
            T.bezierCurveTo(e * 79, e * 615, e * 78, e * 632, e * 59, e * 643);
            T.bezierCurveTo(e * 41, e * 650, e * 27, e * 632, e * 30, e * 610);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 135);
            T.bezierCurveTo(e * 61.5, e * 142, e * 61.5, e * 142, e * 71, e * 149);
            T.bezierCurveTo(e * 69.5, e * 166, e * 69.5, e * 166, e * 68, e * 183);
            T.bezierCurveTo(e * 60.5, e * 187.5, e * 60.5, e * 187.5, e * 53, e * 192);
            T.bezierCurveTo(e * 45, e * 187.5, e * 45, e * 187.5, e * 37, e * 183);
            T.bezierCurveTo(e * 35.5, e * 167, e * 35.5, e * 167, e * 34, e * 151);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 64, e * 150);
            T.bezierCurveTo(e * 63, e * 164, e * 63, e * 164, e * 62, e * 178);
            T.bezierCurveTo(e * 58, e * 181, e * 58, e * 181, e * 54, e * 184);
            T.bezierCurveTo(e * 48.5, e * 181.5, e * 48.5, e * 181.5, e * 43, e * 179);
            T.bezierCurveTo(e * 42, e * 164.5, e * 42, e * 164.5, e * 41, e * 150);
            T.bezierCurveTo(e * 46, e * 152.5, e * 46, e * 152.5, e * 51, e * 155);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 39);
            T.bezierCurveTo(e * 65.5, e * 82, e * 65.5, e * 82, e * 79, e * 125);
            T.bezierCurveTo(e * 66, e * 137.5, e * 66, e * 137.5, e * 53, e * 150);
            T.bezierCurveTo(e * 39, e * 138, e * 39, e * 138, e * 25, e * 126);
            T.closePath();
            se(T, i[6], i[7], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 64);
            T.bezierCurveTo(e * 60, e * 92.5, e * 60, e * 92.5, e * 68, e * 121);
            T.bezierCurveTo(e * 61, e * 127.5, e * 61, e * 127.5, e * 54, e * 134);
            T.bezierCurveTo(e * 46.5, e * 127.5, e * 46.5, e * 127.5, e * 39, e * 121);
            T.closePath();
            se(T, i[8]);
            return o;
        }
        function ni(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 108;
            o.height = e * 669;
            T.translate(e * 20, e * 20);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 54, e * 389.5);
            Re(T, e * -15, e * -228.5, e * 30, e * 457, e * 10);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 579);
            T.bezierCurveTo(e * 47, e * 587, e * 61, e * 584, e * 71, e * 579);
            T.bezierCurveTo(e * 75, e * 597.5, e * 75, e * 597.5, e * 79, e * 616);
            T.bezierCurveTo(e * 66.5, e * 628, e * 66.5, e * 628, e * 54, e * 640);
            T.bezierCurveTo(e * 41, e * 628.5, e * 41, e * 628.5, e * 28, e * 617);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 141);
            T.bezierCurveTo(e * 40, e * 136, e * 40, e * 136, e * 50, e * 131);
            T.bezierCurveTo(e * 63, e * 136, e * 63, e * 136, e * 76, e * 141);
            T.bezierCurveTo(e * 72.5, e * 161.5, e * 72.5, e * 161.5, e * 69, e * 182);
            T.bezierCurveTo(e * 61.5, e * 186.5, e * 61.5, e * 186.5, e * 54, e * 191);
            T.bezierCurveTo(e * 45, e * 186.5, e * 45, e * 186.5, e * 36, e * 182);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42, e * 152);
            T.bezierCurveTo(e * 53, e * 152, e * 53, e * 152, e * 64, e * 152);
            T.bezierCurveTo(e * 62, e * 171, e * 62, e * 176, e * 55, e * 177);
            T.bezierCurveTo(e * 42, e * 176, e * 45, e * 174, e * 42, e * 152);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 28);
            T.bezierCurveTo(e * 67.5, e * 55, e * 67.5, e * 55, e * 83, e * 82);
            T.bezierCurveTo(e * 80, e * 106.5, e * 80, e * 106.5, e * 77, e * 131);
            T.bezierCurveTo(e * 58, e * 147, e * 44, e * 141, e * 29, e * 131);
            T.bezierCurveTo(e * 26.5, e * 106.5, e * 26.5, e * 106.5, e * 24, e * 82);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 53, e * 53);
            T.bezierCurveTo(e * 61, e * 70, e * 61, e * 70, e * 69, e * 87);
            T.bezierCurveTo(e * 67, e * 106, e * 67, e * 106, e * 65, e * 125);
            T.bezierCurveTo(e * 54, e * 130, e * 51, e * 130, e * 41, e * 125);
            T.bezierCurveTo(e * 39, e * 105, e * 39, e * 105, e * 37, e * 85);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -20, e * -20);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 54, e * 389.5);
            T.rotate(0);
            Re(T, e * -15, e * -228.5, e * 30, e * 457, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 579);
            T.bezierCurveTo(e * 47, e * 587, e * 61, e * 584, e * 71, e * 579);
            T.bezierCurveTo(e * 75, e * 597.5, e * 75, e * 597.5, e * 79, e * 616);
            T.bezierCurveTo(e * 66.5, e * 628, e * 66.5, e * 628, e * 54, e * 640);
            T.bezierCurveTo(e * 41, e * 628.5, e * 41, e * 628.5, e * 28, e * 617);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 141);
            T.bezierCurveTo(e * 40, e * 136, e * 40, e * 136, e * 50, e * 131);
            T.bezierCurveTo(e * 63, e * 136, e * 63, e * 136, e * 76, e * 141);
            T.bezierCurveTo(e * 72.5, e * 161.5, e * 72.5, e * 161.5, e * 69, e * 182);
            T.bezierCurveTo(e * 61.5, e * 186.5, e * 61.5, e * 186.5, e * 54, e * 191);
            T.bezierCurveTo(e * 45, e * 186.5, e * 45, e * 186.5, e * 36, e * 182);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42, e * 152);
            T.bezierCurveTo(e * 53, e * 152, e * 53, e * 152, e * 64, e * 152);
            T.bezierCurveTo(e * 62, e * 171, e * 62, e * 176, e * 55, e * 177);
            T.bezierCurveTo(e * 42, e * 176, e * 45, e * 174, e * 42, e * 152);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 28);
            T.bezierCurveTo(e * 67.5, e * 55, e * 67.5, e * 55, e * 83, e * 82);
            T.bezierCurveTo(e * 80, e * 106.5, e * 80, e * 106.5, e * 77, e * 131);
            T.bezierCurveTo(e * 58, e * 147, e * 44, e * 141, e * 29, e * 131);
            T.bezierCurveTo(e * 26.5, e * 106.5, e * 26.5, e * 106.5, e * 24, e * 82);
            T.closePath();
            se(T, i[6], i[7], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 53, e * 53);
            T.bezierCurveTo(e * 61, e * 70, e * 61, e * 70, e * 69, e * 87);
            T.bezierCurveTo(e * 67, e * 106, e * 67, e * 106, e * 65, e * 125);
            T.bezierCurveTo(e * 54, e * 130, e * 51, e * 130, e * 41, e * 125);
            T.bezierCurveTo(e * 39, e * 105, e * 39, e * 105, e * 37, e * 85);
            T.closePath();
            se(T, i[8]);
            return o;
        }
        function ai(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 43;
            o.height = e * 209;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 21, e * 102.5);
            Re(T, e * -4, e * -76.5, e * 8, e * 163, e * 10);
            T.restore();
            se(T, i[0]);
            T.translate(0, e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 20, e * 10);
            T.bezierCurveTo(e * 25, e * 25.5, e * 25, e * 25.5, e * 30, e * 41);
            T.bezierCurveTo(e * 25.5, e * 38.5, e * 25.5, e * 38.5, e * 21, e * 36);
            T.bezierCurveTo(e * 16, e * 38.5, e * 16, e * 38.5, e * 11, e * 41);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 21, e * 1);
            T.bezierCurveTo(e * 28, e * 18, e * 28, e * 18, e * 35, e * 35);
            T.bezierCurveTo(e * 28.5, e * 32, e * 28.5, e * 32, e * 22, e * 29);
            T.bezierCurveTo(e * 14.5, e * 32.5, e * 14.5, e * 32.5, e * 7, e * 36);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 14, e * 146);
            T.bezierCurveTo(e * 21, e * 146, e * 21, e * 146, e * 28, e * 146);
            T.bezierCurveTo(e * 27.5, e * 147.5, e * 27.5, e * 147.5, e * 27, e * 149);
            T.bezierCurveTo(e * 27, e * 160, e * 27, e * 160, e * 27, e * 171);
            T.bezierCurveTo(e * 27.5, e * 171.5, e * 27.5, e * 171.5, e * 28, e * 172);
            T.bezierCurveTo(e * 21, e * 172, e * 21, e * 172, e * 14, e * 172);
            T.bezierCurveTo(e * 14, e * 171.5, e * 14, e * 171.5, e * 14, e * 171);
            T.bezierCurveTo(e * 14.5, e * 171.5, e * 14.5, e * 171.5, e * 15, e * 172);
            T.bezierCurveTo(e * 15, e * 160.5, e * 15, e * 160.5, e * 15, e * 149);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 21, e * 6);
            T.bezierCurveTo(e * 26.5, e * 18.5, e * 26.5, e * 18.5, e * 32, e * 31);
            T.bezierCurveTo(e * 27, e * 29, e * 27, e * 29, e * 22, e * 27);
            T.closePath();
            se(T, i[0]);
            T.translate(0, e * -20);
            T.globalAlpha = 1;
            T.translate(0, e * 10);
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 21, e * 102.5);
            Re(T, e * -4, e * -76.5, e * 8, e * 163, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.translate(0, e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 20, e * 10);
            T.bezierCurveTo(e * 25, e * 25.5, e * 25, e * 25.5, e * 30, e * 41);
            T.bezierCurveTo(e * 25.5, e * 38.5, e * 25.5, e * 38.5, e * 21, e * 36);
            T.bezierCurveTo(e * 16, e * 38.5, e * 16, e * 38.5, e * 11, e * 41);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 21, e * 1);
            T.bezierCurveTo(e * 28, e * 18, e * 28, e * 18, e * 35, e * 35);
            T.bezierCurveTo(e * 28.5, e * 32, e * 28.5, e * 32, e * 22, e * 29);
            T.bezierCurveTo(e * 14.5, e * 32.5, e * 14.5, e * 32.5, e * 7, e * 36);
            T.closePath();
            se(T, i[5], i[6], e * 4);
            T.translate(0, e * 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 14, e * 146);
            T.bezierCurveTo(e * 21, e * 146, e * 21, e * 146, e * 28, e * 146);
            T.bezierCurveTo(e * 27.5, e * 147.5, e * 27.5, e * 147.5, e * 27, e * 149);
            T.bezierCurveTo(e * 27, e * 160, e * 27, e * 160, e * 27, e * 171);
            T.bezierCurveTo(e * 27.5, e * 171.5, e * 27.5, e * 171.5, e * 28, e * 172);
            T.bezierCurveTo(e * 21, e * 172, e * 21, e * 172, e * 14, e * 172);
            T.bezierCurveTo(e * 14, e * 171.5, e * 14, e * 171.5, e * 14, e * 171);
            T.bezierCurveTo(e * 14.5, e * 171.5, e * 14.5, e * 171.5, e * 15, e * 172);
            T.bezierCurveTo(e * 15, e * 160.5, e * 15, e * 160.5, e * 15, e * 149);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 21, e * 6);
            T.bezierCurveTo(e * 26.5, e * 18.5, e * 26.5, e * 18.5, e * 32, e * 31);
            T.bezierCurveTo(e * 27, e * 29, e * 27, e * 29, e * 22, e * 27);
            T.closePath();
            se(T, i[8]);
            return o;
        }
        function Ii(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 200;
            o.height = e * 200;
            T.save();
            T.translate(e * 112, e * 158);
            Re(T, e * -86.5, e * -86, e * 150, e * 35, e * 20);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 170, e * 100);
            Re(T, e * -86.5, e * -86, e * 35, e * 150, e * 20);
            T.restore();
            se(T, i[0]);
            return o;
        }
        function Ei(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 165;
            o.height = e * 123;
            T.save();
            T.translate(e * 81, e * 65);
            Re(T, e * -78, e * -54.5, e * 156, e * 109, e * 20);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 81, e * 58);
            Re(T, e * -78, e * -54.5, e * 156, e * 109, e * 20);
            T.restore();
            se(T, i[1], i[2], 4);
            T.save();
            T.translate(e * 81, e * 58);
            Re(T, e * -69, e * -47, e * 138, e * 93, e * 15);
            T.restore();
            se(T, i[3], i[4], 4);
            T.save();
            T.translate(e * 79, e * 54);
            Re(T, e * -34, e * -40, e * 68, e * 88, e * 13);
            T.restore();
            se(T, undefined, i[5], 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 44, e * 13);
            T.bezierCurveTo(e * 43.5, e * 55, e * 43.5, e * 55, e * 43, e * 101);
            T.closePath();
            se(T, undefined, i[6], 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115, e * 13);
            T.bezierCurveTo(e * 115, e * 56, e * 115, e * 56, e * 115, e * 101);
            T.closePath();
            se(T, undefined, i[6], 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 6);
            T.bezierCurveTo(e * 35, e * 56, e * 36, e * 109, e * 35, e * 110);
            T.closePath();
            se(T, undefined, i[7], 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 123, e * 6);
            T.bezierCurveTo(e * 123, e * 56, e * 123, e * 56, e * 123, e * 110);
            T.closePath();
            se(T, undefined, i[7], 4);
            T.save();
            T.translate(e * 79, e * 113);
            Re(T, e * -18, e * -2, e * 36, e * 4, e * 20);
            T.restore();
            se(T, undefined, i[8], 4);
            T.save();
            T.translate(e * 75, e * 118);
            Re(T, e * -6, e * -2.5, e * 20, e * 5, e * 20);
            T.restore();
            se(T, i[8]);
            return o;
        }
        function _i(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 92;
            o.height = e * 108;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31, e * 10);
            T.bezierCurveTo(e * 37, e * 2, e * 49, e * 0, e * 61, e * 15);
            T.bezierCurveTo(e * 81, e * 31, e * 78, e * 25, e * 79, e * 37);
            T.bezierCurveTo(e * 76, e * 44, e * 81, e * 56, e * 85, e * 63);
            T.bezierCurveTo(e * 91, e * 71, e * 90, e * 78, e * 83, e * 84);
            T.bezierCurveTo(e * 60, e * 98, e * 67, e * 95, e * 57, e * 102);
            T.bezierCurveTo(e * 47, e * 106, e * 43, e * 106, e * 31, e * 98);
            T.bezierCurveTo(e * 22, e * 91, e * 17, e * 89, e * 7, e * 84);
            T.bezierCurveTo(e * 1, e * 77, e * 4, e * 73, e * 7, e * 60);
            T.bezierCurveTo(e * 11, e * 50, e * 5, e * 32, e * 15, e * 27);
            T.bezierCurveTo(e * 26, e * 18, e * 26, e * 24, e * 31, e * 10);
            T.closePath();
            se(T, i[0], i[1], 4);
            return o;
        }
        function si(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 151;
            o.height = e * 80;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 133, e * 54);
            T.bezierCurveTo(e * 136, e * 18, e * 129, e * 18, e * 114, e * 13);
            T.bezierCurveTo(e * 51, e * 0, e * 36, e * 16, e * 34, e * 16);
            T.bezierCurveTo(e * 8, e * 28, e * 22, e * 56, e * 21, e * 57);
            T.closePath();
            se(T, i[2], i[3], 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 130, e * 40);
            T.bezierCurveTo(e * 132, e * 35, e * 132, e * 30, e * 132, e * 29);
            T.bezierCurveTo(e * 145, e * 38, e * 144, e * 43, e * 137, e * 54);
            T.closePath();
            se(T, i[0], i[1], 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 20, e * 33);
            T.bezierCurveTo(e * 24, e * 44, e * 215, e * 39, e * 23, e * 44);
            T.bezierCurveTo(e * 19, e * 49, e * 19, e * 49, e * 15, e * 54);
            T.bezierCurveTo(e * 4, e * 43, e * 10, e * 35, e * 20, e * 32);
            T.closePath();
            se(T, i[0], i[1], 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 18, e * 52);
            T.bezierCurveTo(e * 24, e * 31, e * 34, e * 25, e * 75, e * 23);
            T.bezierCurveTo(e * 130, e * 24, e * 129, e * 32, e * 134, e * 51);
            T.bezierCurveTo(e * 138, e * 70, e * 126, e * 72, e * 90, e * 73);
            T.bezierCurveTo(e * 18, e * 72, e * 15, e * 68, e * 18, e * 54);
            T.closePath();
            se(T, i[0], i[1], 4);
            return o;
        }
        function Ri(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 138;
            o.height = e * 133;
            T.globalAlpha = t ? 0.3 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 26, e * 79.640625);
            T.bezierCurveTo(e * 13, e * 84.640625, e * 9, e * 86.640625, e * 7, e * 78.640625);
            T.bezierCurveTo(e * 6, e * 69.640625, e * 15, e * 67.640625, e * 31, e * 62.640625);
            T.bezierCurveTo(e * 63, e * 55.640625, e * 85, e * 57.640625, e * 104, e * 63.640625);
            T.bezierCurveTo(e * 131, e * 69.640625, e * 132, e * 71.640625, e * 131, e * 78.640625);
            T.bezierCurveTo(e * 131, e * 91.640625, e * 112, e * 80.640625, e * 91, e * 75.640625);
            T.bezierCurveTo(e * 51, e * 70.640625, e * 45, e * 74.640625, e * 28, e * 78.640625);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 8, e * 82.640625);
            T.bezierCurveTo(e * 40, e * 107.640625, e * 53, e * 104.640625, e * 67, e * 106.640625);
            T.bezierCurveTo(e * 101, e * 103.640625, e * 117, e * 93.640625, e * 127, e * 84.640625);
            T.bezierCurveTo(e * 135, e * 95.640625, e * 131, e * 107.640625, e * 110, e * 118.640625);
            T.bezierCurveTo(e * 78, e * 129.640625, e * 67, e * 130.640625, e * 27, e * 119.640625);
            T.bezierCurveTo(e * 0, e * 105.640625, e * 8, e * 83.640625, e * 10, e * 84.640625);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 8, e * 73.640625);
            T.bezierCurveTo(e * 7, e * 23.640625, e * 33, e * 19.640625, e * 71, e * 17.640625);
            T.bezierCurveTo(e * 129, e * 19.640625, e * 130, e * 45.640625, e * 130, e * 76.640625);
            T.bezierCurveTo(e * 90, e * 63.640625, e * 85, e * 63.640625, e * 73, e * 63.640625);
            T.bezierCurveTo(e * 38, e * 63.640625, e * 33, e * 66.640625, e * 8, e * 73.640625);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72, e * 28.640625);
            T.bezierCurveTo(e * 51, e * 25.640625, e * 56, e * 7.640625, e * 70, e * 5.640625);
            T.bezierCurveTo(e * 94, e * 7.640625, e * 87, e * 29.640625, e * 72, e * 28.640625);
            T.closePath();
            se(T, i[3], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 51, e * 26.640625);
            T.bezierCurveTo(e * 42, e * 29.640625, e * 43, e * 31.640625, e * 42, e * 37.640625);
            se(T, undefined, i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 90, e * 26.640625);
            T.bezierCurveTo(e * 100, e * 28.640625, e * 98, e * 34.640625, e * 99, e * 38.640625);
            se(T, undefined, i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 26, e * 79.640625);
            T.bezierCurveTo(e * 13, e * 84.640625, e * 9, e * 86.640625, e * 7, e * 78.640625);
            T.bezierCurveTo(e * 6, e * 69.640625, e * 15, e * 67.640625, e * 31, e * 62.640625);
            T.bezierCurveTo(e * 63, e * 55.640625, e * 85, e * 57.640625, e * 104, e * 63.640625);
            T.bezierCurveTo(e * 131, e * 69.640625, e * 132, e * 71.640625, e * 131, e * 78.640625);
            T.bezierCurveTo(e * 131, e * 91.640625, e * 112, e * 80.640625, e * 91, e * 75.640625);
            T.bezierCurveTo(e * 51, e * 70.640625, e * 45, e * 74.640625, e * 28, e * 78.640625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 8, e * 82.640625);
            T.bezierCurveTo(e * 40, e * 107.640625, e * 53, e * 104.640625, e * 67, e * 106.640625);
            T.bezierCurveTo(e * 101, e * 103.640625, e * 117, e * 93.640625, e * 127, e * 84.640625);
            T.bezierCurveTo(e * 135, e * 95.640625, e * 131, e * 107.640625, e * 110, e * 118.640625);
            T.bezierCurveTo(e * 78, e * 129.640625, e * 67, e * 130.640625, e * 27, e * 119.640625);
            T.bezierCurveTo(e * 0, e * 105.640625, e * 8, e * 83.640625, e * 10, e * 84.640625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            return o;
        }
        function hi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            var r = e * 170;
            var n = e * 172;
            var a = r / 2;
            var I = n / 2;
            o.width = r;
            o.height = n;
            T.translate(a, I + e * 7);
            T.globalAlpha = t ? 0.5 : 0;
            he(T, 0, 0, e * 60);
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -7);
            T.save();
            for (var E = 0; E < 10; E++) {
            T.rotate(window.Math.PI / 5);
            T.save();
            T.translate(e * 65, 0);
            ue(T, 3, e * 20, e * 4);
            se(T, i[1], i[2], e * 4);
            T.restore();
            }
            T.restore();
            he(T, 0, 0, e * 60);
            se(T, i[3], i[4], e * 4);
            he(T, 0, 0, e * 40);
            se(T, i[5]);
            he(T, 0, 0, e * 25);
            se(T, i[6], i[7], e * 8);
            return o;
        }
        function di(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 170;
            o.height = e * 170;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.save();
            T.translate(e * 85, e * 88);
            T.rotate(1.4);
            ue(T, 7, e * 60, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * 85, e * 80);
            for (var r = 0; r < 10; r++) {
            T.rotate(window.Math.PI / 5);
            T.save();
            T.translate(e * 65, 0);
            ue(T, 3, e * 21, e * 4);
            se(T, i[1], i[2], e * 4);
            T.restore();
            }
            T.save();
            T.translate(e * 0, e * 0);
            T.rotate(1.4);
            ue(T, 7, e * 60, e * 10);
            se(T, i[3], i[4], e * 4);
            T.rotate(0.64);
            ue(T, 7, e * 40, e * 10);
            se(T, i[5], i[6], e * 4);
            T.rotate(0.12);
            ue(T, 7, e * 23, e * 5);
            T.restore();
            se(T, i[7]);
            return o;
        }
        function ui(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 170;
            o.height = e * 170;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 3);
            T.save();
            T.translate(e * 85, e * 95);
            T.rotate(1.4);
            ue(T, 7, e * 60, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * 85, e * 82);
            for (var r = 0; r < 10; r++) {
            T.rotate(window.Math.PI / 5);
            T.save();
            T.translate(e * 65, 0);
            ue(T, 3, e * 21, e * 4);
            se(T, i[1], i[2], e * 4);
            T.restore();
            }
            T.save();
            T.translate(e * 0, e * 0);
            T.rotate(1);
            ue(T, 8, e * 60, e * 10);
            se(T, i[3], i[4], e * 4);
            T.rotate(0.56);
            ue(T, 8, e * 40, e * 10);
            se(T, i[5], i[6], e * 4);
            T.rotate(0.28);
            ue(T, 8, e * 28, e * 8);
            se(T, i[7]);
            T.restore();
            return o;
        }
        function Ai(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 170;
            o.height = e * 170;
            T.translate(0, e * 3);
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 85, e * 95);
            T.rotate(1.4);
            ue(T, 7, e * 60, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * 85, e * 82);
            for (var r = 0; r < 10; r++) {
            T.rotate(window.Math.PI / 5);
            T.save();
            T.translate(e * 65, 0);
            ue(T, 3, e * 21, e * 4);
            se(T, i[1], i[2], e * 4);
            T.restore();
            }
            T.save();
            T.translate(e * 0, e * 0);
            T.rotate(0.2);
            ue(T, 9, e * 60, e * 10);
            se(T, i[3], i[4], e * 4);
            T.rotate(-0.32);
            ue(T, 9, e * 38, e * 10);
            se(T, i[5], i[6], e * 4);
            T.rotate(0.68);
            ue(T, 9, e * 20, e * 8);
            se(T, i[7], i[8], e * 6);
            T.restore();
            return o;
        }
        function Oi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 69;
            o.height = e * 120;
            T.globalAlpha = t ? 0.5 : 1;
            T.save();
            T.translate(e * 30, e * 84);
            Re(T, e * -6, e * -66.5, e * 8, e * 100, e * 10);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 30, e * 45);
            Re(T, e * -9.5, e * -6.5, e * 16, e * 13, e * 10);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 30, e * 17);
            Re(T, e * -7.5, e * -5.5, e * 12, e * 11, e * 10);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 30, e * 31);
            Re(T, e * -26, e * -14.5, e * 52, e * 29, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 36, e * 79.140625);
            Re(T, e * -6, e * -66.5, e * 8, e * 100, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 3);
            T.save();
            T.translate(e * 35, e * 40.140625);
            Re(T, e * -9.5, e * -6.5, e * 16, e * 13, e * 10);
            T.restore();
            se(T, i[3], i[4], e * 3);
            T.save();
            T.translate(e * 35, e * 12.140625);
            Re(T, e * -7.5, e * -5.5, e * 12, e * 11, e * 10);
            T.restore();
            se(T, i[3], i[4], e * 3);
            T.save();
            T.translate(e * 34.5, e * 26.140625);
            Re(T, e * -26, e * -14.5, e * 52, e * 29, e * 5);
            T.restore();
            se(T, i[3], i[4], e * 3);
            return o;
        }
        function li(e, t, i) {
            var o = (T = window.document.createElement("canvas")).getContext("2d");
            if (i == 0) {
            T.width = e * 566;
            T.height = e * 429;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 312.625, e * 39.046875);
            o.bezierCurveTo(e * 456.625, e * 60.046875, e * 521.625, e * 134.046875, e * 528.625, e * 199.046875);
            o.bezierCurveTo(e * 540.625, e * 298.046875, e * 491.625, e * 364.046875, e * 405.625, e * 394.046875);
            o.bezierCurveTo(e * 270.625, e * 429.046875, e * 182.625, e * 395.046875, e * 100.625, e * 344.046875);
            o.bezierCurveTo(e * 15.625, e * 283.046875, e * 20.625, e * 195.046875, e * 33.625, e * 158.046875);
            o.bezierCurveTo(e * 56.625, e * 80.046875, e * 102.625, e * 46.046875, e * 183.625, e * 33.046875);
            o.bezierCurveTo(e * 225.625, e * 25.046875, e * 270.625, e * 30.046875, e * 312.625, e * 39.046875);
            o.closePath();
            se(o, t[0]);
            } else if (i == 1) {
            o = (T = window.document.createElement("canvas")).getContext("2d");
            T.width = e * 511;
            T.height = e * 408;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 141.625, e * 49.296875);
            o.bezierCurveTo(e * 225.625, e * 10.296875, e * 320.625, e * 16.296875, e * 390.625, e * 39.296875);
            o.bezierCurveTo(e * 476.625, e * 71.296875, e * 483.625, e * 142.296875, e * 486.625, e * 197.296875);
            o.bezierCurveTo(e * 491.625, e * 289.296875, e * 462.625, e * 317.296875, e * 417.625, e * 351.296875);
            o.bezierCurveTo(e * 367.625, e * 385.296875, e * 313.625, e * 404.296875, e * 218.625, e * 395.296875);
            o.bezierCurveTo(e * 108.625, e * 381.296875, e * 81.625, e * 350.296875, e * 52.625, e * 305.296875);
            o.bezierCurveTo(e * 16.625, e * 244.296875, e * 23.625, e * 171.296875, e * 37.625, e * 145.296875);
            o.bezierCurveTo(e * 65.625, e * 84.296875, e * 97.625, e * 74.296875, e * 141.625, e * 49.296875);
            o.closePath();
            se(o, t[0]);
            } else if (i == 2) {
            var T;
            o = (T = window.document.createElement("canvas")).getContext("2d");
            T.width = e * 504;
            T.height = e * 408;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 153.625, e * 46.296875);
            o.bezierCurveTo(e * 271.625, e * 17.296875, e * 345.625, e * 35.296875, e * 410.625, e * 71.296875);
            o.bezierCurveTo(e * 473.625, e * 109.296875, e * 478.625, e * 167.296875, e * 473.625, e * 205.296875);
            o.bezierCurveTo(e * 462.625, e * 295.296875, e * 438.625, e * 316.296875, e * 388.625, e * 345.296875);
            o.bezierCurveTo(e * 331.625, e * 374.296875, e * 273.625, e * 392.296875, e * 180.625, e * 387.296875);
            o.bezierCurveTo(e * 111.625, e * 380.296875, e * 86.625, e * 360.296875, e * 51.625, e * 309.296875);
            o.bezierCurveTo(e * 23.625, e * 267.296875, e * 25.625, e * 226.296875, e * 27.625, e * 175.296875);
            o.bezierCurveTo(e * 37.625, e * 99.296875, e * 88.625, e * 57.296875, e * 153.625, e * 46.296875);
            o.closePath();
            se(o, t[0]);
            }
            return T;
        }
        function Si(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 345;
            o.height = e * 250;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105, e * 58);
            T.bezierCurveTo(e * 100.5, e * 43, e * 100.5, e * 43, e * 96, e * 28);
            T.bezierCurveTo(e * 119.5, e * 33.5, e * 119.5, e * 33.5, e * 143, e * 39);
            T.bezierCurveTo(e * 170, e * 37, e * 177, e * 37, e * 188, e * 40);
            T.bezierCurveTo(e * 213, e * 33.5, e * 213, e * 33.5, e * 238, e * 27);
            T.bezierCurveTo(e * 231, e * 52, e * 234, e * 42.5, e * 230, e * 58);
            T.closePath();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 108, e * 51);
            T.bezierCurveTo(e * 91, e * 55, e * 85, e * 44, e * 86, e * 29);
            T.bezierCurveTo(e * 62, e * 50, e * 78, e * 69, e * 92, e * 75);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 249, e * 27);
            T.bezierCurveTo(e * 273, e * 49, e * 262, e * 68, e * 246, e * 77);
            T.bezierCurveTo(e * 231, e * 59, e * 236, e * 66.5, e * 226, e * 56);
            T.bezierCurveTo(e * 243, e * 53, e * 252, e * 43, e * 249, e * 28);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87, e * 78);
            T.bezierCurveTo(e * 87, e * 59, e * 98, e * 46, e * 127, e * 48);
            T.bezierCurveTo(e * 176, e * 48.5, e * 176, e * 48.5, e * 225, e * 49);
            T.bezierCurveTo(e * 243, e * 49, e * 253, e * 59, e * 253, e * 76);
            T.bezierCurveTo(e * 211, e * 85.5, e * 211, e * 85.5, e * 169, e * 95);
            T.closePath();
            se(T, i[5], i[6], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56, e * 105);
            T.bezierCurveTo(e * 56, e * 92, e * 59, e * 86, e * 65, e * 73);
            T.bezierCurveTo(e * 62.5, e * 61.5, e * 62.5, e * 61.5, e * 60, e * 50);
            T.bezierCurveTo(e * 99.5, e * 64.5, e * 99.5, e * 64.5, e * 139, e * 79);
            T.bezierCurveTo(e * 164, e * 77, e * 177, e * 76, e * 203, e * 78);
            T.bezierCurveTo(e * 242, e * 63.5, e * 242, e * 63.5, e * 281, e * 49);
            T.bezierCurveTo(e * 279, e * 60.5, e * 279, e * 60.5, e * 277, e * 72);
            T.bezierCurveTo(e * 286, e * 88, e * 286, e * 96, e * 287, e * 104);
            T.bezierCurveTo(e * 228.5, e * 127, e * 228.5, e * 127, e * 170, e * 150);
            T.closePath();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 48, e * 130);
            T.bezierCurveTo(e * 61, e * 155, e * 63, e * 165, e * 56, e * 171);
            T.bezierCurveTo(e * 48, e * 177, e * 40, e * 171, e * 38, e * 178);
            T.bezierCurveTo(e * 33, e * 180, e * 37, e * 188, e * 47, e * 208);
            T.bezierCurveTo(e * 52, e * 221, e * 55, e * 222, e * 75, e * 229);
            T.bezierCurveTo(e * 91, e * 213, e * 98, e * 212, e * 112, e * 219);
            T.bezierCurveTo(e * 167, e * 225, e * 187, e * 224, e * 222, e * 220);
            T.bezierCurveTo(e * 244, e * 214, e * 247, e * 213, e * 263, e * 229);
            T.bezierCurveTo(e * 295, e * 220, e * 291, e * 215, e * 301, e * 194);
            T.bezierCurveTo(e * 308, e * 178, e * 309, e * 176, e * 302, e * 173);
            T.bezierCurveTo(e * 290, e * 177, e * 289, e * 177, e * 283, e * 169);
            T.bezierCurveTo(e * 279, e * 163, e * 279, e * 161, e * 290, e * 130);
            T.bezierCurveTo(e * 270, e * 127, e * 270, e * 127, e * 250, e * 124);
            T.bezierCurveTo(e * 209, e * 137.5, e * 209, e * 137.5, e * 168, e * 151);
            T.bezierCurveTo(e * 121, e * 135, e * 121, e * 135, e * 74, e * 119);
            T.closePath();
            se(T, i[1], i[2], e * 8);
            T.globalCompositeOperation = "destination-out";
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 133, e * 158);
            T.bezierCurveTo(e * 152, e * 193, e * 158, e * 205, e * 140, e * 203);
            T.bezierCurveTo(e * 99, e * 195, e * 96, e * 189, e * 86, e * 173);
            T.bezierCurveTo(e * 80, e * 159, e * 88, e * 145, e * 104, e * 141);
            T.closePath();
            se(T, i[7], i[8], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 215, e * 146);
            T.bezierCurveTo(e * 204, e * 167, e * 204, e * 167, e * 193, e * 188);
            T.bezierCurveTo(e * 187, e * 201, e * 191, e * 209, e * 213, e * 201);
            T.bezierCurveTo(e * 247, e * 192, e * 253, e * 181, e * 257, e * 169);
            T.bezierCurveTo(e * 260, e * 157, e * 254, e * 149, e * 243, e * 141);
            T.closePath();
            se(T, i[7], i[8], e * 8);
            T.globalCompositeOperation = "source-over";
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 133, e * 158);
            T.bezierCurveTo(e * 152, e * 193, e * 158, e * 205, e * 140, e * 203);
            T.bezierCurveTo(e * 99, e * 195, e * 96, e * 189, e * 86, e * 173);
            T.bezierCurveTo(e * 80, e * 159, e * 88, e * 145, e * 104, e * 141);
            T.closePath();
            se(T, undefined, i[8], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 215, e * 146);
            T.bezierCurveTo(e * 204, e * 167, e * 204, e * 167, e * 193, e * 188);
            T.bezierCurveTo(e * 187, e * 201, e * 191, e * 209, e * 213, e * 201);
            T.bezierCurveTo(e * 247, e * 192, e * 253, e * 181, e * 257, e * 169);
            T.bezierCurveTo(e * 260, e * 157, e * 254, e * 149, e * 243, e * 141);
            T.closePath();
            se(T, undefined, i[8], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 39, e * 66);
            T.bezierCurveTo(e * 57, e * 107, e * 63, e * 96, e * 120, e * 106);
            T.bezierCurveTo(e * 154, e * 112, e * 163, e * 116, e * 174, e * 135);
            T.bezierCurveTo(e * 180, e * 109, e * 191, e * 113, e * 237, e * 103);
            T.bezierCurveTo(e * 276, e * 100, e * 289, e * 94, e * 301, e * 67);
            T.bezierCurveTo(e * 317, e * 112, e * 301, e * 141, e * 274, e * 139);
            T.bezierCurveTo(e * 204, e * 166, e * 197, e * 169, e * 173, e * 183);
            T.bezierCurveTo(e * 170, e * 183, e * 170, e * 183, e * 167, e * 183);
            T.bezierCurveTo(e * 132, e * 160, e * 112, e * 156, e * 73, e * 141);
            T.bezierCurveTo(e * 43, e * 146, e * 27, e * 120, e * 39, e * 66);
            T.closePath();
            se(T, i[7], i[8], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115, e * 185);
            T.bezierCurveTo(e * 115, e * 200, e * 118, e * 206, e * 124, e * 212);
            T.bezierCurveTo(e * 133, e * 223, e * 132, e * 231, e * 121, e * 230);
            T.bezierCurveTo(e * 108, e * 226, e * 108, e * 215, e * 107, e * 209);
            T.bezierCurveTo(e * 106, e * 201, e * 110, e * 196, e * 114, e * 185);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 226, e * 186);
            T.bezierCurveTo(e * 234, e * 201, e * 238, e * 209, e * 228, e * 225);
            T.bezierCurveTo(e * 223, e * 233, e * 213, e * 233, e * 211, e * 226);
            T.bezierCurveTo(e * 206, e * 219, e * 217, e * 216, e * 221, e * 207);
            T.bezierCurveTo(e * 225, e * 196, e * 225, e * 191, e * 226, e * 186);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 172, e * 110);
            T.bezierCurveTo(e * 189, e * 153, e * 192, e * 160, e * 188, e * 175);
            T.bezierCurveTo(e * 183, e * 190, e * 176, e * 197, e * 165, e * 191);
            T.bezierCurveTo(e * 153, e * 181, e * 152, e * 166, e * 157, e * 151);
            T.bezierCurveTo(e * 164.5, e * 131, e * 164.5, e * 131, e * 172, e * 111);
            T.closePath();
            se(T, i[3], i[4], e * 8);
            return o;
        }
        function Ci(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 149;
            i.height = e * 153;
            o.globalAlpha = 0.5;
            he(o, e * 74.5, e * 85, e * 66);
            se(o, t[0]);
            o.globalAlpha = 1;
            he(o, e * 75.5, e * 72.5, e * 67);
            se(o, t[1], t[2], e * 4);
            he(o, e * 75.5, e * 73.5, e * 54);
            se(o, t[3]);
            o.globalAlpha = 0.5;
            he(o, e * 74.5, e * 80.5, e * 39);
            se(o, t[4]);
            o.globalAlpha = 1;
            he(o, e * 74.5, e * 74.5, e * 37);
            se(o, t[5]);
            return i;
        }
        function bi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 173;
            i.height = e * 178;
            o.globalAlpha = 0.5;
            he(o, e * 86.5, e * 98, e * 80);
            se(o, t[0]);
            o.globalAlpha = 1;
            he(o, e * 86.5, e * 89, e * 81);
            se(o, t[1], t[2], e * 4);
            he(o, e * 86.5, e * 86, e * 59);
            se(o, t[3], t[4], e * 4);
            o.globalAlpha = 0.5;
            he(o, e * 86.5, e * 95, e * 34);
            se(o, t[0]);
            o.globalAlpha = 1;
            he(o, e * 86.5, e * 89, e * 34);
            se(o, t[5]);
            return i;
        }
        function Ni(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 253;
            i.height = e * 260;
            o.globalAlpha = 0.5;
            he(o, e * 126.5, e * 134, e * 119);
            se(o, t[0]);
            o.globalAlpha = 1;
            he(o, e * 126.5, e * 124, e * 119);
            se(o, t[1], t[2], e * 4);
            he(o, e * 126.5, e * 127, e * 100);
            se(o, t[3]);
            o.globalAlpha = 0.5;
            he(o, e * 126.5, e * 135, e * 81);
            se(o, t[0]);
            o.globalAlpha = 1;
            he(o, e * 126.5, e * 125, e * 84);
            se(o, t[4], t[5], e * 4);
            he(o, e * 126.5, e * 125, e * 61);
            se(o, t[6], t[7], e * 4);
            o.globalAlpha = 0.5;
            he(o, e * 126.5, e * 134, e * 40);
            se(o, t[8]);
            o.globalAlpha = 1;
            he(o, e * 126.5, e * 125, e * 40);
            se(o, t[9]);
            return i;
        }
        function Di(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 139;
            o.height = e * 135;
            T.translate(0, e * 10);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 32, e * 77);
            T.bezierCurveTo(e * 6, e * 41, e * 6, e * 33, e * 12, e * 27);
            T.bezierCurveTo(e * 27, e * 6, e * 28, e * 6, e * 37, e * 6);
            T.bezierCurveTo(e * 62, e * 3, e * 64, e * 5, e * 67, e * 13);
            T.bezierCurveTo(e * 80, e * 36, e * 73.5, e * 25, e * 80, e * 37);
            T.bezierCurveTo(e * 73.5, e * 54, e * 65, e * 74, e * 67, e * 71);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 65, e * 37);
            T.bezierCurveTo(e * 105, e * 40, e * 113, e * 39, e * 117, e * 48);
            T.bezierCurveTo(e * 126, e * 70, e * 128, e * 72, e * 124, e * 80);
            T.bezierCurveTo(e * 112, e * 101, e * 110, e * 104, e * 99, e * 104);
            T.bezierCurveTo(e * 59, e * 100, e * 55, e * 99, e * 56, e * 99);
            T.bezierCurveTo(e * 47.5, e * 79, e * 45, e * 66, e * 39, e * 59);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 63);
            T.bezierCurveTo(e * 5, e * 99, e * 5, e * 101, e * 8, e * 103);
            T.bezierCurveTo(e * 19, e * 123, e * 22, e * 125, e * 28, e * 126);
            T.bezierCurveTo(e * 57, e * 127, e * 55, e * 127, e * 58, e * 120);
            T.bezierCurveTo(e * 82, e * 86, e * 83, e * 78, e * 82, e * 87);
            T.closePath();
            se(T, i[0]);
            T.translate(0, e * -10);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 32, e * 77);
            T.bezierCurveTo(e * 6, e * 41, e * 6, e * 33, e * 12, e * 27);
            T.bezierCurveTo(e * 27, e * 6, e * 28, e * 6, e * 37, e * 6);
            T.bezierCurveTo(e * 62, e * 3, e * 64, e * 5, e * 67, e * 13);
            T.bezierCurveTo(e * 80, e * 36, e * 73.5, e * 25, e * 80, e * 37);
            T.bezierCurveTo(e * 73.5, e * 54, e * 65, e * 74, e * 67, e * 71);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 65, e * 37);
            T.bezierCurveTo(e * 105, e * 40, e * 113, e * 39, e * 117, e * 48);
            T.bezierCurveTo(e * 126, e * 70, e * 128, e * 72, e * 124, e * 80);
            T.bezierCurveTo(e * 112, e * 101, e * 110, e * 104, e * 99, e * 104);
            T.bezierCurveTo(e * 59, e * 100, e * 55, e * 99, e * 56, e * 99);
            T.bezierCurveTo(e * 47.5, e * 79, e * 45, e * 66, e * 39, e * 59);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 63);
            T.bezierCurveTo(e * 5, e * 99, e * 5, e * 101, e * 8, e * 103);
            T.bezierCurveTo(e * 19, e * 123, e * 22, e * 125, e * 28, e * 126);
            T.bezierCurveTo(e * 57, e * 127, e * 55, e * 127, e * 58, e * 120);
            T.bezierCurveTo(e * 82, e * 86, e * 83, e * 78, e * 82, e * 87);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80, e * 38);
            T.bezierCurveTo(e * 72.5, e * 52, e * 72.5, e * 52, e * 65, e * 66);
            T.bezierCurveTo(e * 47.5, e * 37, e * 47.5, e * 37, e * 30, e * 7);
            T.bezierCurveTo(e * 48, e * 4, e * 57, e * 4, e * 64, e * 10);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 65, e * 65);
            T.bezierCurveTo(e * 125, e * 73, e * 95.5, e * 69, e * 126, e * 73);
            T.bezierCurveTo(e * 119, e * 98, e * 106, e * 104, e * 98, e * 103);
            T.bezierCurveTo(e * 84.5, e * 102, e * 84.5, e * 102, e * 71, e * 101);
            T.bezierCurveTo(e * 64, e * 86, e * 64, e * 86, e * 57, e * 70);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 27, e * 69);
            T.bezierCurveTo(e * 64, e * 65, e * 46, e * 67, e * 65, e * 65);
            T.bezierCurveTo(e * 43.5, e * 94, e * 43.5, e * 94, e * 22, e * 123);
            T.bezierCurveTo(e * 8, e * 103, e * 8, e * 103, e * 9, e * 103);
            T.bezierCurveTo(e * 5, e * 98, e * 11, e * 89, e * 26, e * 70);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 26, e * 69);
            T.bezierCurveTo(e * 65, e * 60, e * 45, e * 65, e * 64, e * 60);
            T.bezierCurveTo(e * 63, e * 65, e * 63, e * 65, e * 62, e * 70);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80, e * 38);
            T.bezierCurveTo(e * 68, e * 70, e * 75, e * 53, e * 70, e * 68);
            T.bezierCurveTo(e * 65, e * 67, e * 65, e * 67, e * 60, e * 65);
            T.closePath();
            se(T, i[2]);
            return o;
        }
        function mi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 100;
            i.height = e * 100;
            o.globalAlpha = 0.5;
            o.fillStyle = t[0];
            o.fillRect(0, 0, i.width, i.height);
            return i;
        }
        function ci(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 120;
            i.height = e * 300;
            o.translate(e * -80, -20);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 200.5, e * 14.953125);
            o.bezierCurveTo(e * 203, e * 171.953125, e * 203, e * 171.953125, e * 205.5, e * 328.953125);
            o.bezierCurveTo(e * 188.5, e * 257.953125, e * 164.5, e * 216.953125, e * 166.5, e * 176.953125);
            o.bezierCurveTo(e * 168.5, e * 133.953125, e * 198.5, e * 98.953125, e * 200.5, e * 14.953125);
            o.closePath();
            se(o, t[0]);
            return i;
        }
        function vi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 120;
            i.height = e * 300;
            o.translate(e * -200, e * -40);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 344, e * 18.40625);
            o.bezierCurveTo(e * 345, e * 361.40625, e * 344, e * 191.40625, e * 344, e * 364.40625);
            o.bezierCurveTo(e * 261, e * 275.40625, e * 274, e * 259.40625, e * 229, e * 213.40625);
            o.bezierCurveTo(e * 199, e * 187.40625, e * 222, e * 133.40625, e * 273, e * 100.40625);
            o.bezierCurveTo(e * 321, e * 71.40625, e * 327, e * 34.40625, e * 344, e * 18.40625);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 335, e * 38.072906494140625);
            o.bezierCurveTo(e * 307, e * 62.072906494140625, e * 291, e * 60.072906494140625, e * 262, e * 68.07290649414062);
            o.bezierCurveTo(e * 223, e * 80.07290649414062, e * 225, e * 111.07290649414062, e * 264, e * 139.07290649414062);
            o.closePath();
            se(o, t[0]);
            return i;
        }
        function Pi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 120;
            i.height = e * 320;
            o.translate(e * -60, e * -15);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 188.5, e * 3.953125);
            o.bezierCurveTo(e * 188.5, e * 171.453125, e * 188.5, e * 171.453125, e * 188.5, e * 338.953125);
            o.bezierCurveTo(e * 162.5, e * 268.953125, e * 145.5, e * 265.953125, e * 116.5, e * 244.953125);
            o.bezierCurveTo(e * 67.5, e * 204.953125, e * 87.5, e * 160.953125, e * 113.5, e * 125.953125);
            o.bezierCurveTo(e * 141.5, e * 90.953125, e * 176.5, e * 56.953125, e * 188.5, e * 3.953125);
            o.closePath();
            se(o, t[0]);
            return i;
        }
        function yi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 120;
            i.height = e * 330;
            o.translate(e * -60, e * -10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 188.5, e * 7.953125);
            o.bezierCurveTo(e * 188.5, e * 334.953125, e * 188.5, e * 332.953125, e * 188.5, e * 339.953125);
            o.bezierCurveTo(e * 166.5, e * 295.953125, e * 145.5, e * 295.953125, e * 139.5, e * 282.953125);
            o.bezierCurveTo(e * 124.5, e * 244.953125, e * 139.5, e * 243.953125, e * 131.5, e * 212.953125);
            o.bezierCurveTo(e * 118.5, e * 161.953125, e * 69.5, e * 156.953125, e * 74.5, e * 92.953125);
            o.bezierCurveTo(e * 85.5, e * 41.953125, e * 158.5, e * 49.953125, e * 188.5, e * 7.953125);
            o.closePath();
            se(o, t[0]);
            return i;
        }
        function pi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 48;
            i.height = e * 47;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 7.1875, e * 25.434661865234375);
            o.bezierCurveTo(e * 11.1875, e * 13.434661865234375, e * 18.1875, e * 8.434661865234375, e * 32.1875, e * 10.434661865234375);
            o.bezierCurveTo(e * 45.1875, e * 14.434661865234375, e * 41.1875, e * 24.434661865234375, e * 36.1875, e * 30.434661865234375);
            o.bezierCurveTo(e * 22.1875, e * 42.434661865234375, e * 2.1875, e * 41.434661865234375, e * 7.1875, e * 25.434661865234375);
            o.closePath();
            se(o, t[0]);
            return i;
        }
        function gi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 120;
            i.height = e * 280;
            o.translate(e * -100, e * -20);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 228.5, e * 331.953125);
            o.bezierCurveTo(e * 228.5, e * 12.953125, e * 228.5, e * 171.453125, e * 228.5, e * 10.953125);
            o.bezierCurveTo(e * 196.5, e * 76.953125, e * 206.5, e * 78.953125, e * 191.5, e * 114.953125);
            o.bezierCurveTo(e * 162.5, e * 170.953125, e * 206.5, e * 220.953125, e * 210.5, e * 251.953125);
            o.bezierCurveTo(e * 218.5, e * 287.953125, e * 220.5, e * 291.953125, e * 228.5, e * 331.953125);
            o.closePath();
            se(o, t[0]);
            return i;
        }
        function Mi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 33;
            i.height = e * 35;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 12.75, e * 7.1328125);
            o.bezierCurveTo(e * 26.75, e * 8.1328125, e * 27.75, e * 14.1328125, e * 24.75, e * 23.1328125);
            o.bezierCurveTo(e * 19.75, e * 31.1328125, e * 15.75, e * 33.1328125, e * 6.75, e * 26.1328125);
            o.bezierCurveTo(e * 0.75, e * 19.1328125, e * 4.75, e * 8.1328125, e * 12.75, e * 7.1328125);
            o.closePath();
            se(o, t[0]);
            return i;
        }
        function Li(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 20;
            i.height = e * 35;
            Re(o, 0, 0, 20, 35, 7);
            se(o, t[0]);
            return i;
        }
        function Hi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 161;
            i.height = e * 190;
            o.globalAlpha = 0.5;
            o.translate(0, 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 9, e * 93);
            o.bezierCurveTo(e * 17, e * 95, e * 19, e * 95, e * 21, e * 95);
            o.bezierCurveTo(e * 9, e * 83, e * 17, e * 93, e * 4, e * 76);
            o.bezierCurveTo(e * 11, e * 75, e * 11, e * 75, e * 18, e * 75);
            o.bezierCurveTo(e * 13, e * 67, e * 13, e * 67, e * 7, e * 59);
            o.bezierCurveTo(e * 14, e * 59, e * 14, e * 59, e * 21, e * 59);
            o.bezierCurveTo(e * 46, e * 35, e * 35, e * 45, e * 49, e * 31);
            o.bezierCurveTo(e * 53, e * 24, e * 51, e * 21, e * 51, e * 16);
            o.bezierCurveTo(e * 63, e * 23, e * 63, e * 24, e * 69, e * 29);
            o.bezierCurveTo(e * 76, e * 7, e * 75, e * 11, e * 76, e * 6);
            o.bezierCurveTo(e * 81, e * 12, e * 84, e * 18, e * 89, e * 27);
            o.bezierCurveTo(e * 95, e * 25, e * 100, e * 16, e * 105, e * 14);
            o.bezierCurveTo(e * 103, e * 25, e * 111, e * 33, e * 110, e * 34);
            o.bezierCurveTo(e * 123, e * 48, e * 123, e * 48, e * 136, e * 62);
            o.bezierCurveTo(e * 142, e * 60, e * 147, e * 59, e * 155, e * 58);
            o.bezierCurveTo(e * 147, e * 65, e * 147, e * 65, e * 139, e * 73);
            o.bezierCurveTo(e * 145, e * 73, e * 145, e * 73, e * 151, e * 73);
            o.bezierCurveTo(e * 145, e * 80, e * 145, e * 80, e * 138, e * 87);
            o.bezierCurveTo(e * 144, e * 88, e * 144, e * 88, e * 150, e * 89);
            o.bezierCurveTo(e * 125, e * 103, e * 125, e * 125, e * 113, e * 141);
            o.bezierCurveTo(e * 92, e * 178, e * 85, e * 177, e * 76, e * 178);
            o.bezierCurveTo(e * 64, e * 179, e * 51, e * 164, e * 35, e * 131);
            o.bezierCurveTo(e * 18, e * 95, e * 13, e * 99, e * 8, e * 93);
            o.closePath();
            se(o, t[0]);
            o.globalAlpha = 1;
            o.translate(0, -8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 9, e * 93);
            o.bezierCurveTo(e * 17, e * 95, e * 19, e * 95, e * 21, e * 95);
            o.bezierCurveTo(e * 9, e * 83, e * 17, e * 93, e * 4, e * 76);
            o.bezierCurveTo(e * 11, e * 75, e * 11, e * 75, e * 18, e * 75);
            o.bezierCurveTo(e * 13, e * 67, e * 13, e * 67, e * 7, e * 59);
            o.bezierCurveTo(e * 14, e * 59, e * 14, e * 59, e * 21, e * 59);
            o.bezierCurveTo(e * 46, e * 35, e * 35, e * 45, e * 49, e * 31);
            o.bezierCurveTo(e * 53, e * 24, e * 51, e * 21, e * 51, e * 16);
            o.bezierCurveTo(e * 63, e * 23, e * 63, e * 24, e * 69, e * 29);
            o.bezierCurveTo(e * 76, e * 7, e * 75, e * 11, e * 76, e * 6);
            o.bezierCurveTo(e * 81, e * 12, e * 84, e * 18, e * 89, e * 27);
            o.bezierCurveTo(e * 95, e * 25, e * 100, e * 16, e * 105, e * 14);
            o.bezierCurveTo(e * 103, e * 25, e * 111, e * 33, e * 110, e * 34);
            o.bezierCurveTo(e * 123, e * 48, e * 123, e * 48, e * 136, e * 62);
            o.bezierCurveTo(e * 142, e * 60, e * 147, e * 59, e * 155, e * 58);
            o.bezierCurveTo(e * 147, e * 65, e * 147, e * 65, e * 139, e * 73);
            o.bezierCurveTo(e * 145, e * 73, e * 145, e * 73, e * 151, e * 73);
            o.bezierCurveTo(e * 145, e * 80, e * 145, e * 80, e * 138, e * 87);
            o.bezierCurveTo(e * 144, e * 88, e * 144, e * 88, e * 150, e * 89);
            o.bezierCurveTo(e * 125, e * 103, e * 125, e * 125, e * 113, e * 141);
            o.bezierCurveTo(e * 92, e * 178, e * 85, e * 177, e * 76, e * 178);
            o.bezierCurveTo(e * 64, e * 179, e * 51, e * 164, e * 35, e * 131);
            o.bezierCurveTo(e * 18, e * 95, e * 13, e * 99, e * 8, e * 93);
            o.closePath();
            se(o, t[1]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 28, e * 63);
            o.bezierCurveTo(e * 23, e * 54, e * 24, e * 47, e * 26, e * 37);
            o.bezierCurveTo(e * 28, e * 29, e * 31, e * 31, e * 41, e * 35);
            o.bezierCurveTo(e * 52, e * 45, e * 55, e * 51, e * 57, e * 53);
            o.bezierCurveTo(e * 50, e * 50, e * 44, e * 47, e * 43, e * 48);
            o.bezierCurveTo(e * 43, e * 52, e * 43, e * 52, e * 42, e * 57);
            o.bezierCurveTo(e * 38, e * 54, e * 38, e * 54, e * 33, e * 51);
            o.bezierCurveTo(e * 34, e * 56, e * 34, e * 56, e * 34, e * 61);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 99, e * 55);
            o.bezierCurveTo(e * 107, e * 43, e * 113, e * 39, e * 121, e * 34);
            o.bezierCurveTo(e * 130, e * 29, e * 130, e * 34, e * 130, e * 42);
            o.bezierCurveTo(e * 131, e * 57, e * 128, e * 61, e * 129, e * 63);
            o.bezierCurveTo(e * 124, e * 62, e * 124, e * 62, e * 119, e * 61);
            o.bezierCurveTo(e * 119, e * 56, e * 120, e * 61, e * 118, e * 52);
            o.bezierCurveTo(e * 115, e * 55, e * 111, e * 59, e * 111, e * 58);
            o.bezierCurveTo(e * 110, e * 54, e * 109, e * 57, e * 109, e * 51);
            o.closePath();
            se(o, t[3]);
            he(o, e * 103, e * 110, e * 11);
            se(o, t[4]);
            he(o, e * 55, e * 111, e * 11);
            se(o, t[4]);
            he(o, e * 99, e * 107, e * 5);
            se(o, t[1]);
            he(o, e * 51, e * 108, e * 5);
            se(o, t[1]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 31, e * 121);
            o.bezierCurveTo(e * 45, e * 128, e * 51, e * 133, e * 53, e * 141);
            o.bezierCurveTo(e * 59, e * 161, e * 70, e * 173, e * 80, e * 169);
            o.bezierCurveTo(e * 89, e * 172, e * 99, e * 149, e * 107, e * 133);
            o.bezierCurveTo(e * 114, e * 122, e * 119, e * 123, e * 124, e * 119);
            o.bezierCurveTo(e * 109, e * 148, e * 117, e * 133, e * 109, e * 147);
            o.bezierCurveTo(e * 87, e * 180, e * 84, e * 179, e * 76, e * 178);
            o.bezierCurveTo(e * 49, e * 173, e * 44, e * 149, e * 31, e * 121);
            o.closePath();
            se(o, t[5]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.translate(-2, 0);
            o.moveTo(e * 71, e * 162);
            o.bezierCurveTo(e * 80, e * 155, e * 85, e * 159, e * 89, e * 164);
            o.bezierCurveTo(e * 90, e * 171, e * 86, e * 173, e * 79, e * 173);
            o.bezierCurveTo(e * 67, e * 172, e * 67, e * 168, e * 71, e * 162);
            o.closePath();
            se(o, t[3]);
            o.translate(2, 0);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 9, e * 93);
            o.bezierCurveTo(e * 17, e * 95, e * 19, e * 95, e * 21, e * 95);
            o.bezierCurveTo(e * 9, e * 83, e * 17, e * 93, e * 4, e * 76);
            o.bezierCurveTo(e * 11, e * 75, e * 11, e * 75, e * 18, e * 75);
            o.bezierCurveTo(e * 13, e * 67, e * 13, e * 67, e * 7, e * 59);
            o.bezierCurveTo(e * 14, e * 59, e * 14, e * 59, e * 21, e * 59);
            o.bezierCurveTo(e * 46, e * 35, e * 35, e * 45, e * 49, e * 31);
            o.bezierCurveTo(e * 53, e * 24, e * 51, e * 21, e * 51, e * 16);
            o.bezierCurveTo(e * 63, e * 23, e * 63, e * 24, e * 69, e * 29);
            o.bezierCurveTo(e * 76, e * 7, e * 75, e * 11, e * 76, e * 6);
            o.bezierCurveTo(e * 81, e * 12, e * 84, e * 18, e * 89, e * 27);
            o.bezierCurveTo(e * 95, e * 25, e * 100, e * 16, e * 105, e * 14);
            o.bezierCurveTo(e * 103, e * 25, e * 111, e * 33, e * 110, e * 34);
            o.bezierCurveTo(e * 123, e * 48, e * 123, e * 48, e * 136, e * 62);
            o.bezierCurveTo(e * 142, e * 60, e * 147, e * 59, e * 155, e * 58);
            o.bezierCurveTo(e * 147, e * 65, e * 147, e * 65, e * 139, e * 73);
            o.bezierCurveTo(e * 145, e * 73, e * 145, e * 73, e * 151, e * 73);
            o.bezierCurveTo(e * 145, e * 80, e * 145, e * 80, e * 138, e * 87);
            o.bezierCurveTo(e * 144, e * 88, e * 144, e * 88, e * 150, e * 89);
            o.bezierCurveTo(e * 125, e * 103, e * 125, e * 125, e * 113, e * 141);
            o.bezierCurveTo(e * 92, e * 178, e * 85, e * 177, e * 76, e * 178);
            o.bezierCurveTo(e * 64, e * 179, e * 51, e * 164, e * 35, e * 131);
            o.bezierCurveTo(e * 18, e * 95, e * 13, e * 99, e * 8, e * 93);
            o.closePath();
            se(o, undefined, t[2], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 25, e * 63);
            o.bezierCurveTo(e * 16, e * 58, e * 17, e * 51, e * 17, e * 33);
            o.bezierCurveTo(e * 19, e * 12, e * 21, e * 12, e * 32, e * 17);
            o.bezierCurveTo(e * 63, e * 31, e * 66, e * 45, e * 66, e * 54);
            se(o, t[1], t[2], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 91, e * 53);
            o.bezierCurveTo(e * 91, e * 40, e * 98, e * 33, e * 121, e * 20);
            o.bezierCurveTo(e * 137, e * 12, e * 137, e * 16, e * 139, e * 27);
            o.bezierCurveTo(e * 141, e * 49, e * 140, e * 57, e * 134, e * 64);
            se(o, t[1], t[2], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 31, e * 63);
            o.bezierCurveTo(e * 23, e * 54, e * 24, e * 47, e * 26, e * 37);
            o.bezierCurveTo(e * 28, e * 29, e * 31, e * 31, e * 41, e * 35);
            o.bezierCurveTo(e * 52, e * 45, e * 55, e * 51, e * 57, e * 53);
            o.bezierCurveTo(e * 50, e * 50, e * 44, e * 47, e * 43, e * 48);
            o.bezierCurveTo(e * 43, e * 52, e * 43, e * 52, e * 42, e * 57);
            o.bezierCurveTo(e * 38, e * 54, e * 38, e * 54, e * 33, e * 51);
            o.bezierCurveTo(e * 34, e * 56, e * 34, e * 56, e * 34, e * 61);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 99, e * 55);
            o.bezierCurveTo(e * 107, e * 43, e * 113, e * 39, e * 121, e * 34);
            o.bezierCurveTo(e * 130, e * 29, e * 130, e * 34, e * 130, e * 42);
            o.bezierCurveTo(e * 131, e * 57, e * 128, e * 61, e * 129, e * 63);
            o.bezierCurveTo(e * 124, e * 62, e * 124, e * 62, e * 119, e * 61);
            o.bezierCurveTo(e * 119, e * 56, e * 120, e * 61, e * 118, e * 52);
            o.bezierCurveTo(e * 115, e * 55, e * 111, e * 59, e * 111, e * 58);
            o.bezierCurveTo(e * 110, e * 54, e * 109, e * 57, e * 109, e * 51);
            o.closePath();
            se(o, t[3]);
            return i;
        }
        function wi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 147;
            i.height = e * 172;
            o.globalAlpha = 0.5;
            o.translate(0, e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 8, e * 50);
            o.bezierCurveTo(e * 15, e * 16, e * 49, e * 6, e * 67, e * 6);
            o.bezierCurveTo(e * 121, e * 3, e * 128, e * 32, e * 135, e * 48);
            o.bezierCurveTo(e * 146, e * 96, e * 124, e * 131, e * 96, e * 135);
            o.bezierCurveTo(e * 96, e * 158, e * 79, e * 156, e * 75, e * 156);
            o.bezierCurveTo(e * 50, e * 154, e * 53, e * 150, e * 52, e * 135);
            o.bezierCurveTo(e * 2, e * 127, e * 3, e * 87, e * 8, e * 50);
            o.closePath();
            se(o, t[0]);
            o.translate(0, e * -8);
            o.globalAlpha = 1;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 8, e * 50);
            o.bezierCurveTo(e * 15, e * 16, e * 49, e * 6, e * 67, e * 6);
            o.bezierCurveTo(e * 121, e * 3, e * 128, e * 32, e * 135, e * 48);
            o.bezierCurveTo(e * 146, e * 96, e * 124, e * 131, e * 96, e * 135);
            o.bezierCurveTo(e * 96, e * 158, e * 79, e * 156, e * 75, e * 156);
            o.bezierCurveTo(e * 50, e * 154, e * 53, e * 150, e * 52, e * 135);
            o.bezierCurveTo(e * 2, e * 127, e * 3, e * 87, e * 8, e * 50);
            o.closePath();
            se(o, t[1], t[2], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 14, e * 57);
            o.bezierCurveTo(e * 2, e * 50, e * 5, e * 22, e * 24, e * 22);
            o.bezierCurveTo(e * 41, e * 21, e * 54, e * 32, e * 55, e * 48);
            se(o, t[1], t[2], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 93, e * 47);
            o.bezierCurveTo(e * 94, e * 24, e * 116, e * 21, e * 120, e * 20);
            o.bezierCurveTo(e * 144, e * 17, e * 146, e * 52, e * 133, e * 58);
            se(o, t[1], t[2], e * 4);
            he(o, e * 51, e * 91, e * 9);
            se(o, t[3]);
            he(o, e * 95, e * 91, e * 9);
            se(o, t[3]);
            he(o, e * 91, e * 89, e * 4);
            se(o, t[4]);
            he(o, e * 47, e * 89, e * 4);
            se(o, t[4]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 54, e * 133);
            o.bezierCurveTo(e * 56, e * 108, e * 64, e * 99, e * 73, e * 98);
            o.bezierCurveTo(e * 86, e * 97, e * 91, e * 119, e * 93, e * 133);
            o.bezierCurveTo(e * 94, e * 155, e * 90, e * 150, e * 74, e * 155);
            o.bezierCurveTo(e * 50, e * 152, e * 55, e * 145, e * 54, e * 134);
            o.closePath();
            se(o, t[5]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 65.25, e * 135);
            o.bezierCurveTo(e * 75.25, e * 128, e * 83.25, e * 133, e * 83.25, e * 138);
            o.bezierCurveTo(e * 88.25, e * 148, e * 61.25, e * 149, e * 64.25, e * 137);
            o.closePath();
            se(o, t[6]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 74, e * 145);
            o.bezierCurveTo(e * 74, e * 148, e * 74, e * 148, e * 74, e * 151);
            o.closePath();
            se(o, undefined, t[6], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 19, e * 58);
            o.bezierCurveTo(e * 10, e * 38, e * 18, e * 33, e * 28, e * 34);
            o.bezierCurveTo(e * 41, e * 39, e * 45, e * 45, e * 50, e * 51);
            o.closePath();
            se(o, t[6]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 100, e * 51);
            o.bezierCurveTo(e * 106, e * 36, e * 119, e * 31, e * 128, e * 36);
            o.bezierCurveTo(e * 137, e * 49, e * 128, e * 58, e * 128, e * 60);
            o.closePath();
            se(o, t[6]);
            return i;
        }
        function fi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 271;
            i.height = e * 366;
            o.globalAlpha = 0.5;
            o.translate(0, e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 133, e * 99);
            o.bezierCurveTo(e * 186, e * 123, e * 199, e * 152, e * 209, e * 169);
            o.bezierCurveTo(e * 228, e * 205, e * 224, e * 245, e * 190, e * 276);
            o.bezierCurveTo(e * 161, e * 296, e * 99, e * 292, e * 79, e * 274);
            o.bezierCurveTo(e * 49, e * 253, e * 47, e * 214, e * 50, e * 197);
            o.bezierCurveTo(e * 61, e * 143, e * 102, e * 113, e * 131, e * 99);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 73, e * 270);
            o.bezierCurveTo(e * 79, e * 280, e * 77, e * 280, e * 78, e * 287);
            o.bezierCurveTo(e * 78, e * 290, e * 83, e * 291, e * 82, e * 299);
            o.bezierCurveTo(e * 81, e * 301, e * 87, e * 301, e * 92, e * 314);
            o.bezierCurveTo(e * 94, e * 319, e * 100, e * 321, e * 107, e * 320);
            o.bezierCurveTo(e * 111, e * 323, e * 114, e * 324, e * 119, e * 320);
            o.bezierCurveTo(e * 137, e * 321, e * 146, e * 323, e * 139, e * 320);
            o.bezierCurveTo(e * 141, e * 324, e * 150, e * 324, e * 153, e * 320);
            o.bezierCurveTo(e * 168, e * 319, e * 171, e * 316, e * 173, e * 307);
            o.bezierCurveTo(e * 180, e * 305, e * 180, e * 301, e * 178, e * 296);
            o.bezierCurveTo(e * 183, e * 296, e * 185, e * 289, e * 188, e * 279);
            o.bezierCurveTo(e * 171, e * 286, e * 149, e * 290, e * 132, e * 289);
            o.bezierCurveTo(e * 101, e * 290, e * 86, e * 280, e * 74, e * 271);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 76, e * 252);
            o.bezierCurveTo(e * 85, e * 294, e * 96, e * 314, e * 103, e * 314);
            o.bezierCurveTo(e * 106, e * 316, e * 151, e * 314, e * 156, e * 314);
            o.bezierCurveTo(e * 169, e * 317, e * 182, e * 285, e * 191, e * 256);
            o.bezierCurveTo(e * 134.5, e * 254, e * 134.5, e * 254, e * 78, e * 252);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 84, e * 257);
            o.bezierCurveTo(e * 122, e * 273, e * 146, e * 268, e * 179, e * 261);
            o.bezierCurveTo(e * 190, e * 258, e * 187, e * 266, e * 178, e * 272);
            o.bezierCurveTo(e * 160, e * 284, e * 123, e * 282, e * 100, e * 277);
            o.bezierCurveTo(e * 73, e * 260, e * 79, e * 257, e * 84, e * 257);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 125, e * 65);
            o.bezierCurveTo(e * 133, e * 45, e * 136, e * 42, e * 141, e * 55);
            o.bezierCurveTo(e * 151, e * 96, e * 164, e * 117, e * 175, e * 134);
            o.bezierCurveTo(e * 203, e * 181, e * 207, e * 182, e * 208, e * 215);
            o.bezierCurveTo(e * 206, e * 240, e * 205, e * 246, e * 184, e * 258);
            o.bezierCurveTo(e * 161, e * 267, e * 131, e * 272, e * 86, e * 258);
            o.bezierCurveTo(e * 67, e * 252, e * 68, e * 239, e * 64, e * 216);
            o.bezierCurveTo(e * 62, e * 194, e * 72, e * 169, e * 92, e * 142);
            o.bezierCurveTo(e * 106, e * 121, e * 114, e * 101, e * 125, e * 65);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 115, e * 37);
            o.bezierCurveTo(e * 116, e * 28, e * 119, e * 27, e * 126, e * 37);
            o.bezierCurveTo(e * 134, e * 48, e * 134, e * 49, e * 132, e * 59);
            o.bezierCurveTo(e * 131, e * 67, e * 127, e * 65, e * 120, e * 56);
            o.bezierCurveTo(e * 114, e * 49, e * 113, e * 43, e * 115, e * 38);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 146, e * 34);
            o.bezierCurveTo(e * 152, e * 28, e * 155, e * 27, e * 157, e * 39);
            o.bezierCurveTo(e * 157, e * 45, e * 157, e * 49, e * 150, e * 56);
            o.bezierCurveTo(e * 141, e * 66, e * 138, e * 66, e * 138, e * 57);
            o.bezierCurveTo(e * 137, e * 50, e * 137, e * 47, e * 141, e * 42);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 143, e * 69);
            o.bezierCurveTo(e * 148, e * 56, e * 156, e * 50, e * 158, e * 58);
            o.bezierCurveTo(e * 159, e * 64, e * 160, e * 67, e * 153, e * 77);
            o.bezierCurveTo(e * 148, e * 83, e * 145, e * 84, e * 143, e * 77);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 149, e * 92);
            o.bezierCurveTo(e * 149, e * 89, e * 151, e * 84, e * 156, e * 79);
            o.bezierCurveTo(e * 161, e * 73, e * 163, e * 78, e * 162, e * 86);
            o.bezierCurveTo(e * 161, e * 91, e * 155, e * 99, e * 152, e * 98);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 111, e * 61);
            o.bezierCurveTo(e * 114, e * 51, e * 117, e * 51, e * 124, e * 64);
            o.bezierCurveTo(e * 128, e * 68, e * 128, e * 76, e * 126, e * 79);
            o.bezierCurveTo(e * 123, e * 84, e * 122, e * 82, e * 115, e * 74);
            o.bezierCurveTo(e * 112, e * 67, e * 115, e * 74, e * 115, e * 74);
            o.bezierCurveTo(e * 111, e * 68, e * 111, e * 66, e * 111, e * 62);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 107, e * 81);
            o.bezierCurveTo(e * 108, e * 74, e * 112, e * 73, e * 118, e * 84);
            o.bezierCurveTo(e * 122, e * 88, e * 122, e * 93, e * 121, e * 98);
            o.bezierCurveTo(e * 114, e * 98, e * 113, e * 98, e * 109, e * 90);
            o.bezierCurveTo(e * 107, e * 87, e * 106, e * 85, e * 107, e * 82);
            o.closePath();
            se(o, t[0]);
            o.globalAlpha = 1;
            o.translate(0, e * -10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 133, e * 99);
            o.bezierCurveTo(e * 186, e * 123, e * 199, e * 152, e * 209, e * 169);
            o.bezierCurveTo(e * 228, e * 205, e * 224, e * 245, e * 190, e * 276);
            o.bezierCurveTo(e * 161, e * 296, e * 99, e * 292, e * 79, e * 274);
            o.bezierCurveTo(e * 49, e * 253, e * 47, e * 214, e * 50, e * 197);
            o.bezierCurveTo(e * 61, e * 143, e * 102, e * 113, e * 131, e * 99);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 73, e * 270);
            o.bezierCurveTo(e * 79, e * 280, e * 77, e * 280, e * 78, e * 287);
            o.bezierCurveTo(e * 78, e * 290, e * 83, e * 291, e * 82, e * 299);
            o.bezierCurveTo(e * 81, e * 301, e * 87, e * 301, e * 92, e * 314);
            o.bezierCurveTo(e * 94, e * 319, e * 100, e * 321, e * 107, e * 320);
            o.bezierCurveTo(e * 111, e * 323, e * 114, e * 324, e * 119, e * 320);
            o.bezierCurveTo(e * 137, e * 321, e * 146, e * 323, e * 139, e * 320);
            o.bezierCurveTo(e * 141, e * 324, e * 150, e * 324, e * 153, e * 320);
            o.bezierCurveTo(e * 168, e * 319, e * 171, e * 316, e * 173, e * 307);
            o.bezierCurveTo(e * 180, e * 305, e * 180, e * 301, e * 178, e * 296);
            o.bezierCurveTo(e * 183, e * 296, e * 185, e * 289, e * 188, e * 279);
            o.bezierCurveTo(e * 171, e * 286, e * 149, e * 290, e * 132, e * 289);
            o.bezierCurveTo(e * 101, e * 290, e * 86, e * 280, e * 74, e * 271);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 76, e * 252);
            o.bezierCurveTo(e * 85, e * 294, e * 96, e * 314, e * 103, e * 314);
            o.bezierCurveTo(e * 106, e * 316, e * 151, e * 314, e * 156, e * 314);
            o.bezierCurveTo(e * 169, e * 317, e * 182, e * 285, e * 191, e * 256);
            o.bezierCurveTo(e * 134.5, e * 254, e * 134.5, e * 254, e * 78, e * 252);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 84, e * 257);
            o.bezierCurveTo(e * 122, e * 273, e * 146, e * 268, e * 179, e * 261);
            o.bezierCurveTo(e * 190, e * 258, e * 187, e * 266, e * 178, e * 272);
            o.bezierCurveTo(e * 160, e * 284, e * 123, e * 282, e * 100, e * 277);
            o.bezierCurveTo(e * 73, e * 260, e * 79, e * 257, e * 84, e * 257);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 125, e * 65);
            o.bezierCurveTo(e * 133, e * 45, e * 136, e * 42, e * 141, e * 55);
            o.bezierCurveTo(e * 151, e * 96, e * 164, e * 117, e * 175, e * 134);
            o.bezierCurveTo(e * 203, e * 181, e * 207, e * 182, e * 208, e * 215);
            o.bezierCurveTo(e * 206, e * 240, e * 205, e * 246, e * 184, e * 258);
            o.bezierCurveTo(e * 161, e * 267, e * 131, e * 272, e * 86, e * 258);
            o.bezierCurveTo(e * 67, e * 252, e * 68, e * 239, e * 64, e * 216);
            o.bezierCurveTo(e * 62, e * 194, e * 72, e * 169, e * 92, e * 142);
            o.bezierCurveTo(e * 106, e * 121, e * 114, e * 101, e * 125, e * 65);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 115, e * 37);
            o.bezierCurveTo(e * 116, e * 28, e * 119, e * 27, e * 126, e * 37);
            o.bezierCurveTo(e * 134, e * 48, e * 134, e * 49, e * 132, e * 59);
            o.bezierCurveTo(e * 131, e * 67, e * 127, e * 65, e * 120, e * 56);
            o.bezierCurveTo(e * 114, e * 49, e * 113, e * 43, e * 115, e * 38);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 146, e * 34);
            o.bezierCurveTo(e * 152, e * 28, e * 155, e * 27, e * 157, e * 39);
            o.bezierCurveTo(e * 157, e * 45, e * 157, e * 49, e * 150, e * 56);
            o.bezierCurveTo(e * 141, e * 66, e * 138, e * 66, e * 138, e * 57);
            o.bezierCurveTo(e * 137, e * 50, e * 137, e * 47, e * 141, e * 42);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 143, e * 69);
            o.bezierCurveTo(e * 148, e * 56, e * 156, e * 50, e * 158, e * 58);
            o.bezierCurveTo(e * 159, e * 64, e * 160, e * 67, e * 153, e * 77);
            o.bezierCurveTo(e * 148, e * 83, e * 145, e * 84, e * 143, e * 77);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 149, e * 92);
            o.bezierCurveTo(e * 149, e * 89, e * 151, e * 84, e * 156, e * 79);
            o.bezierCurveTo(e * 161, e * 73, e * 163, e * 78, e * 162, e * 86);
            o.bezierCurveTo(e * 161, e * 91, e * 155, e * 99, e * 152, e * 98);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 111, e * 61);
            o.bezierCurveTo(e * 114, e * 51, e * 117, e * 51, e * 124, e * 64);
            o.bezierCurveTo(e * 128, e * 68, e * 128, e * 76, e * 126, e * 79);
            o.bezierCurveTo(e * 123, e * 84, e * 122, e * 82, e * 115, e * 74);
            o.bezierCurveTo(e * 112, e * 67, e * 115, e * 74, e * 115, e * 74);
            o.bezierCurveTo(e * 111, e * 68, e * 111, e * 66, e * 111, e * 62);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 107, e * 81);
            o.bezierCurveTo(e * 108, e * 74, e * 112, e * 73, e * 118, e * 84);
            o.bezierCurveTo(e * 122, e * 88, e * 122, e * 93, e * 121, e * 98);
            o.bezierCurveTo(e * 114, e * 98, e * 113, e * 98, e * 109, e * 90);
            o.bezierCurveTo(e * 107, e * 87, e * 106, e * 85, e * 107, e * 82);
            o.closePath();
            se(o, t[3], t[3], e * 8);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 133, e * 99);
            o.bezierCurveTo(e * 186, e * 123, e * 199, e * 152, e * 209, e * 169);
            o.bezierCurveTo(e * 228, e * 205, e * 224, e * 245, e * 190, e * 276);
            o.bezierCurveTo(e * 161, e * 296, e * 99, e * 292, e * 79, e * 274);
            o.bezierCurveTo(e * 49, e * 253, e * 47, e * 214, e * 50, e * 197);
            o.bezierCurveTo(e * 61, e * 143, e * 102, e * 113, e * 131, e * 99);
            o.closePath();
            se(o, t[1]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 73, e * 270);
            o.bezierCurveTo(e * 79, e * 280, e * 77, e * 280, e * 78, e * 287);
            o.bezierCurveTo(e * 78, e * 290, e * 83, e * 291, e * 82, e * 299);
            o.bezierCurveTo(e * 81, e * 301, e * 87, e * 301, e * 92, e * 314);
            o.bezierCurveTo(e * 94, e * 319, e * 100, e * 321, e * 107, e * 320);
            o.bezierCurveTo(e * 111, e * 323, e * 114, e * 324, e * 119, e * 320);
            o.bezierCurveTo(e * 137, e * 321, e * 146, e * 323, e * 139, e * 320);
            o.bezierCurveTo(e * 141, e * 324, e * 150, e * 324, e * 153, e * 320);
            o.bezierCurveTo(e * 168, e * 319, e * 171, e * 316, e * 173, e * 307);
            o.bezierCurveTo(e * 180, e * 305, e * 180, e * 301, e * 178, e * 296);
            o.bezierCurveTo(e * 183, e * 296, e * 185, e * 289, e * 188, e * 279);
            o.bezierCurveTo(e * 171, e * 286, e * 149, e * 290, e * 132, e * 289);
            o.bezierCurveTo(e * 101, e * 290, e * 86, e * 280, e * 74, e * 271);
            o.closePath();
            se(o, t[5]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 76, e * 252);
            o.bezierCurveTo(e * 85, e * 294, e * 96, e * 314, e * 103, e * 314);
            o.bezierCurveTo(e * 106, e * 316, e * 151, e * 314, e * 156, e * 314);
            o.bezierCurveTo(e * 169, e * 317, e * 182, e * 285, e * 191, e * 256);
            o.bezierCurveTo(e * 134.5, e * 254, e * 134.5, e * 254, e * 78, e * 252);
            o.closePath();
            se(o, t[2]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 84, e * 257);
            o.bezierCurveTo(e * 122, e * 273, e * 146, e * 268, e * 179, e * 261);
            o.bezierCurveTo(e * 190, e * 258, e * 187, e * 266, e * 178, e * 272);
            o.bezierCurveTo(e * 160, e * 284, e * 123, e * 282, e * 100, e * 277);
            o.bezierCurveTo(e * 73, e * 260, e * 79, e * 257, e * 84, e * 257);
            o.closePath();
            se(o, t[1]);
            he(o, e * 102, e * 269, e * 11);
            se(o, t[3]);
            he(o, e * 98, e * 266, e * 5);
            se(o, t[6]);
            he(o, e * 168, e * 269, e * 11);
            se(o, t[3]);
            he(o, e * 164, e * 266, e * 5);
            se(o, t[6]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 125, e * 65);
            o.bezierCurveTo(e * 133, e * 45, e * 136, e * 42, e * 141, e * 55);
            o.bezierCurveTo(e * 151, e * 96, e * 164, e * 117, e * 175, e * 134);
            o.bezierCurveTo(e * 203, e * 181, e * 207, e * 182, e * 208, e * 215);
            o.bezierCurveTo(e * 206, e * 240, e * 205, e * 246, e * 184, e * 258);
            o.bezierCurveTo(e * 161, e * 267, e * 131, e * 272, e * 86, e * 258);
            o.bezierCurveTo(e * 67, e * 252, e * 68, e * 239, e * 64, e * 216);
            o.bezierCurveTo(e * 62, e * 194, e * 72, e * 169, e * 92, e * 142);
            o.bezierCurveTo(e * 106, e * 121, e * 114, e * 101, e * 125, e * 65);
            o.closePath();
            se(o, t[2]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 115, e * 235);
            o.bezierCurveTo(e * 118, e * 258, e * 137, e * 268, e * 148, e * 246);
            o.bezierCurveTo(e * 156, e * 228, e * 152, e * 169, e * 150, e * 140);
            o.bezierCurveTo(e * 147, e * 87, e * 143, e * 69, e * 142, e * 60);
            o.bezierCurveTo(e * 136, e * 44, e * 132, e * 43, e * 127, e * 62);
            o.bezierCurveTo(e * 119, e * 116, e * 119, e * 140, e * 116, e * 166);
            o.bezierCurveTo(e * 113, e * 202, e * 113, e * 223, e * 115, e * 233);
            o.closePath();
            se(o, t[4]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 132, e * 219);
            o.bezierCurveTo(e * 140, e * 229, e * 142, e * 231, e * 145, e * 237);
            o.bezierCurveTo(e * 145, e * 245, e * 139, e * 249, e * 133, e * 249);
            o.bezierCurveTo(e * 123, e * 248, e * 123, e * 243, e * 121, e * 239);
            o.bezierCurveTo(e * 126, e * 227, e * 129, e * 223, e * 132, e * 219);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 133, e * 179);
            o.bezierCurveTo(e * 140, e * 188.5, e * 140, e * 188.5, e * 147, e * 198);
            o.bezierCurveTo(e * 148, e * 209, e * 142, e * 214, e * 133, e * 214);
            o.bezierCurveTo(e * 121, e * 211, e * 121, e * 207, e * 120, e * 200);
            o.bezierCurveTo(e * 126.5, e * 189.5, e * 126.5, e * 189.5, e * 133, e * 179);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 133, e * 143);
            o.bezierCurveTo(e * 139, e * 151.5, e * 139, e * 151.5, e * 145, e * 160);
            o.bezierCurveTo(e * 143, e * 167, e * 140, e * 170, e * 134, e * 170);
            o.bezierCurveTo(e * 128, e * 169, e * 124, e * 167, e * 123, e * 161);
            o.bezierCurveTo(e * 128, e * 152, e * 128, e * 152, e * 133, e * 143);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 133, e * 115);
            o.bezierCurveTo(e * 137.5, e * 121.5, e * 137.5, e * 121.5, e * 142, e * 128);
            o.bezierCurveTo(e * 141, e * 133, e * 138, e * 135, e * 133, e * 135);
            o.bezierCurveTo(e * 129, e * 135, e * 125, e * 132, e * 125, e * 129);
            o.bezierCurveTo(e * 129, e * 122, e * 129, e * 122, e * 133, e * 115);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 133, e * 94);
            o.bezierCurveTo(e * 136.5, e * 98.5, e * 136.5, e * 98.5, e * 140, e * 103);
            o.bezierCurveTo(e * 139, e * 109, e * 137, e * 109, e * 133, e * 110);
            o.bezierCurveTo(e * 127, e * 108, e * 129, e * 107, e * 127, e * 105);
            o.bezierCurveTo(e * 130, e * 99.5, e * 130, e * 99.5, e * 133, e * 94);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 130, e * 279);
            o.bezierCurveTo(e * 136.5, e * 287.5, e * 136.5, e * 287.5, e * 143, e * 296);
            o.bezierCurveTo(e * 143, e * 302, e * 139, e * 309, e * 131, e * 308);
            o.bezierCurveTo(e * 123, e * 306, e * 121, e * 303, e * 120, e * 297);
            o.bezierCurveTo(e * 125.5, e * 288.5, e * 125.5, e * 288.5, e * 131, e * 280);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 147, e * 303);
            o.bezierCurveTo(e * 151, e * 311, e * 151, e * 319, e * 147, e * 321);
            o.bezierCurveTo(e * 138, e * 320, e * 145, e * 308, e * 147, e * 303);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 115, e * 303);
            o.bezierCurveTo(e * 115, e * 312, e * 118, e * 319, e * 115, e * 319);
            o.bezierCurveTo(e * 112, e * 324, e * 109, e * 318, e * 109, e * 314);
            o.bezierCurveTo(e * 109, e * 308, e * 112, e * 303, e * 115, e * 303);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 89, e * 280);
            o.bezierCurveTo(e * 83, e * 279, e * 80, e * 281, e * 81, e * 286);
            o.bezierCurveTo(e * 83, e * 290, e * 84, e * 290, e * 87, e * 286);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 94, e * 290);
            o.bezierCurveTo(e * 93, e * 294, e * 90, e * 303, e * 86, e * 298);
            o.bezierCurveTo(e * 84, e * 295, e * 84, e * 291, e * 89, e * 291);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 163, e * 295);
            o.bezierCurveTo(e * 175, e * 294, e * 176, e * 296, e * 175, e * 301);
            o.bezierCurveTo(e * 174, e * 305, e * 171, e * 305, e * 166, e * 300);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 172, e * 286);
            o.bezierCurveTo(e * 180, e * 285, e * 181, e * 285, e * 180, e * 291);
            o.bezierCurveTo(e * 176, e * 295, e * 174, e * 294, e * 172, e * 286);
            o.closePath();
            se(o, t[8]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 115, e * 37);
            o.bezierCurveTo(e * 116, e * 28, e * 119, e * 27, e * 126, e * 37);
            o.bezierCurveTo(e * 134, e * 48, e * 134, e * 49, e * 132, e * 59);
            o.bezierCurveTo(e * 131, e * 67, e * 127, e * 65, e * 120, e * 56);
            o.bezierCurveTo(e * 114, e * 49, e * 113, e * 43, e * 115, e * 38);
            o.closePath();
            se(o, t[7]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 146, e * 34);
            o.bezierCurveTo(e * 152, e * 28, e * 155, e * 27, e * 157, e * 39);
            o.bezierCurveTo(e * 157, e * 45, e * 157, e * 49, e * 150, e * 56);
            o.bezierCurveTo(e * 141, e * 66, e * 138, e * 66, e * 138, e * 57);
            o.bezierCurveTo(e * 137, e * 50, e * 137, e * 47, e * 141, e * 42);
            o.closePath();
            se(o, t[7]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 143, e * 69);
            o.bezierCurveTo(e * 148, e * 56, e * 156, e * 50, e * 158, e * 58);
            o.bezierCurveTo(e * 159, e * 64, e * 160, e * 67, e * 153, e * 77);
            o.bezierCurveTo(e * 148, e * 83, e * 145, e * 84, e * 143, e * 77);
            o.closePath();
            se(o, t[7]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 149, e * 92);
            o.bezierCurveTo(e * 149, e * 89, e * 151, e * 84, e * 156, e * 79);
            o.bezierCurveTo(e * 161, e * 73, e * 163, e * 78, e * 162, e * 86);
            o.bezierCurveTo(e * 161, e * 91, e * 155, e * 99, e * 152, e * 98);
            o.closePath();
            se(o, t[7]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 111, e * 61);
            o.bezierCurveTo(e * 114, e * 51, e * 117, e * 51, e * 124, e * 64);
            o.bezierCurveTo(e * 128, e * 68, e * 128, e * 76, e * 126, e * 79);
            o.bezierCurveTo(e * 123, e * 84, e * 122, e * 82, e * 115, e * 74);
            o.bezierCurveTo(e * 112, e * 67, e * 115, e * 74, e * 115, e * 74);
            o.bezierCurveTo(e * 111, e * 68, e * 111, e * 66, e * 111, e * 62);
            o.closePath();
            se(o, t[7]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 107, e * 81);
            o.bezierCurveTo(e * 108, e * 74, e * 112, e * 73, e * 118, e * 84);
            o.bezierCurveTo(e * 122, e * 88, e * 122, e * 93, e * 121, e * 98);
            o.bezierCurveTo(e * 114, e * 98, e * 113, e * 98, e * 109, e * 90);
            o.bezierCurveTo(e * 107, e * 87, e * 106, e * 85, e * 107, e * 82);
            o.closePath();
            se(o, t[7]);
            return i;
        }
        function zi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 85;
            i.height = e * 145;
            o.translate(e * -20, e * -95);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 50, e * 105);
            o.bezierCurveTo(e * 52, e * 119, e * 64, e * 137, e * 71, e * 146);
            o.bezierCurveTo(e * 71, e * 161, e * 74, e * 169, e * 79, e * 179);
            o.bezierCurveTo(e * 68, e * 192, e * 70, e * 204, e * 69, e * 216);
            o.bezierCurveTo(e * 50, e * 189.5, e * 50, e * 189.5, e * 31, e * 163);
            o.closePath();
            se(o, t[1]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 44, e * 106);
            o.bezierCurveTo(e * 49, e * 90, e * 58, e * 104, e * 51, e * 121);
            o.bezierCurveTo(e * 45, e * 143, e * 41, e * 151, e * 37, e * 162);
            o.bezierCurveTo(e * 48, e * 180, e * 58, e * 188, e * 76, e * 205);
            o.bezierCurveTo(e * 104, e * 209, e * 105, e * 229, e * 92, e * 235);
            o.bezierCurveTo(e * 76, e * 239, e * 75, e * 232, e * 56, e * 213);
            o.bezierCurveTo(e * 31, e * 187, e * 28, e * 176, e * 23, e * 162);
            o.bezierCurveTo(e * 38, e * 131, e * 40, e * 120, e * 44, e * 106);
            o.closePath();
            se(o, t[2], t[3], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 30, e * 159);
            o.bezierCurveTo(e * 46, e * 157, e * 59, e * 152, e * 68, e * 148);
            o.bezierCurveTo(e * 63, e * 155, e * 52, e * 160, e * 44, e * 164);
            o.bezierCurveTo(e * 59, e * 169, e * 66, e * 174, e * 75, e * 178);
            o.bezierCurveTo(e * 58, e * 178, e * 49, e * 175, e * 37, e * 174);
            o.closePath();
            se(o, t[2]);
            return i;
        }
        function Bi(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 85;
            i.height = e * 145;
            o.translate(e * -165, e * -95);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 217, e * 103);
            o.bezierCurveTo(e * 209, e * 129, e * 203, e * 137, e * 195, e * 146);
            o.bezierCurveTo(e * 195, e * 159, e * 194, e * 167, e * 189, e * 178);
            o.bezierCurveTo(e * 193, e * 186, e * 196, e * 195, e * 198, e * 216);
            o.bezierCurveTo(e * 217.5, e * 189.5, e * 217.5, e * 189.5, e * 237, e * 163);
            o.closePath();
            se(o, t[1]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 231, e * 163);
            o.bezierCurveTo(e * 221, e * 139, e * 218, e * 128, e * 215, e * 114);
            o.bezierCurveTo(e * 213, e * 102, e * 220, e * 92, e * 222, e * 107);
            o.bezierCurveTo(e * 224, e * 118, e * 233, e * 138, e * 244, e * 161);
            o.bezierCurveTo(e * 235, e * 188, e * 224, e * 198, e * 204, e * 221);
            o.bezierCurveTo(e * 190, e * 233, e * 190, e * 235, e * 180, e * 235);
            o.bezierCurveTo(e * 167, e * 235, e * 164, e * 216, e * 175, e * 211);
            o.bezierCurveTo(e * 176, e * 208, e * 181, e * 207, e * 191, e * 205);
            o.bezierCurveTo(e * 213, e * 186, e * 218, e * 180, e * 230, e * 163);
            o.closePath();
            se(o, t[2], t[3], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 234, e * 154);
            o.bezierCurveTo(e * 227, e * 156, e * 222, e * 156, e * 199, e * 148);
            o.bezierCurveTo(e * 201, e * 151, e * 216, e * 159, e * 224, e * 162);
            o.bezierCurveTo(e * 209, e * 169.5, e * 209, e * 169.5, e * 194, e * 177);
            o.bezierCurveTo(e * 213.5, e * 175, e * 213.5, e * 175, e * 233, e * 173);
            o.closePath();
            se(o, t[2]);
            return i;
        }
        function Gi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 187;
            o.height = e * 119;
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(0, 3);
            T.moveTo(e * 53, e * 45);
            T.bezierCurveTo(e * 3, e * 60, e * 11, e * 72, e * 19, e * 81);
            T.bezierCurveTo(e * 28, e * 82, e * 24, e * 81, e * 29, e * 82);
            T.bezierCurveTo(e * 26, e * 87, e * 28, e * 84, e * 28, e * 87);
            T.bezierCurveTo(e * 63, e * 101, e * 92, e * 100, e * 138, e * 93);
            T.bezierCurveTo(e * 172, e * 87, e * 180, e * 72, e * 168, e * 62);
            T.bezierCurveTo(e * 154, e * 51, e * 150, e * 50, e * 148, e * 49);
            T.bezierCurveTo(e * 132, e * 42, e * 90, e * 40, e * 55, e * 45);
            T.closePath();
            se(T, i[5]);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(0, -3);
            T.moveTo(e * 53, e * 45);
            T.bezierCurveTo(e * 3, e * 60, e * 11, e * 72, e * 19, e * 81);
            T.bezierCurveTo(e * 28, e * 82, e * 24, e * 81, e * 29, e * 82);
            T.bezierCurveTo(e * 26, e * 87, e * 28, e * 84, e * 28, e * 87);
            T.bezierCurveTo(e * 63, e * 101, e * 92, e * 100, e * 138, e * 93);
            T.bezierCurveTo(e * 172, e * 87, e * 180, e * 72, e * 168, e * 62);
            T.bezierCurveTo(e * 154, e * 51, e * 150, e * 50, e * 148, e * 49);
            T.bezierCurveTo(e * 132, e * 42, e * 90, e * 40, e * 55, e * 45);
            T.closePath();
            se(T, i[0], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 151, e * 60);
            T.bezierCurveTo(e * 140, e * 36, e * 137, e * 32, e * 124, e * 29);
            T.bezierCurveTo(e * 98, e * 22, e * 80, e * 24, e * 62, e * 28);
            T.bezierCurveTo(e * 42, e * 35, e * 38, e * 46, e * 34, e * 58);
            T.bezierCurveTo(e * 53, e * 74, e * 76, e * 76, e * 91, e * 78);
            T.closePath();
            se(T, i[0], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 37, e * 53);
            T.bezierCurveTo(e * 30, e * 56, e * 29, e * 67, e * 30, e * 68);
            T.bezierCurveTo(e * 94, e * 108, e * 150, e * 76, e * 155, e * 70);
            T.bezierCurveTo(e * 154, e * 60, e * 151, e * 54, e * 149, e * 53);
            T.bezierCurveTo(e * 101, e * 74, e * 66, e * 66, e * 37, e * 53);
            T.closePath();
            se(T, i[2], i[3], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 100, e * 36);
            T.bezierCurveTo(e * 92, e * 25, e * 86, e * 28, e * 82, e * 34);
            T.bezierCurveTo(e * 88, e * 40, e * 93, e * 40, e * 98, e * 36);
            T.closePath();
            se(T, i[0], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80, e * 43);
            T.bezierCurveTo(e * 69, e * 46, e * 67, e * 52, e * 69, e * 58);
            se(T, undefined, i[1], e * 4);
            he(T, e * 58, e * 50, e * 5);
            se(T, i[4]);
            he(T, e * 43, e * 65, e * 5);
            se(T, i[4]);
            he(T, e * 58, e * 73, e * 5);
            se(T, i[4]);
            he(T, e * 58, e * 50, e * 2);
            se(T, i[5]);
            he(T, e * 43, e * 65, e * 2);
            se(T, i[5]);
            he(T, e * 58, e * 73, e * 2);
            se(T, i[5]);
            return o;
        }
        function Wi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 180;
            o.height = e * 120;
            T.translate(e * -65, e * -35);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.save();
            T.translate(e * 150.5, e * 63.84375);
            Re(T, e * -67, e * -16.5, e * 134, e * 33, e * 5);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80.5, e * 75.34375);
            T.bezierCurveTo(e * 83, e * 106.34375, e * 83, e * 106.34375, e * 85.5, e * 137.34375);
            T.bezierCurveTo(e * 93, e * 135.84375, e * 93, e * 135.84375, e * 100.5, e * 134.34375);
            T.bezierCurveTo(e * 99.5, e * 100.84375, e * 99.5, e * 100.84375, e * 98.5, e * 67.34375);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 206.5, e * 71.34375);
            T.bezierCurveTo(e * 203.5, e * 104.34375, e * 203.5, e * 104.34375, e * 200.5, e * 137.34375);
            T.bezierCurveTo(e * 208.5, e * 137.34375, e * 208.5, e * 137.34375, e * 216.5, e * 137.34375);
            T.bezierCurveTo(e * 219, e * 102.84375, e * 219, e * 102.84375, e * 221.5, e * 68.34375);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 136.5, e * 75.34375);
            T.bezierCurveTo(e * 139, e * 94.34375, e * 139, e * 94.34375, e * 141.5, e * 113.34375);
            T.bezierCurveTo(e * 149.5, e * 115.34375, e * 149.5, e * 115.34375, e * 157.5, e * 117.34375);
            T.bezierCurveTo(e * 162, e * 97.34375, e * 162, e * 97.34375, e * 166.5, e * 77.34375);
            T.closePath();
            se(T, i[0]);
            T.save();
            T.translate(e * 152.5, e * 80.84375);
            T.rotate(3.12);
            Re(T, e * -73, e * -20.5, e * 146, e * 41, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.save();
            T.translate(e * 150.5, e * 63.84375);
            Re(T, e * -67, e * -16.5, e * 134, e * 33, e * 5);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80.5, e * 75.34375);
            T.bezierCurveTo(e * 83, e * 106.34375, e * 83, e * 106.34375, e * 85.5, e * 137.34375);
            T.bezierCurveTo(e * 93, e * 135.84375, e * 93, e * 135.84375, e * 100.5, e * 134.34375);
            T.bezierCurveTo(e * 99.5, e * 100.84375, e * 99.5, e * 100.84375, e * 98.5, e * 67.34375);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 206.5, e * 71.34375);
            T.bezierCurveTo(e * 203.5, e * 104.34375, e * 203.5, e * 104.34375, e * 200.5, e * 137.34375);
            T.bezierCurveTo(e * 208.5, e * 137.34375, e * 208.5, e * 137.34375, e * 216.5, e * 137.34375);
            T.bezierCurveTo(e * 219, e * 102.84375, e * 219, e * 102.84375, e * 221.5, e * 68.34375);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 136.5, e * 75.34375);
            T.bezierCurveTo(e * 139, e * 94.34375, e * 139, e * 94.34375, e * 141.5, e * 113.34375);
            T.bezierCurveTo(e * 149.5, e * 115.34375, e * 149.5, e * 115.34375, e * 157.5, e * 117.34375);
            T.bezierCurveTo(e * 162, e * 97.34375, e * 162, e * 97.34375, e * 166.5, e * 77.34375);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.save();
            T.translate(e * 152.5, e * 80.84375);
            T.rotate(3.12);
            Re(T, e * -73, e * -20.5, e * 146, e * 41, e * 5);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 83.5, e * 73.34375);
            T.bezierCurveTo(e * 93.5, e * 70.34375, e * 105.5, e * 70.34375, e * 124.5, e * 72.34375);
            T.bezierCurveTo(e * 132.5, e * 78.34375, e * 162.5, e * 80.34375, e * 176.5, e * 76.34375);
            T.bezierCurveTo(e * 194.5, e * 69.34375, e * 192.5, e * 68.34375, e * 199.5, e * 63.34375);
            T.bezierCurveTo(e * 204.5, e * 63.34375, e * 204.5, e * 63.34375, e * 209.5, e * 63.34375);
            T.bezierCurveTo(e * 153.5, e * 82.34375, e * 157.5, e * 85.34375, e * 209.5, e * 63.34375);
            T.bezierCurveTo(e * 194.5, e * 88.34375, e * 162.5, e * 87.34375, e * 149.5, e * 88.34375);
            T.bezierCurveTo(e * 129.5, e * 81.34375, e * 103.5, e * 75.34375, e * 83.5, e * 82.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 137.5, e * 65.34375);
            T.bezierCurveTo(e * 150.5, e * 76.34375, e * 170.5, e * 71.34375, e * 174.5, e * 65.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 221.5, e * 85.34375);
            T.bezierCurveTo(e * 211.5, e * 79.34375, e * 191.5, e * 88.34375, e * 181.5, e * 96.34375);
            T.bezierCurveTo(e * 201.5, e * 96.34375, e * 201.5, e * 96.34375, e * 221.5, e * 96.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84.5, e * 89.34375);
            T.bezierCurveTo(e * 102.5, e * 87.34375, e * 112.5, e * 88.34375, e * 119.5, e * 97.34375);
            T.bezierCurveTo(e * 102, e * 98.34375, e * 102, e * 98.34375, e * 84.5, e * 99.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 208.5, e * 104.34375);
            T.bezierCurveTo(e * 208.5, e * 110.34375, e * 208.5, e * 110.34375, e * 208.5, e * 116.34375);
            T.bezierCurveTo(e * 211.5, e * 110.34375, e * 211.5, e * 110.34375, e * 214.5, e * 104.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87.5, e * 117.34375);
            T.bezierCurveTo(e * 92, e * 118.84375, e * 92, e * 118.84375, e * 96.5, e * 120.34375);
            T.bezierCurveTo(e * 93, e * 123.84375, e * 93, e * 123.84375, e * 89.5, e * 127.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 107.5, e * 51.34375);
            T.bezierCurveTo(e * 122.5, e * 54.34375, e * 122.5, e * 54.34375, e * 137.5, e * 57.34375);
            T.bezierCurveTo(e * 118, e * 57.34375, e * 118, e * 57.34375, e * 98.5, e * 57.34375);
            T.bezierCurveTo(e * 94.5, e * 54.84375, e * 94.5, e * 54.84375, e * 90.5, e * 52.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 170.5, e * 52.34375);
            T.bezierCurveTo(e * 179.5, e * 51.84375, e * 179.5, e * 51.84375, e * 188.5, e * 51.34375);
            T.bezierCurveTo(e * 187.5, e * 53.84375, e * 187.5, e * 53.84375, e * 186.5, e * 56.34375);
            T.bezierCurveTo(e * 177, e * 56.34375, e * 177, e * 56.34375, e * 167.5, e * 56.34375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80.5, e * 69.34375);
            T.bezierCurveTo(e * 86.5, e * 70.34375, e * 86.5, e * 70.34375, e * 92.5, e * 71.34375);
            T.bezierCurveTo(e * 86, e * 73.34375, e * 86, e * 73.34375, e * 79.5, e * 75.34375);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 222.5, e * 75.34375);
            T.bezierCurveTo(e * 214.5, e * 76.34375, e * 214.5, e * 76.34375, e * 206.5, e * 77.34375);
            T.bezierCurveTo(e * 216.5, e * 79.34375, e * 216.5, e * 79.34375, e * 226.5, e * 81.34375);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 116.5, e * 100.34375);
            T.bezierCurveTo(e * 128, e * 97.34375, e * 128, e * 97.34375, e * 139.5, e * 94.34375);
            T.bezierCurveTo(e * 140, e * 96.84375, e * 140, e * 96.84375, e * 140.5, e * 99.34375);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 112.5, e * 48.34375);
            T.bezierCurveTo(e * 115.5, e * 50.84375, e * 115.5, e * 50.84375, e * 118.5, e * 53.34375);
            T.bezierCurveTo(e * 131, e * 50.84375, e * 131, e * 50.84375, e * 143.5, e * 48.34375);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 216.5, e * 109.34375);
            T.bezierCurveTo(e * 213, e * 114.84375, e * 213, e * 114.84375, e * 209.5, e * 120.34375);
            T.bezierCurveTo(e * 212, e * 118.84375, e * 212, e * 118.84375, e * 214.5, e * 117.34375);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 86.5, e * 133.34375);
            T.bezierCurveTo(e * 89, e * 127.34375, e * 89, e * 127.34375, e * 91.5, e * 121.34375);
            T.bezierCurveTo(e * 92.5, e * 127.34375, e * 92.5, e * 127.34375, e * 93.5, e * 133.34375);
            T.closePath();
            se(T, i[2]);
            return o;
        }
        function Vi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 175;
            o.height = e * 106;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 28, e * 67);
            T.bezierCurveTo(e * 55, e * 80, e * 126, e * 74, e * 144, e * 68);
            T.bezierCurveTo(e * 144.5, e * 75, e * 144.5, e * 75, e * 145, e * 82);
            T.bezierCurveTo(e * 114, e * 94, e * 47, e * 91, e * 28, e * 82);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 145, e * 75);
            T.bezierCurveTo(e * 143, e * 51, e * 133, e * 29, e * 100, e * 27);
            T.bezierCurveTo(e * 52, e * 21, e * 37, e * 37, e * 31, e * 54);
            T.bezierCurveTo(e * 23, e * 78, e * 28, e * 77, e * 36, e * 79);
            T.bezierCurveTo(e * 80, e * 87, e * 120, e * 81, e * 145, e * 76);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 38, e * 46);
            T.bezierCurveTo(e * 52, e * 37, e * 69, e * 36, e * 85, e * 36);
            T.bezierCurveTo(e * 118, e * 38, e * 129, e * 42, e * 137, e * 48);
            T.bezierCurveTo(e * 135, e * 45, e * 135, e * 45, e * 133, e * 42);
            T.bezierCurveTo(e * 124, e * 32, e * 116, e * 28, e * 88, e * 25);
            T.bezierCurveTo(e * 47, e * 28, e * 40, e * 32, e * 36, e * 44);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 145, e * 75);
            T.bezierCurveTo(e * 143, e * 51, e * 133, e * 29, e * 100, e * 27);
            T.bezierCurveTo(e * 52, e * 21, e * 37, e * 37, e * 31, e * 54);
            T.bezierCurveTo(e * 23, e * 78, e * 28, e * 77, e * 36, e * 79);
            T.bezierCurveTo(e * 80, e * 87, e * 120, e * 81, e * 145, e * 76);
            T.closePath();
            se(T, undefined, i[2], e * 4);
            T.translate(0, e * -3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 28, e * 67);
            T.bezierCurveTo(e * 55, e * 80, e * 126, e * 74, e * 144, e * 68);
            T.bezierCurveTo(e * 144.5, e * 75, e * 144.5, e * 75, e * 145, e * 82);
            T.bezierCurveTo(e * 114, e * 94, e * 47, e * 91, e * 28, e * 82);
            T.closePath();
            se(T, i[10], i[10], e * 4);
            T.translate(0, e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 131, e * 43);
            T.bezierCurveTo(e * 145, e * 40, e * 148, e * 32, e * 147, e * 17);
            T.bezierCurveTo(e * 166, e * 39, e * 155, e * 62, e * 140, e * 67);
            T.bezierCurveTo(e * 128, e * 65, e * 128, e * 52, e * 131, e * 45);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 41, e * 43);
            T.bezierCurveTo(e * 30, e * 42, e * 24, e * 33, e * 25, e * 17);
            T.bezierCurveTo(e * 7, e * 34, e * 17, e * 63, e * 33, e * 66);
            T.bezierCurveTo(e * 45, e * 59, e * 44, e * 53, e * 42, e * 44);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 24, e * 19);
            T.bezierCurveTo(e * 24, e * 35, e * 35, e * 42, e * 42, e * 44);
            T.bezierCurveTo(e * 43, e * 51, e * 43, e * 48, e * 43, e * 56);
            T.bezierCurveTo(e * 25, e * 47, e * 17, e * 36, e * 23, e * 20);
            T.closePath();
            se(T, i[6]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 148, e * 18);
            T.bezierCurveTo(e * 159, e * 44, e * 139, e * 52, e * 130, e * 55);
            T.bezierCurveTo(e * 129, e * 48, e * 129, e * 46, e * 131, e * 43);
            T.bezierCurveTo(e * 144, e * 37, e * 148, e * 35, e * 147, e * 18);
            T.closePath();
            se(T, i[6]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 131, e * 43);
            T.bezierCurveTo(e * 145, e * 40, e * 148, e * 32, e * 147, e * 17);
            T.bezierCurveTo(e * 166, e * 39, e * 155, e * 62, e * 140, e * 67);
            T.bezierCurveTo(e * 128, e * 65, e * 128, e * 52, e * 131, e * 45);
            T.closePath();
            se(T, undefined, i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 41, e * 43);
            T.bezierCurveTo(e * 30, e * 42, e * 24, e * 33, e * 25, e * 17);
            T.bezierCurveTo(e * 7, e * 34, e * 17, e * 63, e * 33, e * 66);
            T.bezierCurveTo(e * 45, e * 59, e * 44, e * 53, e * 42, e * 44);
            T.closePath();
            se(T, undefined, i[4], e * 4);
            T.save();
            T.translate(e * 87, e * 34.5);
            T.rotate(0);
            Re(T, e * -8, e * -10.5, e * 16, e * 21, e * 10);
            T.restore();
            se(T, i[7], i[2], e * 4);
            T.save();
            T.translate(e * 87, e * 57);
            T.rotate(0);
            Re(T, e * -8, e * -23, e * 16, e * 46, e * 10);
            T.restore();
            se(T, i[8], i[2], e * 4);
            he(T, e * 87, e * 39, e * 4.123105625617661);
            se(T, i[9], i[2], e * 4);
            he(T, e * 87, e * 60, e * 4.242640687119285);
            se(T, i[9], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 28, e * 67);
            T.bezierCurveTo(e * 55, e * 80, e * 126, e * 74, e * 144, e * 68);
            T.bezierCurveTo(e * 144.5, e * 75, e * 144.5, e * 75, e * 145, e * 82);
            T.bezierCurveTo(e * 114, e * 94, e * 47, e * 91, e * 28, e * 82);
            T.closePath();
            se(T, i[8], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 27, e * 69);
            T.bezierCurveTo(e * 13, e * 77, e * 16, e * 74, e * 27, e * 80);
            T.closePath();
            se(T, i[9], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 145, e * 70);
            T.bezierCurveTo(e * 149.5, e * 72, e * 149.5, e * 72, e * 154, e * 74);
            T.bezierCurveTo(e * 150, e * 77, e * 150, e * 77, e * 146, e * 80);
            T.closePath();
            se(T, i[9], i[2], e * 4);
            he(T, e * 50, e * 80, e * 5);
            se(T, i[9], i[2], e * 4);
            he(T, e * 86.01141357421875, e * 81.76705932617188, e * 5);
            se(T, i[9], i[2], e * 4);
            he(T, e * 119.01141357421875, e * 80.13069152832031, e * 5);
            se(T, i[9], i[2], e * 4);
            return o;
        }
        function Ki(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 142;
            o.height = e * 118;
            T.save();
            T.translate(e * 70.16665649414062, e * 38.20831298828125);
            Re(T, e * -58.5, e * -27.5, e * 117, e * 55, e * 20);
            T.restore();
            se(T, i[0], i[1], e * 4);
            T.save();
            T.translate(e * 70, e * 42.70831298828125);
            Re(T, e * -61, e * -20, e * 122, e * 40, e * 20);
            T.restore();
            se(T, i[2], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 123, e * 70.375);
            T.bezierCurveTo(e * 115, e * 99.375, e * 119, e * 85.375, e * 115, e * 100.375);
            T.bezierCurveTo(e * 112, e * 116.375, e * 117, e * 109.375, e * 131, e * 100.375);
            T.bezierCurveTo(e * 131, e * 83.375, e * 131, e * 83.375, e * 131, e * 66.375);
            T.closePath();
            se(T, i[2], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 11, e * 68.375);
            T.bezierCurveTo(e * 11.166656494140625, e * 84.375, e * 9, e * 99.375, e * 10, e * 100.375);
            T.bezierCurveTo(e * 35, e * 113.375, e * 27, e * 110.375, e * 25, e * 95.375);
            T.bezierCurveTo(e * 16, e * 68.375, e * 17, e * 69.375, e * 17, e * 68.375);
            T.closePath();
            se(T, i[2], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 46, e * 32.375);
            T.bezierCurveTo(e * 43, e * 8.375, e * 45, e * 7.375, e * 56, e * 6.375);
            T.bezierCurveTo(e * 105, e * 4.375, e * 102, e * 6.375, e * 97, e * 32.375);
            T.bezierCurveTo(e * 138, e * 43.375, e * 133, e * 45.375, e * 133, e * 58.375);
            T.bezierCurveTo(e * 133, e * 85.375, e * 125, e * 74.375, e * 111, e * 70.375);
            T.bezierCurveTo(e * 70, e * 69.875, e * 29, e * 69.375, e * 29, e * 69.375);
            T.bezierCurveTo(e * 7, e * 84.375, e * 7, e * 70.375, e * 7, e * 59.375);
            T.bezierCurveTo(e * 6, e * 28.375, e * 32, e * 39.375, e * 44, e * 32.375);
            T.closePath();
            se(T, i[2], i[1], e * 4);
            he(T, e * 71, e * 44.375, e * 16.55294535724685);
            se(T, i[2], i[1], e * 4);
            he(T, e * 71, e * 43.70831298828125, e * 8.94427190999916);
            se(T, i[2], i[1], e * 4);
            return o;
        }
        function Yi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 142;
            o.height = e * 118;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 111, e * 27.3671875);
            T.bezierCurveTo(e * 128, e * 9.3671875, e * 125, e * 13.3671875, e * 126, e * 21.3671875);
            T.bezierCurveTo(e * 126, e * 33.3671875, e * 119, e * 43.3671875, e * 118, e * 42.3671875);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31, e * 23.3671875);
            T.bezierCurveTo(e * 17, e * 15.3671875, e * 16, e * 14.3671875, e * 17, e * 20.3671875);
            T.bezierCurveTo(e * 22, e * 33.3671875, e * 20, e * 27.3671875, e * 24, e * 34.3671875);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.save();
            T.translate(e * 70.5, e * 34.8671875);
            T.rotate(0);
            Re(T, e * -49.5, e * -21.5, e * 99, e * 43, e * 15);
            T.restore();
            se(T, i[0], i[1], e * 4);
            T.save();
            T.translate(e * 71, e * 40.8671875);
            T.rotate(0);
            Re(T, e * -49, e * -12.5, e * 98, e * 25, e * 15);
            T.restore();
            se(T, i[2], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 19.800003051757812, e * 75.95625305175781);
            T.bezierCurveTo(e * 19.300003051757812, e * 82.95625305175781, e * 19.300003051757812, e * 82.95625305175781, e * 18.800003051757812, e * 89.95625305175781);
            T.bezierCurveTo(e * 38.80000305175781, e * 115.95625305175781, e * 37.80000305175781, e * 104.95625305175781, e * 31.800003051757812, e * 91.95625305175781);
            T.closePath();
            se(T, i[2], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 119.80000305175781, e * 75.95625305175781);
            T.bezierCurveTo(e * 120.80000305175781, e * 82.95625305175781, e * 120.80000305175781, e * 82.95625305175781, e * 121.80000305175781, e * 89.95625305175781);
            T.bezierCurveTo(e * 101.80000305175781, e * 111.95625305175781, e * 99.80000305175781, e * 111.95625305175781, e * 112.80000305175781, e * 81.95625305175781);
            T.closePath();
            se(T, i[2], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 17.800003051757812, e * 49.15625);
            T.bezierCurveTo(e * 17.800003051757812, e * 64.15625, e * 17.800003051757812, e * 64.15625, e * 17.800003051757812, e * 79.15625);
            T.bezierCurveTo(e * 23.300003051757812, e * 85.15625, e * 23.300003051757812, e * 85.15625, e * 28.800003051757812, e * 91.15625);
            T.bezierCurveTo(e * 36.80000305175781, e * 96.15625, e * 32.80000305175781, e * 91.15625, e * 28.800003051757812, e * 77.15625);
            T.bezierCurveTo(e * 33.80000305175781, e * 65.15625, e * 33.80000305175781, e * 65.15625, e * 38.80000305175781, e * 53.15625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 123.80000305175781, e * 53.95625305175781);
            T.bezierCurveTo(e * 121.80000305175781, e * 77.95625305175781, e * 121.80000305175781, e * 74.95625305175781, e * 121.80000305175781, e * 78.95625305175781);
            T.bezierCurveTo(e * 115.80000305175781, e * 84.95625305175781, e * 115.80000305175781, e * 84.95625305175781, e * 109.80000305175781, e * 90.95625305175781);
            T.bezierCurveTo(e * 102.80000305175781, e * 93.95625305175781, e * 105.80000305175781, e * 86.95625305175781, e * 110.80000305175781, e * 76.95625305175781);
            T.bezierCurveTo(e * 107.30000305175781, e * 65.45625305175781, e * 103.80000305175781, e * 53.95625305175781, e * 103.80000305175781, e * 53.95625305175781);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 18, e * 56.3671875);
            T.bezierCurveTo(e * 70, e * 56.8671875, e * 70, e * 56.8671875, e * 122, e * 57.3671875);
            T.bezierCurveTo(e * 137, e * 20.3671875, e * 137, e * 16.3671875, e * 126, e * 22.3671875);
            T.bezierCurveTo(e * 115.5, e * 34.3671875, e * 115.5, e * 34.3671875, e * 105, e * 46.3671875);
            T.bezierCurveTo(e * 70.5, e * 46.3671875, e * 70.5, e * 46.3671875, e * 36, e * 46.3671875);
            T.bezierCurveTo(e * 4, e * 14.3671875, e * 7, e * 18.3671875, e * 8, e * 27.3671875);
            T.bezierCurveTo(e * 12.5, e * 41.8671875, e * 12.5, e * 41.8671875, e * 17, e * 56.3671875);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.save();
            T.translate(e * 68.30000305175781, e * 41.45625305175781);
            T.rotate(0.76);
            Re(T, e * -20.5, e * -20.5, e * 41, e * 41, e * 10);
            T.restore();
            se(T, undefined, i[5], e * 4);
            T.save();
            T.translate(e * 68.80000305175781, e * 44.45625305175781);
            T.rotate(0.76);
            Re(T, e * -21, e * -20.5, e * 42, e * 41, e * 10);
            T.restore();
            se(T, i[3], i[4], e * 4);
            T.save();
            T.translate(e * 69.80000305175781, e * 44.556243896484375);
            T.rotate(0.76);
            Re(T, e * -10, e * -10, e * 20, e * 20, e * 5);
            T.restore();
            se(T, i[6], i[7], e * 4);
            return o;
        }
        function Ui(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 145;
            o.height = e * 120;
            T.beginPath();
            T.scale(0.6, 0.6);
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * 18, e * -8);
            T.moveTo(e * 101, e * 72);
            T.bezierCurveTo(e * 144, e * 69, e * 149, e * 58, e * 162, e * 49);
            T.bezierCurveTo(e * 174, e * 31, e * 173, e * 38, e * 172, e * 45);
            T.bezierCurveTo(e * 168, e * 73, e * 158, e * 75, e * 152, e * 78);
            T.bezierCurveTo(e * 106, e * 89, e * 107, e * 91, e * 107, e * 94);
            T.bezierCurveTo(e * 107, e * 100, e * 107, e * 107, e * 107, e * 107);
            T.bezierCurveTo(e * 99, e * 112, e * 98, e * 110, e * 93, e * 107);
            T.bezierCurveTo(e * 94, e * 107, e * 93, e * 107, e * 93, e * 107);
            T.bezierCurveTo(e * 93, e * 100, e * 93, e * 100, e * 92, e * 94);
            T.bezierCurveTo(e * 92, e * 89, e * 90, e * 90, e * 73, e * 86);
            T.bezierCurveTo(e * 45, e * 81, e * 40, e * 77, e * 35, e * 68);
            T.bezierCurveTo(e * 23, e * 36, e * 28, e * 34, e * 36, e * 46);
            T.bezierCurveTo(e * 45, e * 58, e * 83, e * 72, e * 98, e * 72);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            T.beginPath();
            T.scale(1.1, 1.1);
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * -9, e * 4);
            T.moveTo(e * 101, e * 72);
            T.bezierCurveTo(e * 144, e * 69, e * 149, e * 58, e * 162, e * 49);
            T.bezierCurveTo(e * 174, e * 31, e * 173, e * 38, e * 172, e * 45);
            T.bezierCurveTo(e * 168, e * 73, e * 158, e * 75, e * 152, e * 78);
            T.bezierCurveTo(e * 106, e * 89, e * 107, e * 91, e * 107, e * 94);
            T.bezierCurveTo(e * 107, e * 100, e * 107, e * 107, e * 107, e * 107);
            T.bezierCurveTo(e * 99, e * 112, e * 98, e * 110, e * 93, e * 107);
            T.bezierCurveTo(e * 94, e * 107, e * 93, e * 107, e * 93, e * 107);
            T.bezierCurveTo(e * 93, e * 100, e * 93, e * 100, e * 92, e * 94);
            T.bezierCurveTo(e * 92, e * 89, e * 90, e * 90, e * 73, e * 86);
            T.bezierCurveTo(e * 45, e * 81, e * 40, e * 77, e * 35, e * 68);
            T.bezierCurveTo(e * 23, e * 36, e * 28, e * 34, e * 36, e * 46);
            T.bezierCurveTo(e * 45, e * 58, e * 83, e * 72, e * 98, e * 72);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            T.scale(1.1, 1.1);
            T.translate(e * -9, e * 4);
            T.save();
            T.translate(e * 100, e * 73.06874084472656);
            T.rotate(0);
            Re(T, e * -61, e * -38.5, e * 122, e * 40, e * 20);
            T.restore();
            se(T, i[1], i[2], e * 4);
            T.save();
            T.translate(e * 100, e * 71.36874389648438);
            T.rotate(0);
            Re(T, e * -60.5, e * -18, e * 121, e * 30, e * 20);
            T.restore();
            se(T, i[3], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 144, e * 80);
            T.bezierCurveTo(e * 152, e * 100, e * 152, e * 101, e * 153, e * 102);
            T.bezierCurveTo(e * 159, e * 100, e * 159, e * 100, e * 160, e * 100);
            T.bezierCurveTo(e * 161, e * 84, e * 161, e * 84, e * 162, e * 68);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 57, e * 75);
            T.bezierCurveTo(e * 48, e * 101, e * 53, e * 89, e * 48, e * 102);
            T.bezierCurveTo(e * 44, e * 100, e * 44, e * 100, e * 39, e * 97);
            T.bezierCurveTo(e * 39, e * 83, e * 39, e * 83, e * 39, e * 69);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 101, e * 72);
            T.bezierCurveTo(e * 144, e * 69, e * 149, e * 58, e * 162, e * 49);
            T.bezierCurveTo(e * 174, e * 31, e * 173, e * 38, e * 172, e * 45);
            T.bezierCurveTo(e * 168, e * 73, e * 158, e * 75, e * 152, e * 78);
            T.bezierCurveTo(e * 106, e * 89, e * 107, e * 91, e * 107, e * 94);
            T.bezierCurveTo(e * 107, e * 100, e * 107, e * 107, e * 107, e * 107);
            T.bezierCurveTo(e * 99, e * 112, e * 98, e * 110, e * 93, e * 107);
            T.bezierCurveTo(e * 94, e * 107, e * 93, e * 107, e * 93, e * 107);
            T.bezierCurveTo(e * 93, e * 100, e * 93, e * 100, e * 92, e * 94);
            T.bezierCurveTo(e * 92, e * 89, e * 90, e * 90, e * 73, e * 86);
            T.bezierCurveTo(e * 45, e * 81, e * 40, e * 77, e * 35, e * 68);
            T.bezierCurveTo(e * 23, e * 36, e * 28, e * 34, e * 36, e * 46);
            T.bezierCurveTo(e * 45, e * 58, e * 83, e * 72, e * 98, e * 72);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            T.translate(0, 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115.5, e * 116.07290649414062);
            T.bezierCurveTo(e * 159.5, e * 99.07290649414062, e * 159.5, e * 98.07290649414062, e * 159.5, e * 98.07290649414062);
            T.bezierCurveTo(e * 155.5, e * 116.07290649414062, e * 159.5, e * 116.07290649414062, e * 159.5, e * 118.07290649414062);
            T.bezierCurveTo(e * 147.5, e * 130.07290649414062, e * 136.5, e * 132.07290649414062, e * 115.5, e * 138.07290649414062);
            T.closePath();
            se(T, i[3], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 39.5, e * 96.07290649414062);
            T.bezierCurveTo(e * 85.5, e * 114.07290649414062, e * 62.5, e * 105.57290649414062, e * 85.5, e * 115.07290649414062);
            T.bezierCurveTo(e * 85.5, e * 125.57290649414062, e * 85.5, e * 125.57290649414062, e * 85.5, e * 136.07290649414062);
            T.bezierCurveTo(e * 51.5, e * 129.07290649414062, e * 51.5, e * 125.07290649414062, e * 41.5, e * 118.07290649414062);
            T.bezierCurveTo(e * 44.5, e * 106.07290649414062, e * 42.5, e * 103.07290649414062, e * 40.5, e * 96.07290649414062);
            T.closePath();
            se(T, i[3], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 86, e * 80);
            T.bezierCurveTo(e * 97, e * 88, e * 106, e * 84, e * 112, e * 80);
            T.bezierCurveTo(e * 112, e * 62, e * 106, e * 59, e * 99, e * 54);
            T.bezierCurveTo(e * 86, e * 62, e * 86, e * 73, e * 86, e * 80);
            T.closePath();
            se(T, i[3], i[2], e * 4);
            T.scale(0.5, 0.5);
            T.translate(e * 100, e * 71);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 86, e * 80);
            T.bezierCurveTo(e * 97, e * 88, e * 106, e * 84, e * 112, e * 80);
            T.bezierCurveTo(e * 112, e * 62, e * 106, e * 59, e * 99, e * 54);
            T.bezierCurveTo(e * 86, e * 62, e * 86, e * 73, e * 86, e * 80);
            T.closePath();
            se(T, i[6], i[2], e * 4);
            return o;
        }
        function ki(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.save();
            T.translate(e * 204, e * 195.0833282470703);
            T.rotate(10.16);
            Re(T, e * -97.5, e * -134.5, e * 195, e * 269, e * 10);
            T.restore();
            se(T, i[0], i[1], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 58.5, e * 226.5833282470703);
            T.bezierCurveTo(e * 120.5, e * 281.5833282470703, e * 120.5, e * 281.5833282470703, e * 182.5, e * 336.5833282470703);
            T.bezierCurveTo(e * 263, e * 248.5833282470703, e * 263, e * 248.5833282470703, e * 343.5, e * 160.5833282470703);
            T.bezierCurveTo(e * 280.5, e * 104.58332824707031, e * 280.5, e * 104.58332824707031, e * 217.5, e * 48.58332824707031);
            T.closePath();
            se(T, i[2], i[3], e * 4);
            T.save();
            T.translate(e * 197, e * 169.0833282470703);
            T.rotate(10.16);
            Re(T, e * -93.5, e * -126.5, e * 187, e * 253, e * 10);
            T.restore();
            se(T, i[4], i[1], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 226.5, e * 24.583328247070312);
            T.bezierCurveTo(e * 58.5, e * 207.5833282470703, e * 143, e * 116.58332824707031, e * 59.5, e * 208.5833282470703);
            T.closePath();
            se(T, undefined, i[1], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 46.133331298828125, e * 202.64999389648438);
            T.bezierCurveTo(e * 46.133331298828125, e * 215.64999389648438, e * 46.133331298828125, e * 215.64999389648438, e * 46.133331298828125, e * 228.64999389648438);
            T.closePath();
            se(T, i[4], i[1], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55.133331298828125, e * 211.64999389648438);
            T.bezierCurveTo(e * 55.133331298828125, e * 225.14999389648438, e * 55.133331298828125, e * 225.14999389648438, e * 55.133331298828125, e * 238.64999389648438);
            T.bezierCurveTo(e * 50.133331298828125, e * 235.64999389648438, e * 50.133331298828125, e * 235.64999389648438, e * 45.133331298828125, e * 232.64999389648438);
            T.bezierCurveTo(e * 45.133331298828125, e * 216.64999389648438, e * 45.133331298828125, e * 216.64999389648438, e * 45.133331298828125, e * 200.64999389648438);
            T.closePath();
            se(T, i[4], i[1], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 46.133331298828125, e * 198.39999389648438);
            T.bezierCurveTo(e * 46.133331298828125, e * 199.89999389648438, e * 46.133331298828125, e * 199.89999389648438, e * 46.133331298828125, e * 201.39999389648438);
            T.closePath();
            se(T, i[4], i[1], e * 8);
            T.save();
            T.translate(e * 249.63333129882812, e * 120.89999389648438);
            T.rotate(7.04);
            Re(T, e * -58.5, e * -32, e * 117, e * 64, e * 10);
            T.restore();
            se(T, i[5]);
            return o;
        }
        function Fi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 170;
            o.height = e * 170;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * -10, e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72.5, e * 4.109375);
            T.bezierCurveTo(e * 117, e * 9.609375, e * 117, e * 9.609375, e * 161.5, e * 15.109375);
            T.bezierCurveTo(e * 134.5, e * 106.109375, e * 110.5, e * 130.109375, e * 63.5, e * 145.109375);
            T.bezierCurveTo(e * 33.5, e * 120.609375, e * 33.5, e * 120.609375, e * 3.5, e * 96.109375);
            T.bezierCurveTo(e * 82.5, e * 75.109375, e * 69.5, e * 29.109375, e * 71.5, e * 6.109375);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * 10, e * -10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72.5, e * 4.109375);
            T.bezierCurveTo(e * 117, e * 9.609375, e * 117, e * 9.609375, e * 161.5, e * 15.109375);
            T.bezierCurveTo(e * 134.5, e * 106.109375, e * 110.5, e * 130.109375, e * 63.5, e * 145.109375);
            T.bezierCurveTo(e * 33.5, e * 120.609375, e * 33.5, e * 120.609375, e * 3.5, e * 96.109375);
            T.bezierCurveTo(e * 82.5, e * 75.109375, e * 69.5, e * 29.109375, e * 71.5, e * 6.109375);
            T.closePath();
            se(T, i[1], i[2], e * 10);
            return o;
        }
        function xi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 47;
            o.height = e * 60;
            he(T, e * 23.5, e * 20.734375, e * 15.132745950421556);
            se(T, undefined, i[2], e * 4);
            he(T, e * 23.5, e * 20.734375, e * 18.601075237738275);
            se(T, undefined, i[1], e * 4);
            he(T, e * 23.5, e * 20.734375, e * 11.40175425099138);
            se(T, undefined, i[1], e * 4);
            T.save();
            T.translate(e * 23, e * 38.734375);
            T.rotate(0);
            Re(T, e * -21.5, e * -19, e * 43, e * 38, e * 10);
            T.restore();
            se(T, i[2], i[1], e * 4);
            T.save();
            T.translate(e * 23.5, e * 43.734375);
            T.rotate(0.5235987755982988);
            ue(T, 3, e * 8.06225774829855, e * 0);
            T.restore();
            se(T, i[3]);
            he(T, e * 23.5, e * 35.734375, e * 7.0710678118654755);
            se(T, i[3]);
            return o;
        }
        function Ji(e, t, i, o) {
            var T = window.document.createElement("canvas");
            var r = T.getContext("2d");
            T.width = e * 501;
            T.height = e * 564;
            r.scale(0.5, 0.5);
            r.translate(e * 240, e * 255);
            r.rotate(o);
            r.globalAlpha = t ? 0.5 : 0.2;
            he(r, e * 174, e * 87.984375, e * 20.8806130178211);
            se(r, i[0], i[0], e * 8);
            he(r, e * 174, e * 87.984375, e * 12.165525060596439);
            se(r, i[0], i[0], e * 8);
            he(r, e * 174, e * 87.484375, e * 6);
            se(r, i[0]);
            he(r, e * 30, e * 87.984375, e * 20.8806130178211);
            se(r, i[0], i[0], e * 4);
            he(r, e * 30, e * 87.984375, e * 12.165525060596439);
            se(r, i[0], i[0], e * 4);
            he(r, e * 30, e * 87.484375, e * 6);
            se(r, i[0]);
            he(r, e * 100, e * 30, e * 20.8806130178211);
            se(r, i[0], i[0], e * 4);
            he(r, e * 100, e * 30, e * 12.165525060596439);
            se(r, i[0], i[0], e * 4);
            he(r, e * 100, e * 30, e * 6);
            se(r, i[0]);
            he(r, e * 100, e * 130, e * 20.8806130178211);
            se(r, i[0], i[0], e * 4);
            he(r, e * 100, e * 130, e * 12.165525060596439);
            se(r, i[0], i[0], e * 4);
            he(r, e * 100, e * 130, e * 6);
            se(r, i[0]);
            r.save();
            r.translate(e * 102, e * 81.984375);
            r.rotate(0);
            Re(r, e * -74, e * -57, e * 148, e * 114, e * 23);
            r.restore();
            se(r, i[0], i[0], e * 4);
            r.save();
            r.translate(e * 101, e * 64.984375);
            r.rotate(0);
            Re(r, e * -33, e * -10, e * 66, e * 20, e * 15);
            r.restore();
            se(r, i[0], i[0], e * 4);
            r.save();
            r.translate(e * 102, e * 63.484375);
            r.rotate(0);
            Re(r, e * -9, e * -27.5, e * 18, e * 55, e * 15);
            r.restore();
            r.translate(5, -5);
            r.globalAlpha = 1;
            he(r, e * 174, e * 87.984375, e * 20.8806130178211);
            se(r, i[1], i[3], e * 8);
            he(r, e * 174, e * 87.984375, e * 12.165525060596439);
            se(r, i[1], i[3], e * 8);
            he(r, e * 174, e * 87.484375, e * 6);
            se(r, i[2]);
            he(r, e * 30, e * 87.984375, e * 20.8806130178211);
            se(r, i[1], i[3], e * 8);
            he(r, e * 30, e * 87.984375, e * 12.165525060596439);
            se(r, i[1], i[3], e * 8);
            he(r, e * 30, e * 87.484375, e * 6);
            se(r, i[2]);
            he(r, e * 102, e * 30, e * 20.8806130178211);
            se(r, i[1], i[3], e * 8);
            he(r, e * 102, e * 30, e * 12.165525060596439);
            se(r, i[1], i[3], e * 8);
            he(r, e * 102, e * 30, e * 6);
            se(r, i[1]);
            he(r, e * 102, e * 130, e * 20.8806130178211);
            se(r, i[1], i[3], e * 8);
            he(r, e * 102, e * 130, e * 12.165525060596439);
            se(r, i[1], i[3], e * 8);
            he(r, e * 102, e * 130, e * 6);
            se(r, i[1]);
            r.save();
            r.translate(e * 102, e * 81.984375);
            Re(r, e * -74, e * -57, e * 148, e * 114, e * 23);
            r.restore();
            se(r, i[1], i[3], e * 8);
            r.save();
            r.translate(e * 101, e * 64.984375);
            Re(r, e * -33, e * -10, e * 66, e * 20, e * 15);
            r.restore();
            se(r, i[2], i[1], e * 8);
            r.save();
            r.translate(e * 102, e * 63.484375);
            Re(r, e * -9, e * -27.5, e * 18, e * 55, e * 15);
            r.restore();
            se(r, i[2], i[1], e * 8);
            he(r, e * 135, e * 107.36605834960938, e * 21.095023109728988);
            se(r, i[1], i[3], e * 8);
            he(r, e * 135, e * 107.36605834960938, e * 13);
            se(r, i[1], i[3], e * 8);
            he(r, e * 135, e * 107.36605834960938, e * 6.082762530298219);
            se(r, i[2]);
            he(r, e * 70, e * 107.36605834960938, e * 21.095023109728988);
            se(r, i[1], i[3], e * 8);
            he(r, e * 70, e * 107.36605834960938, e * 13);
            se(r, i[1], i[3], e * 8);
            he(r, e * 70, e * 107.36605834960938, e * 6.082762530298219);
            se(r, i[2]);
            return T;
        }
        function Xi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 95;
            o.height = e * 85;
            if (i == 0) {
            T.translate(e * 7, e * 15);
            T.scale(0.9, 0.9);
            T.save();
            Re(T, e * 0, e * 5, e * 90, e * 60, 10);
            se(T, t[0]);
            T.globalCompositeOperation = "destination-out";
            he(T, e * 25, e * 40, e * 10);
            T.fill();
            he(T, e * 65, e * 40, e * 10);
            T.fill();
            T.restore();
            T.save();
            Re(T, 0, 0, e * 90, e * 60, e * 10);
            se(T, t[1]);
            T.globalCompositeOperation = "destination-out";
            he(T, e * 25, e * 40, e * 10);
            T.fill();
            he(T, e * 65, e * 40, e * 10);
            T.fill();
            T.restore();
            } else if (i == 1) {
            T.scale(0.8, 0.8);
            T.translate(e * 15, e * 33);
            T.save();
            T.scale(0.56, 0.56);
            T.translate(e * -39, e * -60);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 32.5, e * 50.642852783203125);
            T.bezierCurveTo(e * 83, e * 69.64285278320312, e * 83, e * 69.64285278320312, e * 133.5, e * 88.64285278320312);
            T.bezierCurveTo(e * 93, e * 92.64285278320312, e * 93, e * 92.64285278320312, e * 52.5, e * 96.64285278320312);
            T.bezierCurveTo(e * 30.5, e * 100.64285278320312, e * 36.5, e * 94.64285278320312, e * 32.5, e * 84.64285278320312);
            T.bezierCurveTo(e * 21.5, e * 45.642852783203125, e * 24.5, e * 48.642852783203125, e * 31.5, e * 50.642852783203125);
            T.closePath();
            se(T, t[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 116.5, e * 85.64285278320312);
            T.bezierCurveTo(e * 160.5, e * 67.14285278320312, e * 160.5, e * 67.14285278320312, e * 204.5, e * 48.642852783203125);
            T.bezierCurveTo(e * 220.5, e * 42.642852783203125, e * 208.5, e * 68.64285278320312, e * 205.5, e * 85.64285278320312);
            T.bezierCurveTo(e * 202.5, e * 98.64285278320312, e * 199.5, e * 98.64285278320312, e * 188.5, e * 100.64285278320312);
            T.closePath();
            se(T, t[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 166.5, e * 68.64285278320312);
            T.bezierCurveTo(e * 147.5, e * 72.64285278320312, e * 145.5, e * 73.64285278320312, e * 142.5, e * 62.642852783203125);
            T.bezierCurveTo(e * 121.5, e * 12.642852783203125, e * 122.5, e * 5.642852783203125, e * 117.5, e * 15.642852783203125);
            T.bezierCurveTo(e * 105.5, e * 40.642852783203125, e * 105.5, e * 40.642852783203125, e * 93.5, e * 65.64285278320312);
            T.bezierCurveTo(e * 89.5, e * 74.64285278320312, e * 84.5, e * 72.64285278320312, e * 73.5, e * 74.64285278320312);
            T.bezierCurveTo(e * 98, e * 87.64285278320312, e * 98, e * 87.64285278320312, e * 122.5, e * 100.64285278320312);
            T.closePath();
            se(T, t[1]);
            T.restore();
            T.save();
            Re(T, 0, e * 15, e * 90, e * 50, e * 10);
            se(T, t[0]);
            Re(T, 0, e * 10, e * 90, e * 50, e * 10);
            se(T, t[1]);
            T.globalCompositeOperation = "destination-out";
            he(T, e * 25, e * 40, e * 10);
            T.fill();
            he(T, e * 65, e * 40, e * 10);
            T.fill();
            T.restore();
            }
            return o;
        }
        function qi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 120;
            o.height = e * 100;
            Re(T, e * 10, e * 10, e * 95, e * 80, e * 10);
            se(T, t[2]);
            Re(T, e * 10, e * 5, e * 95, e * 80, e * 10);
            se(T, t[3], t[4], e * 4);
            if (i == 0) {
            var r = Xi(e * 0.75, t, 0);
            T.drawImage(r, e * 22, e * 18);
            } else if (i == 1) {
            r = Xi(e * 0.75, t, 1);
            T.drawImage(r, e * 22, e * 18);
            }
            return o;
        }
        render_minimap = __p_5863156023(() => {
            for (var e = 0; e < 2; e++) {
            re[SPRITE.MINIMAP_CTX][e].clearRect(0, 0, 193, 193);
            re[SPRITE.MINIMAP_CTX][e].drawImage(ae.MAP[e], 0, 0, 193, 193);
            re[SPRITE.BIGMAP_CTX][e].clearRect(0, 0, 600, 600);
            re[SPRITE.BIGMAP_CTX][e].drawImage(ae.MAP[e], 0, 0, 600, 600);
            for (var t = Wn.biomes.length - 1; t >= 0; t--) {
                var i = Wn.biomes[t];
                var o = i.x1 * 193 / (Wn.nw * 100);
                var T = i.y1 * 193 / (Wn.nh * 100);
                var r = i.w * 193 / (Wn.nw * 100);
                var n = i.h * 193 / (Wn.nh * 100);
                var a = i.x1 * 600 / (Wn.nw * 100);
                var I = i.y1 * 600 / (Wn.nh * 100);
                var E = i.w * 600 / (Wn.nw * 100);
                var _ = i.h * 600 / (Wn.nh * 100);
                if (i.t === Wn.BIOME_FOREST) {
                re[SPRITE.MINIMAP_CTX][e].drawImage(ae.FOREST[e], o, T, r, n);
                re[SPRITE.BIGMAP_CTX][e].drawImage(ae.FOREST[e], a, I, E, _);
                }
                if (i.t === Wn.BIOME_WINTER) {
                re[SPRITE.MINIMAP_CTX][e].drawImage(ae.WINTER[e], o, T, r, n);
                re[SPRITE.BIGMAP_CTX][e].drawImage(ae.WINTER[e], a, I, E, _);
                }
                if (i.t === Wn.BIOME_LAVA) {
                re[SPRITE.MINIMAP_CTX][e].drawImage(ae.LAVA[e], o, T, r, n);
                re[SPRITE.BIGMAP_CTX][e].drawImage(ae.LAVA[e], a, I, E, _);
                }
                if (i.t === Wn.BIOME_DRAGON) {
                re[SPRITE.MINIMAP_CTX][e].drawImage(ae.CAVE[e], o, T, r, n);
                re[SPRITE.BIGMAP_CTX][e].drawImage(ae.CAVE[e], a, I, E, _);
                }
                if (i.t === Wn.BIOME_DESERT) {
                re[SPRITE.MINIMAP_CTX][e].drawImage(ae.DESERT[e], o, T, r, n);
                re[SPRITE.BIGMAP_CTX][e].drawImage(ae.DESERT[e], a, I, E, _);
                }
            }
            }
        }, 0);
        render_cosmetics = __p_5863156023(() => {
            ne = {
            SKIN: [{
                id: 0,
                day: S.PLAYER0D,
                night: S.PLAYER0N,
                dayHand: S.HAND0D,
                nightHand: S.HAND0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                day: S.PLAYER3D,
                night: S.PLAYER3N,
                dayHand: S.HAND3D,
                nightHand: S.HAND3N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                day: S.PLAYER2D,
                night: S.PLAYER2N,
                dayHand: S.HAND2D,
                nightHand: S.HAND2N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                day: S.PLAYER9D,
                night: S.PLAYER9N,
                dayHand: S.HAND9D,
                nightHand: S.HAND9N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                day: S.PLAYER1D,
                night: S.PLAYER1N,
                dayHand: S.HAND1D,
                nightHand: S.HAND1N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                day: S.PLAYER4D,
                night: S.PLAYER4N,
                dayHand: S.HAND4D,
                nightHand: S.HAND4N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                day: S.PLAYER5D,
                night: S.PLAYER5N,
                dayHand: S.HAND5D,
                nightHand: S.HAND5N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                day: S.PLAYER6D,
                night: S.PLAYER6N,
                dayHand: S.HAND6D,
                nightHand: S.HAND6N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                day: S.PLAYER7D,
                night: S.PLAYER7N,
                dayHand: S.HAND7D,
                nightHand: S.HAND7N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                day: S.PLAYER8D,
                night: S.PLAYER8N,
                dayHand: S.HAND8D,
                nightHand: S.HAND8N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                day: S.PLAYER10D,
                night: S.PLAYER10N,
                dayHand: S.HAND10D,
                nightHand: S.HAND10N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                day: S.PLAYER11D,
                night: S.PLAYER11N,
                dayHand: S.HAND11D,
                nightHand: S.HAND11N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                day: S.PLAYER12D,
                night: S.PLAYER12N,
                dayHand: S.HAND12D,
                nightHand: S.HAND12N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                day: S.PLAYER13D,
                night: S.PLAYER13N,
                dayHand: S.HAND13D,
                nightHand: S.HAND13N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                day: S.PLAYER14D,
                night: S.PLAYER14N,
                dayHand: S.HAND14D,
                nightHand: S.HAND14N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                day: S.PLAYER15D,
                night: S.PLAYER15N,
                dayHand: S.HAND15D,
                nightHand: S.HAND15N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                day: S.PLAYER16D,
                night: S.PLAYER16N,
                dayHand: S.HAND16D,
                nightHand: S.HAND16N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                day: S.PLAYER17D,
                night: S.PLAYER17N,
                dayHand: S.HAND17D,
                nightHand: S.HAND17N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                day: S.PLAYER18D,
                night: S.PLAYER18N,
                dayHand: S.HAND18D,
                nightHand: S.HAND18N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                day: S.PLAYER19D,
                night: S.PLAYER19N,
                dayHand: S.HAND19D,
                nightHand: S.HAND19N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                day: S.SKIN7D,
                night: S.SKIN7N,
                dayHand: S.HAND_SKIN7D,
                nightHand: S.HAND_SKIN7N,
                rarity: RARITY.WOOD,
                author: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                day: S.SKIN0D,
                night: S.SKIN0N,
                dayHand: S.HAND_SKIN0D,
                nightHand: S.HAND_SKIN0N,
                rarity: RARITY.WOOD,
                author: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                day: S.SKIN78D,
                night: S.SKIN78N,
                dayHand: S.HAND_SKIN78D,
                nightHand: S.HAND_SKIN78N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                day: S.SKIN80D,
                night: S.SKIN80N,
                dayHand: S.HAND_SKIN80D,
                nightHand: S.HAND_SKIN80N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                day: S.SKIN81D,
                night: S.SKIN81N,
                dayHand: S.HAND_SKIN81D,
                nightHand: S.HAND_SKIN81N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 104,
                day: S.SKIN79D,
                night: S.SKIN79N,
                dayHand: S.HAND_SKIN79D,
                nightHand: S.HAND_SKIN79N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                day: S.SKIN_VAMPIRED,
                night: S.SKIN_VAMPIREN,
                dayHand: S.HAND_VAMPIRED,
                nightHand: S.HAND_VAMPIREN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                day: S.SKIN_ZOMBIED,
                night: S.SKIN_ZOMBIEN,
                dayHand: S.HAND_ZOMBIED,
                nightHand: S.HAND_ZOMBIEN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                day: S.SKIN_DEVASTD,
                night: S.SKIN_DEVASTN,
                dayHand: S.HAND_DEVASTD,
                nightHand: S.HAND_DEVASTN,
                rarity: RARITY.STONE,
                author: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                day: S.SKIN91D,
                night: S.SKIN91N,
                dayHand: S.HAND_SKIN91D,
                nightHand: S.HAND_SKIN91N,
                rarity: RARITY.STONE,
                author: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                day: S.SKIN19D,
                night: S.SKIN19N,
                dayHand: S.HAND_SKIN19D,
                nightHand: S.HAND_SKIN19N,
                rarity: RARITY.STONE,
                author: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                day: S.SKIN20D,
                night: S.SKIN20N,
                dayHand: S.HAND_SKIN20D,
                nightHand: S.HAND_SKIN20N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                day: S.SKIN24D,
                night: S.SKIN24N,
                dayHand: S.HAND_SKIN24D,
                nightHand: S.HAND_SKIN24N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                day: S.SKIN34D,
                night: S.SKIN34N,
                dayHand: S.HAND_SKIN34D,
                nightHand: S.HAND_SKIN34N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                day: S.SKIN33D,
                night: S.SKIN33N,
                dayHand: S.HAND_SKIN33D,
                nightHand: S.HAND_SKIN33N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                day: S.SKIN69D,
                night: S.SKIN69N,
                dayHand: S.HAND_SKIN69D,
                nightHand: S.HAND_SKIN69N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                day: S.SKIN84D,
                night: S.SKIN84N,
                dayHand: S.HAND_SKIN84D,
                nightHand: S.HAND_SKIN84N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                day: S.SKIN89D,
                night: S.SKIN89N,
                dayHand: S.HAND_SKIN89D,
                nightHand: S.HAND_SKIN89N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                day: S.SKIN95D,
                night: S.SKIN95N,
                dayHand: S.HAND_SKIN95D,
                nightHand: S.HAND_SKIN95N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                day: S.SKIN109D,
                night: S.SKIN109N,
                dayHand: S.HAND_SKIN109D,
                nightHand: S.HAND_SKIN109N,
                rarity: RARITY.STONE,
                author: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                day: S.SKIN110D,
                night: S.SKIN110N,
                dayHand: S.HAND_SKIN110D,
                nightHand: S.HAND_SKIN110N,
                rarity: RARITY.STONE,
                author: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                day: S.SKIN111D,
                night: S.SKIN111N,
                dayHand: S.HAND_SKIN111D,
                nightHand: S.HAND_SKIN111N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                day: S.SKIN112D,
                night: S.SKIN112N,
                dayHand: S.HAND_SKIN112D,
                nightHand: S.HAND_SKIN112N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                day: S.SKIN114D,
                night: S.SKIN114N,
                dayHand: S.HAND_SKIN114D,
                nightHand: S.HAND_SKIN114N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                day: S.SKIN115D,
                night: S.SKIN115N,
                dayHand: S.HAND_SKIN115D,
                nightHand: S.HAND_SKIN115N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                day: S.SKIN116D,
                night: S.SKIN116N,
                dayHand: S.HAND_SKIN116D,
                nightHand: S.HAND_SKIN116N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                day: S.SKIN117D,
                night: S.SKIN117N,
                dayHand: S.HAND_SKIN117D,
                nightHand: S.HAND_SKIN117N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                day: S.SKIN118D,
                night: S.SKIN118N,
                dayHand: S.HAND_SKIN118D,
                nightHand: S.HAND_SKIN118N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                day: S.SKIN124D,
                night: S.SKIN124N,
                dayHand: S.HAND_SKIN124D,
                nightHand: S.HAND_SKIN124N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                day: S.SKIN125D,
                night: S.SKIN125N,
                dayHand: S.HAND_SKIN125D,
                nightHand: S.HAND_SKIN125N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                day: S.SKIN126D,
                night: S.SKIN126N,
                dayHand: S.HAND_SKIN126D,
                nightHand: S.HAND_SKIN126N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                day: S.SKIN127D,
                night: S.SKIN127N,
                dayHand: S.HAND_SKIN127D,
                nightHand: S.HAND_SKIN127N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                day: S.SKIN128D,
                night: S.SKIN128N,
                dayHand: S.HAND_SKIN128D,
                nightHand: S.HAND_SKIN128N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                day: S.SKIN129D,
                night: S.SKIN129N,
                dayHand: S.HAND_SKIN129D,
                nightHand: S.HAND_SKIN129N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                day: S.SKIN130D,
                night: S.SKIN130N,
                dayHand: S.HAND_SKIN130D,
                nightHand: S.HAND_SKIN130N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                day: S.SKIN131D,
                night: S.SKIN131N,
                dayHand: S.HAND_SKIN131D,
                nightHand: S.HAND_SKIN131N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                day: S.SKIN132D,
                night: S.SKIN132N,
                dayHand: S.HAND_SKIN132D,
                nightHand: S.HAND_SKIN132N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                day: S.SKIN135D,
                night: S.SKIN135N,
                dayHand: S.HAND_SKIN135D,
                nightHand: S.HAND_SKIN135N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                day: S.SKIN143D,
                night: S.SKIN143N,
                dayHand: S.HAND_SKIN143D,
                nightHand: S.HAND_SKIN143N,
                rarity: RARITY.STONE,
                author: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                day: S.SKIN146D,
                night: S.SKIN146N,
                dayHand: S.HAND_SKIN146D,
                nightHand: S.HAND_SKIN146N,
                rarity: RARITY.STONE,
                author: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                day: S.SKIN147D,
                night: S.SKIN147N,
                dayHand: S.HAND_SKIN147D,
                nightHand: S.HAND_SKIN147N,
                rarity: RARITY.STONE,
                author: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                day: S.SKIN149D,
                night: S.SKIN149N,
                dayHand: S.HAND_SKIN149D,
                nightHand: S.HAND_SKIN149N,
                rarity: RARITY.STONE,
                author: "aloner",
                name: "Machine Mask"
            }, {
                id: 29,
                day: S.SKIN2D,
                night: S.SKIN2N,
                dayHand: S.HAND_SKIN2D,
                nightHand: S.HAND_SKIN2N,
                rarity: RARITY.GOLD,
                author: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                day: S.SKIN3D,
                night: S.SKIN3N,
                dayHand: S.HAND_SKIN3D,
                nightHand: S.HAND_SKIN3N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                day: S.SKIN4D,
                night: S.SKIN4N,
                dayHand: S.HAND_SKIN4D,
                nightHand: S.HAND_SKIN4N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                day: S.SKIN5D,
                night: S.SKIN5N,
                dayHand: S.HAND_SKIN5D,
                nightHand: S.HAND_SKIN5N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                day: S.SKIN8D,
                night: S.SKIN8N,
                dayHand: S.HAND_SKIN8D,
                nightHand: S.HAND_SKIN8N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                day: S.SKIN9D,
                night: S.SKIN9N,
                dayHand: S.HAND_SKIN9D,
                nightHand: S.HAND_SKIN9N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                day: S.SKIN10D,
                night: S.SKIN10N,
                dayHand: S.HAND_SKIN10D,
                nightHand: S.HAND_SKIN10N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                day: S.SKIN17D,
                night: S.SKIN17N,
                dayHand: S.HAND_SKIN17D,
                nightHand: S.HAND_SKIN17N,
                rarity: RARITY.GOLD,
                author: "Winter",
                name: "Owl"
            }, {
                id: 52,
                day: S.SKIN27D,
                night: S.SKIN27N,
                dayHand: S.HAND_SKIN27D,
                nightHand: S.HAND_SKIN27N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                day: S.SKIN28D,
                night: S.SKIN28N,
                dayHand: S.HAND_SKIN28D,
                nightHand: S.HAND_SKIN28N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                day: S.SKIN49D,
                night: S.SKIN49N,
                dayHand: S.HAND_SKIN49D,
                nightHand: S.HAND_SKIN49N,
                rarity: RARITY.GOLD,
                author: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                day: S.SKIN50D,
                night: S.SKIN50N,
                dayHand: S.HAND_SKIN50D,
                nightHand: S.HAND_SKIN50N,
                rarity: RARITY.GOLD,
                author: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                day: S.SKIN35D,
                night: S.SKIN35N,
                dayHand: S.HAND_SKIN35D,
                nightHand: S.HAND_SKIN35N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                day: S.SKIN36D,
                night: S.SKIN36N,
                dayHand: S.HAND_SKIN36D,
                nightHand: S.HAND_SKIN36N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                day: S.SKIN45D,
                night: S.SKIN45N,
                dayHand: S.HAND_SKIN45D,
                nightHand: S.HAND_SKIN45N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Cake"
            }, {
                id: 71,
                day: S.SKIN46D,
                night: S.SKIN46N,
                dayHand: S.HAND_SKIN46D,
                nightHand: S.HAND_SKIN46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                day: S.SKIN52D,
                night: S.SKIN52N,
                dayHand: S.HAND_SKIN52D,
                nightHand: S.HAND_SKIN52N,
                rarity: RARITY.GOLD,
                author: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                day: S.SKIN62D,
                night: S.SKIN62N,
                dayHand: S.HAND_SKIN62D,
                nightHand: S.HAND_SKIN62N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                day: S.SKIN53D,
                night: S.SKIN53N,
                dayHand: S.HAND_SKIN53D,
                nightHand: S.HAND_SKIN53N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                day: S.SKIN54D,
                night: S.SKIN54N,
                dayHand: S.HAND_SKIN54D,
                nightHand: S.HAND_SKIN54N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                day: S.SKIN71D,
                night: S.SKIN71N,
                dayHand: S.HAND_SKIN71D,
                nightHand: S.HAND_SKIN71N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                day: S.SKIN77D,
                night: S.SKIN77N,
                dayHand: S.HAND_SKIN77D,
                nightHand: S.HAND_SKIN77N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                day: S.SKIN82D,
                night: S.SKIN82N,
                dayHand: S.HAND_SKIN82D,
                nightHand: S.HAND_SKIN82N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Fox"
            }, {
                id: 132,
                day: S.SKIN107D,
                night: S.SKIN107N,
                dayHand: S.HAND_SKIN107D,
                nightHand: S.HAND_SKIN107N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                day: S.SKIN86D,
                night: S.SKIN86N,
                dayHand: S.HAND_SKIN86D,
                nightHand: S.HAND_SKIN86N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                day: S.SKIN88D,
                night: S.SKIN88N,
                dayHand: S.HAND_SKIN88D,
                nightHand: S.HAND_SKIN88N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                day: S.SKIN92D,
                night: S.SKIN92N,
                dayHand: S.HAND_SKIN92D,
                nightHand: S.HAND_SKIN92N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                day: S.SKIN93D,
                night: S.SKIN93N,
                dayHand: S.HAND_SKIN93D,
                nightHand: S.HAND_SKIN93N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                day: S.SKIN94D,
                night: S.SKIN94N,
                dayHand: S.HAND_SKIN94D,
                nightHand: S.HAND_SKIN94N,
                rarity: RARITY.GOLD,
                author: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                day: S.SKIN97D,
                night: S.SKIN97N,
                dayHand: S.HAND_SKIN97D,
                nightHand: S.HAND_SKIN97N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                day: S.SKIN102D,
                night: S.SKIN102N,
                dayHand: S.HAND_SKIN102D,
                nightHand: S.HAND_SKIN102N,
                rarity: RARITY.GOLD,
                author: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                day: S.SKIN136D,
                night: S.SKIN136N,
                dayHand: S.HAND_SKIN136D,
                nightHand: S.HAND_SKIN136N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                day: S.SKIN138D,
                night: S.SKIN138N,
                dayHand: S.HAND_SKIN138D,
                nightHand: S.HAND_SKIN138N,
                rarity: RARITY.GOLD,
                author: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                day: S.SKIN142D,
                night: S.SKIN142N,
                dayHand: S.HAND_SKIN142D,
                nightHand: S.HAND_SKIN142N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                day: S.SKIN145D,
                night: S.SKIN145N,
                dayHand: S.HAND_SKIN145D,
                nightHand: S.HAND_SKIN145N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                day: S.SKIN148D,
                night: S.SKIN148N,
                dayHand: S.HAND_SKIN148D,
                nightHand: S.HAND_SKIN148N,
                rarity: RARITY.GOLD,
                author: "aloner",
                name: "Axolotl"
            }, {
                id: 25,
                day: S.SKIN6D,
                night: S.SKIN6N,
                dayHand: S.HAND_SKIN6D,
                nightHand: S.HAND_SKIN0N,
                rarity: RARITY.DIAMOND,
                author: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                day: S.SKIN_STARD,
                night: S.SKIN_STARN,
                dayHand: S.HAND_STARD,
                nightHand: S.HAND_STARN,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                day: S.SKIN11D,
                night: S.SKIN11N,
                dayHand: S.HAND_SKIN11D,
                nightHand: S.HAND_SKIN11N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                day: S.SKIN63D,
                night: S.SKIN63N,
                dayHand: S.HAND_SKIN63D,
                nightHand: S.HAND_SKIN63N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                day: S.SKIN96D,
                night: S.SKIN96N,
                dayHand: S.HAND_SKIN96D,
                nightHand: S.HAND_SKIN96N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                day: S.SKIN22D,
                night: S.SKIN22N,
                dayHand: S.HAND_SKIN22D,
                nightHand: S.HAND_SKIN22N,
                rarity: RARITY.DIAMOND,
                author: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                day: S.SKIN23D,
                night: S.SKIN23N,
                dayHand: S.HAND_SKIN23D,
                nightHand: S.HAND_SKIN23N,
                rarity: RARITY.DIAMOND,
                author: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                day: S.SKIN16D,
                night: S.SKIN16N,
                dayHand: S.HAND_SKIN16D,
                nightHand: S.HAND_SKIN16N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                day: S.SKIN44D,
                night: S.SKIN44N,
                dayHand: S.HAND_SKIN44D,
                nightHand: S.HAND_SKIN44N,
                rarity: RARITY.DIAMOND,
                author: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                day: S.SKIN26D,
                night: S.SKIN26N,
                dayHand: S.HAND_SKIN26D,
                nightHand: S.HAND_SKIN26N,
                rarity: RARITY.DIAMOND,
                author: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                day: S.SKIN108D,
                night: S.SKIN108N,
                dayHand: S.HAND_SKIN108D,
                nightHand: S.HAND_SKIN108N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                day: S.SKIN30D,
                night: S.SKIN30N,
                dayHand: S.HAND_SKIN30D,
                nightHand: S.HAND_SKIN30N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                day: S.SKIN43D,
                night: S.SKIN43N,
                dayHand: S.HAND_SKIN43D,
                nightHand: S.HAND_SKIN43N,
                rarity: RARITY.DIAMOND,
                author: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                day: S.SKIN37D,
                night: S.SKIN37N,
                dayHand: S.HAND_SKIN37D,
                nightHand: S.HAND_SKIN37N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                day: S.SKIN31D,
                night: S.SKIN31N,
                dayHand: S.HAND_SKIN31D,
                nightHand: S.HAND_SKIN31N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                day: S.SKIN47D,
                night: S.SKIN47N,
                dayHand: S.HAND_SKIN47D,
                nightHand: S.HAND_SKIN47N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                day: S.SKIN48D,
                night: S.SKIN48N,
                dayHand: S.HAND_SKIN48D,
                nightHand: S.HAND_SKIN48N,
                rarity: RARITY.DIAMOND,
                author: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                day: S.SKIN68D,
                night: S.SKIN68N,
                dayHand: S.HAND_SKIN68D,
                nightHand: S.HAND_SKIN68N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                day: S.SKIN57D,
                night: S.SKIN57N,
                dayHand: S.HAND_SKIN57D,
                nightHand: S.HAND_SKIN57N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                day: S.SKIN58D,
                night: S.SKIN58N,
                dayHand: S.HAND_SKIN58D,
                nightHand: S.HAND_SKIN58N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                day: S.SKIN59D,
                night: S.SKIN59N,
                dayHand: S.HAND_SKIN59D,
                nightHand: S.HAND_SKIN59N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                day: S.SKIN60D,
                night: S.SKIN60N,
                dayHand: S.HAND_SKIN60D,
                nightHand: S.HAND_SKIN60N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                day: S.SKIN61D,
                night: S.SKIN61N,
                dayHand: S.HAND_SKIN61D,
                nightHand: S.HAND_SKIN61N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                day: S.SKIN72D,
                night: S.SKIN72N,
                dayHand: S.HAND_SKIN72D,
                nightHand: S.HAND_SKIN72N,
                rarity: RARITY.DIAMOND,
                author: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                day: S.SKIN73D,
                night: S.SKIN73N,
                dayHand: S.HAND_SKIN73D,
                nightHand: S.HAND_SKIN73N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                day: S.SKIN101D,
                night: S.SKIN101N,
                dayHand: S.HAND_SKIN101D,
                nightHand: S.HAND_SKIN101N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                day: S.SKIN121D,
                night: S.SKIN121N,
                dayHand: S.HAND_SKIN121D,
                nightHand: S.HAND_SKIN121N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                day: S.SKIN122D,
                night: S.SKIN122N,
                dayHand: S.HAND_SKIN122D,
                nightHand: S.HAND_SKIN122N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                day: S.SKIN123D,
                night: S.SKIN123N,
                dayHand: S.HAND_SKIN123D,
                nightHand: S.HAND_SKIN123N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                day: S.SKIN134D,
                night: S.SKIN134N,
                dayHand: S.HAND_SKIN134D,
                nightHand: S.HAND_SKIN134N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                day: S.SKIN139D,
                night: S.SKIN139N,
                dayHand: S.HAND_SKIN139D,
                nightHand: S.HAND_SKIN139N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                day: S.SKIN140D,
                night: S.SKIN140N,
                dayHand: S.HAND_SKIN140D,
                nightHand: S.HAND_SKIN140N,
                rarity: RARITY.DIAMOND,
                author: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                day: S.SKIN137D,
                night: S.SKIN137N,
                dayHand: S.HAND_SKIN137D,
                nightHand: S.HAND_SKIN137N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                day: S.SKIN144D,
                night: S.SKIN144N,
                dayHand: S.HAND_SKIN144D,
                nightHand: S.HAND_SKIN144N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                day: S.SKIN150D,
                night: S.SKIN150N,
                dayHand: S.HAND_SKIN150D,
                nightHand: S.HAND_SKIN150N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Water skin"
            }, {
                id: 42,
                day: S.SKIN14D,
                night: S.SKIN14N,
                dayHand: S.HAND_SKIN14D,
                nightHand: S.HAND_SKIN14N,
                rarity: RARITY.AMETHYST,
                author: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                day: S.SKIN66D,
                night: S.SKIN66N,
                dayHand: S.HAND_SKIN66D,
                nightHand: S.HAND_SKIN66N,
                rarity: RARITY.AMETHYST,
                author: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                day: S.SKIN15D,
                night: S.SKIN15N,
                dayHand: S.HAND_SKIN15D,
                nightHand: S.HAND_SKIN15N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                day: S.SKIN18D,
                night: S.SKIN18N,
                dayHand: S.HAND_SKIN18D,
                nightHand: S.HAND_SKIN18N,
                rarity: RARITY.AMETHYST,
                author: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                day: S.SKIN25D,
                night: S.SKIN25N,
                dayHand: S.HAND_SKIN25D,
                nightHand: S.HAND_SKIN25N,
                rarity: RARITY.AMETHYST,
                author: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                day: S.SKIN29D,
                night: S.SKIN29N,
                dayHand: S.HAND_SKIN29D,
                nightHand: S.HAND_SKIN29N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                day: S.SKIN32D,
                night: S.SKIN32N,
                dayHand: S.HAND_SKIN32D,
                nightHand: S.HAND_SKIN32N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                day: S.SKIN39D,
                night: S.SKIN39N,
                dayHand: S.HAND_SKIN39D,
                nightHand: S.HAND_SKIN39N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                day: S.SKIN40D,
                night: S.SKIN40N,
                dayHand: S.HAND_SKIN40D,
                nightHand: S.HAND_SKIN40N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                day: S.SKIN67D,
                night: S.SKIN67N,
                dayHand: S.HAND_SKIN67D,
                nightHand: S.HAND_SKIN67N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                day: S.SKIN41D,
                night: S.SKIN41N,
                dayHand: S.HAND_SKIN41D,
                nightHand: S.HAND_SKIN41N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                day: S.SKIN55D,
                night: S.SKIN55N,
                dayHand: S.HAND_SKIN55D,
                nightHand: S.HAND_SKIN55N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                day: S.SKIN56D,
                night: S.SKIN56N,
                dayHand: S.HAND_SKIN56D,
                nightHand: S.HAND_SKIN56N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                day: S.SKIN74D,
                night: S.SKIN74N,
                dayHand: S.HAND_SKIN74D,
                nightHand: S.HAND_SKIN74N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                day: S.SKIN75D,
                night: S.SKIN75N,
                dayHand: S.HAND_SKIN75D,
                nightHand: S.HAND_SKIN75N,
                rarity: RARITY.AMETHYST,
                author: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                day: S.SKIN90D,
                night: S.SKIN90N,
                dayHand: S.HAND_SKIN90D,
                nightHand: S.HAND_SKIN90N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                day: S.SKIN76D,
                night: S.SKIN76N,
                dayHand: S.HAND_SKIN76D,
                nightHand: S.HAND_SKIN76N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                day: S.SKIN106D,
                night: S.SKIN106N,
                dayHand: S.HAND_SKIN106D,
                nightHand: S.HAND_SKIN106N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                day: S.SKIN119D,
                night: S.SKIN119N,
                dayHand: S.HAND_SKIN119D,
                nightHand: S.HAND_SKIN119N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                day: S.SKIN120D,
                night: S.SKIN120N,
                dayHand: S.HAND_SKIN120D,
                nightHand: S.HAND_SKIN120N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Momo"
            }, {
                id: 95,
                day: S.SKIN70D,
                night: S.SKIN70N,
                dayHand: S.HAND_SKIN70D,
                nightHand: S.HAND_SKIN70N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                day: S.SKIN51D,
                night: S.SKIN51N,
                dayHand: S.HAND_SKIN51D,
                nightHand: S.HAND_SKIN51N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                day: S.SKIN1D,
                night: S.SKIN1N,
                dayHand: S.HAND_SKIN1D,
                nightHand: S.HAND_SKIN1N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                day: S.SKIN65D,
                night: S.SKIN65N,
                dayHand: S.HAND_SKIN65D,
                nightHand: S.HAND_SKIN65N,
                rarity: RARITY.REIDITE,
                author: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                day: S.SKIN99D,
                night: S.SKIN99N,
                dayHand: S.HAND_SKIN99D,
                nightHand: S.HAND_SKIN99N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                day: S.SKIN12D,
                night: S.SKIN12N,
                dayHand: S.HAND_SKIN12D,
                nightHand: S.HAND_SKIN12N,
                rarity: RARITY.REIDITE,
                author: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                day: S.SKIN13D,
                night: S.SKIN13N,
                dayHand: S.HAND_SKIN13D,
                nightHand: S.HAND_SKIN13N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                day: S.SKIN83D,
                night: S.SKIN83N,
                dayHand: S.HAND_SKIN83D,
                nightHand: S.HAND_SKIN83N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                day: S.SKIN98D,
                night: S.SKIN98N,
                dayHand: S.HAND_SKIN98D,
                nightHand: S.HAND_SKIN98N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                day: S.SKIN103D,
                night: S.SKIN103N,
                dayHand: S.HAND_SKIN103D,
                nightHand: S.HAND_SKIN103N,
                rarity: RARITY.REIDITE,
                author: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                day: S.SKIN100D,
                night: S.SKIN100N,
                dayHand: S.HAND_SKIN100D,
                nightHand: S.HAND_SKIN100N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                day: S.SKIN21D,
                night: S.SKIN21N,
                dayHand: S.HAND_SKIN21D,
                nightHand: S.HAND_SKIN21N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                day: S.SKIN104D,
                night: S.SKIN104N,
                dayHand: S.HAND_SKIN104D,
                nightHand: S.HAND_SKIN104N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                day: S.SKIN38D,
                night: S.SKIN38N,
                dayHand: S.HAND_SKIN38D,
                nightHand: S.HAND_SKIN38N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                day: S.SKIN42D,
                night: S.SKIN42N,
                dayHand: S.HAND_SKIN42D,
                nightHand: S.HAND_SKIN42N,
                rarity: RARITY.REIDITE,
                author: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                day: S.SKIN105D,
                night: S.SKIN105N,
                dayHand: S.HAND_SKIN105D,
                nightHand: S.HAND_SKIN105N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                day: S.SKIN64D,
                night: S.SKIN64N,
                dayHand: S.HAND_SKIN64D,
                nightHand: S.HAND_SKIN64N,
                rarity: RARITY.REIDITE,
                author: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                day: S.SKIN87D,
                night: S.SKIN87N,
                dayHand: S.HAND_SKIN87D,
                nightHand: S.HAND_SKIN87N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Starver"
            }, {
                id: 48,
                day: S.SKIN_ROBOTD,
                night: S.SKIN_ROBOTN,
                dayHand: S.HAND_ROBOTD,
                nightHand: S.HAND_ROBOTN,
                rarity: RARITY.SPECIAL,
                author: "eogito",
                name: "Robot"
            }, {
                id: 110,
                day: S.SKIN85D,
                night: S.SKIN85N,
                dayHand: S.HAND_SKIN85D,
                nightHand: S.HAND_SKIN85N,
                rarity: RARITY.SPECIAL,
                author: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                day: S.SKIN133D,
                night: S.SKIN133N,
                dayHand: S.HAND_SKIN133D,
                nightHand: S.HAND_SKIN133N,
                rarity: RARITY.SPECIAL,
                author: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                day: S.SKIN141D,
                night: S.SKIN141N,
                dayHand: S.HAND_SKIN141D,
                nightHand: S.HAND_SKIN141N,
                rarity: RARITY.SPECIAL,
                author: "OmarJr13",
                name: "Blob Skin"
            }],
            BAG: [{
                id: 0,
                day: S.BAGD,
                night: S.BAGN,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                day: S.BAG0D,
                night: S.BAG0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                day: S.BAG4D,
                night: S.BAG4N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                day: S.BAG5D,
                night: S.BAG5N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                day: S.BAG6D,
                night: S.BAG6N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                day: S.BAG7D,
                night: S.BAG7N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                day: S.BAG23D,
                night: S.BAG23N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                day: S.BAG16D,
                night: S.BAG16N,
                rarity: RARITY.WOOD,
                author: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                day: S.BAG36D,
                night: S.BAG36N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                day: S.BAG38D,
                night: S.BAG38N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                day: S.BAG43D,
                night: S.BAG43N,
                rarity: RARITY.WOOD,
                author: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                day: S.BAG14D,
                night: S.BAG14N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                day: S.BAG_EASTERD,
                night: S.BAG_EASTERN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                day: S.BAG_STARD,
                night: S.BAG_STARN,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                day: S.BAG9D,
                night: S.BAG9N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                day: S.BAG17D,
                night: S.BAG17N,
                rarity: RARITY.STONE,
                author: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                day: S.BAG24D,
                night: S.BAG24N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                day: S.BAG13D,
                night: S.BAG13N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                day: S.BAG37D,
                night: S.BAG37N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                day: S.BAG53D,
                night: S.BAG53N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                day: S.BAG58D,
                night: S.BAG58N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                day: S.BAG61D,
                night: S.BAG61N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 13,
                day: S.BAG10D,
                night: S.BAG10N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                day: S.BAG18D,
                night: S.BAG18N,
                rarity: RARITY.GOLD,
                author: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                day: S.BAG25D,
                night: S.BAG25N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                day: S.BAG31D,
                night: S.BAG31N,
                rarity: RARITY.GOLD,
                author: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                day: S.BAG40D,
                night: S.BAG40N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                day: S.BAG46D,
                night: S.BAG46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                day: S.BAG50D,
                night: S.BAG50N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                day: S.BAG52D,
                night: S.BAG52N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                day: S.BAG57D,
                night: S.BAG57N,
                rarity: RARITY.GOLD,
                author: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                day: S.BAG59D,
                night: S.BAG60N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                day: S.BAG60D,
                night: S.BAG59N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                day: S.BAG63D,
                night: S.BAG63N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                day: S.BAG68D,
                night: S.BAG68N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 14,
                day: S.BAG1D,
                night: S.BAG1N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                day: S.BAG2D,
                night: S.BAG2N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                day: S.BAG3D,
                night: S.BAG3N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                day: S.BAG8D,
                night: S.BAG8N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                day: S.BAG19D,
                night: S.BAG19N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                day: S.BAG22D,
                night: S.BAG22N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                day: S.BAG26D,
                night: S.BAG26N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                day: S.BAG39D,
                night: S.BAG39N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                day: S.BAG44D,
                night: S.BAG44N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                day: S.BAG45D,
                night: S.BAG45N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                day: S.BAG51D,
                night: S.BAG51N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                day: S.BAG64D,
                night: S.BAG64N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                day: S.BAG66D,
                night: S.BAG66N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 48,
                day: S.BAG47D,
                night: S.BAG47N,
                rarity: RARITY.AMETHYST,
                author: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                day: S.BAG20D,
                night: S.BAG20N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                day: S.BAG27D,
                night: S.BAG27N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                day: S.BAG30D,
                night: S.BAG30N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                day: S.BAG32D,
                night: S.BAG32N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                day: S.BAG42D,
                night: S.BAG42N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                day: S.BAG34D,
                night: S.BAG34N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                day: S.BAG49D,
                night: S.BAG49N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                day: S.BAG55D,
                night: S.BAG55N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                day: S.BAG56D,
                night: S.BAG56N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                day: S.BAG65D,
                night: S.BAG65N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                day: S.BAG67D,
                night: S.BAG67N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 31,
                day: S.BAG21D,
                night: S.BAG21N,
                rarity: RARITY.REIDITE,
                author: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                day: S.BAG11D,
                night: S.BAG11N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                day: S.BAG48D,
                night: S.BAG48N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                day: S.BAG35D,
                night: S.BAG35N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                day: S.BAG54D,
                night: S.BAG54N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                day: S.BAG28D,
                night: S.BAG28N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                day: S.BAG29D,
                night: S.BAG29N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                day: S.BAG33D,
                night: S.BAG33N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                day: S.BAG41D,
                night: S.BAG41N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                day: S.BAG62D,
                night: S.BAG62N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Bag"
            }],
            CRATE: [{
                id: 0,
                day: S.CRATE7D,
                night: S.CRATE7N,
                rarity: RARITY.FREE,
                author: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                day: S.CRATE6D,
                night: S.CRATE6N,
                rarity: RARITY.FREE,
                author: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                day: S.CRATE1D,
                night: S.CRATE1N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                day: S.CRATE2D,
                night: S.CRATE2N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                day: S.CRATE3D,
                night: S.CRATE3N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                day: S.CRATE4D,
                night: S.CRATE4N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                day: S.CRATE5D,
                night: S.CRATE5N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                day: S.CRATE8D,
                night: S.CRATE8N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                day: S.CRATE9D,
                night: S.CRATE9N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                day: S.CRATE10D,
                night: S.CRATE10N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                day: S.CRATE11D,
                night: S.CRATE11N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                day: S.CRATE12D,
                night: S.CRATE12N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                day: S.CRATE39D,
                night: S.CRATE39N,
                rarity: RARITY.WOOD,
                author: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                day: S.CRATE13D,
                night: S.CRATE13N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                day: S.CRATE19D,
                night: S.CRATE19N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                day: S.CRATE20D,
                night: S.CRATE20N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                day: S.CRATE29D,
                night: S.CRATE29N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                day: S.CRATE47D,
                night: S.CRATE47N,
                rarity: RARITY.STONE,
                author: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 19,
                day: S.CRATE21D,
                night: S.CRATE21N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                day: S.CRATE14D,
                night: S.CRATE14N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                day: S.CRATE22D,
                night: S.CRATE22N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                day: S.CRATE26D,
                night: S.CRATE26N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                day: S.CRATE30D,
                night: S.CRATE30N,
                rarity: RARITY.GOLD,
                author: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                day: S.CRATE35D,
                night: S.CRATE35N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                day: S.CRATE36D,
                night: S.CRATE36N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Glass Crate"
            }, {
                id: 16,
                day: S.CRATE15D,
                night: S.CRATE15N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                day: S.CRATE18D,
                night: S.CRATE18N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                day: S.CRATE27D,
                night: S.CRATE27N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                day: S.CRATE32D,
                night: S.CRATE32N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                day: S.CRATE33D,
                night: S.CRATE33N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                day: S.CRATE34D,
                night: S.CRATE34N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                day: S.CRATE37D,
                night: S.CRATE37N,
                rarity: RARITY.DIAMOND,
                author: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                day: S.CRATE43D,
                night: S.CRATE43N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 22,
                day: S.CRATE23D,
                night: S.CRATE23N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                day: S.CRATE16D,
                night: S.CRATE16N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                day: S.CRATE25D,
                night: S.CRATE25N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                day: S.CRATE28D,
                night: S.CRATE28N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                day: S.CRATE41D,
                night: S.CRATE41N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                day: S.CRATE42D,
                night: S.CRATE42N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                day: S.CRATE40D,
                night: S.CRATE40N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                day: S.CRATE44D,
                night: S.CRATE44N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                day: S.CRATE48D,
                night: S.CRATE48N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                day: S.CRATE49D,
                night: S.CRATE49N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 45,
                day: S.CRATE46D,
                night: S.CRATE46N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                day: S.CRATE45D,
                night: S.CRATE45N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                day: S.CRATE17D,
                night: S.CRATE17N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                day: S.CRATE24D,
                night: S.CRATE24N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                day: S.CRATE31D,
                night: S.CRATE31N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                day: S.CRATE38D,
                night: S.CRATE38N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                day: S.CRATE50D,
                night: S.CRATE50N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                day: S.CRATE51D,
                night: S.CRATE51N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                day: S.CRATE52D,
                night: S.CRATE52N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                day: S.CRATE53D,
                night: S.CRATE53N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                day: S.CRATE54D,
                night: S.CRATE54N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                day: S.CRATE55D,
                night: S.CRATE55N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                day: S.CRATE56D,
                night: S.CRATE56N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                day: S.CRATE57D,
                night: S.CRATE57N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                day: S.CRATE58D,
                night: S.CRATE58N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                day: S.CRATE59D,
                night: S.CRATE59N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                day: S.CRATE60D,
                night: S.CRATE60N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                day: S.CRATE61D,
                night: S.CRATE61N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                day: S.CRATE62D,
                night: S.CRATE62N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                day: S.CRATE63D,
                night: S.CRATE63N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                day: S.CRATE64D,
                night: S.CRATE64N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                day: S.CRATE65D,
                night: S.CRATE65N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                day: S.CRATE66D,
                night: S.CRATE66N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                day: S.CRATE67D,
                night: S.CRATE67N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                day: S.CRATE68D,
                night: S.CRATE68N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                day: S.CRATE69D,
                night: S.CRATE69N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                day: S.CRATE70D,
                night: S.CRATE70N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 70,
                day: S.CRATE71D,
                night: S.CRATE71N,
                rarity: RARITY.GOLD,
                author: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 71,
                day: S.CRATE72D,
                night: S.CRATE72N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Box"
            }],
            BOOK: [{
                id: 0,
                day: S.BOOK0D,
                night: S.BOOK0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                day: S.BOOK3D,
                night: S.BOOK3N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                day: S.BOOK4D,
                night: S.BOOK4N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                day: S.BOOK5D,
                night: S.BOOK5N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                day: S.BOOK6D,
                night: S.BOOK6N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                day: S.BOOK18D,
                night: S.BOOK18N,
                rarity: RARITY.WOOD,
                author: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                day: S.BOOK1D,
                night: S.BOOK1N,
                rarity: RARITY.STONE,
                author: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                day: S.BOOK2D,
                night: S.BOOK2N,
                rarity: RARITY.STONE,
                author: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                day: S.BOOK7D,
                night: S.BOOK7N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                day: S.BOOK20D,
                night: S.BOOK20N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                day: S.BOOK24D,
                night: S.BOOK24N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Stone Tablet"
            }, {
                id: 10,
                day: S.BOOK13D,
                night: S.BOOK13N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                day: S.BOOK9D,
                night: S.BOOK9N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                day: S.BOOK15D,
                night: S.BOOK15N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                day: S.BOOK17D,
                night: S.BOOK17N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                day: S.BOOK25D,
                night: S.BOOK25N,
                rarity: RARITY.GOLD,
                author: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                day: S.BOOK32D,
                night: S.BOOK32N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                day: S.BOOK39D,
                night: S.BOOK39N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                day: S.BOOK38D,
                night: S.BOOK38N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                day: S.BOOK40D,
                night: S.BOOK40N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                day: S.BOOK10D,
                night: S.BOOK10N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                day: S.BOOK8D,
                night: S.BOOK8N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                day: S.BOOK16D,
                night: S.BOOK16N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                day: S.BOOK22D,
                night: S.BOOK22N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                day: S.BOOK23D,
                night: S.BOOK23N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                day: S.BOOK30D,
                night: S.BOOK30N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                day: S.BOOK31D,
                night: S.BOOK31N,
                rarity: RARITY.DIAMOND,
                author: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 13,
                day: S.BOOK11D,
                night: S.BOOK11N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                day: S.BOOK28D,
                night: S.BOOK28N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                day: S.BOOK29D,
                night: S.BOOK29N,
                rarity: RARITY.AMETHYST,
                author: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                day: S.BOOK27D,
                night: S.BOOK27N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                day: S.BOOK35D,
                night: S.BOOK35N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                day: S.BOOK36D,
                night: S.BOOK36N,
                rarity: RARITY.AMETHYST,
                author: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                day: S.BOOK41D,
                night: S.BOOK41N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                day: S.BOOK42D,
                night: S.BOOK42N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 33,
                day: S.BOOK33D,
                night: S.BOOK33N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                day: S.BOOK34D,
                night: S.BOOK34N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                day: S.BOOK12D,
                night: S.BOOK12N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                day: S.BOOK14D,
                night: S.BOOK14N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                day: S.BOOK26D,
                night: S.BOOK26N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                day: S.BOOK19D,
                night: S.BOOK19N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                day: S.BOOK21D,
                night: S.BOOK21N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                day: S.BOOK43D,
                night: S.BOOK43N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                day: S.BOOK44D,
                night: S.BOOK44N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                day: S.BOOK45D,
                night: S.BOOK45N,
                rarity: RARITY.REIDITE,
                author: "aloner",
                name: "Mystery Book"
            }],
            ACCESSORY: [{
                id: 0,
                day: S.ACCESSORY0D,
                night: S.ACCESSORY0D,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                day: S.ACCESSORY4D,
                night: S.ACCESSORY4N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                day: S.ACCESSORY5D,
                night: S.ACCESSORY5N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                day: S.ACCESSORY3D,
                night: S.ACCESSORY3N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                day: S.ACCESSORY6D,
                night: S.ACCESSORY6N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                day: S.ACCESSORY8D,
                night: S.ACCESSORY8N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                day: S.ACCESSORY9D,
                night: S.ACCESSORY9N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                day: S.ACCESSORY15D,
                night: S.ACCESSORY15N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                day: S.ACCESSORY10D,
                night: S.ACCESSORY10N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                day: S.ACCESSORY36D,
                night: S.ACCESSORY36N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                day: S.ACCESSORY47D,
                night: S.ACCESSORY47N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                day: S.ACCESSORY55D,
                night: S.ACCESSORY55N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                day: S.ACCESSORY56D,
                night: S.ACCESSORY56N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                day: S.ACCESSORY57D,
                night: S.ACCESSORY57N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                day: S.ACCESSORY17D,
                night: S.ACCESSORY17N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                day: S.ACCESSORY7D,
                night: S.ACCESSORY7N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                day: S.ACCESSORY13D,
                night: S.ACCESSORY13N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                day: S.ACCESSORY11D,
                night: S.ACCESSORY11N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                day: S.ACCESSORY44D,
                night: S.ACCESSORY44N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                day: S.ACCESSORY23D,
                night: S.ACCESSORY23N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                day: S.ACCESSORY2D,
                night: S.ACCESSORY2N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                day: S.ACCESSORY30D,
                night: S.ACCESSORY30N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                day: S.ACCESSORY38D,
                night: S.ACCESSORY38N,
                rarity: RARITY.STONE,
                author: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                day: S.ACCESSORY62D,
                night: S.ACCESSORY62N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                day: S.ACCESSORY63D,
                night: S.ACCESSORY63N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                day: S.ACCESSORY67D,
                night: S.ACCESSORY67N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                day: S.ACCESSORY77D,
                night: S.ACCESSORY77N,
                rarity: RARITY.STONE,
                author: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                day: S.ACCESSORY78D,
                night: S.ACCESSORY78N,
                rarity: RARITY.STONE,
                author: "Ant",
                name: "Hero Mask"
            }, {
                id: 15,
                day: S.ACCESSORY16D,
                night: S.ACCESSORY16N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                day: S.ACCESSORY21D,
                night: S.ACCESSORY21N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                day: S.ACCESSORY24D,
                night: S.ACCESSORY24N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                day: S.ACCESSORY22D,
                night: S.ACCESSORY22N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                day: S.ACCESSORY14D,
                night: S.ACCESSORY14N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                day: S.ACCESSORY29D,
                night: S.ACCESSORY29N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Horns"
            }, {
                id: 31,
                day: S.ACCESSORY31D,
                night: S.ACCESSORY31N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                day: S.ACCESSORY40D,
                night: S.ACCESSORY40N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                day: S.ACCESSORY50D,
                night: S.ACCESSORY50N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                day: S.ACCESSORY46D,
                night: S.ACCESSORY46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Rose"
            }, {
                id: 91,
                day: S.ACCESSORY80D,
                night: S.ACCESSORY80N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                day: S.ACCESSORY81D,
                night: S.ACCESSORY81N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                day: S.ACCESSORY82D,
                night: S.ACCESSORY82N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Skull Mask"
            }, {
                id: 9,
                day: S.ACCESSORY1D,
                night: S.ACCESSORY1N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                day: S.ACCESSORY25D,
                night: S.ACCESSORY25N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                day: S.ACCESSORY12D,
                night: S.ACCESSORY12N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                day: S.ACCESSORY19D,
                night: S.ACCESSORY19N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                day: S.ACCESSORY28D,
                night: S.ACCESSORY28N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                day: S.ACCESSORY37D,
                night: S.ACCESSORY37N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Berry"
            }, {
                id: 39,
                day: S.ACCESSORY39D,
                night: S.ACCESSORY39N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Flake"
            }, {
                id: 43,
                day: S.ACCESSORY43D,
                night: S.ACCESSORY43N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                day: S.ACCESSORY49D,
                night: S.ACCESSORY49N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                day: S.ACCESSORY51D,
                night: S.ACCESSORY51N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                day: S.ACCESSORY53D,
                night: S.ACCESSORY53N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                day: S.ACCESSORY54D,
                night: S.ACCESSORY54N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                day: S.ACCESSORY58D,
                night: S.ACCESSORY58N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                day: S.ACCESSORY59D,
                night: S.ACCESSORY59N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                day: S.ACCESSORY60D,
                night: S.ACCESSORY60N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                day: S.ACCESSORY61D,
                night: S.ACCESSORY61N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                day: S.ACCESSORY64D,
                night: S.ACCESSORY64N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                day: S.ACCESSORY65D,
                night: S.ACCESSORY65N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                day: S.ACCESSORY66D,
                night: S.ACCESSORY66N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                day: S.ACCESSORY68D,
                night: S.ACCESSORY68N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                day: S.ACCESSORY69D,
                night: S.ACCESSORY69N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                day: S.ACCESSORY70D,
                night: S.ACCESSORY70N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                day: S.ACCESSORY71D,
                night: S.ACCESSORY71N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                day: S.ACCESSORY72D,
                night: S.ACCESSORY72N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                day: S.ACCESSORY79D,
                night: S.ACCESSORY79N,
                rarity: RARITY.DIAMOND,
                author: "aloner",
                name: "Blood"
            }, {
                id: 27,
                day: S.ACCESSORY27D,
                night: S.ACCESSORY27N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                day: S.ACCESSORY20D,
                night: S.ACCESSORY20N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                day: S.ACCESSORY32D,
                night: S.ACCESSORY32N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                day: S.ACCESSORY33D,
                night: S.ACCESSORY33N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                day: S.ACCESSORY34D,
                night: S.ACCESSORY34N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                day: S.ACCESSORY41D,
                night: S.ACCESSORY41N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                day: S.ACCESSORY42D,
                night: S.ACCESSORY42N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                day: S.ACCESSORY73D,
                night: S.ACCESSORY73N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 60,
                day: S.ACCESSORY48D,
                night: S.ACCESSORY48N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                day: S.ACCESSORY26D,
                night: S.ACCESSORY26N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                day: S.ACCESSORY18D,
                night: S.ACCESSORY18N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                day: S.ACCESSORY35D,
                night: S.ACCESSORY35N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                day: S.ACCESSORY52D,
                night: S.ACCESSORY52N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                day: S.ACCESSORY45D,
                night: S.ACCESSORY45N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                day: S.ACCESSORY74D,
                night: S.ACCESSORY74N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                day: S.ACCESSORY75D,
                night: S.ACCESSORY75N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                day: S.ACCESSORY76D,
                night: S.ACCESSORY76N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 45,
                day: S.LEVEL5D,
                night: S.LEVEL5N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                day: S.LEVEL10D,
                night: S.LEVEL10N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                day: S.LEVEL15D,
                night: S.LEVEL15N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                day: S.LEVEL20D,
                night: S.LEVEL20N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                day: S.LEVEL25D,
                night: S.LEVEL25N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                day: S.LEVEL30D,
                night: S.LEVEL30N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                day: S.LEVEL35D,
                night: S.LEVEL35N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                day: S.LEVEL40D,
                night: S.LEVEL40N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                day: S.LEVEL45D,
                night: S.LEVEL45N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                day: S.LEVEL50D,
                night: S.LEVEL50N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                day: S.LEVEL55D,
                night: S.LEVEL55N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                day: S.LEVEL60D,
                night: S.LEVEL60N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
            };
            re[SPRITE.BODY] = [];
            re[ItemType.HAND] = [];
            re[SPRITE.CRATE] = [];
            re[ItemType.BOOK] = [];
            re[ItemType.BAG] = [];
            re[SPRITE.ACCESSORY] = [];
            for (var e = 0; e < ne.SKIN.length; e++) {
            re[SPRITE.BODY][e] = [ne.SKIN[e].day, ne.SKIN[e].night];
            re[ItemType.HAND][e] = [ne.SKIN[e].dayHand, ne.SKIN[e].nightHand];
            }
            for (e = 0; e < ne.BOOK.length; e++) {
            re[ItemType.BOOK][e] = [ne.BOOK[e].day, ne.BOOK[e].night];
            }
            for (e = 0; e < ne.CRATE.length; e++) {
            re[SPRITE.CRATE][e] = [ne.CRATE[e].day, ne.CRATE[e].night];
            }
            for (e = 0; e < ne.BAG.length; e++) {
            re[ItemType.BAG][e] = [ne.BAG[e].day, ne.BAG[e].night];
            }
            for (e = 0; e < ne.ACCESSORY.length; e++) {
            re[SPRITE.ACCESSORY][e] = [ne.ACCESSORY[e].day, ne.ACCESSORY[e].night];
            }
        }, 0);
        function Zi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 185;
            o.height = e * 164;
            T.translate(0, 0);
            var r = __p_5863156023((e, t, i) => {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 201;
            o.height = e * 164;
            T.translate(0, e * 5);
            T.globalAlpha = t ? 0.5 : 1;
            he(T, e * 100.5, e * 82, e * 74.92746655359852);
            se(T, i[0], i[0], e * 4);
            he(T, e * 100.5, e * 82, e * 65.9417374971317);
            se(T, i[0], i[0], e * 4);
            T.translate(0, -5);
            T.globalAlpha = 1;
            he(T, e * 100.5, e * 82, e * 74.92746655359852);
            se(T, i[1], i[3], e * 4);
            he(T, e * 100.5, e * 82, e * 65.9417374971317);
            se(T, i[1], i[2], e * 4);
            he(T, e * 100.5, e * 82, e * 35.9417374971317);
            se(T, i[1], i[2], e * 20);
            he(T, e * 100.5, e * 82, e * 15.9417374971317);
            se(T, i[1], i[2], e * 6);
            return o;
            }, 3)(e, t, i);
            T.drawImage(r, e * -10, e * 0);
            r = Ji(e, t, i, 0);
            T.drawImage(r, e * -83, e * -40);
            r = Ji(e, t, i, window.Math.PI / 1.4);
            T.drawImage(r, e * -15, e * -88);
            r = Ji(e, t, i, window.Math.PI / -1.4);
            T.drawImage(r, e * 15, e * -8);
            return o;
        }
        function $i(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 450;
            o.height = e * 790;
            T.translate(e * 5, e * 5);
            T.globalAlpha = 0;
            he(T, e * 178.5, e * 172.828125, e * 150);
            se(T, undefined, i[0], e * 65);
            he(T, e * 178.5, e * 172.828125, e * 150);
            se(T, undefined, i[0], e * 55);
            T.closePath();
            T.save();
            T.translate(e * 177, e * 512.328125);
            Re(T, e * -25, e * -202.5, e * 65, e * 405, e * 25);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 136, e * 581.828125);
            Re(T, e * -39, e * -23, e * 78, e * 46, e * 25);
            T.restore();
            se(T, i[0]);
            T.save();
            T.translate(e * 135.5, e * 663.828125);
            Re(T, e * -39.5, e * -22, e * 79, e * 44, e * 25);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 114, e * 594.828125);
            T.bezierCurveTo(e * 175, e * 596.828125, e * 163, e * 596.828125, e * 172, e * 594.828125);
            T.bezierCurveTo(e * 171.5, e * 633.828125, e * 171.5, e * 633.828125, e * 171, e * 672.828125);
            T.bezierCurveTo(e * 110, e * 673.828125, e * 140.5, e * 673.328125, e * 110, e * 673.828125);
            T.bezierCurveTo(e * 110.5, e * 661.828125, e * 110.5, e * 661.828125, e * 111, e * 649.828125);
            T.bezierCurveTo(e * 157, e * 633.828125, e * 134, e * 607.828125, e * 114, e * 594.828125);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(0, e * 5);
            T.moveTo(e * 140, e * 294.828125);
            T.bezierCurveTo(e * 212, e * 295.828125, e * 176.5, e * 295.328125, e * 213, e * 295.828125);
            T.bezierCurveTo(e * 201.5, e * 325.328125, e * 201.5, e * 325.328125, e * 190, e * 354.828125);
            T.bezierCurveTo(e * 175.5, e * 355.828125, e * 175.5, e * 355.828125, e * 161, e * 356.828125);
            T.bezierCurveTo(e * 154.5, e * 328.828125, e * 154.5, e * 328.828125, e * 148, e * 300.828125);
            T.closePath();
            se(T, i[0]);
            T.translate(3, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 159, e * 679.828125);
            T.bezierCurveTo(e * 180, e * 665.828125, e * 155, e * 675.828125, e * 151, e * 671.828125);
            T.bezierCurveTo(e * 154.5, e * 685.328125, e * 154.5, e * 685.328125, e * 158, e * 698.828125);
            T.bezierCurveTo(e * 171, e * 699.828125, e * 171, e * 699.828125, e * 184, e * 700.828125);
            T.closePath();
            se(T, i[0]);
            T.save();
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 157, e * 548.828125);
            T.bezierCurveTo(e * 157, e * 561.828125, e * 157, e * 561.828125, e * 157, e * 574.828125);
            T.bezierCurveTo(e * 132.5, e * 580.828125, e * 132.5, e * 580.828125, e * 108, e * 586.828125);
            T.bezierCurveTo(e * 112, e * 599.828125, e * 111, e * 593.828125, e * 112, e * 599.828125);
            T.bezierCurveTo(e * 159, e * 603.828125, e * 126.5, e * 601.328125, e * 141, e * 602.828125);
            T.bezierCurveTo(e * 145, e * 641.828125, e * 143.5, e * 623.828125, e * 146, e * 644.828125);
            T.bezierCurveTo(e * 129.5, e * 645.328125, e * 129.5, e * 645.328125, e * 113, e * 645.828125);
            T.bezierCurveTo(e * 107.5, e * 652.828125, e * 107.5, e * 652.828125, e * 102, e * 659.828125);
            T.bezierCurveTo(e * 104, e * 669.328125, e * 104, e * 669.328125, e * 106, e * 678.828125);
            T.bezierCurveTo(e * 145, e * 679.328125, e * 145, e * 679.328125, e * 184, e * 679.828125);
            T.bezierCurveTo(e * 185, e * 615.828125, e * 185, e * 615.828125, e * 186, e * 551.828125);
            T.bezierCurveTo(e * 172.5, e * 551.328125, e * 172.5, e * 551.328125, e * 159, e * 550.828125);
            T.closePath();
            se(T, i[0], i[0], e * 7);
            T.restore();
            T.globalAlpha = 1;
            T.translate(e * 15, e * 35);
            he(T, e * 178.5, e * 172.828125, e * 150);
            se(T, undefined, i[2], e * 95);
            he(T, e * 178.5, e * 172.828125, e * 150);
            se(T, undefined, i[1], e * 55);
            T.closePath();
            T.save();
            T.translate(e * 177, e * 512.328125);
            Re(T, e * -25, e * -202.5, e * 65, e * 405, e * 25);
            T.restore();
            se(T, i[1], i[2], e * 20);
            T.save();
            T.translate(e * 136, e * 581.828125);
            Re(T, e * -39, e * -23, e * 78, e * 46, e * 25);
            T.restore();
            se(T, i[1], i[2], e * 20);
            T.save();
            T.translate(e * 135.5, e * 663.828125);
            Re(T, e * -39.5, e * -22, e * 79, e * 44, e * 25);
            T.restore();
            se(T, i[1], i[2], e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 114, e * 594.828125);
            T.bezierCurveTo(e * 175, e * 596.828125, e * 163, e * 596.828125, e * 172, e * 594.828125);
            T.bezierCurveTo(e * 171.5, e * 633.828125, e * 171.5, e * 633.828125, e * 171, e * 672.828125);
            T.bezierCurveTo(e * 110, e * 673.828125, e * 140.5, e * 673.328125, e * 110, e * 673.828125);
            T.bezierCurveTo(e * 110.5, e * 661.828125, e * 110.5, e * 661.828125, e * 111, e * 649.828125);
            T.bezierCurveTo(e * 157, e * 633.828125, e * 134, e * 607.828125, e * 114, e * 594.828125);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(0, e * 5);
            T.moveTo(e * 123, e * 294.828125);
            T.bezierCurveTo(e * 212, e * 295.828125, e * 190.5, e * 295.328125, e * 250, e * 295.828125);
            T.bezierCurveTo(e * 231.5, e * 325.328125, e * 231.5, e * 325.328125, e * 220, e * 354.828125);
            T.bezierCurveTo(e * 175.5, e * 355.828125, e * 175.5, e * 355.828125, e * 140, e * 356.828125);
            T.bezierCurveTo(e * 123.5, e * 328.828125, e * 123.5, e * 328.828125, e * 123, e * 294.828125);
            T.closePath();
            se(T, i[1]);
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 159, e * 679.828125);
            T.bezierCurveTo(e * 180, e * 665.828125, e * 155, e * 675.828125, e * 151, e * 671.828125);
            T.bezierCurveTo(e * 154.5, e * 685.328125, e * 154.5, e * 685.328125, e * 158, e * 698.828125);
            T.bezierCurveTo(e * 171, e * 699.828125, e * 171, e * 699.828125, e * 184, e * 700.828125);
            T.closePath();
            se(T, i[1]);
            T.save();
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 157, e * 548.828125);
            T.bezierCurveTo(e * 157, e * 561.828125, e * 157, e * 561.828125, e * 157, e * 574.828125);
            T.bezierCurveTo(e * 132.5, e * 580.828125, e * 132.5, e * 580.828125, e * 108, e * 586.828125);
            T.bezierCurveTo(e * 112, e * 599.828125, e * 111, e * 593.828125, e * 112, e * 599.828125);
            T.bezierCurveTo(e * 159, e * 603.828125, e * 126.5, e * 601.328125, e * 141, e * 602.828125);
            T.bezierCurveTo(e * 145, e * 641.828125, e * 143.5, e * 623.828125, e * 146, e * 644.828125);
            T.bezierCurveTo(e * 129.5, e * 645.328125, e * 129.5, e * 645.328125, e * 113, e * 645.828125);
            T.bezierCurveTo(e * 107.5, e * 652.828125, e * 107.5, e * 652.828125, e * 102, e * 659.828125);
            T.bezierCurveTo(e * 104, e * 669.328125, e * 104, e * 669.328125, e * 106, e * 678.828125);
            T.bezierCurveTo(e * 145, e * 679.328125, e * 145, e * 679.328125, e * 184, e * 679.828125);
            T.bezierCurveTo(e * 185, e * 615.828125, e * 185, e * 615.828125, e * 186, e * 551.828125);
            T.bezierCurveTo(e * 172.5, e * 551.328125, e * 172.5, e * 551.328125, e * 159, e * 550.828125);
            T.closePath();
            se(T, i[1], i[1], e * 7);
            T.restore();
            return o;
        }
        function Qi(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 202;
            o.height = e * 202;
            T.translate(e * 2, e * 1);
            T.globalAlpha = 0.3;
            he(T, e * 98, e * 99, e * 100);
            se(T, i[0]);
            T.globalAlpha = 0.5;
            he(T, e * 98, e * 99, e * 90);
            se(T, i[1]);
            return o;
        }
        function eo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 89;
            o.height = e * 89;
            T.save();
            T.translate(e * 44.5, e * 44.5);
            ue(T, 6, e * 40, e * 10);
            T.restore();
            se(T, i[0], i[1], e * 5);
            T.save();
            T.translate(e * 44.5, e * 44.5);
            ue(T, 6, e * 25.11521001172521, e * 10);
            T.restore();
            se(T, i[2], i[3], e * 5);
            return o;
        }
        function to(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 88;
            o.height = e * 88;
            T.save();
            T.translate(e * 44, e * 44);
            T.rotate(0.52);
            ue(T, 6, e * 43, e * 10);
            T.restore();
            se(T, i[0], i[1], e * 3);
            return o;
        }
        function io(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 202;
            o.height = e * 202;
            T.translate(e * 2, e * 1);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.save();
            T.translate(e * 98, e * 41.15177917480469);
            T.rotate(0.8);
            Re(T, e * -16, e * -16.5, e * 32, e * 33, e * 7);
            T.restore();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 98, e * 22.5089111328125);
            T.bezierCurveTo(e * 97.5, e * 41.5089111328125, e * 97.5, e * 41.5089111328125, e * 97, e * 60.5089111328125);
            se(T, i[2]);
            T.save();
            T.translate(e * 147.5, e * 69.5089111328125);
            T.rotate(0.2);
            Re(T, e * -15.5, e * -16, e * 31, e * 32, e * 7);
            T.restore();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 163, e * 59.50892639160156);
            T.bezierCurveTo(e * 147, e * 69.50892639160156, e * 127, e * 82.50892639160156, e * 131, e * 79.50892639160156);
            se(T, i[2]);
            T.save();
            T.translate(e * 143.5, e * 128.2946319580078);
            T.rotate(1.24);
            Re(T, e * -16.5, e * -17.5, e * 33, e * 35, e * 7);
            T.restore();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 162, e * 135.93748474121094);
            T.bezierCurveTo(e * 143.5, e * 128.43748474121094, e * 129, e * 120.93748474121094, e * 125, e * 120.93748474121094);
            se(T, i[2]);
            T.save();
            T.translate(e * 99, e * 156.08035278320312);
            T.rotate(0.84);
            Re(T, e * -18, e * -18, e * 36, e * 36, e * 7);
            T.restore();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 98, e * 136.08035278320312);
            T.bezierCurveTo(e * 98, e * 156.08035278320312, e * 98, e * 156.08035278320312, e * 98, e * 176.08035278320312);
            se(T, i[2]);
            T.save();
            T.translate(e * 54, e * 72.22320556640625);
            T.rotate(1.32);
            Re(T, e * -18, e * -19, e * 36, e * 38, e * 7);
            T.restore();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 34, e * 60.79463195800781);
            T.bezierCurveTo(e * 53.5, e * 72.29463195800781, e * 69, e * 79.79463195800781, e * 73, e * 83.79463195800781);
            se(T, i[2]);
            T.save();
            T.translate(e * 49, e * 127.29463195800781);
            T.rotate(1.76);
            Re(T, e * -20, e * -17.5, e * 40, e * 35, e * 7);
            T.restore();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 141.7946319580078);
            T.bezierCurveTo(e * 47, e * 130.2946319580078, e * 64, e * 119.79463195800781, e * 64, e * 118.79463195800781);
            se(T, i[2]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.save();
            T.translate(e * 98, e * 41.15177917480469);
            T.rotate(0.8);
            Re(T, e * -16, e * -16.5, e * 32, e * 33, e * 7);
            T.restore();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 98, e * 22.5089111328125);
            T.bezierCurveTo(e * 97.5, e * 41.5089111328125, e * 97.5, e * 41.5089111328125, e * 97, e * 60.5089111328125);
            se(T, undefined, i[4], e * 5);
            T.save();
            T.translate(e * 147.5, e * 69.5089111328125);
            T.rotate(0.2);
            Re(T, e * -15.5, e * -16, e * 31, e * 32, e * 7);
            T.restore();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 163, e * 59.50892639160156);
            T.bezierCurveTo(e * 147, e * 69.50892639160156, e * 127, e * 82.50892639160156, e * 131, e * 79.50892639160156);
            se(T, undefined, i[4], e * 5);
            T.save();
            T.translate(e * 143.5, e * 128.2946319580078);
            T.rotate(1.24);
            Re(T, e * -16.5, e * -17.5, e * 33, e * 35, e * 7);
            T.restore();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 162, e * 135.93748474121094);
            T.bezierCurveTo(e * 143.5, e * 128.43748474121094, e * 129, e * 120.93748474121094, e * 125, e * 120.93748474121094);
            se(T, undefined, i[4], e * 5);
            T.save();
            T.translate(e * 99, e * 156.08035278320312);
            T.rotate(0.84);
            Re(T, e * -18, e * -18, e * 36, e * 36, e * 7);
            T.restore();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 98, e * 136.08035278320312);
            T.bezierCurveTo(e * 98, e * 156.08035278320312, e * 98, e * 156.08035278320312, e * 98, e * 176.08035278320312);
            se(T, undefined, i[4], e * 5);
            T.save();
            T.translate(e * 54, e * 72.22320556640625);
            T.rotate(1.32);
            Re(T, e * -18, e * -19, e * 36, e * 38, e * 7);
            T.restore();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 34, e * 60.79463195800781);
            T.bezierCurveTo(e * 53.5, e * 72.29463195800781, e * 69, e * 79.79463195800781, e * 73, e * 83.79463195800781);
            se(T, undefined, i[4], e * 5);
            T.save();
            T.translate(e * 49, e * 127.29463195800781);
            T.rotate(1.76);
            Re(T, e * -20, e * -17.5, e * 40, e * 35, e * 7);
            T.restore();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30, e * 141.7946319580078);
            T.bezierCurveTo(e * 47, e * 130.2946319580078, e * 64, e * 119.79463195800781, e * 64, e * 118.79463195800781);
            se(T, undefined, i[4], e * 5);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.save();
            T.translate(e * 98, e * 99);
            ue(T, 6, e * 70.28669492273468, e * 10);
            T.restore();
            se(T, i[2]);
            T.save();
            T.translate(e * 98, e * 99);
            ue(T, 6, e * 56.455940020351264, e * 10);
            T.restore();
            se(T, i[2]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.save();
            T.translate(e * 98, e * 99);
            ue(T, 6, e * 70.28669492273468, e * 10);
            T.restore();
            se(T, i[5], i[6], e * 5);
            T.save();
            T.translate(e * 98, e * 99);
            ue(T, 6, e * 56.455940020351264, e * 10);
            T.restore();
            se(T, i[7], i[8], e * 7);
            return o;
        }
        function oo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 161;
            o.height = e * 184;
            T.translate(0, e * 10);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105.5, e * 34.609375);
            T.bezierCurveTo(e * 48.5, e * 7.609375, e * 11.5, e * 58.609375, e * 20.5, e * 97.609375);
            T.bezierCurveTo(e * 44.5, e * 161.609375, e * 70.5, e * 171.609375, e * 88.5, e * 156.609375);
            T.bezierCurveTo(e * 120.5, e * 129.609375, e * 123.5, e * 105.609375, e * 128.5, e * 83.609375);
            T.bezierCurveTo(e * 137.5, e * 79.609375, e * 141.5, e * 79.609375, e * 146.5, e * 81.609375);
            T.bezierCurveTo(e * 153.5, e * 70.609375, e * 151.5, e * 65.609375, e * 148.5, e * 61.609375);
            T.bezierCurveTo(e * 134.5, e * 60.609375, e * 131.5, e * 63.609375, e * 127.5, e * 66.609375);
            T.bezierCurveTo(e * 127.5, e * 55.609375, e * 125.5, e * 54.609375, e * 120.5, e * 51.609375);
            T.bezierCurveTo(e * 128.5, e * 42.609375, e * 136.5, e * 38.609375, e * 147.5, e * 39.609375);
            T.bezierCurveTo(e * 152.5, e * 23.609375, e * 147.5, e * 21.609375, e * 140.5, e * 17.609375);
            T.bezierCurveTo(e * 120.5, e * 17.609375, e * 114.5, e * 27.609375, e * 106.5, e * 35.609375);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 45.5, e * 144.609375);
            T.bezierCurveTo(e * 35.5, e * 155.609375, e * 37, e * 152.109375, e * 28.5, e * 159.609375);
            T.bezierCurveTo(e * 16.5, e * 154.609375, e * 16.5, e * 151.609375, e * 17.5, e * 141.609375);
            T.bezierCurveTo(e * 25.5, e * 134.109375, e * 25.5, e * 134.109375, e * 33.5, e * 126.609375);
            se(T, i[0]);
            T.translate(0, e * -10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 45.5, e * 144.609375);
            T.bezierCurveTo(e * 35.5, e * 155.609375, e * 37, e * 152.109375, e * 28.5, e * 159.609375);
            T.bezierCurveTo(e * 16.5, e * 154.609375, e * 16.5, e * 151.609375, e * 17.5, e * 141.609375);
            T.bezierCurveTo(e * 25.5, e * 134.109375, e * 25.5, e * 134.109375, e * 33.5, e * 126.609375);
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105.5, e * 34.609375);
            T.bezierCurveTo(e * 48.5, e * 7.609375, e * 11.5, e * 58.609375, e * 20.5, e * 97.609375);
            T.bezierCurveTo(e * 44.5, e * 161.609375, e * 70.5, e * 171.609375, e * 88.5, e * 156.609375);
            T.bezierCurveTo(e * 120.5, e * 129.609375, e * 123.5, e * 105.609375, e * 128.5, e * 83.609375);
            T.bezierCurveTo(e * 137.5, e * 79.609375, e * 141.5, e * 79.609375, e * 146.5, e * 81.609375);
            T.bezierCurveTo(e * 153.5, e * 70.609375, e * 151.5, e * 65.609375, e * 148.5, e * 61.609375);
            T.bezierCurveTo(e * 134.5, e * 60.609375, e * 131.5, e * 63.609375, e * 127.5, e * 66.609375);
            T.bezierCurveTo(e * 127.5, e * 55.609375, e * 125.5, e * 54.609375, e * 120.5, e * 51.609375);
            T.bezierCurveTo(e * 128.5, e * 42.609375, e * 136.5, e * 38.609375, e * 147.5, e * 39.609375);
            T.bezierCurveTo(e * 152.5, e * 23.609375, e * 147.5, e * 21.609375, e * 140.5, e * 17.609375);
            T.bezierCurveTo(e * 120.5, e * 17.609375, e * 114.5, e * 27.609375, e * 106.5, e * 35.609375);
            T.closePath();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 104.5, e * 35.609375);
            T.bezierCurveTo(e * 71.5, e * 36.609375, e * 57.5, e * 52.609375, e * 58.5, e * 81.609375);
            T.bezierCurveTo(e * 59.5, e * 103.609375, e * 66.5, e * 107.609375, e * 66.5, e * 116.609375);
            T.bezierCurveTo(e * 67.5, e * 128.609375, e * 65.5, e * 131.609375, e * 63.5, e * 137.609375);
            se(T, undefined, i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 59.5, e * 72.609375);
            T.bezierCurveTo(e * 38.5, e * 80.609375, e * 43.5, e * 81.609375, e * 37.5, e * 89.609375);
            se(T, undefined, i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 60.5, e * 85.609375);
            T.bezierCurveTo(e * 75.5, e * 91.609375, e * 76.5, e * 96.609375, e * 81.5, e * 104.609375);
            se(T, undefined, i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 68.5, e * 122.609375);
            T.bezierCurveTo(e * 79.5, e * 130.609375, e * 74.5, e * 128.609375, e * 80.5, e * 134.609375);
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 142.5, e * 18.609375);
            T.bezierCurveTo(e * 151.5, e * 28.609375, e * 151.5, e * 32.609375, e * 146.5, e * 40.609375);
            T.bezierCurveTo(e * 137.5, e * 26.609375, e * 138.5, e * 24.609375, e * 142.5, e * 19.609375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 146.5, e * 61.50892639160156);
            T.bezierCurveTo(e * 157.5, e * 69.50892639160156, e * 150.5, e * 79.50892639160156, e * 145.5, e * 81.50892639160156);
            T.bezierCurveTo(e * 140.5, e * 65.50892639160156, e * 144.5, e * 64.50892639160156, e * 146.5, e * 62.50892639160156);
            T.closePath();
            se(T, i[3]);
            return o;
        }
        function To(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 104;
            o.height = e * 117;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 4, e * 90);
            T.bezierCurveTo(e * 20, e * 99.5, e * 20, e * 99.5, e * 36, e * 109);
            T.bezierCurveTo(e * 67, e * 92, e * 67, e * 92, e * 98, e * 75);
            T.bezierCurveTo(e * 91, e * 27, e * 91, e * 27, e * 91, e * 28);
            T.bezierCurveTo(e * 72.5, e * 16, e * 72.5, e * 16, e * 54, e * 4);
            T.bezierCurveTo(e * 33.5, e * 10, e * 33.5, e * 10, e * 13, e * 16);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 6, e * 76);
            T.bezierCurveTo(e * 13.5, e * 51.5, e * 13.5, e * 51.5, e * 21, e * 27);
            T.bezierCurveTo(e * 37.5, e * 17, e * 37.5, e * 17, e * 54, e * 7);
            T.bezierCurveTo(e * 33.5, e * 12.5, e * 33.5, e * 12.5, e * 13, e * 18);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 24, e * 62);
            T.bezierCurveTo(e * 28.5, e * 53, e * 28.5, e * 53, e * 33, e * 44);
            T.bezierCurveTo(e * 41.5, e * 41, e * 41.5, e * 41, e * 50, e * 38);
            T.bezierCurveTo(e * 52.5, e * 35, e * 52.5, e * 35, e * 55, e * 32);
            T.bezierCurveTo(e * 52, e * 30, e * 52, e * 30, e * 49, e * 28);
            T.bezierCurveTo(e * 38, e * 31.5, e * 38, e * 31.5, e * 27, e * 35);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36, e * 107);
            T.bezierCurveTo(e * 66, e * 90.5, e * 66, e * 90.5, e * 96, e * 74);
            T.bezierCurveTo(e * 93, e * 52.5, e * 93, e * 52.5, e * 90, e * 31);
            T.bezierCurveTo(e * 87, e * 48, e * 87, e * 48, e * 84, e * 65);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 1, e * 89);
            T.bezierCurveTo(e * 18, e * 100, e * 34, e * 110, e * 35, e * 111);
            T.bezierCurveTo(e * 67, e * 93, e * 67, e * 93, e * 99, e * 75);
            T.bezierCurveTo(e * 100, e * 78.5, e * 100, e * 78.5, e * 101, e * 82);
            T.bezierCurveTo(e * 68, e * 99, e * 68, e * 99, e * 35, e * 116);
            T.bezierCurveTo(e * 18, e * 106.5, e * 18, e * 106.5, e * 1, e * 97);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36, e * 107);
            T.bezierCurveTo(e * 66.5, e * 91.5, e * 66.5, e * 91.5, e * 97, e * 76);
            T.bezierCurveTo(e * 94.5, e * 52, e * 94.5, e * 52, e * 92, e * 28);
            T.bezierCurveTo(e * 73, e * 15.5, e * 73, e * 15.5, e * 54, e * 3);
            T.bezierCurveTo(e * 33, e * 9.5, e * 33, e * 9.5, e * 12, e * 16);
            T.bezierCurveTo(e * 8, e * 53, e * 8, e * 53, e * 4, e * 90);
            T.bezierCurveTo(e * 18.5, e * 99, e * 18.5, e * 99, e * 33, e * 108);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 22, e * 71);
            T.bezierCurveTo(e * 30, e * 76.5, e * 30, e * 76.5, e * 38, e * 82);
            T.bezierCurveTo(e * 53, e * 72, e * 53, e * 72, e * 68, e * 62);
            T.bezierCurveTo(e * 68, e * 52, e * 68, e * 52, e * 68, e * 42);
            T.bezierCurveTo(e * 59.5, e * 35.5, e * 59.5, e * 35.5, e * 51, e * 29);
            T.bezierCurveTo(e * 39.5, e * 32, e * 39.5, e * 32, e * 28, e * 35);
            T.bezierCurveTo(e * 25, e * 52, e * 25, e * 52, e * 22, e * 69);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 5, e * 89);
            T.bezierCurveTo(e * 20, e * 73, e * 12.5, e * 80.5, e * 20, e * 72);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35, e * 102);
            T.bezierCurveTo(e * 36, e * 92.5, e * 36, e * 92.5, e * 37, e * 83);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 68, e * 62);
            T.bezierCurveTo(e * 81, e * 67.5, e * 81, e * 67.5, e * 94, e * 73);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 70, e * 41);
            T.bezierCurveTo(e * 80, e * 35.5, e * 80, e * 35.5, e * 90, e * 30);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 28, e * 33);
            T.bezierCurveTo(e * 21.5, e * 26.5, e * 21.5, e * 26.5, e * 15, e * 20);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 51, e * 28);
            T.bezierCurveTo(e * 53, e * 17, e * 53, e * 17, e * 55, e * 6);
            T.closePath();
            se(T, undefined, i[4], e * 6);
            return o;
        }
        function ro(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 105;
            o.height = e * 144;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * -5, e * 0);
            T.save();
            T.translate(e * 52.5, e * 91.5);
            Re(T, e * -4.5, e * -39, e * 9, e * 78, e * 5);
            T.restore();
            se(T, i[0], i[0], e * 3);
            T.save();
            T.translate(e * 53, e * 36);
            Re(T, e * -29, e * -17.5, e * 58, e * 35, e * 5);
            T.restore();
            se(T, i[0], i[0], e * 4);
            T.save();
            T.translate(e * 53.5, e * 35.5);
            Re(T, e * -26.5, e * -15, e * 53, e * 30, e * 5);
            T.restore();
            se(T, i[0], i[0], e * 4);
            T.translate(e * 5, e * 0);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 52.5, e * 91.5);
            Re(T, e * -4.5, e * -39, e * 9, e * 78, e * 5);
            T.restore();
            se(T, i[1], i[2], e * 3);
            T.save();
            T.translate(e * 53, e * 36);
            Re(T, e * -29, e * -17.5, e * 58, e * 35, e * 5);
            T.restore();
            se(T, i[3], i[4], e * 4);
            T.save();
            T.translate(e * 53.5, e * 35.5);
            Re(T, e * -26.5, e * -15, e * 53, e * 30, e * 5);
            T.restore();
            se(T, i[5], i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 49, e * 60.5);
            T.bezierCurveTo(e * 44, e * 56.5, e * 44, e * 56.5, e * 39, e * 52.5);
            T.bezierCurveTo(e * 39, e * 46.5, e * 39, e * 46.5, e * 39, e * 40.5);
            T.bezierCurveTo(e * 44, e * 44, e * 44, e * 44, e * 49, e * 47.5);
            T.bezierCurveTo(e * 49, e * 54, e * 49, e * 54, e * 49, e * 60.5);
            T.closePath();
            se(T, i[7], i[6], e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 66, e * 40.5);
            T.bezierCurveTo(e * 66, e * 46.5, e * 66, e * 46.5, e * 66, e * 52.5);
            T.bezierCurveTo(e * 60.5, e * 56.5, e * 60.5, e * 56.5, e * 55, e * 60.5);
            T.bezierCurveTo(e * 56, e * 53, e * 56, e * 53, e * 57, e * 45.5);
            T.bezierCurveTo(e * 61.5, e * 43, e * 61.5, e * 43, e * 66, e * 40.5);
            T.closePath();
            se(T, i[7], i[6], e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 33.5);
            T.bezierCurveTo(e * 55.5, e * 41, e * 55.5, e * 41, e * 59, e * 48.5);
            T.bezierCurveTo(e * 56, e * 58, e * 56, e * 58, e * 53, e * 67.5);
            T.bezierCurveTo(e * 49, e * 58, e * 49, e * 58, e * 45, e * 48.5);
            T.bezierCurveTo(e * 48.5, e * 41, e * 48.5, e * 41, e * 52, e * 33.5);
            T.closePath();
            se(T, i[9], i[8], e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 52, e * 47.5);
            T.bezierCurveTo(e * 54.5, e * 50.5, e * 54.5, e * 50.5, e * 57, e * 53.5);
            T.bezierCurveTo(e * 55, e * 60, e * 55, e * 60, e * 53, e * 66.5);
            T.bezierCurveTo(e * 50.5, e * 61, e * 50.5, e * 61, e * 48, e * 55.5);
            T.bezierCurveTo(e * 50, e * 52, e * 50, e * 52, e * 52, e * 48.5);
            T.closePath();
            se(T, i[11], i[10], e * 3);
            return o;
        }
        function no(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 46;
            o.height = e * 140;
            T.scale(e * -1, e * 1);
            T.translate(e * -50, e * 40);
            T.translate(e * -20, 0);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 10, 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 22.599990844726562, e * 85.94999694824219);
            T.bezierCurveTo(e * 17.599990844726562, e * 83.94999694824219, e * 17.599990844726562, e * 83.94999694824219, e * 12.599990844726562, e * 81.94999694824219);
            T.bezierCurveTo(e * 19.599990844726562, e * 73.94999694824219, e * 2.5999908447265625, e * 22.949996948242188, e * 33.59999084472656, e * 7.9499969482421875);
            T.bezierCurveTo(e * 27.599990844726562, e * 28.949996948242188, e * 33.59999084472656, e * 26.949996948242188, e * 35.59999084472656, e * 32.94999694824219);
            T.bezierCurveTo(e * 25.599990844726562, e * 59.94999694824219, e * 26.599990844726562, e * 69.94999694824219, e * 29.599990844726562, e * 82.94999694824219);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * -1, 0);
            T.moveTo(e * 17.599990844726562, e * 89.75);
            T.bezierCurveTo(e * 24.599990844726562, e * 99.75, e * 24.599990844726562, e * 101.75, e * 20.599990844726562, e * 111.75);
            T.bezierCurveTo(e * 28.599990844726562, e * 110.75, e * 26.599990844726562, e * 112.75, e * 28.599990844726562, e * 111.75);
            T.bezierCurveTo(e * 30.599990844726562, e * 96.75, e * 32.59999084472656, e * 96.75, e * 30.599990844726562, e * 87.75);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * 1, 0);
            T.moveTo(e * 7.5999908447265625, e * 86.34999084472656);
            T.bezierCurveTo(e * 12.599990844726562, e * 85.34999084472656, e * 14.599990844726562, e * 84.34999084472656, e * 13.599990844726562, e * 84.34999084472656);
            T.bezierCurveTo(e * 21.599990844726562, e * 83.34999084472656, e * 21.599990844726562, e * 83.34999084472656, e * 29.599990844726562, e * 82.34999084472656);
            T.bezierCurveTo(e * 33.59999084472656, e * 85.84999084472656, e * 33.59999084472656, e * 85.84999084472656, e * 37.59999084472656, e * 89.34999084472656);
            T.bezierCurveTo(e * 34.09999084472656, e * 91.84999084472656, e * 34.09999084472656, e * 91.84999084472656, e * 30.599990844726562, e * 94.34999084472656);
            T.bezierCurveTo(e * 21.099990844726562, e * 93.34999084472656, e * 21.099990844726562, e * 93.34999084472656, e * 11.599990844726562, e * 92.34999084472656);
            T.closePath();
            se(T, i[0]);
            T.save();
            T.translate(e * 23.599990844726562, e * 110.94999694824219);
            T.rotate(0);
            Re(T, e * -7, e * -4, e * 14, e * 8, e * 10);
            T.restore();
            se(T, i[0]);
            T.translate(e * 0, 0);
            T.globalAlpha = 1;
            T.translate(e * 10, 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 22.599990844726562, e * 85.94999694824219);
            T.bezierCurveTo(e * 17.599990844726562, e * 83.94999694824219, e * 17.599990844726562, e * 83.94999694824219, e * 12.599990844726562, e * 81.94999694824219);
            T.bezierCurveTo(e * 19.599990844726562, e * 73.94999694824219, e * 2.5999908447265625, e * 22.949996948242188, e * 33.59999084472656, e * 7.9499969482421875);
            T.bezierCurveTo(e * 27.599990844726562, e * 28.949996948242188, e * 33.59999084472656, e * 26.949996948242188, e * 35.59999084472656, e * 32.94999694824219);
            T.bezierCurveTo(e * 25.599990844726562, e * 59.94999694824219, e * 26.599990844726562, e * 69.94999694824219, e * 29.599990844726562, e * 82.94999694824219);
            T.closePath();
            se(T, i[3], i[4], e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * -1, 0);
            T.moveTo(e * 17.599990844726562, e * 89.75);
            T.bezierCurveTo(e * 24.599990844726562, e * 99.75, e * 24.599990844726562, e * 101.75, e * 20.599990844726562, e * 111.75);
            T.bezierCurveTo(e * 28.599990844726562, e * 110.75, e * 26.599990844726562, e * 112.75, e * 28.599990844726562, e * 111.75);
            T.bezierCurveTo(e * 30.599990844726562, e * 96.75, e * 32.59999084472656, e * 96.75, e * 30.599990844726562, e * 87.75);
            T.closePath();
            se(T, i[1], i[2], e * 3);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * 1, 0);
            T.moveTo(e * 7.5999908447265625, e * 86.34999084472656);
            T.bezierCurveTo(e * 12.599990844726562, e * 85.34999084472656, e * 14.599990844726562, e * 84.34999084472656, e * 13.599990844726562, e * 84.34999084472656);
            T.bezierCurveTo(e * 21.599990844726562, e * 83.34999084472656, e * 21.599990844726562, e * 83.34999084472656, e * 29.599990844726562, e * 82.34999084472656);
            T.bezierCurveTo(e * 33.59999084472656, e * 85.84999084472656, e * 33.59999084472656, e * 85.84999084472656, e * 37.59999084472656, e * 89.34999084472656);
            T.bezierCurveTo(e * 34.09999084472656, e * 91.84999084472656, e * 34.09999084472656, e * 91.84999084472656, e * 30.599990844726562, e * 94.34999084472656);
            T.bezierCurveTo(e * 21.099990844726562, e * 93.34999084472656, e * 21.099990844726562, e * 93.34999084472656, e * 11.599990844726562, e * 92.34999084472656);
            T.closePath();
            se(T, i[1], i[2], e * 3);
            T.save();
            T.translate(e * 23.599990844726562, e * 110.94999694824219);
            T.rotate(0);
            Re(T, e * -7, e * -4, e * 14, e * 8, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 3);
            return o;
        }
        function ao(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 65;
            o.height = e * 131;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(3, 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 21.25, e * 88.9375);
            T.bezierCurveTo(e * 19.25, e * 57.9375, e * 19.25, e * 57.9375, e * 17.25, e * 26.9375);
            T.bezierCurveTo(e * 24.25, e * 20.9375, e * 24.25, e * 20.9375, e * 31.25, e * 14.9375);
            T.bezierCurveTo(e * 32.75, e * 54.4375, e * 32.75, e * 54.4375, e * 34.25, e * 93.9375);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30.25, e * 5.9375);
            T.bezierCurveTo(e * 39.25, e * 14.9375, e * 39.25, e * 14.9375, e * 48.25, e * 23.9375);
            T.bezierCurveTo(e * 44.75, e * 56.4375, e * 44.75, e * 56.4375, e * 41.25, e * 88.9375);
            T.bezierCurveTo(e * 36.25, e * 88.9375, e * 36.25, e * 88.9375, e * 31.25, e * 88.9375);
            T.bezierCurveTo(e * 30.75, e * 47.9375, e * 30.75, e * 47.9375, e * 30.25, e * 6.9375);
            T.closePath();
            se(T, i[0], i[0], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 7.25, e * 85.4375);
            T.bezierCurveTo(e * 31.75, e * 85.4375, e * 31.75, e * 85.4375, e * 56.25, e * 85.4375);
            T.bezierCurveTo(e * 51.25, e * 91.9375, e * 51.25, e * 91.9375, e * 46.25, e * 98.4375);
            T.bezierCurveTo(e * 30.25, e * 98.4375, e * 30.25, e * 98.4375, e * 14.25, e * 98.4375);
            T.closePath();
            se(T, i[0], i[0], e * 4);
            T.save();
            T.translate(e * 31.25, e * 108.9375);
            Re(T, e * -6, e * -14.5, e * 12, e * 29, e * 10);
            T.restore();
            T.globalAlpha = 1;
            T.translate(-3, 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 21.25, e * 88.9375);
            T.bezierCurveTo(e * 19.25, e * 57.9375, e * 19.25, e * 57.9375, e * 17.25, e * 26.9375);
            T.bezierCurveTo(e * 24.25, e * 20.9375, e * 24.25, e * 20.9375, e * 31.25, e * 14.9375);
            T.bezierCurveTo(e * 32.75, e * 54.4375, e * 32.75, e * 54.4375, e * 34.25, e * 93.9375);
            T.closePath();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 30.25, e * 5.9375);
            T.bezierCurveTo(e * 39.25, e * 14.9375, e * 39.25, e * 14.9375, e * 48.25, e * 23.9375);
            T.bezierCurveTo(e * 44.75, e * 56.4375, e * 44.75, e * 56.4375, e * 41.25, e * 88.9375);
            T.bezierCurveTo(e * 36.25, e * 88.9375, e * 36.25, e * 88.9375, e * 31.25, e * 88.9375);
            T.bezierCurveTo(e * 30.75, e * 47.9375, e * 30.75, e * 47.9375, e * 30.25, e * 6.9375);
            T.closePath();
            se(T, i[2], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 7.25, e * 85.4375);
            T.bezierCurveTo(e * 31.75, e * 85.4375, e * 31.75, e * 85.4375, e * 56.25, e * 85.4375);
            T.bezierCurveTo(e * 51.25, e * 91.9375, e * 51.25, e * 91.9375, e * 46.25, e * 98.4375);
            T.bezierCurveTo(e * 30.25, e * 98.4375, e * 30.25, e * 98.4375, e * 14.25, e * 98.4375);
            T.closePath();
            se(T, i[4], i[5], e * 4);
            T.save();
            T.translate(e * 31.25, e * 108.9375);
            Re(T, e * -6, e * -14.5, e * 12, e * 29, e * 10);
            T.restore();
            se(T, i[4], i[5], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31.25, e * 73.4375);
            T.bezierCurveTo(e * 33.25, e * 77.9375, e * 33.25, e * 77.9375, e * 35.25, e * 82.4375);
            T.bezierCurveTo(e * 33.25, e * 87.4375, e * 33.25, e * 87.4375, e * 31.25, e * 92.4375);
            T.bezierCurveTo(e * 29.25, e * 87.9375, e * 29.25, e * 87.9375, e * 27.25, e * 83.4375);
            T.closePath();
            se(T, i[3], i[1], e * 2);
            return o;
        }
        function Io(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 120;
            var r = e * 140;
            i.width = T;
            i.height = r;
            i.width = e * 130;
            i.height = e * 120;
            Re(o, e * 10, e * 12, e * 110, e * 90, e * 10);
            se(o, t[0]);
            Re(o, e * 10, e * 5, e * 110, e * 90, e * 10);
            se(o, t[1], t[2], e * 4);
            var a = Ae(-window.Math.PI / 5, nt(e * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
            o.drawImage(a, e * 12, e * 18);
            a = Ae(n, Oi(e * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
            o.drawImage(a, e * 36, e * 16);
            return i;
        }
        function Eo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 137;
            o.height = e * 129;
            T.globalAlpha = 0.5;
            he(T, e * 69, e * 64, e * 48.16637831516918);
            se(T, i[1]);
            T.globalAlpha = 0.7;
            he(T, e * 69, e * 64, e * 38.23105625617661);
            se(T, i[2]);
            T.globalAlpha = 0.7;
            he(T, e * 69, e * 64, e * 32.01562118716424);
            se(T, i[2], i[3], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72, e * 41);
            T.bezierCurveTo(e * 52, e * 41, e * 48, e * 50, e * 45, e * 58);
            T.bezierCurveTo(e * 43, e * 67, e * 45, e * 68, e * 46, e * 72);
            T.bezierCurveTo(e * 52, e * 53, e * 60, e * 48, e * 72, e * 42);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 93, e * 62);
            T.bezierCurveTo(e * 95, e * 72, e * 90, e * 81, e * 81, e * 87);
            T.bezierCurveTo(e * 74, e * 91, e * 69, e * 89, e * 64, e * 88);
            T.bezierCurveTo(e * 77, e * 83, e * 84, e * 82, e * 92, e * 62);
            T.closePath();
            se(T, i[3]);
            return o;
        }
        function _o(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 137;
            o.height = e * 129;
            T.globalAlpha = 0.4;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42.000030517578125, e * 41.17047119140625);
            T.bezierCurveTo(e * 45.000030517578125, e * 38.17047119140625, e * 49.000030517578125, e * 37.17047119140625, e * 62.000030517578125, e * 38.17047119140625);
            T.bezierCurveTo(e * 78.00003051757812, e * 38.17047119140625, e * 78.00003051757812, e * 38.17047119140625, e * 94.00003051757812, e * 38.17047119140625);
            T.bezierCurveTo(e * 100.00003051757812, e * 38.17047119140625, e * 102.00003051757812, e * 38.17047119140625, e * 101.00003051757812, e * 47.17047119140625);
            T.bezierCurveTo(e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 80.17047119140625);
            T.bezierCurveTo(e * 102.00003051757812, e * 84.17047119140625, e * 100.00003051757812, e * 86.17047119140625, e * 95.00003051757812, e * 88.17047119140625);
            T.bezierCurveTo(e * 84.00003051757812, e * 94.17047119140625, e * 89.00003051757812, e * 94.17047119140625, e * 79.00003051757812, e * 94.17047119140625);
            T.bezierCurveTo(e * 59.500030517578125, e * 94.17047119140625, e * 59.500030517578125, e * 94.17047119140625, e * 40.000030517578125, e * 94.17047119140625);
            T.bezierCurveTo(e * 33.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 86.17047119140625);
            T.bezierCurveTo(e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 53.17047119140625);
            T.bezierCurveTo(e * 33.000030517578125, e * 47.17047119140625, e * 34.000030517578125, e * 47.17047119140625, e * 40.000030517578125, e * 42.17047119140625);
            T.closePath();
            se(T, undefined, i[2], e * 40);
            T.globalAlpha = 0.4;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42.000030517578125, e * 41.17047119140625);
            T.bezierCurveTo(e * 45.000030517578125, e * 38.17047119140625, e * 49.000030517578125, e * 37.17047119140625, e * 62.000030517578125, e * 38.17047119140625);
            T.bezierCurveTo(e * 78.00003051757812, e * 38.17047119140625, e * 78.00003051757812, e * 38.17047119140625, e * 94.00003051757812, e * 38.17047119140625);
            T.bezierCurveTo(e * 100.00003051757812, e * 38.17047119140625, e * 102.00003051757812, e * 38.17047119140625, e * 101.00003051757812, e * 47.17047119140625);
            T.bezierCurveTo(e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 80.17047119140625);
            T.bezierCurveTo(e * 102.00003051757812, e * 84.17047119140625, e * 100.00003051757812, e * 86.17047119140625, e * 95.00003051757812, e * 88.17047119140625);
            T.bezierCurveTo(e * 84.00003051757812, e * 94.17047119140625, e * 89.00003051757812, e * 94.17047119140625, e * 79.00003051757812, e * 94.17047119140625);
            T.bezierCurveTo(e * 59.500030517578125, e * 94.17047119140625, e * 59.500030517578125, e * 94.17047119140625, e * 40.000030517578125, e * 94.17047119140625);
            T.bezierCurveTo(e * 33.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 86.17047119140625);
            T.bezierCurveTo(e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 53.17047119140625);
            T.bezierCurveTo(e * 33.000030517578125, e * 47.17047119140625, e * 34.000030517578125, e * 47.17047119140625, e * 40.000030517578125, e * 42.17047119140625);
            T.closePath();
            se(T, undefined, i[1], e * 20);
            T.globalAlpha = 0.8;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42.000030517578125, e * 41.17047119140625);
            T.bezierCurveTo(e * 45.000030517578125, e * 38.17047119140625, e * 49.000030517578125, e * 37.17047119140625, e * 62.000030517578125, e * 38.17047119140625);
            T.bezierCurveTo(e * 78.00003051757812, e * 38.17047119140625, e * 78.00003051757812, e * 38.17047119140625, e * 94.00003051757812, e * 38.17047119140625);
            T.bezierCurveTo(e * 100.00003051757812, e * 38.17047119140625, e * 102.00003051757812, e * 38.17047119140625, e * 101.00003051757812, e * 47.17047119140625);
            T.bezierCurveTo(e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 80.17047119140625);
            T.bezierCurveTo(e * 102.00003051757812, e * 84.17047119140625, e * 100.00003051757812, e * 86.17047119140625, e * 95.00003051757812, e * 88.17047119140625);
            T.bezierCurveTo(e * 84.00003051757812, e * 94.17047119140625, e * 89.00003051757812, e * 94.17047119140625, e * 79.00003051757812, e * 94.17047119140625);
            T.bezierCurveTo(e * 59.500030517578125, e * 94.17047119140625, e * 59.500030517578125, e * 94.17047119140625, e * 40.000030517578125, e * 94.17047119140625);
            T.bezierCurveTo(e * 33.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 86.17047119140625);
            T.bezierCurveTo(e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 53.17047119140625);
            T.bezierCurveTo(e * 33.000030517578125, e * 47.17047119140625, e * 34.000030517578125, e * 47.17047119140625, e * 40.000030517578125, e * 42.17047119140625);
            T.closePath();
            se(T, i[0], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 51.000030517578125, e * 37.9886474609375);
            T.bezierCurveTo(e * 51.000030517578125, e * 61.9886474609375, e * 51.000030517578125, e * 61.9886474609375, e * 51.000030517578125, e * 85.9886474609375);
            T.bezierCurveTo(e * 75.50003051757812, e * 85.9886474609375, e * 75.50003051757812, e * 85.9886474609375, e * 100.00003051757812, e * 85.9886474609375);
            T.bezierCurveTo(e * 100.00003051757812, e * 61.9886474609375, e * 100.00003051757812, e * 61.9886474609375, e * 100.00003051757812, e * 37.9886474609375);
            T.bezierCurveTo(e * 76.00003051757812, e * 37.9886474609375, e * 76.00003051757812, e * 37.9886474609375, e * 52.000030517578125, e * 37.9886474609375);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 99.00003051757812, e * 38.9886474609375);
            T.bezierCurveTo(e * 93.50003051757812, e * 44.9886474609375, e * 93.50003051757812, e * 44.9886474609375, e * 88.00003051757812, e * 50.9886474609375);
            T.bezierCurveTo(e * 88.00003051757812, e * 72.4886474609375, e * 88.00003051757812, e * 72.4886474609375, e * 88.00003051757812, e * 93.9886474609375);
            T.bezierCurveTo(e * 94.00003051757812, e * 90.4886474609375, e * 94.00003051757812, e * 90.4886474609375, e * 100.00003051757812, e * 86.9886474609375);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87.00003051757812, e * 49.625);
            T.bezierCurveTo(e * 61.000030517578125, e * 49.625, e * 61.000030517578125, e * 49.625, e * 35.000030517578125, e * 49.625);
            T.bezierCurveTo(e * 35.000030517578125, e * 70.625, e * 35.000030517578125, e * 70.625, e * 35.000030517578125, e * 91.625);
            T.bezierCurveTo(e * 60.500030517578125, e * 91.625, e * 60.500030517578125, e * 91.625, e * 86.00003051757812, e * 91.625);
            T.bezierCurveTo(e * 86.50003051757812, e * 70.625, e * 86.50003051757812, e * 70.625, e * 87.00003051757812, e * 49.625);
            T.closePath();
            se(T, i[1], i[3], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 47.000030517578125, e * 36.625);
            T.bezierCurveTo(e * 73.00003051757812, e * 37.125, e * 73.00003051757812, e * 37.125, e * 99.00003051757812, e * 37.625);
            T.bezierCurveTo(e * 93.50003051757812, e * 44.125, e * 93.50003051757812, e * 44.125, e * 88.00003051757812, e * 50.625);
            T.bezierCurveTo(e * 60.500030517578125, e * 50.125, e * 60.500030517578125, e * 50.125, e * 33.000030517578125, e * 49.625);
            T.closePath();
            se(T, i[1], i[3], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 53.000030517578125, e * 52.625);
            T.bezierCurveTo(e * 40.000030517578125, e * 54.625, e * 39.000030517578125, e * 59.625, e * 40.000030517578125, e * 67.625);
            T.bezierCurveTo(e * 45.000030517578125, e * 59.625, e * 48.000030517578125, e * 58.625, e * 54.000030517578125, e * 53.625);
            T.closePath();
            se(T, i[3]);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42.000030517578125, e * 41.17047119140625);
            T.bezierCurveTo(e * 45.000030517578125, e * 38.17047119140625, e * 49.000030517578125, e * 37.17047119140625, e * 62.000030517578125, e * 38.17047119140625);
            T.bezierCurveTo(e * 78.00003051757812, e * 38.17047119140625, e * 78.00003051757812, e * 38.17047119140625, e * 94.00003051757812, e * 38.17047119140625);
            T.bezierCurveTo(e * 100.00003051757812, e * 38.17047119140625, e * 102.00003051757812, e * 38.17047119140625, e * 101.00003051757812, e * 47.17047119140625);
            T.bezierCurveTo(e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 80.17047119140625);
            T.bezierCurveTo(e * 102.00003051757812, e * 84.17047119140625, e * 100.00003051757812, e * 86.17047119140625, e * 95.00003051757812, e * 88.17047119140625);
            T.bezierCurveTo(e * 84.00003051757812, e * 94.17047119140625, e * 89.00003051757812, e * 94.17047119140625, e * 79.00003051757812, e * 94.17047119140625);
            T.bezierCurveTo(e * 59.500030517578125, e * 94.17047119140625, e * 59.500030517578125, e * 94.17047119140625, e * 40.000030517578125, e * 94.17047119140625);
            T.bezierCurveTo(e * 33.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 86.17047119140625);
            T.bezierCurveTo(e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 53.17047119140625);
            T.bezierCurveTo(e * 33.000030517578125, e * 47.17047119140625, e * 34.000030517578125, e * 47.17047119140625, e * 40.000030517578125, e * 42.17047119140625);
            T.closePath();
            se(T, undefined, i[3], e * 4);
            return o;
        }
        function so(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 376;
            i.height = e * 371;
            o.globalAlpha = 0.5;
            o.translate(e * 5, e * 5);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 191.633544921875, e * 123.98580932617188);
            o.bezierCurveTo(e * 215.633544921875, e * 85.98580932617188, e * 187.633544921875, e * 71.98580932617188, e * 202.633544921875, e * 19.985809326171875);
            o.bezierCurveTo(e * 231.633544921875, e * 68.98580932617188, e * 253.633544921875, e * 71.98580932617188, e * 256.633544921875, e * 93.98580932617188);
            o.bezierCurveTo(e * 306.633544921875, e * 64.98580932617188, e * 319.633544921875, e * 61.985809326171875, e * 350.633544921875, e * 58.985809326171875);
            o.bezierCurveTo(e * 280.633544921875, e * 86.98580932617188, e * 281.633544921875, e * 106.98580932617188, e * 268.633544921875, e * 130.98580932617188);
            o.bezierCurveTo(e * 295.633544921875, e * 158.98580932617188, e * 328.633544921875, e * 155.98580932617188, e * 353.633544921875, e * 90.98580932617188);
            o.bezierCurveTo(e * 371.633544921875, e * 158.98580932617188, e * 337.633544921875, e * 210.98580932617188, e * 286.633544921875, e * 209.98580932617188);
            o.bezierCurveTo(e * 323.633544921875, e * 230.98580932617188, e * 317.633544921875, e * 274.9858093261719, e * 356.633544921875, e * 305.9858093261719);
            o.bezierCurveTo(e * 288.633544921875, e * 297.9858093261719, e * 288.633544921875, e * 265.9858093261719, e * 275.633544921875, e * 266.9858093261719);
            o.bezierCurveTo(e * 280.633544921875, e * 294.9858093261719, e * 315.633544921875, e * 306.9858093261719, e * 336.633544921875, e * 316.9858093261719);
            o.bezierCurveTo(e * 295.633544921875, e * 318.9858093261719, e * 264.633544921875, e * 302.9858093261719, e * 254.633544921875, e * 289.9858093261719);
            o.bezierCurveTo(e * 252.633544921875, e * 301.9858093261719, e * 224.633544921875, e * 315.9858093261719, e * 201.633544921875, e * 356.9858093261719);
            o.bezierCurveTo(e * 195.633544921875, e * 313.9858093261719, e * 195.633544921875, e * 308.9858093261719, e * 196.633544921875, e * 307.9858093261719);
            o.bezierCurveTo(e * 197.633544921875, e * 289.9858093261719, e * 207.633544921875, e * 283.9858093261719, e * 195.633544921875, e * 258.9858093261719);
            o.bezierCurveTo(e * 182.633544921875, e * 282.9858093261719, e * 190.633544921875, e * 287.9858093261719, e * 193.633544921875, e * 297.9858093261719);
            o.bezierCurveTo(e * 195.633544921875, e * 306.9858093261719, e * 191.633544921875, e * 334.9858093261719, e * 187.633544921875, e * 354.9858093261719);
            o.bezierCurveTo(e * 165.633544921875, e * 320.9858093261719, e * 138.633544921875, e * 307.9858093261719, e * 135.633544921875, e * 288.9858093261719);
            o.bezierCurveTo(e * 110.633544921875, e * 318.9858093261719, e * 68.633544921875, e * 323.9858093261719, e * 49.633544921875, e * 320.9858093261719);
            o.bezierCurveTo(e * 88.633544921875, e * 308.9858093261719, e * 108.633544921875, e * 284.9858093261719, e * 118.633544921875, e * 258.9858093261719);
            o.bezierCurveTo(e * 86.633544921875, e * 264.9858093261719, e * 75.633544921875, e * 310.9858093261719, e * 19.633544921875, e * 304.9858093261719);
            o.bezierCurveTo(e * 54.633544921875, e * 276.9858093261719, e * 59.633544921875, e * 214.98580932617188, e * 105.633544921875, e * 205.98580932617188);
            o.bezierCurveTo(e * 14.633544921875, e * 201.98580932617188, e * 24.633544921875, e * 141.98580932617188, e * 25.633544921875, e * 82.98580932617188);
            o.bezierCurveTo(e * 49.633544921875, e * 168.98580932617188, e * 87.633544921875, e * 141.98580932617188, e * 112.633544921875, e * 123.98580932617188);
            o.bezierCurveTo(e * 95.633544921875, e * 75.98580932617188, e * 70.633544921875, e * 68.98580932617188, e * 35.633544921875, e * 50.985809326171875);
            o.bezierCurveTo(e * 70.633544921875, e * 53.985809326171875, e * 102.633544921875, e * 65.98580932617188, e * 125.633544921875, e * 84.98580932617188);
            o.bezierCurveTo(e * 133.633544921875, e * 69.98580932617188, e * 166.633544921875, e * 42.985809326171875, e * 176.633544921875, e * 21.985809326171875);
            o.bezierCurveTo(e * 185.633544921875, e * 49.985809326171875, e * 168.633544921875, e * 95.98580932617188, e * 191.633544921875, e * 121.98580932617188);
            o.closePath();
            se(o, t[0]);
            o.globalAlpha = 1;
            o.translate(e * -4, e * -5);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 191.633544921875, e * 123.98580932617188);
            o.bezierCurveTo(e * 215.633544921875, e * 85.98580932617188, e * 187.633544921875, e * 71.98580932617188, e * 202.633544921875, e * 19.985809326171875);
            o.bezierCurveTo(e * 231.633544921875, e * 68.98580932617188, e * 253.633544921875, e * 71.98580932617188, e * 256.633544921875, e * 93.98580932617188);
            o.bezierCurveTo(e * 306.633544921875, e * 64.98580932617188, e * 319.633544921875, e * 61.985809326171875, e * 350.633544921875, e * 58.985809326171875);
            o.bezierCurveTo(e * 280.633544921875, e * 86.98580932617188, e * 281.633544921875, e * 106.98580932617188, e * 268.633544921875, e * 130.98580932617188);
            o.bezierCurveTo(e * 295.633544921875, e * 158.98580932617188, e * 328.633544921875, e * 155.98580932617188, e * 353.633544921875, e * 90.98580932617188);
            o.bezierCurveTo(e * 371.633544921875, e * 158.98580932617188, e * 337.633544921875, e * 210.98580932617188, e * 286.633544921875, e * 209.98580932617188);
            o.bezierCurveTo(e * 323.633544921875, e * 230.98580932617188, e * 317.633544921875, e * 274.9858093261719, e * 356.633544921875, e * 305.9858093261719);
            o.bezierCurveTo(e * 288.633544921875, e * 297.9858093261719, e * 288.633544921875, e * 265.9858093261719, e * 275.633544921875, e * 266.9858093261719);
            o.bezierCurveTo(e * 280.633544921875, e * 294.9858093261719, e * 315.633544921875, e * 306.9858093261719, e * 336.633544921875, e * 316.9858093261719);
            o.bezierCurveTo(e * 295.633544921875, e * 318.9858093261719, e * 264.633544921875, e * 302.9858093261719, e * 254.633544921875, e * 289.9858093261719);
            o.bezierCurveTo(e * 252.633544921875, e * 301.9858093261719, e * 224.633544921875, e * 315.9858093261719, e * 201.633544921875, e * 356.9858093261719);
            o.bezierCurveTo(e * 195.633544921875, e * 313.9858093261719, e * 195.633544921875, e * 308.9858093261719, e * 196.633544921875, e * 307.9858093261719);
            o.bezierCurveTo(e * 197.633544921875, e * 289.9858093261719, e * 207.633544921875, e * 283.9858093261719, e * 195.633544921875, e * 258.9858093261719);
            o.bezierCurveTo(e * 182.633544921875, e * 282.9858093261719, e * 190.633544921875, e * 287.9858093261719, e * 193.633544921875, e * 297.9858093261719);
            o.bezierCurveTo(e * 195.633544921875, e * 306.9858093261719, e * 191.633544921875, e * 334.9858093261719, e * 187.633544921875, e * 354.9858093261719);
            o.bezierCurveTo(e * 165.633544921875, e * 320.9858093261719, e * 138.633544921875, e * 307.9858093261719, e * 135.633544921875, e * 288.9858093261719);
            o.bezierCurveTo(e * 110.633544921875, e * 318.9858093261719, e * 68.633544921875, e * 323.9858093261719, e * 49.633544921875, e * 320.9858093261719);
            o.bezierCurveTo(e * 88.633544921875, e * 308.9858093261719, e * 108.633544921875, e * 284.9858093261719, e * 118.633544921875, e * 258.9858093261719);
            o.bezierCurveTo(e * 86.633544921875, e * 264.9858093261719, e * 75.633544921875, e * 310.9858093261719, e * 19.633544921875, e * 304.9858093261719);
            o.bezierCurveTo(e * 54.633544921875, e * 276.9858093261719, e * 59.633544921875, e * 214.98580932617188, e * 105.633544921875, e * 205.98580932617188);
            o.bezierCurveTo(e * 14.633544921875, e * 201.98580932617188, e * 24.633544921875, e * 141.98580932617188, e * 25.633544921875, e * 82.98580932617188);
            o.bezierCurveTo(e * 49.633544921875, e * 168.98580932617188, e * 87.633544921875, e * 141.98580932617188, e * 112.633544921875, e * 123.98580932617188);
            o.bezierCurveTo(e * 95.633544921875, e * 75.98580932617188, e * 70.633544921875, e * 68.98580932617188, e * 35.633544921875, e * 50.985809326171875);
            o.bezierCurveTo(e * 70.633544921875, e * 53.985809326171875, e * 102.633544921875, e * 65.98580932617188, e * 125.633544921875, e * 84.98580932617188);
            o.bezierCurveTo(e * 133.633544921875, e * 69.98580932617188, e * 166.633544921875, e * 42.985809326171875, e * 176.633544921875, e * 21.985809326171875);
            o.bezierCurveTo(e * 185.633544921875, e * 49.985809326171875, e * 168.633544921875, e * 95.98580932617188, e * 191.633544921875, e * 121.98580932617188);
            o.closePath();
            se(o, undefined, t[1], e * 12);
            o.translate(e * -1, e * 0);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 270.633544921875, e * 88.98580932617188);
            o.bezierCurveTo(e * 296.633544921875, e * 65.98580932617188, e * 318.633544921875, e * 62.985809326171875, e * 348.633544921875, e * 57.985809326171875);
            o.bezierCurveTo(e * 309.633544921875, e * 76.98580932617188, e * 291.633544921875, e * 88.98580932617188, e * 280.633544921875, e * 99.98580932617188);
            o.closePath();
            se(o, t[4], t[5], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 275.633544921875, e * 281.9858093261719);
            o.bezierCurveTo(e * 303.633544921875, e * 308.9858093261719, e * 321.633544921875, e * 308.9858093261719, e * 335.633544921875, e * 315.9858093261719);
            o.bezierCurveTo(e * 305.633544921875, e * 320.9858093261719, e * 278.633544921875, e * 307.9858093261719, e * 264.633544921875, e * 293.9858093261719);
            o.closePath();
            se(o, t[4], t[5], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 124.633544921875, e * 291.9858093261719);
            o.bezierCurveTo(e * 106.633544921875, e * 316.9858093261719, e * 72.633544921875, e * 325.9858093261719, e * 53.633544921875, e * 319.9858093261719);
            o.bezierCurveTo(e * 83.633544921875, e * 308.9858093261719, e * 97.633544921875, e * 298.9858093261719, e * 112.633544921875, e * 284.9858093261719);
            o.closePath();
            se(o, t[4], t[5], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 113.633544921875, e * 80.98580932617188);
            o.bezierCurveTo(e * 91.633544921875, e * 54.985809326171875, e * 72.633544921875, e * 56.985809326171875, e * 36.633544921875, e * 49.985809326171875);
            o.bezierCurveTo(e * 87.633544921875, e * 72.98580932617188, e * 95.633544921875, e * 82.98580932617188, e * 106.633544921875, e * 96.98580932617188);
            o.closePath();
            se(o, t[4], t[5], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 202.633544921875, e * 20.985809326171875);
            o.bezierCurveTo(e * 219.633544921875, e * 49.985809326171875, e * 259.633544921875, e * 80.98580932617188, e * 255.633544921875, e * 92.98580932617188);
            o.bezierCurveTo(e * 268.633544921875, e * 86.98580932617188, e * 265.633544921875, e * 87.98580932617188, e * 275.633544921875, e * 82.98580932617188);
            o.bezierCurveTo(e * 283.633544921875, e * 87.98580932617188, e * 283.633544921875, e * 87.98580932617188, e * 291.633544921875, e * 92.98580932617188);
            o.bezierCurveTo(e * 269.633544921875, e * 116.98580932617188, e * 270.633544921875, e * 124.98580932617188, e * 267.633544921875, e * 130.98580932617188);
            o.bezierCurveTo(e * 307.633544921875, e * 168.98580932617188, e * 339.633544921875, e * 132.98580932617188, e * 352.633544921875, e * 93.98580932617188);
            o.bezierCurveTo(e * 366.633544921875, e * 145.98580932617188, e * 345.633544921875, e * 207.98580932617188, e * 286.633544921875, e * 208.98580932617188);
            o.bezierCurveTo(e * 315.633544921875, e * 223.98580932617188, e * 327.633544921875, e * 287.9858093261719, e * 355.633544921875, e * 305.9858093261719);
            o.bezierCurveTo(e * 293.633544921875, e * 298.9858093261719, e * 293.633544921875, e * 275.9858093261719, e * 276.633544921875, e * 266.9858093261719);
            o.bezierCurveTo(e * 274.633544921875, e * 282.9858093261719, e * 287.633544921875, e * 288.9858093261719, e * 295.633544921875, e * 296.9858093261719);
            o.bezierCurveTo(e * 287.133544921875, e * 302.4858093261719, e * 287.133544921875, e * 302.4858093261719, e * 278.633544921875, e * 307.9858093261719);
            o.bezierCurveTo(e * 261.633544921875, e * 297.9858093261719, e * 258.633544921875, e * 293.9858093261719, e * 255.633544921875, e * 290.9858093261719);
            o.bezierCurveTo(e * 249.633544921875, e * 301.9858093261719, e * 225.633544921875, e * 320.9858093261719, e * 202.633544921875, e * 354.9858093261719);
            o.bezierCurveTo(e * 195.633544921875, e * 318.9858093261719, e * 196.633544921875, e * 306.9858093261719, e * 198.633544921875, e * 300.9858093261719);
            o.bezierCurveTo(e * 209.633544921875, e * 268.9858093261719, e * 199.633544921875, e * 266.9858093261719, e * 195.633544921875, e * 256.9858093261719);
            o.bezierCurveTo(e * 183.633544921875, e * 274.9858093261719, e * 182.633544921875, e * 281.9858093261719, e * 192.633544921875, e * 305.9858093261719);
            o.bezierCurveTo(e * 194.633544921875, e * 317.9858093261719, e * 191.633544921875, e * 336.9858093261719, e * 186.633544921875, e * 351.9858093261719);
            o.bezierCurveTo(e * 166.633544921875, e * 318.9858093261719, e * 141.633544921875, e * 303.9858093261719, e * 136.633544921875, e * 286.9858093261719);
            o.bezierCurveTo(e * 122.633544921875, e * 303.9858093261719, e * 115.633544921875, e * 305.9858093261719, e * 109.633544921875, e * 306.9858093261719);
            o.bezierCurveTo(e * 101.133544921875, e * 301.9858093261719, e * 94.633544921875, e * 297.9858093261719, e * 92.633544921875, e * 296.9858093261719);
            o.bezierCurveTo(e * 116.633544921875, e * 277.9858093261719, e * 116.633544921875, e * 266.9858093261719, e * 119.633544921875, e * 257.9858093261719);
            o.bezierCurveTo(e * 107.633544921875, e * 257.9858093261719, e * 65.633544921875, e * 308.9858093261719, e * 24.633544921875, e * 303.9858093261719);
            o.bezierCurveTo(e * 51.633544921875, e * 275.9858093261719, e * 64.633544921875, e * 220.98580932617188, e * 108.633544921875, e * 205.98580932617188);
            o.bezierCurveTo(e * 14.633544921875, e * 198.98580932617188, e * 26.633544921875, e * 142.98580932617188, e * 25.633544921875, e * 86.98580932617188);
            o.bezierCurveTo(e * 41.633544921875, e * 155.98580932617188, e * 81.633544921875, e * 148.98580932617188, e * 113.633544921875, e * 124.98580932617188);
            o.bezierCurveTo(e * 102.633544921875, e * 93.98580932617188, e * 95.633544921875, e * 88.98580932617188, e * 89.633544921875, e * 81.98580932617188);
            o.bezierCurveTo(e * 97.633544921875, e * 76.48580932617188, e * 97.633544921875, e * 76.48580932617188, e * 105.633544921875, e * 70.98580932617188);
            o.bezierCurveTo(e * 120.633544921875, e * 78.98580932617188, e * 121.633544921875, e * 81.98580932617188, e * 124.633544921875, e * 86.98580932617188);
            o.bezierCurveTo(e * 132.633544921875, e * 71.98580932617188, e * 160.633544921875, e * 56.985809326171875, e * 175.633544921875, e * 23.985809326171875);
            o.bezierCurveTo(e * 182.633544921875, e * 53.985809326171875, e * 170.633544921875, e * 102.98580932617188, e * 191.633544921875, e * 125.98580932617188);
            o.bezierCurveTo(e * 214.633544921875, e * 89.98580932617188, e * 192.633544921875, e * 58.985809326171875, e * 202.633544921875, e * 20.985809326171875);
            o.closePath();
            se(o, t[2], t[3], e * 5);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 203.633544921875, e * 21.985809326171875);
            o.bezierCurveTo(e * 223.633544921875, e * 63.985809326171875, e * 227.633544921875, e * 72.98580932617188, e * 235.633544921875, e * 98.98580932617188);
            o.bezierCurveTo(e * 241.633544921875, e * 123.98580932617188, e * 225.633544921875, e * 138.98580932617188, e * 196.633544921875, e * 122.98580932617188);
            o.bezierCurveTo(e * 213.633544921875, e * 93.98580932617188, e * 199.633544921875, e * 49.985809326171875, e * 203.633544921875, e * 26.985809326171875);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 175.633544921875, e * 25.985809326171875);
            o.bezierCurveTo(e * 176.633544921875, e * 51.985809326171875, e * 171.633544921875, e * 88.98580932617188, e * 186.633544921875, e * 121.98580932617188);
            o.bezierCurveTo(e * 156.633544921875, e * 144.98580932617188, e * 139.633544921875, e * 120.98580932617188, e * 147.633544921875, e * 97.98580932617188);
            o.bezierCurveTo(e * 152.633544921875, e * 77.98580932617188, e * 162.633544921875, e * 60.985809326171875, e * 176.633544921875, e * 25.985809326171875);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 26.633544921875, e * 96.98580932617188);
            o.bezierCurveTo(e * 38.633544921875, e * 151.98580932617188, e * 61.633544921875, e * 161.98580932617188, e * 88.633544921875, e * 168.98580932617188);
            o.bezierCurveTo(e * 117.633544921875, e * 177.98580932617188, e * 113.633544921875, e * 185.98580932617188, e * 106.633544921875, e * 204.98580932617188);
            o.bezierCurveTo(e * 32.633544921875, e * 204.98580932617188, e * 25.633544921875, e * 149.98580932617188, e * 25.633544921875, e * 97.98580932617188);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 351.633544921875, e * 99.98580932617188);
            o.bezierCurveTo(e * 365.633544921875, e * 161.98580932617188, e * 333.633544921875, e * 203.98580932617188, e * 287.633544921875, e * 207.98580932617188);
            o.bezierCurveTo(e * 255.633544921875, e * 208.98580932617188, e * 266.633544921875, e * 174.98580932617188, e * 285.633544921875, e * 176.98580932617188);
            o.bezierCurveTo(e * 313.633544921875, e * 178.98580932617188, e * 348.633544921875, e * 135.98580932617188, e * 353.633544921875, e * 99.98580932617188);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 350.633544921875, e * 302.9858093261719);
            o.bezierCurveTo(e * 310.633544921875, e * 280.9858093261719, e * 314.633544921875, e * 244.98580932617188, e * 292.633544921875, e * 230.98580932617188);
            o.bezierCurveTo(e * 272.633544921875, e * 215.98580932617188, e * 263.633544921875, e * 222.98580932617188, e * 256.633544921875, e * 236.98580932617188);
            o.bezierCurveTo(e * 251.633544921875, e * 249.98580932617188, e * 264.633544921875, e * 255.98580932617188, e * 279.633544921875, e * 268.9858093261719);
            o.bezierCurveTo(e * 306.633544921875, e * 295.9858093261719, e * 325.633544921875, e * 299.9858093261719, e * 349.633544921875, e * 302.9858093261719);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 95.633544921875, e * 224.98580932617188);
            o.bezierCurveTo(e * 64.633544921875, e * 245.98580932617188, e * 62.633544921875, e * 280.9858093261719, e * 32.633544921875, e * 303.9858093261719);
            o.bezierCurveTo(e * 59.633544921875, e * 301.9858093261719, e * 102.633544921875, e * 260.9858093261719, e * 116.633544921875, e * 255.98580932617188);
            o.bezierCurveTo(e * 139.633544921875, e * 229.98580932617188, e * 108.633544921875, e * 209.98580932617188, e * 97.633544921875, e * 224.98580932617188);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 195.633544921875, e * 253.98580932617188);
            o.bezierCurveTo(e * 209.633544921875, e * 282.9858093261719, e * 205.633544921875, e * 278.9858093261719, e * 199.633544921875, e * 307.9858093261719);
            o.bezierCurveTo(e * 198.633544921875, e * 332.9858093261719, e * 201.633544921875, e * 340.9858093261719, e * 202.633544921875, e * 348.9858093261719);
            o.bezierCurveTo(e * 215.633544921875, e * 313.9858093261719, e * 226.633544921875, e * 291.9858093261719, e * 235.633544921875, e * 270.9858093261719);
            o.bezierCurveTo(e * 243.633544921875, e * 247.98580932617188, e * 219.633544921875, e * 235.98580932617188, e * 196.633544921875, e * 252.98580932617188);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 195.633544921875, e * 251.98580932617188);
            o.bezierCurveTo(e * 176.633544921875, e * 275.9858093261719, e * 182.633544921875, e * 285.9858093261719, e * 191.633544921875, e * 308.9858093261719);
            o.bezierCurveTo(e * 194.633544921875, e * 318.9858093261719, e * 190.633544921875, e * 334.9858093261719, e * 186.633544921875, e * 348.9858093261719);
            o.bezierCurveTo(e * 175.633544921875, e * 307.9858093261719, e * 157.633544921875, e * 291.9858093261719, e * 155.633544921875, e * 272.9858093261719);
            o.bezierCurveTo(e * 150.633544921875, e * 243.98580932617188, e * 170.633544921875, e * 236.98580932617188, e * 195.633544921875, e * 251.98580932617188);
            o.closePath();
            se(o, t[3]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 316, e * 186.8020782470703);
            o.bezierCurveTo(e * 315, e * 173.8020782470703, e * 298, e * 177.8020782470703, e * 293, e * 183.8020782470703);
            o.bezierCurveTo(e * 285, e * 195.8020782470703, e * 314, e * 197.8020782470703, e * 315, e * 187.8020782470703);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 340, e * 157.8020782470703);
            o.bezierCurveTo(e * 327, e * 153.8020782470703, e * 321, e * 168.8020782470703, e * 330, e * 174.8020782470703);
            o.bezierCurveTo(e * 341, e * 178.8020782470703, e * 347, e * 161.8020782470703, e * 341, e * 157.8020782470703);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 349, e * 136.8020782470703);
            o.bezierCurveTo(e * 343, e * 135.8020782470703, e * 342, e * 139.8020782470703, e * 341, e * 147.8020782470703);
            o.bezierCurveTo(e * 343, e * 155.8020782470703, e * 353, e * 143.8020782470703, e * 349, e * 137.8020782470703);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 278.75, e * 246.4375);
            o.bezierCurveTo(e * 288.75, e * 242.4375, e * 301.75, e * 248.4375, e * 298.75, e * 262.4375);
            o.bezierCurveTo(e * 293.75, e * 271.4375, e * 287.75, e * 271.4375, e * 278.75, e * 262.4375);
            o.bezierCurveTo(e * 271.75, e * 255.4375, e * 274.75, e * 250.4375, e * 277.75, e * 247.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 310.75, e * 277.4375);
            o.bezierCurveTo(e * 319.75, e * 280.4375, e * 322.75, e * 283.4375, e * 321.75, e * 289.4375);
            o.bezierCurveTo(e * 319.75, e * 295.4375, e * 313.75, e * 291.4375, e * 308.75, e * 288.4375);
            o.bezierCurveTo(e * 301.75, e * 281.4375, e * 306.75, e * 277.4375, e * 309.75, e * 277.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 217.75, e * 257.4375);
            o.bezierCurveTo(e * 227.75, e * 269.4375, e * 220.75, e * 281.4375, e * 212.75, e * 280.4375);
            o.bezierCurveTo(e * 206.75, e * 279.4375, e * 206.75, e * 269.4375, e * 204.75, e * 260.4375);
            o.bezierCurveTo(e * 204.75, e * 254.4375, e * 211.75, e * 253.4375, e * 216.75, e * 256.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 211.75, e * 289.4375);
            o.bezierCurveTo(e * 219.75, e * 292.4375, e * 213.75, e * 306.4375, e * 206.75, e * 307.4375);
            o.bezierCurveTo(e * 199.75, e * 303.4375, e * 209.75, e * 287.4375, e * 210.75, e * 289.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 171.75, e * 256.4375);
            o.bezierCurveTo(e * 162.75, e * 273.4375, e * 166.75, e * 278.4375, e * 175.75, e * 280.4375);
            o.bezierCurveTo(e * 183.75, e * 278.4375, e * 185.75, e * 257.4375, e * 182.75, e * 255.4375);
            o.bezierCurveTo(e * 176.75, e * 251.4375, e * 172.75, e * 253.4375, e * 172.75, e * 256.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 175.75, e * 289.9375);
            o.bezierCurveTo(e * 183.75, e * 287.9375, e * 186.75, e * 301.9375, e * 182.75, e * 305.9375);
            o.bezierCurveTo(e * 176.75, e * 307.9375, e * 171.75, e * 292.9375, e * 174.75, e * 290.9375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 205.75, e * 314.4375);
            o.bezierCurveTo(e * 209.75, e * 316.4375, e * 210.75, e * 320.4375, e * 206.75, e * 323.4375);
            o.bezierCurveTo(e * 201.75, e * 324.4375, e * 201.75, e * 314.4375, e * 204.75, e * 314.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 186.75, e * 313.4375);
            o.bezierCurveTo(e * 181.75, e * 315.4375, e * 180.75, e * 321.4375, e * 185.75, e * 326.4375);
            o.bezierCurveTo(e * 190.75, e * 327.4375, e * 190.75, e * 313.4375, e * 187.75, e * 314.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 103.75, e * 244.4375);
            o.bezierCurveTo(e * 96.75, e * 239.4375, e * 83.75, e * 240.4375, e * 81.75, e * 255.4375);
            o.bezierCurveTo(e * 80.75, e * 264.4375, e * 89.75, e * 269.4375, e * 99.75, e * 260.4375);
            o.bezierCurveTo(e * 106.75, e * 254.4375, e * 106.75, e * 250.4375, e * 104.75, e * 245.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 86.75, e * 182.4375);
            o.bezierCurveTo(e * 82.75, e * 170.4375, e * 66.75, e * 169.4375, e * 61.75, e * 181.4375);
            o.bezierCurveTo(e * 58.75, e * 187.4375, e * 68.75, e * 194.4375, e * 75.75, e * 192.4375);
            o.bezierCurveTo(e * 83.75, e * 192.4375, e * 86.75, e * 187.4375, e * 86.75, e * 183.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 44.75, e * 152.4375);
            o.bezierCurveTo(e * 55.75, e * 159.4375, e * 54.75, e * 170.4375, e * 46.75, e * 171.4375);
            o.bezierCurveTo(e * 39.75, e * 170.4375, e * 34.75, e * 151.4375, e * 43.75, e * 152.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 31.75, e * 130.4375);
            o.bezierCurveTo(e * 35.75, e * 132.4375, e * 35.75, e * 131.4375, e * 37.75, e * 137.4375);
            o.bezierCurveTo(e * 36.75, e * 144.4375, e * 36.75, e * 145.4375, e * 33.75, e * 144.4375);
            o.bezierCurveTo(e * 26.75, e * 137.4375, e * 29.75, e * 131.4375, e * 31.75, e * 130.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 69.75, e * 274.4375);
            o.bezierCurveTo(e * 62.75, e * 272.4375, e * 59.75, e * 277.4375, e * 57.75, e * 284.4375);
            o.bezierCurveTo(e * 56.75, e * 290.4375, e * 63.75, e * 289.4375, e * 71.75, e * 282.4375);
            o.bezierCurveTo(e * 75.75, e * 277.4375, e * 72.75, e * 275.4375, e * 69.75, e * 274.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 165.75, e * 95.4375);
            o.bezierCurveTo(e * 177.75, e * 97.4375, e * 182.75, e * 115.4375, e * 173.75, e * 121.4375);
            o.bezierCurveTo(e * 164.75, e * 126.4375, e * 149.75, e * 102.4375, e * 164.75, e * 96.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 216.75, e * 94.4375);
            o.bezierCurveTo(e * 227.75, e * 99.4375, e * 223.75, e * 122.4375, e * 210.75, e * 119.4375);
            o.bezierCurveTo(e * 203.75, e * 115.4375, e * 207.75, e * 93.4375, e * 216.75, e * 94.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 211.75, e * 68.4375);
            o.bezierCurveTo(e * 218.75, e * 69.4375, e * 220.75, e * 77.4375, e * 216.75, e * 83.4375);
            o.bezierCurveTo(e * 208.75, e * 89.4375, e * 205.75, e * 68.4375, e * 210.75, e * 68.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 169.75, e * 71.4375);
            o.bezierCurveTo(e * 162.75, e * 72.4375, e * 159.75, e * 83.4375, e * 167.75, e * 88.4375);
            o.bezierCurveTo(e * 174.75, e * 90.4375, e * 174.75, e * 72.4375, e * 170.75, e * 71.4375);
            o.closePath();
            se(o, t[6], t[7], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 193.75, e * 160.4375);
            o.bezierCurveTo(e * 215.75, e * 168.4375, e * 224.75, e * 180.4375, e * 229.75, e * 193.4375);
            o.bezierCurveTo(e * 223.75, e * 211.4375, e * 205.75, e * 225.4375, e * 193.75, e * 229.4375);
            o.bezierCurveTo(e * 167.75, e * 217.4375, e * 161.75, e * 205.4375, e * 156.75, e * 192.4375);
            o.bezierCurveTo(e * 164.75, e * 175.4375, e * 176.75, e * 166.4375, e * 192.75, e * 160.4375);
            o.closePath();
            se(o, t[8], t[9], e * 3);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 189.1999969482422, e * 182.61249923706055);
            o.bezierCurveTo(e * 190.1999969482422, e * 184.11249923706055, e * 190.1999969482422, e * 184.11249923706055, e * 191.1999969482422, e * 185.61249923706055);
            o.bezierCurveTo(e * 192.1999969482422, e * 180.61249923706055, e * 192.1999969482422, e * 180.61249923706055, e * 193.1999969482422, e * 175.61249923706055);
            o.bezierCurveTo(e * 195.6999969482422, e * 177.11249923706055, e * 195.6999969482422, e * 177.11249923706055, e * 198.1999969482422, e * 178.61249923706055);
            o.bezierCurveTo(e * 198.1999969482422, e * 181.11249923706055, e * 198.1999969482422, e * 181.11249923706055, e * 198.1999969482422, e * 183.61249923706055);
            o.bezierCurveTo(e * 201.6999969482422, e * 181.11249923706055, e * 201.6999969482422, e * 181.11249923706055, e * 205.1999969482422, e * 178.61249923706055);
            o.bezierCurveTo(e * 206.6999969482422, e * 180.61249923706055, e * 206.6999969482422, e * 180.61249923706055, e * 208.1999969482422, e * 182.61249923706055);
            o.bezierCurveTo(e * 206.1999969482422, e * 185.61249923706055, e * 206.1999969482422, e * 185.61249923706055, e * 204.1999969482422, e * 188.61249923706055);
            o.bezierCurveTo(e * 208.6999969482422, e * 188.61249923706055, e * 208.6999969482422, e * 188.61249923706055, e * 213.1999969482422, e * 188.61249923706055);
            o.bezierCurveTo(e * 213.1999969482422, e * 191.11249923706055, e * 213.1999969482422, e * 191.11249923706055, e * 213.1999969482422, e * 193.61249923706055);
            o.bezierCurveTo(e * 209.6999969482422, e * 194.61249923706055, e * 209.6999969482422, e * 194.61249923706055, e * 206.1999969482422, e * 195.61249923706055);
            o.bezierCurveTo(e * 210.1999969482422, e * 198.61249923706055, e * 210.1999969482422, e * 198.61249923706055, e * 214.1999969482422, e * 201.61249923706055);
            o.bezierCurveTo(e * 212.1999969482422, e * 203.61249923706055, e * 212.1999969482422, e * 203.61249923706055, e * 210.1999969482422, e * 205.61249923706055);
            o.bezierCurveTo(e * 207.1999969482422, e * 204.11249923706055, e * 207.1999969482422, e * 204.11249923706055, e * 204.1999969482422, e * 202.61249923706055);
            o.bezierCurveTo(e * 205.6999969482422, e * 207.61249923706055, e * 205.6999969482422, e * 207.61249923706055, e * 207.1999969482422, e * 212.61249923706055);
            o.bezierCurveTo(e * 204.6999969482422, e * 213.61249923706055, e * 204.6999969482422, e * 213.61249923706055, e * 202.1999969482422, e * 214.61249923706055);
            o.bezierCurveTo(e * 200.1999969482422, e * 210.61249923706055, e * 200.1999969482422, e * 210.61249923706055, e * 198.1999969482422, e * 206.61249923706055);
            o.bezierCurveTo(e * 196.6999969482422, e * 211.61249923706055, e * 196.6999969482422, e * 211.61249923706055, e * 195.1999969482422, e * 216.61249923706055);
            o.bezierCurveTo(e * 192.6999969482422, e * 216.11249923706055, e * 192.6999969482422, e * 216.11249923706055, e * 190.1999969482422, e * 215.61249923706055);
            o.bezierCurveTo(e * 190.1999969482422, e * 211.61249923706055, e * 190.1999969482422, e * 211.61249923706055, e * 190.1999969482422, e * 207.61249923706055);
            o.bezierCurveTo(e * 186.1999969482422, e * 210.61249923706055, e * 186.1999969482422, e * 210.61249923706055, e * 182.1999969482422, e * 213.61249923706055);
            o.bezierCurveTo(e * 181.1999969482422, e * 211.11249923706055, e * 181.1999969482422, e * 211.11249923706055, e * 180.1999969482422, e * 208.61249923706055);
            o.bezierCurveTo(e * 183.1999969482422, e * 205.61249923706055, e * 183.1999969482422, e * 205.61249923706055, e * 186.1999969482422, e * 202.61249923706055);
            o.bezierCurveTo(e * 180.6999969482422, e * 203.11249923706055, e * 180.6999969482422, e * 203.11249923706055, e * 175.1999969482422, e * 203.61249923706055);
            o.bezierCurveTo(e * 174.6999969482422, e * 200.11249923706055, e * 174.6999969482422, e * 200.11249923706055, e * 174.1999969482422, e * 196.61249923706055);
            o.bezierCurveTo(e * 177.1999969482422, e * 195.61249923706055, e * 177.1999969482422, e * 195.61249923706055, e * 180.1999969482422, e * 194.61249923706055);
            o.bezierCurveTo(e * 177.1999969482422, e * 191.61249923706055, e * 177.1999969482422, e * 191.61249923706055, e * 174.1999969482422, e * 188.61249923706055);
            o.bezierCurveTo(e * 175.6999969482422, e * 187.11249923706055, e * 175.6999969482422, e * 187.11249923706055, e * 177.1999969482422, e * 185.61249923706055);
            o.bezierCurveTo(e * 180.6999969482422, e * 187.11249923706055, e * 180.6999969482422, e * 187.11249923706055, e * 184.1999969482422, e * 188.61249923706055);
            o.bezierCurveTo(e * 182.6999969482422, e * 183.61249923706055, e * 182.6999969482422, e * 183.61249923706055, e * 181.1999969482422, e * 178.61249923706055);
            o.bezierCurveTo(e * 183.1999969482422, e * 177.11249923706055, e * 183.1999969482422, e * 177.11249923706055, e * 185.1999969482422, e * 175.61249923706055);
            o.closePath();
            se(o, t[10]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 185.1999969482422, e * 173.8125);
            o.bezierCurveTo(e * 187.1999969482422, e * 179.3125, e * 187.1999969482422, e * 179.3125, e * 189.1999969482422, e * 184.8125);
            o.bezierCurveTo(e * 184.1999969482422, e * 181.8125, e * 184.1999969482422, e * 181.8125, e * 179.1999969482422, e * 178.8125);
            o.bezierCurveTo(e * 181.1999969482422, e * 175.8125, e * 182.1999969482422, e * 174.8125, e * 185.1999969482422, e * 173.8125);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 192.1999969482422, e * 173.61249542236328);
            o.bezierCurveTo(e * 194.1999969482422, e * 172.61249542236328, e * 196.1999969482422, e * 171.61249542236328, e * 199.1999969482422, e * 173.61249542236328);
            o.bezierCurveTo(e * 197.6999969482422, e * 179.61249542236328, e * 197.6999969482422, e * 179.61249542236328, e * 196.1999969482422, e * 185.61249542236328);
            o.bezierCurveTo(e * 194.1999969482422, e * 179.61249542236328, e * 194.1999969482422, e * 179.61249542236328, e * 192.1999969482422, e * 173.61249542236328);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 205.1999969482422, e * 176.2125015258789);
            o.bezierCurveTo(e * 210.1999969482422, e * 178.2125015258789, e * 211.1999969482422, e * 179.2125015258789, e * 211.1999969482422, e * 181.2125015258789);
            o.bezierCurveTo(e * 206.6999969482422, e * 184.7125015258789, e * 206.6999969482422, e * 184.7125015258789, e * 202.1999969482422, e * 188.2125015258789);
            o.bezierCurveTo(e * 203.6999969482422, e * 182.2125015258789, e * 203.6999969482422, e * 182.2125015258789, e * 205.1999969482422, e * 176.2125015258789);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.1999969482422, e * 187.21249985694885);
            o.bezierCurveTo(e * 216.1999969482422, e * 191.21249985694885, e * 216.1999969482422, e * 192.21249985694885, e * 215.1999969482422, e * 195.21249985694885);
            o.bezierCurveTo(e * 206.1999969482422, e * 194.21249985694885, e * 205.1999969482422, e * 194.21249985694885, e * 205.1999969482422, e * 194.21249985694885);
            o.bezierCurveTo(e * 209.6999969482422, e * 190.71249985694885, e * 209.6999969482422, e * 190.71249985694885, e * 214.1999969482422, e * 187.21249985694885);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 204.1999969482422, e * 201.8125);
            o.bezierCurveTo(e * 209.1999969482422, e * 201.3125, e * 209.1999969482422, e * 201.3125, e * 214.1999969482422, e * 200.8125);
            o.bezierCurveTo(e * 215.1999969482422, e * 204.8125, e * 214.1999969482422, e * 205.8125, e * 213.1999969482422, e * 208.8125);
            o.bezierCurveTo(e * 208.6999969482422, e * 205.3125, e * 208.6999969482422, e * 205.3125, e * 204.1999969482422, e * 201.8125);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 199.1999969482422, e * 205.61249923706055);
            o.bezierCurveTo(e * 207.1999969482422, e * 212.61249923706055, e * 203.6999969482422, e * 209.11249923706055, e * 208.1999969482422, e * 212.61249923706055);
            o.bezierCurveTo(e * 206.1999969482422, e * 215.61249923706055, e * 204.1999969482422, e * 217.61249923706055, e * 203.1999969482422, e * 216.61249923706055);
            o.bezierCurveTo(e * 201.1999969482422, e * 211.11249923706055, e * 201.1999969482422, e * 211.11249923706055, e * 199.1999969482422, e * 205.61249923706055);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 191.1999969482422, e * 207.01250076293945);
            o.bezierCurveTo(e * 194.1999969482422, e * 213.01250076293945, e * 194.1999969482422, e * 216.01250076293945, e * 196.1999969482422, e * 218.01250076293945);
            o.bezierCurveTo(e * 193.1999969482422, e * 220.01250076293945, e * 190.1999969482422, e * 220.01250076293945, e * 188.1999969482422, e * 218.01250076293945);
            o.bezierCurveTo(e * 189.6999969482422, e * 213.01250076293945, e * 189.6999969482422, e * 213.01250076293945, e * 191.1999969482422, e * 208.01250076293945);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 186.1999969482422, e * 203.21249961853027);
            o.bezierCurveTo(e * 184.1999969482422, e * 209.21249961853027, e * 184.1999969482422, e * 209.21249961853027, e * 182.1999969482422, e * 215.21249961853027);
            o.bezierCurveTo(e * 177.1999969482422, e * 212.21249961853027, e * 176.1999969482422, e * 211.21249961853027, e * 177.1999969482422, e * 210.21249961853027);
            o.bezierCurveTo(e * 181.6999969482422, e * 206.71249961853027, e * 181.6999969482422, e * 206.71249961853027, e * 186.1999969482422, e * 203.21249961853027);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 183.1999969482422, e * 196.8125);
            o.bezierCurveTo(e * 177.1999969482422, e * 196.3125, e * 177.1999969482422, e * 196.3125, e * 171.1999969482422, e * 195.8125);
            o.bezierCurveTo(e * 171.1999969482422, e * 199.8125, e * 171.1999969482422, e * 202.8125, e * 174.1999969482422, e * 204.8125);
            o.bezierCurveTo(e * 178.6999969482422, e * 200.8125, e * 178.6999969482422, e * 200.8125, e * 183.1999969482422, e * 196.8125);
            o.closePath();
            se(o, t[11]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 185.1999969482422, e * 190.21249771118164);
            o.bezierCurveTo(e * 179.6999969482422, e * 186.71249771118164, e * 179.6999969482422, e * 186.71249771118164, e * 174.1999969482422, e * 183.21249771118164);
            o.bezierCurveTo(e * 172.1999969482422, e * 186.21249771118164, e * 172.1999969482422, e * 187.21249771118164, e * 172.1999969482422, e * 190.21249771118164);
            o.bezierCurveTo(e * 178.1999969482422, e * 190.21249771118164, e * 178.1999969482422, e * 190.21249771118164, e * 184.1999969482422, e * 190.21249771118164);
            o.closePath();
            se(o, t[11]);
            he(o, e * 126.19999694824219, e * 169.8125, e * 8.94427190999916);
            se(o, t[12]);
            he(o, e * 123.19999694824219, e * 164.8125, e * 2.8284271247461903);
            se(o, t[13]);
            he(o, e * 253.1999969482422, e * 169.8125, e * 8.94427190999916);
            se(o, t[12]);
            he(o, e * 255.1999969482422, e * 164.8125, e * 2.23606797749979);
            se(o, t[13]);
            return i;
        }
        function Ro(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.globalAlpha = 1;
            T.translate(e * 20, e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36.5, e * 278.0625);
            T.bezierCurveTo(e * 67.5, e * 316.0625, e * 134.5, e * 334.0625, e * 199.5, e * 319.0625);
            T.bezierCurveTo(e * 254.5, e * 304.0625, e * 346.5, e * 270.0625, e * 348.5, e * 237.0625);
            T.bezierCurveTo(e * 359.5, e * 206.0625, e * 318.5, e * 129.0625, e * 262.5, e * 122.0625);
            T.bezierCurveTo(e * 213.5, e * 115.0625, e * 166.5, e * 133.0625, e * 104.5, e * 166.0625);
            T.bezierCurveTo(e * 54.5, e * 194.0625, e * 23.5, e * 241.0625, e * 36.5, e * 277.0625);
            T.closePath();
            se(T, i[0]);
            T.translate(e * -20, e * -20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36.5, e * 278.0625);
            T.bezierCurveTo(e * 67.5, e * 316.0625, e * 134.5, e * 334.0625, e * 199.5, e * 319.0625);
            T.bezierCurveTo(e * 254.5, e * 304.0625, e * 346.5, e * 270.0625, e * 348.5, e * 237.0625);
            T.bezierCurveTo(e * 359.5, e * 206.0625, e * 318.5, e * 129.0625, e * 262.5, e * 122.0625);
            T.bezierCurveTo(e * 213.5, e * 115.0625, e * 166.5, e * 133.0625, e * 104.5, e * 166.0625);
            T.bezierCurveTo(e * 54.5, e * 194.0625, e * 23.5, e * 241.0625, e * 36.5, e * 277.0625);
            T.closePath();
            se(T, i[1], i[2], e * 19);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 214.5, e * 124.0625);
            T.bezierCurveTo(e * 242.5, e * 125.0625, e * 272.5, e * 159.0625, e * 283.5, e * 184.0625);
            T.bezierCurveTo(e * 277.5, e * 161.0625, e * 233.5, e * 128.0625, e * 219.5, e * 122.0625);
            T.closePath();
            se(T, undefined, i[2], e * 19);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 157.5, e * 145.0625);
            T.bezierCurveTo(e * 176.5, e * 148.0625, e * 205.5, e * 176.0625, e * 212.5, e * 197.0625);
            T.bezierCurveTo(e * 205.5, e * 178.0625, e * 177.5, e * 152.0625, e * 156.5, e * 142.0625);
            T.closePath();
            se(T, undefined, i[2], e * 19);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 103.5, e * 169.0625);
            T.bezierCurveTo(e * 160.5, e * 166.0625, e * 228.5, e * 312.0625, e * 162.5, e * 323.0625);
            T.bezierCurveTo(e * 128.5, e * 330.0625, e * 45.5, e * 312.0625, e * 34.5, e * 268.0625);
            T.bezierCurveTo(e * 30.5, e * 238.0625, e * 44.5, e * 222.0625, e * 52.5, e * 211.0625);
            T.bezierCurveTo(e * 82.5, e * 174.0625, e * 104.5, e * 166.0625, e * 119.5, e * 172.0625);
            T.closePath();
            se(T, i[3], i[2], e * 19);
            he(T, e * 92.5, e * 216.0625, e * 13.892443989449804);
            se(T, i[4]);
            he(T, e * 68.5, e * 227.0625, e * 8.06225774829855);
            se(T, i[4]);
            he(T, e * 85.5, e * 240.0625, e * 6.708203932499369);
            se(T, i[4]);
            he(T, e * 147.5, e * 294.0625, e * 17.46424919657298);
            se(T, i[4]);
            he(T, e * 166.5, e * 273.0625, e * 6.708203932499369);
            se(T, i[4]);
            he(T, e * 114.5, e * 294.0625, e * 12.36931687685298);
            se(T, i[4]);
            he(T, e * 123.5, e * 220.0625, e * 5.830951894845301);
            se(T, i[4]);
            he(T, e * 114.5, e * 259.0625, e * 4.123105625617661);
            se(T, i[4]);
            he(T, e * 63.5, e * 265.0625, e * 5.385164807134504);
            se(T, i[4]);
            he(T, e * 148.5, e * 235.0625, e * 4.47213595499958);
            se(T, i[4]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 194.5, e * 313.0625);
            T.bezierCurveTo(e * 222.5, e * 306.0625, e * 319.5, e * 271.0625, e * 337.5, e * 241.0625);
            T.bezierCurveTo(e * 274.5, e * 270.0625, e * 216.5, e * 288.0625, e * 199.5, e * 287.0625);
            T.bezierCurveTo(e * 198.5, e * 302.0625, e * 195.5, e * 311.0625, e * 193.5, e * 312.0625);
            T.closePath();
            se(T, i[5]);
            return o;
        }
        function ho(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 440;
            o.height = e * 388;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            he(T, e * 220, e * 201, e * 170.41713528867922);
            se(T, i[0], i[0], e * 6);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            he(T, e * 220, e * 201, e * 170.41713528867922);
            se(T, i[1], i[2], e * 6);
            he(T, e * 220, e * 201, e * 130);
            se(T, i[11], i[2], e * 6);
            he(T, e * 222, e * 199, e * 120.74767078498864);
            se(T, undefined, i[3], e * 40);
            he(T, e * 220, e * 200, e * 95.44108130150245);
            se(T, undefined, i[2], e * 15);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            he(T, e * 63, e * 136, e * 49.193495504995376);
            se(T, i[0], i[0], e * 4);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            he(T, e * 63, e * 136, e * 49.193495504995376);
            se(T, i[8], i[2], e * 4);
            he(T, e * 63, e * 137, e * 25.632011235952593);
            se(T, i[7], i[2], e * 4);
            return o;
        }
        function uo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 440;
            o.height = e * 388;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            he(T, e * 220, e * 201, e * 170.41713528867922);
            se(T, i[0], i[0], e * 6);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            he(T, e * 220, e * 201, e * 170.41713528867922);
            se(T, i[1], i[2], e * 6);
            he(T, e * 220, e * 201, e * 130);
            se(T, i[11], i[2], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 218, e * 97);
            T.bezierCurveTo(e * 219, e * 163, e * 201, e * 176, e * 191, e * 175);
            T.bezierCurveTo(e * 176, e * 177, e * 168, e * 167, e * 160, e * 115);
            T.closePath();
            se(T, i[5], i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 224, e * 181);
            T.bezierCurveTo(e * 225, e * 138, e * 246, e * 115, e * 263, e * 137);
            T.bezierCurveTo(e * 282, e * 174, e * 279, e * 217, e * 265, e * 243);
            T.bezierCurveTo(e * 253, e * 264, e * 240, e * 256, e * 233, e * 238);
            T.bezierCurveTo(e * 221, e * 212, e * 225, e * 198, e * 224, e * 184);
            T.closePath();
            se(T, i[5], i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 169, e * 289);
            T.bezierCurveTo(e * 161, e * 234, e * 168, e * 197, e * 187, e * 195);
            T.bezierCurveTo(e * 219, e * 189, e * 222, e * 256, e * 216, e * 307);
            T.closePath();
            se(T, i[5], i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 143, e * 146);
            T.bezierCurveTo(e * 161, e * 199, e * 151, e * 245, e * 138, e * 266);
            T.bezierCurveTo(e * 120.5, e * 239.5, e * 120.5, e * 239.5, e * 103, e * 213);
            T.closePath();
            se(T, i[5], i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 283, e * 135);
            T.bezierCurveTo(e * 277, e * 176, e * 298, e * 194, e * 315, e * 205);
            T.bezierCurveTo(e * 323.5, e * 175, e * 323.5, e * 175, e * 332, e * 145);
            T.closePath();
            se(T, i[5], i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 318, e * 223);
            T.bezierCurveTo(e * 290, e * 195, e * 271, e * 256, e * 283, e * 281);
            T.bezierCurveTo(e * 303.5, e * 267, e * 303.5, e * 267, e * 324, e * 253);
            T.closePath();
            se(T, i[5], i[6], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 142, e * 223);
            T.bezierCurveTo(e * 128, e * 213, e * 123, e * 214, e * 111, e * 223);
            T.closePath();
            se(T, i[10], i[10], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 251, e * 133);
            T.bezierCurveTo(e * 269, e * 188, e * 262, e * 229, e * 251, e * 253);
            T.bezierCurveTo(e * 288, e * 224, e * 273, e * 139, e * 252, e * 133);
            T.closePath();
            se(T, i[10], i[10], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 203, e * 102);
            T.bezierCurveTo(e * 204, e * 136, e * 200, e * 159, e * 189, e * 174);
            T.bezierCurveTo(e * 223, e * 164, e * 219, e * 87, e * 205, e * 83);
            T.closePath();
            se(T, i[10], i[10], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 196, e * 324);
            T.bezierCurveTo(e * 209, e * 239, e * 200, e * 219, e * 192, e * 196);
            T.bezierCurveTo(e * 229, e * 216, e * 219, e * 316, e * 198, e * 325);
            T.closePath();
            se(T, i[10], i[10], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 266, e * 166);
            T.bezierCurveTo(e * 249, e * 154, e * 243, e * 161, e * 233, e * 167);
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 269, e * 192);
            T.bezierCurveTo(e * 256, e * 183, e * 241, e * 186, e * 233, e * 192);
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 263, e * 217);
            T.bezierCurveTo(e * 251, e * 211, e * 242, e * 213, e * 236, e * 218);
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 204, e * 141);
            T.bezierCurveTo(e * 191, e * 131, e * 187, e * 133, e * 176, e * 141);
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 207, e * 230);
            T.bezierCurveTo(e * 193, e * 222, e * 185, e * 224, e * 177, e * 231);
            se(T, undefined, i[6], e * 6);
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 210, e * 258);
            T.bezierCurveTo(e * 196, e * 247, e * 191, e * 250, e * 177, e * 259);
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 145, e * 196);
            T.bezierCurveTo(e * 130, e * 186, e * 124, e * 187, e * 114, e * 195);
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 218, e * 97);
            T.bezierCurveTo(e * 219, e * 163, e * 201, e * 176, e * 191, e * 175);
            T.bezierCurveTo(e * 176, e * 177, e * 168, e * 167, e * 160, e * 115);
            T.closePath();
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 224, e * 181);
            T.bezierCurveTo(e * 225, e * 138, e * 246, e * 115, e * 263, e * 137);
            T.bezierCurveTo(e * 282, e * 174, e * 279, e * 217, e * 265, e * 243);
            T.bezierCurveTo(e * 253, e * 264, e * 240, e * 256, e * 233, e * 238);
            T.bezierCurveTo(e * 221, e * 212, e * 225, e * 198, e * 224, e * 184);
            T.closePath();
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 169, e * 289);
            T.bezierCurveTo(e * 161, e * 234, e * 168, e * 197, e * 187, e * 195);
            T.bezierCurveTo(e * 219, e * 189, e * 222, e * 256, e * 216, e * 307);
            T.closePath();
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 143, e * 146);
            T.bezierCurveTo(e * 161, e * 199, e * 151, e * 245, e * 138, e * 266);
            T.bezierCurveTo(e * 120.5, e * 239.5, e * 120.5, e * 239.5, e * 103, e * 213);
            T.closePath();
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 283, e * 135);
            T.bezierCurveTo(e * 277, e * 176, e * 298, e * 194, e * 315, e * 205);
            T.bezierCurveTo(e * 323.5, e * 175, e * 323.5, e * 175, e * 332, e * 145);
            T.closePath();
            se(T, undefined, i[6], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 318, e * 223);
            T.bezierCurveTo(e * 290, e * 195, e * 271, e * 256, e * 283, e * 281);
            T.bezierCurveTo(e * 303.5, e * 267, e * 303.5, e * 267, e * 324, e * 253);
            T.closePath();
            se(T, undefined, i[6], e * 6);
            he(T, e * 222, e * 199, e * 120.74767078498864);
            se(T, undefined, i[3], e * 40);
            he(T, e * 220, e * 200, e * 95.44108130150245);
            se(T, undefined, i[2], e * 15);
            he(T, e * 220, e * 201, e * 85);
            se(T, undefined, i[4], e * 10);
            T.globalAlpha = 0.5;
            he(T, e * 220, e * 201, e * 82);
            se(T, i[9]);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            he(T, e * 63, e * 136, e * 49.193495504995376);
            se(T, i[0], i[0], e * 4);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            he(T, e * 63, e * 136, e * 49.193495504995376);
            se(T, i[8], i[2], e * 4);
            he(T, e * 63, e * 137, e * 25.632011235952593);
            se(T, i[7], i[2], e * 4);
            return o;
        }
        function Ao(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 110;
            i.height = e * 110;
            o.globalAlpha = 0.2;
            he(o, e * 55, e * 55, e * 55);
            se(o, t[0]);
            return i;
        }
        function Oo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 102;
            o.height = e * 102;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(3, 3);
            Re(T, e * 24, e * 26, e * 70, e * 9, e * 10);
            se(T, i[0]);
            Re(T, e * 26, e * 70, e * 70, e * 9, e * 10);
            se(T, i[0]);
            Re(T, e * 5, e * 3, e * 22, e * 94, e * 5);
            se(T, i[0]);
            Re(T, e * 40, e * 3, e * 22, e * 94, e * 5);
            se(T, i[0]);
            Re(T, e * 75, e * 3, e * 22, e * 94, e * 5);
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(-3, -3);
            Re(T, e * 24, e * 26, e * 70, e * 9, e * 10);
            se(T, i[1]);
            Re(T, e * 26, e * 70, e * 70, e * 9, e * 10);
            se(T, i[1]);
            Re(T, e * 5, e * 3, e * 22, e * 94, e * 5);
            se(T, i[2], i[3], e * 4);
            Re(T, e * 40, e * 3, e * 22, e * 94, e * 5);
            se(T, i[2], i[3], e * 4);
            Re(T, e * 75, e * 3, e * 22, e * 94, e * 5);
            se(T, i[2], i[3], e * 4);
            return o;
        }
        function lo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 496;
            o.height = e * 520;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 19.000030517578125, e * 256.67613983154297);
            T.bezierCurveTo(e * 1.000030517578125, e * 332.67613983154297, e * 23.000030517578125, e * 404.67613983154297, e * 95.00003051757812, e * 463.67613983154297);
            T.bezierCurveTo(e * 128.00003051757812, e * 491.67613983154297, e * 165.00003051757812, e * 507.67613983154297, e * 194.00003051757812, e * 512.676139831543);
            T.bezierCurveTo(e * 280.0000305175781, e * 517.676139831543, e * 291.0000305175781, e * 516.676139831543, e * 342.0000305175781, e * 497.67613983154297);
            T.bezierCurveTo(e * 425.0000305175781, e * 454.67613983154297, e * 469.0000305175781, e * 392.67613983154297, e * 468.0000305175781, e * 300.67613983154297);
            T.bezierCurveTo(e * 408.5000305175781, e * 365.17613983154297, e * 408.5000305175781, e * 365.17613983154297, e * 349.0000305175781, e * 429.67613983154297);
            T.bezierCurveTo(e * 256.0000305175781, e * 473.67613983154297, e * 167.00003051757812, e * 459.67613983154297, e * 78.00003051757812, e * 384.67613983154297);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            he(T, e * 247.01138305664062, e * 249.3125, e * 161.4465855941215);
            se(T, i[5], undefined, e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 65.00003051757812, e * 263.4034118652344);
            T.bezierCurveTo(e * 109.00003051757812, e * 160.40341186523438, e * 185.00003051757812, e * 128.40341186523438, e * 222.00003051757812, e * 124.40341186523438);
            T.bezierCurveTo(e * 277.0000305175781, e * 116.40341186523438, e * 339.0000305175781, e * 134.40341186523438, e * 379.0000305175781, e * 195.40341186523438);
            T.bezierCurveTo(e * 409.0000305175781, e * 242.40341186523438, e * 416.0000305175781, e * 256.4034118652344, e * 428.0000305175781, e * 304.4034118652344);
            T.bezierCurveTo(e * 457.0000305175781, e * 203.40341186523438, e * 449.0000305175781, e * 183.40341186523438, e * 438.0000305175781, e * 162.40341186523438);
            T.bezierCurveTo(e * 381.0000305175781, e * 73.40341186523438, e * 360.0000305175781, e * 66.40341186523438, e * 257.0000305175781, e * 46.403411865234375);
            T.bezierCurveTo(e * 191.00003051757812, e * 45.403411865234375, e * 142.00003051757812, e * 65.40341186523438, e * 101.00003051757812, e * 115.40341186523438);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            var r = __p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 496;
            i.height = e * 520;
            o.globalAlpha = 1;
            o.translate(0, e * -10);
            he(o, e * 247.01138305664062, e * 250.13068389892578, e * 232.81967270830015);
            se(o, t[1], t[2], e * 14);
            o.globalCompositeOperation = "destination-out";
            he(o, e * 247.01138305664062, e * 249.3125, e * 161.4465855941215);
            se(o, t[0], t[0], e * 14);
            o.globalCompositeOperation = "source-over";
            return i;
            }, 2)(e, i);
            T.drawImage(r, 0, 0);
            T.translate(0, e * -10);
            he(T, e * 247.01138305664062, e * 249.3125, e * 161.4465855941215);
            se(T, undefined, i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 325.0113830566406, e * 13.767059326171875);
            T.bezierCurveTo(e * 349.5113830566406, e * 25.767059326171875, e * 349.5113830566406, e * 25.767059326171875, e * 374.0113830566406, e * 37.767059326171875);
            T.bezierCurveTo(e * 384.0113830566406, e * 44.767059326171875, e * 383.0113830566406, e * 50.767059326171875, e * 368.0113830566406, e * 68.76705932617188);
            T.bezierCurveTo(e * 352.5113830566406, e * 91.26705932617188, e * 352.5113830566406, e * 91.26705932617188, e * 337.0113830566406, e * 113.76705932617188);
            T.bezierCurveTo(e * 328.0113830566406, e * 119.76705932617188, e * 328.0113830566406, e * 121.76705932617188, e * 312.0113830566406, e * 112.76705932617188);
            T.bezierCurveTo(e * 303.0113830566406, e * 108.26705932617188, e * 303.0113830566406, e * 108.26705932617188, e * 294.0113830566406, e * 103.76705932617188);
            T.bezierCurveTo(e * 287.0113830566406, e * 99.76705932617188, e * 293.0113830566406, e * 84.76705932617188, e * 297.0113830566406, e * 67.76705932617188);
            T.bezierCurveTo(e * 302.0113830566406, e * 47.767059326171875, e * 302.0113830566406, e * 47.767059326171875, e * 307.0113830566406, e * 27.767059326171875);
            T.bezierCurveTo(e * 310.0113830566406, e * 15.767059326171875, e * 317.0113830566406, e * 12.767059326171875, e * 323.0113830566406, e * 13.767059326171875);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 325.0113830566406, e * 13.767059326171875);
            T.bezierCurveTo(e * 349.5113830566406, e * 25.767059326171875, e * 349.5113830566406, e * 25.767059326171875, e * 374.0113830566406, e * 37.767059326171875);
            T.bezierCurveTo(e * 384.0113830566406, e * 44.767059326171875, e * 383.0113830566406, e * 50.767059326171875, e * 368.0113830566406, e * 68.76705932617188);
            T.bezierCurveTo(e * 352.5113830566406, e * 91.26705932617188, e * 352.5113830566406, e * 91.26705932617188, e * 337.0113830566406, e * 113.76705932617188);
            T.bezierCurveTo(e * 328.0113830566406, e * 119.76705932617188, e * 328.0113830566406, e * 121.76705932617188, e * 312.0113830566406, e * 112.76705932617188);
            T.bezierCurveTo(e * 303.0113830566406, e * 108.26705932617188, e * 303.0113830566406, e * 108.26705932617188, e * 294.0113830566406, e * 103.76705932617188);
            T.bezierCurveTo(e * 287.0113830566406, e * 99.76705932617188, e * 293.0113830566406, e * 84.76705932617188, e * 297.0113830566406, e * 67.76705932617188);
            T.bezierCurveTo(e * 302.0113830566406, e * 47.767059326171875, e * 302.0113830566406, e * 47.767059326171875, e * 307.0113830566406, e * 27.767059326171875);
            T.bezierCurveTo(e * 310.0113830566406, e * 15.767059326171875, e * 317.0113830566406, e * 12.767059326171875, e * 323.0113830566406, e * 13.767059326171875);
            T.closePath();
            se(T, i[3], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 403.0113830566406, e * 89.76705932617188);
            T.bezierCurveTo(e * 413.0113830566406, e * 76.76705932617188, e * 418.0113830566406, e * 79.76705932617188, e * 428.0113830566406, e * 92.76705932617188);
            T.bezierCurveTo(e * 435.0113830566406, e * 99.76705932617188, e * 435.0113830566406, e * 99.76705932617188, e * 442.0113830566406, e * 106.76705932617188);
            T.bezierCurveTo(e * 450.0113830566406, e * 116.76705932617188, e * 445.0113830566406, e * 119.76705932617188, e * 433.0113830566406, e * 128.76705932617188);
            T.bezierCurveTo(e * 408.0113830566406, e * 146.26705932617188, e * 408.0113830566406, e * 146.26705932617188, e * 383.0113830566406, e * 163.76705932617188);
            T.bezierCurveTo(e * 376.0113830566406, e * 166.76705932617188, e * 377.0113830566406, e * 165.76705932617188, e * 368.0113830566406, e * 156.76705932617188);
            T.bezierCurveTo(e * 359.0113830566406, e * 144.76705932617188, e * 359.0113830566406, e * 142.76705932617188, e * 367.0113830566406, e * 133.76705932617188);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 403.0113830566406, e * 89.76705932617188);
            T.bezierCurveTo(e * 413.0113830566406, e * 76.76705932617188, e * 418.0113830566406, e * 79.76705932617188, e * 428.0113830566406, e * 92.76705932617188);
            T.bezierCurveTo(e * 435.0113830566406, e * 99.76705932617188, e * 435.0113830566406, e * 99.76705932617188, e * 442.0113830566406, e * 106.76705932617188);
            T.bezierCurveTo(e * 450.0113830566406, e * 116.76705932617188, e * 445.0113830566406, e * 119.76705932617188, e * 433.0113830566406, e * 128.76705932617188);
            T.bezierCurveTo(e * 408.0113830566406, e * 146.26705932617188, e * 408.0113830566406, e * 146.26705932617188, e * 383.0113830566406, e * 163.76705932617188);
            T.bezierCurveTo(e * 376.0113830566406, e * 166.76705932617188, e * 377.0113830566406, e * 165.76705932617188, e * 368.0113830566406, e * 156.76705932617188);
            T.bezierCurveTo(e * 359.0113830566406, e * 144.76705932617188, e * 359.0113830566406, e * 142.76705932617188, e * 367.0113830566406, e * 133.76705932617188);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 228.01138305664062, e * 1.767059326171875);
            T.bezierCurveTo(e * 246.51138305664062, e * 3.267059326171875, e * 246.51138305664062, e * 3.267059326171875, e * 265.0113830566406, e * 4.767059326171875);
            T.bezierCurveTo(e * 273.0113830566406, e * 5.767059326171875, e * 275.0113830566406, e * 11.767059326171875, e * 270.0113830566406, e * 27.767059326171875);
            T.bezierCurveTo(e * 264.0113830566406, e * 54.267059326171875, e * 264.0113830566406, e * 54.267059326171875, e * 258.0113830566406, e * 80.76705932617188);
            T.bezierCurveTo(e * 256.0113830566406, e * 92.76705932617188, e * 256.0113830566406, e * 94.76705932617188, e * 242.01138305664062, e * 93.76705932617188);
            T.bezierCurveTo(e * 226.01138305664062, e * 95.76705932617188, e * 225.01138305664062, e * 91.76705932617188, e * 225.01138305664062, e * 80.76705932617188);
            T.bezierCurveTo(e * 223.51138305664062, e * 50.267059326171875, e * 223.51138305664062, e * 50.267059326171875, e * 222.01138305664062, e * 19.767059326171875);
            T.bezierCurveTo(e * 219.01138305664062, e * 8.767059326171875, e * 224.01138305664062, e * 4.767059326171875, e * 227.01138305664062, e * 2.767059326171875);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 228.01138305664062, e * 1.767059326171875);
            T.bezierCurveTo(e * 246.51138305664062, e * 3.267059326171875, e * 246.51138305664062, e * 3.267059326171875, e * 265.0113830566406, e * 4.767059326171875);
            T.bezierCurveTo(e * 273.0113830566406, e * 5.767059326171875, e * 275.0113830566406, e * 11.767059326171875, e * 270.0113830566406, e * 27.767059326171875);
            T.bezierCurveTo(e * 264.0113830566406, e * 54.267059326171875, e * 264.0113830566406, e * 54.267059326171875, e * 258.0113830566406, e * 80.76705932617188);
            T.bezierCurveTo(e * 256.0113830566406, e * 92.76705932617188, e * 256.0113830566406, e * 94.76705932617188, e * 242.01138305664062, e * 93.76705932617188);
            T.bezierCurveTo(e * 226.01138305664062, e * 95.76705932617188, e * 225.01138305664062, e * 91.76705932617188, e * 225.01138305664062, e * 80.76705932617188);
            T.bezierCurveTo(e * 223.51138305664062, e * 50.267059326171875, e * 223.51138305664062, e * 50.267059326171875, e * 222.01138305664062, e * 19.767059326171875);
            T.bezierCurveTo(e * 219.01138305664062, e * 8.767059326171875, e * 224.01138305664062, e * 4.767059326171875, e * 227.01138305664062, e * 2.767059326171875);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 142.01138305664062, e * 25.767059326171875);
            T.bezierCurveTo(e * 158.51138305664062, e * 19.767059326171875, e * 158.51138305664062, e * 19.767059326171875, e * 175.01138305664062, e * 13.767059326171875);
            T.bezierCurveTo(e * 188.01138305664062, e * 11.767059326171875, e * 188.01138305664062, e * 16.767059326171875, e * 191.01138305664062, e * 29.767059326171875);
            T.bezierCurveTo(e * 197.01138305664062, e * 60.267059326171875, e * 197.01138305664062, e * 60.267059326171875, e * 203.01138305664062, e * 90.76705932617188);
            T.bezierCurveTo(e * 206.01138305664062, e * 102.76705932617188, e * 196.01138305664062, e * 99.76705932617188, e * 181.01138305664062, e * 105.76705932617188);
            T.bezierCurveTo(e * 175.01138305664062, e * 108.76705932617188, e * 172.01138305664062, e * 104.76705932617188, e * 164.01138305664062, e * 84.76705932617188);
            T.bezierCurveTo(e * 152.51138305664062, e * 63.267059326171875, e * 152.51138305664062, e * 63.267059326171875, e * 141.01138305664062, e * 41.767059326171875);
            T.bezierCurveTo(e * 138.01138305664062, e * 35.767059326171875, e * 138.01138305664062, e * 29.767059326171875, e * 141.01138305664062, e * 27.767059326171875);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 142.01138305664062, e * 25.767059326171875);
            T.bezierCurveTo(e * 158.51138305664062, e * 19.767059326171875, e * 158.51138305664062, e * 19.767059326171875, e * 175.01138305664062, e * 13.767059326171875);
            T.bezierCurveTo(e * 188.01138305664062, e * 11.767059326171875, e * 188.01138305664062, e * 16.767059326171875, e * 191.01138305664062, e * 29.767059326171875);
            T.bezierCurveTo(e * 197.01138305664062, e * 60.267059326171875, e * 197.01138305664062, e * 60.267059326171875, e * 203.01138305664062, e * 90.76705932617188);
            T.bezierCurveTo(e * 206.01138305664062, e * 102.76705932617188, e * 196.01138305664062, e * 99.76705932617188, e * 181.01138305664062, e * 105.76705932617188);
            T.bezierCurveTo(e * 175.01138305664062, e * 108.76705932617188, e * 172.01138305664062, e * 104.76705932617188, e * 164.01138305664062, e * 84.76705932617188);
            T.bezierCurveTo(e * 152.51138305664062, e * 63.267059326171875, e * 152.51138305664062, e * 63.267059326171875, e * 141.01138305664062, e * 41.767059326171875);
            T.bezierCurveTo(e * 138.01138305664062, e * 35.767059326171875, e * 138.01138305664062, e * 29.767059326171875, e * 141.01138305664062, e * 27.767059326171875);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 70.01138305664062, e * 76.76705932617188);
            T.bezierCurveTo(e * 83.01138305664062, e * 64.26705932617188, e * 83.01138305664062, e * 64.26705932617188, e * 96.01138305664062, e * 51.767059326171875);
            T.bezierCurveTo(e * 104.01138305664062, e * 44.767059326171875, e * 110.01138305664062, e * 51.767059326171875, e * 119.01138305664062, e * 66.76705932617188);
            T.bezierCurveTo(e * 135.01138305664062, e * 88.26705932617188, e * 135.01138305664062, e * 88.26705932617188, e * 151.01138305664062, e * 109.76705932617188);
            T.bezierCurveTo(e * 157.01138305664062, e * 119.76705932617188, e * 153.01138305664062, e * 122.76705932617188, e * 147.01138305664062, e * 129.76705932617188);
            T.bezierCurveTo(e * 138.01138305664062, e * 140.76705932617188, e * 136.01138305664062, e * 140.76705932617188, e * 122.01138305664062, e * 127.76705932617188);
            T.bezierCurveTo(e * 99.51138305664062, e * 110.26705932617188, e * 99.51138305664062, e * 110.26705932617188, e * 77.01138305664062, e * 92.76705932617188);
            T.bezierCurveTo(e * 66.01138305664062, e * 83.76705932617188, e * 66.01138305664062, e * 82.76705932617188, e * 69.01138305664062, e * 78.76705932617188);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 70.01138305664062, e * 76.76705932617188);
            T.bezierCurveTo(e * 83.01138305664062, e * 64.26705932617188, e * 83.01138305664062, e * 64.26705932617188, e * 96.01138305664062, e * 51.767059326171875);
            T.bezierCurveTo(e * 104.01138305664062, e * 44.767059326171875, e * 110.01138305664062, e * 51.767059326171875, e * 119.01138305664062, e * 66.76705932617188);
            T.bezierCurveTo(e * 135.01138305664062, e * 88.26705932617188, e * 135.01138305664062, e * 88.26705932617188, e * 151.01138305664062, e * 109.76705932617188);
            T.bezierCurveTo(e * 157.01138305664062, e * 119.76705932617188, e * 153.01138305664062, e * 122.76705932617188, e * 147.01138305664062, e * 129.76705932617188);
            T.bezierCurveTo(e * 138.01138305664062, e * 140.76705932617188, e * 136.01138305664062, e * 140.76705932617188, e * 122.01138305664062, e * 127.76705932617188);
            T.bezierCurveTo(e * 99.51138305664062, e * 110.26705932617188, e * 99.51138305664062, e * 110.26705932617188, e * 77.01138305664062, e * 92.76705932617188);
            T.bezierCurveTo(e * 66.01138305664062, e * 83.76705932617188, e * 66.01138305664062, e * 82.76705932617188, e * 69.01138305664062, e * 78.76705932617188);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 33.011383056640625, e * 126.76705932617188);
            T.bezierCurveTo(e * 22.011383056640625, e * 149.76705932617188, e * 22.011383056640625, e * 149.76705932617188, e * 11.011383056640625, e * 172.76705932617188);
            T.bezierCurveTo(e * 7.011383056640625, e * 184.76705932617188, e * 11.011383056640625, e * 189.76705932617188, e * 36.011383056640625, e * 195.76705932617188);
            T.bezierCurveTo(e * 61.011383056640625, e * 202.26705932617188, e * 61.011383056640625, e * 202.26705932617188, e * 86.01138305664062, e * 208.76705932617188);
            T.bezierCurveTo(e * 100.01138305664062, e * 214.76705932617188, e * 102.01138305664062, e * 203.76705932617188, e * 109.01138305664062, e * 189.76705932617188);
            T.bezierCurveTo(e * 117.01138305664062, e * 171.76705932617188, e * 116.01138305664062, e * 166.76705932617188, e * 97.01138305664062, e * 156.76705932617188);
            T.bezierCurveTo(e * 74.01138305664062, e * 140.76705932617188, e * 74.01138305664062, e * 140.76705932617188, e * 51.011383056640625, e * 124.76705932617188);
            T.bezierCurveTo(e * 42.011383056640625, e * 118.76705932617188, e * 37.011383056640625, e * 119.76705932617188, e * 33.011383056640625, e * 126.76705932617188);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 33.011383056640625, e * 126.76705932617188);
            T.bezierCurveTo(e * 22.011383056640625, e * 149.76705932617188, e * 22.011383056640625, e * 149.76705932617188, e * 11.011383056640625, e * 172.76705932617188);
            T.bezierCurveTo(e * 7.011383056640625, e * 184.76705932617188, e * 11.011383056640625, e * 189.76705932617188, e * 36.011383056640625, e * 195.76705932617188);
            T.bezierCurveTo(e * 61.011383056640625, e * 202.26705932617188, e * 61.011383056640625, e * 202.26705932617188, e * 86.01138305664062, e * 208.76705932617188);
            T.bezierCurveTo(e * 100.01138305664062, e * 214.76705932617188, e * 102.01138305664062, e * 203.76705932617188, e * 109.01138305664062, e * 189.76705932617188);
            T.bezierCurveTo(e * 117.01138305664062, e * 171.76705932617188, e * 116.01138305664062, e * 166.76705932617188, e * 97.01138305664062, e * 156.76705932617188);
            T.bezierCurveTo(e * 74.01138305664062, e * 140.76705932617188, e * 74.01138305664062, e * 140.76705932617188, e * 51.011383056640625, e * 124.76705932617188);
            T.bezierCurveTo(e * 42.011383056640625, e * 118.76705932617188, e * 37.011383056640625, e * 119.76705932617188, e * 33.011383056640625, e * 126.76705932617188);
            T.closePath();
            se(T, i[3], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 13.011383056640625, e * 229.76705932617188);
            T.bezierCurveTo(e * 45.511383056640625, e * 233.76705932617188, e * 45.511383056640625, e * 233.76705932617188, e * 78.01138305664062, e * 237.76705932617188);
            T.bezierCurveTo(e * 92.01138305664062, e * 239.76705932617188, e * 92.01138305664062, e * 246.76705932617188, e * 91.01138305664062, e * 257.7670593261719);
            T.bezierCurveTo(e * 92.01138305664062, e * 275.7670593261719, e * 91.01138305664062, e * 274.7670593261719, e * 68.01138305664062, e * 276.7670593261719);
            T.bezierCurveTo(e * 42.511383056640625, e * 279.7670593261719, e * 42.511383056640625, e * 279.7670593261719, e * 17.011383056640625, e * 282.7670593261719);
            T.bezierCurveTo(e * 2.011383056640625, e * 282.7670593261719, e * 3.011383056640625, e * 276.7670593261719, e * 2.011383056640625, e * 260.7670593261719);
            T.bezierCurveTo(e * 2.011383056640625, e * 231.76705932617188, e * 4.011383056640625, e * 232.76705932617188, e * 11.011383056640625, e * 230.76705932617188);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 13.011383056640625, e * 229.76705932617188);
            T.bezierCurveTo(e * 45.511383056640625, e * 233.76705932617188, e * 45.511383056640625, e * 233.76705932617188, e * 78.01138305664062, e * 237.76705932617188);
            T.bezierCurveTo(e * 92.01138305664062, e * 239.76705932617188, e * 92.01138305664062, e * 246.76705932617188, e * 91.01138305664062, e * 257.7670593261719);
            T.bezierCurveTo(e * 92.01138305664062, e * 275.7670593261719, e * 91.01138305664062, e * 274.7670593261719, e * 68.01138305664062, e * 276.7670593261719);
            T.bezierCurveTo(e * 42.511383056640625, e * 279.7670593261719, e * 42.511383056640625, e * 279.7670593261719, e * 17.011383056640625, e * 282.7670593261719);
            T.bezierCurveTo(e * 2.011383056640625, e * 282.7670593261719, e * 3.011383056640625, e * 276.7670593261719, e * 2.011383056640625, e * 260.7670593261719);
            T.bezierCurveTo(e * 2.011383056640625, e * 231.76705932617188, e * 4.011383056640625, e * 232.76705932617188, e * 11.011383056640625, e * 230.76705932617188);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 97.01138305664062, e * 329.7670593261719);
            T.bezierCurveTo(e * 68.51138305664062, e * 343.7670593261719, e * 68.51138305664062, e * 343.7670593261719, e * 40.011383056640625, e * 357.7670593261719);
            T.bezierCurveTo(e * 29.011383056640625, e * 360.7670593261719, e * 27.011383056640625, e * 361.7670593261719, e * 20.011383056640625, e * 346.7670593261719);
            T.bezierCurveTo(e * 16.511383056640625, e * 336.2670593261719, e * 16.511383056640625, e * 336.2670593261719, e * 13.011383056640625, e * 325.7670593261719);
            T.bezierCurveTo(e * 10.011383056640625, e * 307.7670593261719, e * 18.011383056640625, e * 312.7670593261719, e * 34.011383056640625, e * 306.7670593261719);
            T.bezierCurveTo(e * 59.511383056640625, e * 302.2670593261719, e * 59.511383056640625, e * 302.2670593261719, e * 85.01138305664062, e * 297.7670593261719);
            T.bezierCurveTo(e * 97.01138305664062, e * 294.7670593261719, e * 100.01138305664062, e * 297.7670593261719, e * 100.01138305664062, e * 307.7670593261719);
            T.bezierCurveTo(e * 105.01138305664062, e * 326.7670593261719, e * 103.01138305664062, e * 325.7670593261719, e * 97.01138305664062, e * 329.7670593261719);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 97.01138305664062, e * 329.7670593261719);
            T.bezierCurveTo(e * 68.51138305664062, e * 343.7670593261719, e * 68.51138305664062, e * 343.7670593261719, e * 40.011383056640625, e * 357.7670593261719);
            T.bezierCurveTo(e * 29.011383056640625, e * 360.7670593261719, e * 27.011383056640625, e * 361.7670593261719, e * 20.011383056640625, e * 346.7670593261719);
            T.bezierCurveTo(e * 16.511383056640625, e * 336.2670593261719, e * 16.511383056640625, e * 336.2670593261719, e * 13.011383056640625, e * 325.7670593261719);
            T.bezierCurveTo(e * 10.011383056640625, e * 307.7670593261719, e * 18.011383056640625, e * 312.7670593261719, e * 34.011383056640625, e * 306.7670593261719);
            T.bezierCurveTo(e * 59.511383056640625, e * 302.2670593261719, e * 59.511383056640625, e * 302.2670593261719, e * 85.01138305664062, e * 297.7670593261719);
            T.bezierCurveTo(e * 97.01138305664062, e * 294.7670593261719, e * 100.01138305664062, e * 297.7670593261719, e * 100.01138305664062, e * 307.7670593261719);
            T.bezierCurveTo(e * 105.01138305664062, e * 326.7670593261719, e * 103.01138305664062, e * 325.7670593261719, e * 97.01138305664062, e * 329.7670593261719);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 394.0113830566406, e * 181.76705932617188);
            T.bezierCurveTo(e * 426.5113830566406, e * 166.76705932617188, e * 426.5113830566406, e * 166.76705932617188, e * 459.0113830566406, e * 151.76705932617188);
            T.bezierCurveTo(e * 469.0113830566406, e * 152.76705932617188, e * 469.0113830566406, e * 155.76705932617188, e * 472.0113830566406, e * 165.76705932617188);
            T.bezierCurveTo(e * 476.0113830566406, e * 177.26705932617188, e * 476.0113830566406, e * 177.26705932617188, e * 480.0113830566406, e * 188.76705932617188);
            T.bezierCurveTo(e * 483.0113830566406, e * 199.76705932617188, e * 480.0113830566406, e * 200.76705932617188, e * 460.0113830566406, e * 205.76705932617188);
            T.bezierCurveTo(e * 433.5113830566406, e * 210.26705932617188, e * 433.5113830566406, e * 210.26705932617188, e * 407.0113830566406, e * 214.76705932617188);
            T.bezierCurveTo(e * 395.0113830566406, e * 218.76705932617188, e * 397.0113830566406, e * 211.76705932617188, e * 393.0113830566406, e * 202.76705932617188);
            T.bezierCurveTo(e * 387.0113830566406, e * 188.76705932617188, e * 387.0113830566406, e * 187.76705932617188, e * 394.0113830566406, e * 181.76705932617188);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 394.0113830566406, e * 181.76705932617188);
            T.bezierCurveTo(e * 426.5113830566406, e * 166.76705932617188, e * 426.5113830566406, e * 166.76705932617188, e * 459.0113830566406, e * 151.76705932617188);
            T.bezierCurveTo(e * 469.0113830566406, e * 152.76705932617188, e * 469.0113830566406, e * 155.76705932617188, e * 472.0113830566406, e * 165.76705932617188);
            T.bezierCurveTo(e * 476.0113830566406, e * 177.26705932617188, e * 476.0113830566406, e * 177.26705932617188, e * 480.0113830566406, e * 188.76705932617188);
            T.bezierCurveTo(e * 483.0113830566406, e * 199.76705932617188, e * 480.0113830566406, e * 200.76705932617188, e * 460.0113830566406, e * 205.76705932617188);
            T.bezierCurveTo(e * 433.5113830566406, e * 210.26705932617188, e * 433.5113830566406, e * 210.26705932617188, e * 407.0113830566406, e * 214.76705932617188);
            T.bezierCurveTo(e * 395.0113830566406, e * 218.76705932617188, e * 397.0113830566406, e * 211.76705932617188, e * 393.0113830566406, e * 202.76705932617188);
            T.bezierCurveTo(e * 387.0113830566406, e * 188.76705932617188, e * 387.0113830566406, e * 187.76705932617188, e * 394.0113830566406, e * 181.76705932617188);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 411.0113830566406, e * 234.76705932617188);
            T.bezierCurveTo(e * 446.0113830566406, e * 233.26705932617188, e * 446.0113830566406, e * 233.26705932617188, e * 481.0113830566406, e * 231.76705932617188);
            T.bezierCurveTo(e * 491.0113830566406, e * 232.76705932617188, e * 493.0113830566406, e * 239.76705932617188, e * 491.0113830566406, e * 251.76705932617188);
            T.bezierCurveTo(e * 490.0113830566406, e * 263.7670593261719, e * 490.0113830566406, e * 263.7670593261719, e * 489.0113830566406, e * 275.7670593261719);
            T.bezierCurveTo(e * 487.0113830566406, e * 283.7670593261719, e * 483.0113830566406, e * 284.7670593261719, e * 464.0113830566406, e * 280.7670593261719);
            T.bezierCurveTo(e * 437.0113830566406, e * 273.7670593261719, e * 437.0113830566406, e * 273.7670593261719, e * 410.0113830566406, e * 266.7670593261719);
            T.bezierCurveTo(e * 400.0113830566406, e * 261.7670593261719, e * 401.0113830566406, e * 259.7670593261719, e * 402.0113830566406, e * 249.76705932617188);
            T.bezierCurveTo(e * 401.0113830566406, e * 237.76705932617188, e * 403.0113830566406, e * 235.76705932617188, e * 408.0113830566406, e * 234.76705932617188);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 411.0113830566406, e * 234.76705932617188);
            T.bezierCurveTo(e * 446.0113830566406, e * 233.26705932617188, e * 446.0113830566406, e * 233.26705932617188, e * 481.0113830566406, e * 231.76705932617188);
            T.bezierCurveTo(e * 491.0113830566406, e * 232.76705932617188, e * 493.0113830566406, e * 239.76705932617188, e * 491.0113830566406, e * 251.76705932617188);
            T.bezierCurveTo(e * 490.0113830566406, e * 263.7670593261719, e * 490.0113830566406, e * 263.7670593261719, e * 489.0113830566406, e * 275.7670593261719);
            T.bezierCurveTo(e * 487.0113830566406, e * 283.7670593261719, e * 483.0113830566406, e * 284.7670593261719, e * 464.0113830566406, e * 280.7670593261719);
            T.bezierCurveTo(e * 437.0113830566406, e * 273.7670593261719, e * 437.0113830566406, e * 273.7670593261719, e * 410.0113830566406, e * 266.7670593261719);
            T.bezierCurveTo(e * 400.0113830566406, e * 261.7670593261719, e * 401.0113830566406, e * 259.7670593261719, e * 402.0113830566406, e * 249.76705932617188);
            T.bezierCurveTo(e * 401.0113830566406, e * 237.76705932617188, e * 403.0113830566406, e * 235.76705932617188, e * 408.0113830566406, e * 234.76705932617188);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 400.0113830566406, e * 290.7670593261719);
            T.bezierCurveTo(e * 437.0113830566406, e * 301.2670593261719, e * 437.0113830566406, e * 301.2670593261719, e * 474.0113830566406, e * 311.7670593261719);
            T.bezierCurveTo(e * 484.0113830566406, e * 319.7670593261719, e * 481.0113830566406, e * 322.7670593261719, e * 474.0113830566406, e * 335.7670593261719);
            T.bezierCurveTo(e * 465.5113830566406, e * 354.7670593261719, e * 465.5113830566406, e * 354.7670593261719, e * 457.0113830566406, e * 373.7670593261719);
            T.bezierCurveTo(e * 449.0113830566406, e * 386.7670593261719, e * 444.0113830566406, e * 384.7670593261719, e * 427.0113830566406, e * 370.7670593261719);
            T.bezierCurveTo(e * 403.0113830566406, e * 354.7670593261719, e * 403.0113830566406, e * 354.7670593261719, e * 379.0113830566406, e * 338.7670593261719);
            T.bezierCurveTo(e * 371.0113830566406, e * 327.7670593261719, e * 373.0113830566406, e * 323.7670593261719, e * 377.0113830566406, e * 313.7670593261719);
            T.bezierCurveTo(e * 386.0113830566406, e * 292.7670593261719, e * 393.0113830566406, e * 288.7670593261719, e * 398.0113830566406, e * 291.7670593261719);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 400.0113830566406, e * 290.7670593261719);
            T.bezierCurveTo(e * 437.0113830566406, e * 301.2670593261719, e * 437.0113830566406, e * 301.2670593261719, e * 474.0113830566406, e * 311.7670593261719);
            T.bezierCurveTo(e * 484.0113830566406, e * 319.7670593261719, e * 481.0113830566406, e * 322.7670593261719, e * 474.0113830566406, e * 335.7670593261719);
            T.bezierCurveTo(e * 465.5113830566406, e * 354.7670593261719, e * 465.5113830566406, e * 354.7670593261719, e * 457.0113830566406, e * 373.7670593261719);
            T.bezierCurveTo(e * 449.0113830566406, e * 386.7670593261719, e * 444.0113830566406, e * 384.7670593261719, e * 427.0113830566406, e * 370.7670593261719);
            T.bezierCurveTo(e * 403.0113830566406, e * 354.7670593261719, e * 403.0113830566406, e * 354.7670593261719, e * 379.0113830566406, e * 338.7670593261719);
            T.bezierCurveTo(e * 371.0113830566406, e * 327.7670593261719, e * 373.0113830566406, e * 323.7670593261719, e * 377.0113830566406, e * 313.7670593261719);
            T.bezierCurveTo(e * 386.0113830566406, e * 292.7670593261719, e * 393.0113830566406, e * 288.7670593261719, e * 398.0113830566406, e * 291.7670593261719);
            T.closePath();
            se(T, i[3], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 366.0113830566406, e * 361.2216033935547);
            T.bezierCurveTo(e * 393.0113830566406, e * 383.2216033935547, e * 393.0113830566406, e * 383.2216033935547, e * 420.0113830566406, e * 405.2216033935547);
            T.bezierCurveTo(e * 427.0113830566406, e * 414.2216033935547, e * 425.0113830566406, e * 417.2216033935547, e * 413.0113830566406, e * 428.2216033935547);
            T.bezierCurveTo(e * 405.5113830566406, e * 435.2216033935547, e * 405.5113830566406, e * 435.2216033935547, e * 398.0113830566406, e * 442.2216033935547);
            T.bezierCurveTo(e * 388.0113830566406, e * 451.2216033935547, e * 385.0113830566406, e * 445.2216033935547, e * 373.0113830566406, e * 428.2216033935547);
            T.bezierCurveTo(e * 358.5113830566406, e * 408.2216033935547, e * 358.5113830566406, e * 408.2216033935547, e * 344.0113830566406, e * 388.2216033935547);
            T.bezierCurveTo(e * 337.0113830566406, e * 378.2216033935547, e * 342.0113830566406, e * 377.2216033935547, e * 347.0113830566406, e * 371.2216033935547);
            T.bezierCurveTo(e * 359.0113830566406, e * 359.2216033935547, e * 361.0113830566406, e * 358.2216033935547, e * 364.0113830566406, e * 361.2216033935547);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 366.0113830566406, e * 361.2216033935547);
            T.bezierCurveTo(e * 393.0113830566406, e * 383.2216033935547, e * 393.0113830566406, e * 383.2216033935547, e * 420.0113830566406, e * 405.2216033935547);
            T.bezierCurveTo(e * 427.0113830566406, e * 414.2216033935547, e * 425.0113830566406, e * 417.2216033935547, e * 413.0113830566406, e * 428.2216033935547);
            T.bezierCurveTo(e * 405.5113830566406, e * 435.2216033935547, e * 405.5113830566406, e * 435.2216033935547, e * 398.0113830566406, e * 442.2216033935547);
            T.bezierCurveTo(e * 388.0113830566406, e * 451.2216033935547, e * 385.0113830566406, e * 445.2216033935547, e * 373.0113830566406, e * 428.2216033935547);
            T.bezierCurveTo(e * 358.5113830566406, e * 408.2216033935547, e * 358.5113830566406, e * 408.2216033935547, e * 344.0113830566406, e * 388.2216033935547);
            T.bezierCurveTo(e * 337.0113830566406, e * 378.2216033935547, e * 342.0113830566406, e * 377.2216033935547, e * 347.0113830566406, e * 371.2216033935547);
            T.bezierCurveTo(e * 359.0113830566406, e * 359.2216033935547, e * 361.0113830566406, e * 358.2216033935547, e * 364.0113830566406, e * 361.2216033935547);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 323.0113830566406, e * 393.2216033935547);
            T.bezierCurveTo(e * 338.0113830566406, e * 424.7216033935547, e * 338.0113830566406, e * 424.7216033935547, e * 353.0113830566406, e * 456.2216033935547);
            T.bezierCurveTo(e * 355.0113830566406, e * 467.2216033935547, e * 354.0113830566406, e * 469.2216033935547, e * 336.0113830566406, e * 475.2216033935547);
            T.bezierCurveTo(e * 326.0113830566406, e * 478.2216033935547, e * 326.0113830566406, e * 478.2216033935547, e * 316.0113830566406, e * 481.2216033935547);
            T.bezierCurveTo(e * 304.0113830566406, e * 484.2216033935547, e * 304.0113830566406, e * 477.2216033935547, e * 301.0113830566406, e * 454.2216033935547);
            T.bezierCurveTo(e * 295.5113830566406, e * 429.2216033935547, e * 295.5113830566406, e * 429.2216033935547, e * 290.0113830566406, e * 404.2216033935547);
            T.bezierCurveTo(e * 287.0113830566406, e * 396.2216033935547, e * 297.0113830566406, e * 394.2216033935547, e * 303.0113830566406, e * 392.2216033935547);
            T.bezierCurveTo(e * 316.0113830566406, e * 387.2216033935547, e * 318.0113830566406, e * 387.2216033935547, e * 323.0113830566406, e * 394.2216033935547);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 323.0113830566406, e * 393.2216033935547);
            T.bezierCurveTo(e * 338.0113830566406, e * 424.7216033935547, e * 338.0113830566406, e * 424.7216033935547, e * 353.0113830566406, e * 456.2216033935547);
            T.bezierCurveTo(e * 355.0113830566406, e * 467.2216033935547, e * 354.0113830566406, e * 469.2216033935547, e * 336.0113830566406, e * 475.2216033935547);
            T.bezierCurveTo(e * 326.0113830566406, e * 478.2216033935547, e * 326.0113830566406, e * 478.2216033935547, e * 316.0113830566406, e * 481.2216033935547);
            T.bezierCurveTo(e * 304.0113830566406, e * 484.2216033935547, e * 304.0113830566406, e * 477.2216033935547, e * 301.0113830566406, e * 454.2216033935547);
            T.bezierCurveTo(e * 295.5113830566406, e * 429.2216033935547, e * 295.5113830566406, e * 429.2216033935547, e * 290.0113830566406, e * 404.2216033935547);
            T.bezierCurveTo(e * 287.0113830566406, e * 396.2216033935547, e * 297.0113830566406, e * 394.2216033935547, e * 303.0113830566406, e * 392.2216033935547);
            T.bezierCurveTo(e * 316.0113830566406, e * 387.2216033935547, e * 318.0113830566406, e * 387.2216033935547, e * 323.0113830566406, e * 394.2216033935547);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 270.0113830566406, e * 413.2216033935547);
            T.bezierCurveTo(e * 271.0113830566406, e * 445.7216033935547, e * 271.0113830566406, e * 445.7216033935547, e * 272.0113830566406, e * 478.2216033935547);
            T.bezierCurveTo(e * 273.0113830566406, e * 490.2216033935547, e * 267.0113830566406, e * 493.2216033935547, e * 249.01138305664062, e * 490.2216033935547);
            T.bezierCurveTo(e * 222.01138305664062, e * 492.2216033935547, e * 220.01138305664062, e * 485.2216033935547, e * 225.01138305664062, e * 467.2216033935547);
            T.bezierCurveTo(e * 230.51138305664062, e * 440.2216033935547, e * 230.51138305664062, e * 440.2216033935547, e * 236.01138305664062, e * 413.2216033935547);
            T.bezierCurveTo(e * 237.01138305664062, e * 405.2216033935547, e * 238.01138305664062, e * 404.2216033935547, e * 253.01138305664062, e * 403.2216033935547);
            T.bezierCurveTo(e * 269.0113830566406, e * 405.2216033935547, e * 270.0113830566406, e * 407.2216033935547, e * 269.0113830566406, e * 412.2216033935547);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 270.0113830566406, e * 413.2216033935547);
            T.bezierCurveTo(e * 271.0113830566406, e * 445.7216033935547, e * 271.0113830566406, e * 445.7216033935547, e * 272.0113830566406, e * 478.2216033935547);
            T.bezierCurveTo(e * 273.0113830566406, e * 490.2216033935547, e * 267.0113830566406, e * 493.2216033935547, e * 249.01138305664062, e * 490.2216033935547);
            T.bezierCurveTo(e * 222.01138305664062, e * 492.2216033935547, e * 220.01138305664062, e * 485.2216033935547, e * 225.01138305664062, e * 467.2216033935547);
            T.bezierCurveTo(e * 230.51138305664062, e * 440.2216033935547, e * 230.51138305664062, e * 440.2216033935547, e * 236.01138305664062, e * 413.2216033935547);
            T.bezierCurveTo(e * 237.01138305664062, e * 405.2216033935547, e * 238.01138305664062, e * 404.2216033935547, e * 253.01138305664062, e * 403.2216033935547);
            T.bezierCurveTo(e * 269.0113830566406, e * 405.2216033935547, e * 270.0113830566406, e * 407.2216033935547, e * 269.0113830566406, e * 412.2216033935547);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 207.01138305664062, e * 406.2216033935547);
            T.bezierCurveTo(e * 197.51138305664062, e * 440.7216033935547, e * 197.51138305664062, e * 440.7216033935547, e * 188.01138305664062, e * 475.2216033935547);
            T.bezierCurveTo(e * 184.01138305664062, e * 485.2216033935547, e * 179.01138305664062, e * 491.2216033935547, e * 152.01138305664062, e * 477.2216033935547);
            T.bezierCurveTo(e * 136.51138305664062, e * 469.7216033935547, e * 136.51138305664062, e * 469.7216033935547, e * 121.01138305664062, e * 462.2216033935547);
            T.bezierCurveTo(e * 109.01138305664062, e * 453.2216033935547, e * 117.01138305664062, e * 447.2216033935547, e * 133.01138305664062, e * 427.2216033935547);
            T.bezierCurveTo(e * 146.51138305664062, e * 406.7216033935547, e * 146.51138305664062, e * 406.7216033935547, e * 160.01138305664062, e * 386.2216033935547);
            T.bezierCurveTo(e * 163.01138305664062, e * 377.2216033935547, e * 168.01138305664062, e * 378.2216033935547, e * 187.01138305664062, e * 387.2216033935547);
            T.bezierCurveTo(e * 206.01138305664062, e * 395.2216033935547, e * 208.01138305664062, e * 398.2216033935547, e * 207.01138305664062, e * 405.2216033935547);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 207.01138305664062, e * 406.2216033935547);
            T.bezierCurveTo(e * 197.51138305664062, e * 440.7216033935547, e * 197.51138305664062, e * 440.7216033935547, e * 188.01138305664062, e * 475.2216033935547);
            T.bezierCurveTo(e * 184.01138305664062, e * 485.2216033935547, e * 179.01138305664062, e * 491.2216033935547, e * 152.01138305664062, e * 477.2216033935547);
            T.bezierCurveTo(e * 136.51138305664062, e * 469.7216033935547, e * 136.51138305664062, e * 469.7216033935547, e * 121.01138305664062, e * 462.2216033935547);
            T.bezierCurveTo(e * 109.01138305664062, e * 453.2216033935547, e * 117.01138305664062, e * 447.2216033935547, e * 133.01138305664062, e * 427.2216033935547);
            T.bezierCurveTo(e * 146.51138305664062, e * 406.7216033935547, e * 146.51138305664062, e * 406.7216033935547, e * 160.01138305664062, e * 386.2216033935547);
            T.bezierCurveTo(e * 163.01138305664062, e * 377.2216033935547, e * 168.01138305664062, e * 378.2216033935547, e * 187.01138305664062, e * 387.2216033935547);
            T.bezierCurveTo(e * 206.01138305664062, e * 395.2216033935547, e * 208.01138305664062, e * 398.2216033935547, e * 207.01138305664062, e * 405.2216033935547);
            T.closePath();
            se(T, i[3], i[2], e * 12);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 130.01138305664062, e * 375.2216033935547);
            T.bezierCurveTo(e * 109.51138305664062, e * 400.7216033935547, e * 109.51138305664062, e * 400.7216033935547, e * 89.01138305664062, e * 426.2216033935547);
            T.bezierCurveTo(e * 82.01138305664062, e * 435.2216033935547, e * 77.01138305664062, e * 435.2216033935547, e * 62.011383056640625, e * 417.2216033935547);
            T.bezierCurveTo(e * 43.011383056640625, e * 397.2216033935547, e * 47.011383056640625, e * 395.2216033935547, e * 62.011383056640625, e * 382.2216033935547);
            T.bezierCurveTo(e * 84.01138305664062, e * 366.7216033935547, e * 84.01138305664062, e * 366.7216033935547, e * 106.01138305664062, e * 351.2216033935547);
            T.bezierCurveTo(e * 116.01138305664062, e * 344.2216033935547, e * 120.01138305664062, e * 347.2216033935547, e * 127.01138305664062, e * 356.2216033935547);
            T.bezierCurveTo(e * 137.01138305664062, e * 366.2216033935547, e * 137.01138305664062, e * 366.2216033935547, e * 131.01138305664062, e * 376.2216033935547);
            T.closePath();
            se(T, i[0], i[0], e * 12);
            T.globalAlpha = 1;
            T.translate(0, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 130.01138305664062, e * 375.2216033935547);
            T.bezierCurveTo(e * 109.51138305664062, e * 400.7216033935547, e * 109.51138305664062, e * 400.7216033935547, e * 89.01138305664062, e * 426.2216033935547);
            T.bezierCurveTo(e * 82.01138305664062, e * 435.2216033935547, e * 77.01138305664062, e * 435.2216033935547, e * 62.011383056640625, e * 417.2216033935547);
            T.bezierCurveTo(e * 43.011383056640625, e * 397.2216033935547, e * 47.011383056640625, e * 395.2216033935547, e * 62.011383056640625, e * 382.2216033935547);
            T.bezierCurveTo(e * 84.01138305664062, e * 366.7216033935547, e * 84.01138305664062, e * 366.7216033935547, e * 106.01138305664062, e * 351.2216033935547);
            T.bezierCurveTo(e * 116.01138305664062, e * 344.2216033935547, e * 120.01138305664062, e * 347.2216033935547, e * 127.01138305664062, e * 356.2216033935547);
            T.bezierCurveTo(e * 137.01138305664062, e * 366.2216033935547, e * 137.01138305664062, e * 366.2216033935547, e * 131.01138305664062, e * 376.2216033935547);
            T.closePath();
            se(T, i[4], i[2], e * 12);
            return o;
        }
        function So(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 218;
            o.height = e * 185;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 64, e * 53.135406494140625);
            T.bezierCurveTo(e * 92, e * 17.135406494140625, e * 116, e * 11.135406494140625, e * 158, e * 53.135406494140625);
            T.bezierCurveTo(e * 178, e * 74.13540649414062, e * 181, e * 81.13540649414062, e * 196, e * 101.13540649414062);
            T.bezierCurveTo(e * 214, e * 127.13540649414062, e * 192, e * 138.13540649414062, e * 173, e * 149.13540649414062);
            T.bezierCurveTo(e * 137, e * 166.13540649414062, e * 74, e * 170.13540649414062, e * 36, e * 141.13540649414062);
            T.bezierCurveTo(e * 13, e * 127.13540649414062, e * 20, e * 119.13540649414062, e * 30, e * 103.13540649414062);
            T.bezierCurveTo(e * 48, e * 71.13540649414062, e * 54, e * 67.13540649414062, e * 63, e * 54.135406494140625);
            T.closePath();
            se(T, i[0], i[1], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 107, e * 25.135406494140625);
            T.bezierCurveTo(e * 62, e * 90.13540649414062, e * 54, e * 129.13540649414062, e * 53, e * 151.13540649414062);
            T.bezierCurveTo(e * 39.5, e * 142.13540649414062, e * 39.5, e * 142.13540649414062, e * 26, e * 133.13540649414062);
            T.bezierCurveTo(e * 23.5, e * 128.63540649414062, e * 23.5, e * 128.63540649414062, e * 21, e * 124.13540649414062);
            T.bezierCurveTo(e * 22, e * 113.13540649414062, e * 31, e * 99.13540649414062, e * 40, e * 88.13540649414062);
            T.bezierCurveTo(e * 54.5, e * 67.13540649414062, e * 54.5, e * 67.13540649414062, e * 69, e * 46.135406494140625);
            T.bezierCurveTo(e * 80.5, e * 36.635406494140625, e * 80.5, e * 36.635406494140625, e * 92, e * 27.135406494140625);
            T.closePath();
            se(T, i[1]);
            return o;
        }
        function Co(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 167;
            o.height = e * 136;
            T.globalAlpha = 0.5;
            T.save();
            T.translate(e * 76.71426391601562, e * 67.85713195800781);
            Re(T, e * -57.5, e * -54.5, e * 115, e * 109, e * 15);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 0.8;
            T.save();
            T.translate(e * 76.71426391601562, e * 67.85713195800781);
            Re(T, e * -57.5, e * -54.5, e * 115, e * 109, e * 15);
            T.restore();
            se(T, undefined, i[1], e * 7);
            T.globalAlpha = 0.5;
            T.save();
            T.translate(e * 91.21426391601562, e * 67.35713195800781);
            Re(T, e * -56, e * -55, e * 115, e * 109, e * 15);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.save();
            T.translate(e * 91.21426391601562, e * 67.35713195800781);
            Re(T, e * -56, e * -55, e * 115, e * 109, e * 15);
            T.restore();
            se(T, undefined, i[1], e * 7);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 131.21426391601562, e * 70.35713195800781);
            T.bezierCurveTo(e * 133.21426391601562, e * 95.35713195800781, e * 128.21426391601562, e * 109.35713195800781, e * 108.21426391601562, e * 108.35713195800781);
            se(T, undefined, i[1], e * 10);
            return o;
        }
        function bo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 163;
            o.height = e * 163;
            T.save();
            T.translate(e * 82.5, e * 81.1015625);
            T.rotate(0);
            Re(T, e * -65.5, e * -66, e * 131, e * 131, e * 5);
            T.restore();
            se(T, i[1]);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 80, e * 17.1015625);
            Re(T, e * -64, e * -4.5, e * 129, e * 9, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 80, e * 17.1015625);
            Re(T, e * -64, e * -4.5, e * 129, e * 9, e * 5);
            T.restore();
            se(T, i[2], i[3], e * 3);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 145.5, e * 83.6015625);
            Re(T, e * -4.5, e * -61, e * 9, e * 129, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 145.5, e * 83.6015625);
            Re(T, e * -4.5, e * -61, e * 9, e * 129, e * 5);
            T.restore();
            se(T, i[2], i[3], e * 3);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 17.5, e * 82.6015625);
            Re(T, e * -4.5, e * -65, e * 9, e * 129, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 17.5, e * 82.6015625);
            Re(T, e * -4.5, e * -65, e * 9, e * 129, e * 5);
            T.restore();
            se(T, i[2], i[3], e * 3);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 80.5, e * 145.6015625);
            Re(T, e * -65.5, e * -4, e * 129, e * 9, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 80.5, e * 145.6015625);
            Re(T, e * -65.5, e * -4, e * 129, e * 9, e * 5);
            T.restore();
            se(T, i[2], i[3], e * 3);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 17, e * 18.1015625);
            Re(T, e * -11, e * -11.5, e * 22, e * 22, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 17, e * 18.1015625);
            Re(T, e * -11, e * -11.5, e * 22, e * 22, e * 5);
            T.restore();
            se(T, i[2], i[3], e * 3);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 145.5, e * 16.6015625);
            Re(T, e * -10.5, e * -11.5, e * 21, e * 22, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 145.5, e * 16.6015625);
            Re(T, e * -10.5, e * -11.5, e * 21, e * 22, e * 5);
            T.restore();
            se(T, i[2], i[3], e * 3);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 145.5, e * 144.1015625);
            Re(T, e * -10.5, e * -11, e * 22, e * 22, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 145.5, e * 144.1015625);
            Re(T, e * -10.5, e * -11, e * 22, e * 22, e * 5);
            T.restore();
            se(T, i[2], i[3], e * 3);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            T.translate(e * 17.5, e * 145.1015625);
            Re(T, e * -11.5, e * -12, e * 22, e * 22, e * 5);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            T.translate(e * 17.5, e * 145.1015625);
            Re(T, e * -11.5, e * -12, e * 22, e * 22, e * 5);
            T.restore();
            se(T, i[2], i[3], e * 3);
            return o;
        }
        function No(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 168;
            o.height = e * 100;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 10, e * 5);
            T.save();
            T.translate(e * 24.5, e * 44.30000305175781);
            Re(T, e * -19.5, e * -8.5, e * 39, e * 17, e * 10);
            T.restore();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115, e * 37.80000305175781);
            T.bezierCurveTo(e * 142, e * 37.80000305175781, e * 140, e * 37.80000305175781, e * 141, e * 37.80000305175781);
            T.bezierCurveTo(e * 147, e * 28.800003051757812, e * 149, e * 26.800003051757812, e * 153, e * 32.80000305175781);
            T.bezierCurveTo(e * 160, e * 42.80000305175781, e * 157, e * 50.80000305175781, e * 153, e * 58.80000305175781);
            T.bezierCurveTo(e * 148, e * 62.80000305175781, e * 147, e * 59.80000305175781, e * 143, e * 52.80000305175781);
            T.bezierCurveTo(e * 129, e * 52.80000305175781, e * 129, e * 52.80000305175781, e * 115, e * 52.80000305175781);
            T.closePath();
            se(T, i[0]);
            he(T, e * 78, e * 44.80000305175781, e * 39.44616584663204);
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -10, e * -5);
            T.save();
            T.translate(e * 24.5, e * 44.30000305175781);
            Re(T, e * -19.5, e * -8.5, e * 39, e * 17, e * 10);
            T.restore();
            se(T, undefined, i[3], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115, e * 37.80000305175781);
            T.bezierCurveTo(e * 142, e * 37.80000305175781, e * 140, e * 37.80000305175781, e * 141, e * 37.80000305175781);
            T.bezierCurveTo(e * 147, e * 28.800003051757812, e * 149, e * 26.800003051757812, e * 153, e * 32.80000305175781);
            T.bezierCurveTo(e * 160, e * 42.80000305175781, e * 157, e * 50.80000305175781, e * 153, e * 58.80000305175781);
            T.bezierCurveTo(e * 148, e * 62.80000305175781, e * 147, e * 59.80000305175781, e * 143, e * 52.80000305175781);
            T.bezierCurveTo(e * 129, e * 52.80000305175781, e * 129, e * 52.80000305175781, e * 115, e * 52.80000305175781);
            T.closePath();
            se(T, undefined, i[3], e * 6);
            he(T, e * 78, e * 44.80000305175781, e * 42.44616584663204);
            se(T, undefined, i[3], e * 6);
            T.save();
            T.translate(e * 24.5, e * 44.30000305175781);
            Re(T, e * -19.5, e * -8.5, e * 39, e * 17, e * 10);
            T.restore();
            se(T, i[1]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115, e * 37.80000305175781);
            T.bezierCurveTo(e * 142, e * 37.80000305175781, e * 140, e * 37.80000305175781, e * 141, e * 37.80000305175781);
            T.bezierCurveTo(e * 147, e * 28.800003051757812, e * 149, e * 26.800003051757812, e * 153, e * 32.80000305175781);
            T.bezierCurveTo(e * 160, e * 42.80000305175781, e * 157, e * 50.80000305175781, e * 153, e * 58.80000305175781);
            T.bezierCurveTo(e * 148, e * 62.80000305175781, e * 147, e * 59.80000305175781, e * 143, e * 52.80000305175781);
            T.bezierCurveTo(e * 129, e * 52.80000305175781, e * 129, e * 52.80000305175781, e * 115, e * 52.80000305175781);
            T.closePath();
            se(T, i[1]);
            he(T, e * 78, e * 44.80000305175781, e * 39.44616584663204);
            se(T, i[2], i[1], e * 4);
            he(T, e * 78, e * 44.80000305175781, e * 29.68164415931166);
            se(T, i[3], i[1], e * 4);
            he(T, e * 78, e * 44, e * 20);
            se(T, i[4]);
            return o;
        }
        function Do(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 158;
            o.height = e * 201;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 96.5, e * 76.421875);
            T.bezierCurveTo(e * 100.5, e * 64.421875, e * 103.5, e * 62.421875, e * 110.5, e * 65.421875);
            T.bezierCurveTo(e * 116.5, e * 66.421875, e * 117.5, e * 67.421875, e * 112.5, e * 73.421875);
            T.bezierCurveTo(e * 107, e * 79.921875, e * 107, e * 79.921875, e * 101.5, e * 86.421875);
            T.closePath();
            se(T, i[8], i[8], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 61.5, e * 78.421875);
            T.bezierCurveTo(e * 57.5, e * 73.421875, e * 51.5, e * 66.421875, e * 45.5, e * 68.421875);
            T.bezierCurveTo(e * 32.5, e * 73.421875, e * 38.5, e * 75.421875, e * 46.5, e * 81.421875);
            T.bezierCurveTo(e * 51.5, e * 84.921875, e * 51.5, e * 84.921875, e * 56.5, e * 88.421875);
            T.closePath();
            se(T, i[8], i[8], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 116.5, e * 127.421875);
            T.bezierCurveTo(e * 124.5, e * 108.421875, e * 129.5, e * 104.421875, e * 141.5, e * 107.421875);
            T.bezierCurveTo(e * 156.5, e * 112.421875, e * 153.5, e * 113.421875, e * 132.5, e * 134.421875);
            T.bezierCurveTo(e * 123.5, e * 141.921875, e * 123.5, e * 141.921875, e * 114.5, e * 149.421875);
            T.closePath();
            se(T, i[8], i[8], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 41.5, e * 134.421875);
            T.bezierCurveTo(e * 30.5, e * 119.421875, e * 25.5, e * 111.421875, e * 12.5, e * 115.421875);
            T.bezierCurveTo(e * 4.5, e * 120.421875, e * 4.5, e * 121.421875, e * 26.5, e * 142.421875);
            T.bezierCurveTo(e * 35, e * 149.921875, e * 35, e * 149.921875, e * 43.5, e * 157.421875);
            T.closePath();
            se(T, i[8], i[8], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 78.5, e * 51.921875);
            T.bezierCurveTo(e * 99.5, e * 75.921875, e * 110.5, e * 96.921875, e * 118.5, e * 120.921875);
            T.bezierCurveTo(e * 121.5, e * 140.921875, e * 107.5, e * 179.921875, e * 75.5, e * 183.921875);
            T.bezierCurveTo(e * 30.5, e * 169.921875, e * 37.5, e * 131.921875, e * 34.5, e * 120.921875);
            T.bezierCurveTo(e * 41.5, e * 89.921875, e * 61.5, e * 67.921875, e * 78.5, e * 51.921875);
            T.closePath();
            se(T, i[8], i[8], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72.5, e * 72.421875);
            T.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
            T.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
            T.closePath();
            se(T, i[8], i[8], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42.5, e * 163.421875);
            T.bezierCurveTo(e * 62.5, e * 185.421875, e * 86.5, e * 186.421875, e * 111.5, e * 165.421875);
            T.bezierCurveTo(e * 107.5, e * 176.421875, e * 95.5, e * 187.421875, e * 75.5, e * 188.421875);
            T.bezierCurveTo(e * 53.5, e * 188.421875, e * 43.5, e * 171.421875, e * 42.5, e * 164.421875);
            T.closePath();
            se(T, i[8], i[8], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 79.5, e * 61.421875);
            T.bezierCurveTo(e * 88.5, e * 31.421875, e * 81.5, e * 16.421875, e * 75.5, e * 7.421875);
            T.bezierCurveTo(e * 77.5, e * 28.421875, e * 77.5, e * 37.421875, e * 68.5, e * 42.421875);
            T.bezierCurveTo(e * 79.5, e * 57.421875, e * 79.5, e * 58.421875, e * 80.5, e * 61.421875);
            T.closePath();
            se(T, i[8], i[8], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72.5, e * 72.421875);
            T.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
            T.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
            T.closePath();
            se(T, i[8], i[8], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 96.5, e * 76.421875);
            T.bezierCurveTo(e * 100.5, e * 64.421875, e * 103.5, e * 62.421875, e * 110.5, e * 65.421875);
            T.bezierCurveTo(e * 116.5, e * 66.421875, e * 117.5, e * 67.421875, e * 112.5, e * 73.421875);
            T.bezierCurveTo(e * 107, e * 79.921875, e * 107, e * 79.921875, e * 101.5, e * 86.421875);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 61.5, e * 78.421875);
            T.bezierCurveTo(e * 57.5, e * 73.421875, e * 51.5, e * 66.421875, e * 45.5, e * 68.421875);
            T.bezierCurveTo(e * 32.5, e * 73.421875, e * 38.5, e * 75.421875, e * 46.5, e * 81.421875);
            T.bezierCurveTo(e * 51.5, e * 84.921875, e * 51.5, e * 84.921875, e * 56.5, e * 88.421875);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 116.5, e * 127.421875);
            T.bezierCurveTo(e * 124.5, e * 108.421875, e * 129.5, e * 104.421875, e * 141.5, e * 107.421875);
            T.bezierCurveTo(e * 156.5, e * 112.421875, e * 153.5, e * 113.421875, e * 132.5, e * 134.421875);
            T.bezierCurveTo(e * 123.5, e * 141.921875, e * 123.5, e * 141.921875, e * 114.5, e * 149.421875);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 41.5, e * 134.421875);
            T.bezierCurveTo(e * 30.5, e * 119.421875, e * 25.5, e * 111.421875, e * 12.5, e * 115.421875);
            T.bezierCurveTo(e * 4.5, e * 120.421875, e * 4.5, e * 121.421875, e * 26.5, e * 142.421875);
            T.bezierCurveTo(e * 35, e * 149.921875, e * 35, e * 149.921875, e * 43.5, e * 157.421875);
            T.closePath();
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 78.5, e * 51.921875);
            T.bezierCurveTo(e * 99.5, e * 75.921875, e * 110.5, e * 96.921875, e * 118.5, e * 120.921875);
            T.bezierCurveTo(e * 121.5, e * 140.921875, e * 107.5, e * 179.921875, e * 75.5, e * 183.921875);
            T.bezierCurveTo(e * 30.5, e * 169.921875, e * 37.5, e * 131.921875, e * 34.5, e * 120.921875);
            T.bezierCurveTo(e * 41.5, e * 89.921875, e * 61.5, e * 67.921875, e * 78.5, e * 51.921875);
            T.closePath();
            se(T, i[3], i[2], e * 4);
            he(T, e * 108.5, e * 148.421875, e * 9);
            se(T, i[5]);
            he(T, e * 106.5, e * 144.421875, e * 3);
            se(T, i[6]);
            he(T, e * 46.5, e * 148.421875, e * 9);
            se(T, i[5]);
            he(T, e * 44.5, e * 144.421875, e * 3);
            se(T, i[6]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 116.5, e * 114.421875);
            T.bezierCurveTo(e * 121.5, e * 137.421875, e * 118.5, e * 133.421875, e * 108.5, e * 139.421875);
            T.bezierCurveTo(e * 94.5, e * 146.421875, e * 96.5, e * 148.421875, e * 95.5, e * 152.421875);
            se(T, i[3], i[2], e * 4);
            T.beginPath();
            T.translate(0, e * -2);
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 35.5, e * 131.421875);
            T.bezierCurveTo(e * 36.5, e * 140.421875, e * 39.5, e * 140.421875, e * 49.5, e * 143.421875);
            T.bezierCurveTo(e * 59.5, e * 149.421875, e * 57.5, e * 151.421875, e * 59.5, e * 155.421875);
            se(T, i[3], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84.5, e * 57.421875);
            T.bezierCurveTo(e * 101.5, e * 120.421875, e * 92.5, e * 127.421875, e * 78.5, e * 134.421875);
            T.bezierCurveTo(e * 51.5, e * 131.421875, e * 63.5, e * 102.421875, e * 70.5, e * 59.421875);
            T.bezierCurveTo(e * 75, e * 55.421875, e * 78.5, e * 52.421875, e * 79.5, e * 51.421875);
            T.closePath();
            se(T, i[4]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 79.5, e * 61.421875);
            T.bezierCurveTo(e * 88.5, e * 31.421875, e * 81.5, e * 16.421875, e * 75.5, e * 7.421875);
            T.bezierCurveTo(e * 77.5, e * 28.421875, e * 77.5, e * 37.421875, e * 68.5, e * 42.421875);
            T.bezierCurveTo(e * 79.5, e * 57.421875, e * 79.5, e * 58.421875, e * 80.5, e * 61.421875);
            T.closePath();
            se(T, i[3], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72.5, e * 72.421875);
            T.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
            T.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
            T.closePath();
            se(T, i[3], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 87.5, e * 154.421875);
            T.bezierCurveTo(e * 93.5, e * 163.921875, e * 93.5, e * 163.921875, e * 99.5, e * 173.421875);
            T.bezierCurveTo(e * 95, e * 177.421875, e * 95, e * 177.421875, e * 90.5, e * 181.421875);
            T.bezierCurveTo(e * 89, e * 167.921875, e * 89, e * 167.921875, e * 87.5, e * 154.421875);
            T.closePath();
            se(T, i[6], i[7], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 81.5, e * 164.421875);
            T.bezierCurveTo(e * 84, e * 172.921875, e * 84, e * 172.921875, e * 86.5, e * 181.421875);
            T.bezierCurveTo(e * 82.5, e * 182.421875, e * 82.5, e * 182.421875, e * 78.5, e * 183.421875);
            T.closePath();
            se(T, i[6], i[7], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 72.5, e * 164.421875);
            T.bezierCurveTo(e * 73.5, e * 173.921875, e * 73.5, e * 173.921875, e * 74.5, e * 183.421875);
            T.bezierCurveTo(e * 70.5, e * 182.921875, e * 70.5, e * 182.921875, e * 66.5, e * 182.421875);
            T.closePath();
            se(T, i[6], i[7], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 65.5, e * 156.421875);
            T.bezierCurveTo(e * 65, e * 168.421875, e * 65, e * 168.421875, e * 64.5, e * 180.421875);
            T.bezierCurveTo(e * 58.5, e * 177.421875, e * 58.5, e * 177.421875, e * 52.5, e * 174.421875);
            T.closePath();
            se(T, i[6], i[7], e * 2);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 42.5, e * 163.421875);
            T.bezierCurveTo(e * 62.5, e * 185.421875, e * 86.5, e * 186.421875, e * 111.5, e * 165.421875);
            T.bezierCurveTo(e * 107.5, e * 176.421875, e * 95.5, e * 187.421875, e * 75.5, e * 188.421875);
            T.bezierCurveTo(e * 53.5, e * 188.421875, e * 43.5, e * 171.421875, e * 42.5, e * 164.421875);
            T.closePath();
            se(T, i[3], i[2], e * 4);
            return o;
        }
        function mo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 170;
            T.translate(0, e * -170);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 159.5, e * 322.0625);
            T.bezierCurveTo(e * 240.5, e * 293.0625, e * 240.5, e * 293.0625, e * 321.5, e * 264.0625);
            T.bezierCurveTo(e * 276.5, e * 230.0625, e * 276.5, e * 230.0625, e * 231.5, e * 196.0625);
            T.bezierCurveTo(e * 158.5, e * 221.5625, e * 158.5, e * 221.5625, e * 85.5, e * 247.0625);
            T.closePath();
            se(T, i[0], i[1], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 212.5, e * 270.0625);
            T.bezierCurveTo(e * 235, e * 261.5625, e * 235, e * 261.5625, e * 257.5, e * 253.0625);
            T.closePath();
            se(T, undefined, i[0], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 193.5, e * 226.0625);
            T.bezierCurveTo(e * 204.5, e * 242.0625, e * 242.5, e * 237.0625, e * 251.5, e * 225.0625);
            T.bezierCurveTo(e * 246.5, e * 195.0625, e * 205.5, e * 190.0625, e * 193.5, e * 227.0625);
            T.closePath();
            se(T, i[2], i[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 164.5, e * 245.0625);
            T.bezierCurveTo(e * 182.5, e * 264.0625, e * 252.5, e * 258.0625, e * 276.5, e * 244.0625);
            T.bezierCurveTo(e * 265.5, e * 226.0625, e * 244.5, e * 231.0625, e * 229.5, e * 230.0625);
            T.bezierCurveTo(e * 205.5, e * 227.0625, e * 175.5, e * 202.0625, e * 162.5, e * 244.0625);
            T.closePath();
            se(T, i[2], i[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115.5, e * 260.0625);
            T.bezierCurveTo(e * 134.5, e * 279.0625, e * 170.5, e * 275.0625, e * 191.5, e * 257.0625);
            T.bezierCurveTo(e * 174.5, e * 208.0625, e * 142.5, e * 197.0625, e * 116.5, e * 259.0625);
            T.closePath();
            se(T, i[2], i[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 152.5, e * 278.0625);
            T.bezierCurveTo(e * 165.5, e * 294.0625, e * 200.5, e * 287.0625, e * 216.5, e * 278.0625);
            T.bezierCurveTo(e * 206.5, e * 247.0625, e * 173.5, e * 233.0625, e * 153.5, e * 276.0625);
            T.closePath();
            se(T, i[2], i[3], e * 12);
            return o;
        }
        function co(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 272;
            o.height = e * 264;
            T.translate(0, e * 20);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56.999969482421875, e * 84.517333984375);
            T.bezierCurveTo(e * 61.999969482421875, e * 58.517333984375, e * 79.99996948242188, e * 50.517333984375, e * 102.99996948242188, e * 50.517333984375);
            T.bezierCurveTo(e * 119.99996948242188, e * 26.517333984375, e * 137.99996948242188, e * 32.517333984375, e * 156.99996948242188, e * 44.517333984375);
            T.bezierCurveTo(e * 187.99996948242188, e * 42.517333984375, e * 195.99996948242188, e * 50.517333984375, e * 202.99996948242188, e * 77.517333984375);
            T.bezierCurveTo(e * 229.99996948242188, e * 80.517333984375, e * 231.99996948242188, e * 96.517333984375, e * 229.99996948242188, e * 118.517333984375);
            T.bezierCurveTo(e * 241.99996948242188, e * 147.517333984375, e * 236.99996948242188, e * 148.517333984375, e * 220.99996948242188, e * 165.517333984375);
            T.bezierCurveTo(e * 222.99996948242188, e * 192.517333984375, e * 209.99996948242188, e * 212.517333984375, e * 177.99996948242188, e * 213.517333984375);
            T.bezierCurveTo(e * 159.99996948242188, e * 234.517333984375, e * 141.99996948242188, e * 234.517333984375, e * 116.99996948242188, e * 222.517333984375);
            T.bezierCurveTo(e * 72.99996948242188, e * 226.517333984375, e * 66.99996948242188, e * 207.517333984375, e * 65.99996948242188, e * 190.517333984375);
            T.bezierCurveTo(e * 35.999969482421875, e * 180.517333984375, e * 30.999969482421875, e * 162.517333984375, e * 39.999969482421875, e * 135.517333984375);
            T.bezierCurveTo(e * 23.999969482421875, e * 110.517333984375, e * 43.999969482421875, e * 90.517333984375, e * 55.999969482421875, e * 85.517333984375);
            T.closePath();
            se(T, i[0]);
            T.translate(0, e * -20);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56.999969482421875, e * 84.517333984375);
            T.bezierCurveTo(e * 61.999969482421875, e * 58.517333984375, e * 79.99996948242188, e * 50.517333984375, e * 102.99996948242188, e * 50.517333984375);
            T.bezierCurveTo(e * 119.99996948242188, e * 26.517333984375, e * 137.99996948242188, e * 32.517333984375, e * 156.99996948242188, e * 44.517333984375);
            T.bezierCurveTo(e * 187.99996948242188, e * 42.517333984375, e * 195.99996948242188, e * 50.517333984375, e * 202.99996948242188, e * 77.517333984375);
            T.bezierCurveTo(e * 229.99996948242188, e * 80.517333984375, e * 231.99996948242188, e * 96.517333984375, e * 229.99996948242188, e * 118.517333984375);
            T.bezierCurveTo(e * 241.99996948242188, e * 147.517333984375, e * 236.99996948242188, e * 148.517333984375, e * 220.99996948242188, e * 165.517333984375);
            T.bezierCurveTo(e * 222.99996948242188, e * 192.517333984375, e * 209.99996948242188, e * 212.517333984375, e * 177.99996948242188, e * 213.517333984375);
            T.bezierCurveTo(e * 159.99996948242188, e * 234.517333984375, e * 141.99996948242188, e * 234.517333984375, e * 116.99996948242188, e * 222.517333984375);
            T.bezierCurveTo(e * 72.99996948242188, e * 226.517333984375, e * 66.99996948242188, e * 207.517333984375, e * 65.99996948242188, e * 190.517333984375);
            T.bezierCurveTo(e * 35.999969482421875, e * 180.517333984375, e * 30.999969482421875, e * 162.517333984375, e * 39.999969482421875, e * 135.517333984375);
            T.bezierCurveTo(e * 23.999969482421875, e * 110.517333984375, e * 43.999969482421875, e * 90.517333984375, e * 55.999969482421875, e * 85.517333984375);
            T.closePath();
            se(T, i[1], i[2], e * 8);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 123.99996948242188, e * 116.18402099609375);
            T.bezierCurveTo(e * 115.99996948242188, e * 99.18402099609375, e * 109.99996948242188, e * 74.18402099609375, e * 109.99996948242188, e * 63.18402099609375);
            T.bezierCurveTo(e * 115.99996948242188, e * 69.18402099609375, e * 125.99996948242188, e * 87.18402099609375, e * 137.99996948242188, e * 112.18402099609375);
            T.bezierCurveTo(e * 142.99996948242188, e * 84.18402099609375, e * 143.99996948242188, e * 76.18402099609375, e * 153.99996948242188, e * 62.18402099609375);
            T.bezierCurveTo(e * 155.99996948242188, e * 79.18402099609375, e * 149.99996948242188, e * 110.18402099609375, e * 151.99996948242188, e * 117.18402099609375);
            T.bezierCurveTo(e * 162.99996948242188, e * 104.18402099609375, e * 180.99996948242188, e * 91.18402099609375, e * 191.99996948242188, e * 91.18402099609375);
            T.bezierCurveTo(e * 185.99996948242188, e * 102.18402099609375, e * 180.99996948242188, e * 106.18402099609375, e * 160.99996948242188, e * 124.18402099609375);
            T.bezierCurveTo(e * 190.99996948242188, e * 121.18402099609375, e * 199.99996948242188, e * 120.18402099609375, e * 207.99996948242188, e * 123.18402099609375);
            T.bezierCurveTo(e * 199.99996948242188, e * 129.18402099609375, e * 181.99996948242188, e * 132.18402099609375, e * 160.99996948242188, e * 135.18402099609375);
            T.bezierCurveTo(e * 179.99996948242188, e * 142.18402099609375, e * 193.99996948242188, e * 151.18402099609375, e * 196.99996948242188, e * 156.18402099609375);
            T.bezierCurveTo(e * 185.99996948242188, e * 156.18402099609375, e * 163.99996948242188, e * 149.18402099609375, e * 152.99996948242188, e * 147.18402099609375);
            T.bezierCurveTo(e * 157.99996948242188, e * 155.18402099609375, e * 165.99996948242188, e * 176.18402099609375, e * 169.99996948242188, e * 195.18402099609375);
            T.bezierCurveTo(e * 162.99996948242188, e * 190.18402099609375, e * 147.99996948242188, e * 167.18402099609375, e * 139.99996948242188, e * 153.18402099609375);
            T.bezierCurveTo(e * 137.99996948242188, e * 167.18402099609375, e * 126.99996948242188, e * 194.18402099609375, e * 119.99996948242188, e * 204.18402099609375);
            T.bezierCurveTo(e * 117.99996948242188, e * 186.18402099609375, e * 123.99996948242188, e * 165.18402099609375, e * 126.99996948242188, e * 149.18402099609375);
            T.bezierCurveTo(e * 110.99996948242188, e * 163.18402099609375, e * 103.99996948242188, e * 170.18402099609375, e * 82.99996948242188, e * 177.18402099609375);
            T.bezierCurveTo(e * 90.99996948242188, e * 162.18402099609375, e * 99.99996948242188, e * 153.18402099609375, e * 117.99996948242188, e * 140.18402099609375);
            T.bezierCurveTo(e * 97.99996948242188, e * 140.18402099609375, e * 83.99996948242188, e * 139.18402099609375, e * 65.99996948242188, e * 132.18402099609375);
            T.bezierCurveTo(e * 77.99996948242188, e * 127.18402099609375, e * 95.99996948242188, e * 127.18402099609375, e * 115.99996948242188, e * 127.18402099609375);
            T.bezierCurveTo(e * 91.99996948242188, e * 113.18402099609375, e * 84.99996948242188, e * 107.18402099609375, e * 76.99996948242188, e * 96.18402099609375);
            T.bezierCurveTo(e * 94.99996948242188, e * 99.18402099609375, e * 109.99996948242188, e * 109.18402099609375, e * 123.99996948242188, e * 116.18402099609375);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 131.99996948242188, e * 119.18402099609375);
            T.bezierCurveTo(e * 141.99996948242188, e * 119.18402099609375, e * 145.99996948242188, e * 116.18402099609375, e * 147.99996948242188, e * 109.18402099609375);
            T.bezierCurveTo(e * 151.99996948242188, e * 107.18402099609375, e * 159.99996948242188, e * 107.18402099609375, e * 156.99996948242188, e * 123.18402099609375);
            T.bezierCurveTo(e * 155.99996948242188, e * 140.18402099609375, e * 142.99996948242188, e * 149.18402099609375, e * 132.99996948242188, e * 147.18402099609375);
            T.bezierCurveTo(e * 119.99996948242188, e * 144.18402099609375, e * 113.99996948242188, e * 122.18402099609375, e * 131.99996948242188, e * 119.18402099609375);
            T.closePath();
            se(T, i[4], i[5], e * 6);
            return o;
        }
        function vo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 247;
            o.height = e * 247;
            T.translate(0, e * 10);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 150, e * 62);
            T.bezierCurveTo(e * 151.5, e * 71.5, e * 149, e * 70, e * 153, e * 81);
            T.bezierCurveTo(e * 158, e * 73.5, e * 158, e * 73.5, e * 163, e * 66);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 164, e * 171);
            T.bezierCurveTo(e * 149, e * 159, e * 156.5, e * 165, e * 149, e * 159);
            T.bezierCurveTo(e * 149, e * 167, e * 149, e * 170, e * 152, e * 178);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 132, e * 95);
            T.bezierCurveTo(e * 154, e * 102, e * 154, e * 126, e * 137, e * 139);
            T.bezierCurveTo(e * 113, e * 152, e * 89, e * 136, e * 80, e * 121);
            T.bezierCurveTo(e * 57, e * 89, e * 69, e * 63, e * 79, e * 52);
            T.bezierCurveTo(e * 110, e * 20, e * 139, e * 21, e * 150, e * 25);
            T.bezierCurveTo(e * 197, e * 36, e * 221, e * 67, e * 226, e * 90);
            T.bezierCurveTo(e * 234, e * 134, e * 214, e * 177, e * 195, e * 197);
            T.bezierCurveTo(e * 144, e * 242, e * 79, e * 216, e * 58, e * 206);
            T.bezierCurveTo(e * 13, e * 174, e * 20, e * 134, e * 23, e * 107);
            T.bezierCurveTo(e * 26, e * 78, e * 33, e * 60, e * 38, e * 43);
            T.bezierCurveTo(e * 42, e * 32, e * 47, e * 32, e * 50, e * 36);
            T.bezierCurveTo(e * 54, e * 37, e * 50, e * 52, e * 44, e * 87);
            T.bezierCurveTo(e * 40, e * 115, e * 46, e * 142, e * 57, e * 158);
            T.bezierCurveTo(e * 76, e * 189, e * 129, e * 182, e * 152, e * 173);
            T.bezierCurveTo(e * 186, e * 156, e * 191, e * 106, e * 176, e * 85);
            T.bezierCurveTo(e * 159, e * 61, e * 132, e * 62, e * 122, e * 66);
            T.bezierCurveTo(e * 108, e * 74, e * 108, e * 89, e * 116, e * 90);
            T.bezierCurveTo(e * 123, e * 92, e * 130, e * 93, e * 131, e * 94);
            T.closePath();
            se(T, i[0]);
            T.translate(0, e * -10);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 150, e * 62);
            T.bezierCurveTo(e * 151.5, e * 71.5, e * 149, e * 70, e * 153, e * 81);
            T.bezierCurveTo(e * 158, e * 73.5, e * 158, e * 73.5, e * 163, e * 66);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 164, e * 171);
            T.bezierCurveTo(e * 149, e * 159, e * 156.5, e * 165, e * 149, e * 159);
            T.bezierCurveTo(e * 149, e * 167, e * 149, e * 170, e * 152, e * 178);
            T.closePath();
            se(T, i[5]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 132, e * 95);
            T.bezierCurveTo(e * 154, e * 102, e * 154, e * 126, e * 137, e * 139);
            T.bezierCurveTo(e * 113, e * 152, e * 89, e * 136, e * 80, e * 121);
            T.bezierCurveTo(e * 57, e * 89, e * 69, e * 63, e * 79, e * 52);
            T.bezierCurveTo(e * 110, e * 20, e * 139, e * 21, e * 150, e * 25);
            T.bezierCurveTo(e * 197, e * 36, e * 221, e * 67, e * 226, e * 90);
            T.bezierCurveTo(e * 234, e * 134, e * 214, e * 177, e * 195, e * 197);
            T.bezierCurveTo(e * 144, e * 242, e * 79, e * 216, e * 58, e * 206);
            T.bezierCurveTo(e * 13, e * 174, e * 20, e * 134, e * 23, e * 107);
            T.bezierCurveTo(e * 26, e * 78, e * 33, e * 60, e * 38, e * 43);
            T.bezierCurveTo(e * 42, e * 32, e * 47, e * 32, e * 50, e * 36);
            T.bezierCurveTo(e * 54, e * 37, e * 50, e * 52, e * 44, e * 87);
            T.bezierCurveTo(e * 40, e * 115, e * 46, e * 142, e * 57, e * 158);
            T.bezierCurveTo(e * 76, e * 189, e * 129, e * 182, e * 152, e * 173);
            T.bezierCurveTo(e * 186, e * 156, e * 191, e * 106, e * 176, e * 85);
            T.bezierCurveTo(e * 159, e * 61, e * 132, e * 62, e * 122, e * 66);
            T.bezierCurveTo(e * 108, e * 74, e * 108, e * 89, e * 116, e * 90);
            T.bezierCurveTo(e * 123, e * 92, e * 130, e * 93, e * 131, e * 94);
            T.closePath();
            se(T, i[1], i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 137, e * 137);
            T.bezierCurveTo(e * 145, e * 125, e * 138, e * 108, e * 123, e * 104);
            T.bezierCurveTo(e * 81, e * 101, e * 88, e * 77, e * 98, e * 65);
            T.bezierCurveTo(e * 117, e * 38, e * 138, e * 39, e * 165, e * 52);
            T.bezierCurveTo(e * 197, e * 72, e * 207, e * 111, e * 197, e * 140);
            T.bezierCurveTo(e * 182, e * 180, e * 161, e * 197, e * 112, e * 194);
            T.bezierCurveTo(e * 58, e * 194, e * 37, e * 170, e * 34, e * 142);
            T.bezierCurveTo(e * 29, e * 102, e * 40, e * 63, e * 51, e * 45);
            T.bezierCurveTo(e * 43, e * 78, e * 41, e * 103, e * 43, e * 122);
            T.bezierCurveTo(e * 51, e * 158, e * 63, e * 174, e * 95, e * 179);
            T.bezierCurveTo(e * 129, e * 186, e * 169, e * 172, e * 177, e * 144);
            T.bezierCurveTo(e * 197, e * 105, e * 172, e * 76, e * 160, e * 71);
            T.bezierCurveTo(e * 125, e * 52, e * 111, e * 73, e * 111, e * 81);
            T.bezierCurveTo(e * 106, e * 93, e * 140, e * 92, e * 147, e * 107);
            T.bezierCurveTo(e * 153, e * 128, e * 140, e * 135, e * 137, e * 139);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 132, e * 95);
            T.bezierCurveTo(e * 154, e * 102, e * 154, e * 126, e * 137, e * 139);
            T.bezierCurveTo(e * 113, e * 152, e * 89, e * 136, e * 80, e * 121);
            T.bezierCurveTo(e * 57, e * 89, e * 69, e * 63, e * 79, e * 52);
            T.bezierCurveTo(e * 110, e * 20, e * 139, e * 21, e * 150, e * 25);
            T.bezierCurveTo(e * 197, e * 36, e * 221, e * 67, e * 226, e * 90);
            T.bezierCurveTo(e * 234, e * 134, e * 214, e * 177, e * 195, e * 197);
            T.bezierCurveTo(e * 144, e * 242, e * 79, e * 216, e * 58, e * 206);
            T.bezierCurveTo(e * 13, e * 174, e * 20, e * 134, e * 23, e * 107);
            T.bezierCurveTo(e * 26, e * 78, e * 33, e * 60, e * 38, e * 43);
            T.bezierCurveTo(e * 42, e * 32, e * 47, e * 32, e * 50, e * 36);
            T.bezierCurveTo(e * 54, e * 37, e * 50, e * 52, e * 44, e * 87);
            T.bezierCurveTo(e * 40, e * 115, e * 46, e * 142, e * 57, e * 158);
            T.bezierCurveTo(e * 76, e * 189, e * 129, e * 182, e * 152, e * 173);
            T.bezierCurveTo(e * 186, e * 156, e * 191, e * 106, e * 176, e * 85);
            T.bezierCurveTo(e * 159, e * 61, e * 132, e * 62, e * 122, e * 66);
            T.bezierCurveTo(e * 108, e * 74, e * 108, e * 89, e * 116, e * 90);
            T.bezierCurveTo(e * 123, e * 92, e * 130, e * 93, e * 131, e * 94);
            T.closePath();
            se(T, undefined, i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 82, e * 63);
            T.bezierCurveTo(e * 91, e * 64, e * 96, e * 62, e * 98, e * 53);
            T.bezierCurveTo(e * 91, e * 45, e * 85, e * 42, e * 78, e * 41);
            T.bezierCurveTo(e * 81, e * 51, e * 82, e * 57, e * 82, e * 63);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 148, e * 40);
            T.bezierCurveTo(e * 140, e * 52, e * 131, e * 51, e * 123, e * 43);
            T.bezierCurveTo(e * 123, e * 25, e * 129, e * 17, e * 134, e * 12);
            T.bezierCurveTo(e * 138, e * 35, e * 142, e * 31, e * 148, e * 40);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 189, e * 43);
            T.bezierCurveTo(e * 191, e * 54, e * 196, e * 58, e * 205, e * 59);
            T.bezierCurveTo(e * 211, e * 42, e * 214, e * 37, e * 216, e * 31);
            T.bezierCurveTo(e * 202, e * 34, e * 195, e * 39, e * 190, e * 43);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 216, e * 98);
            T.bezierCurveTo(e * 219, e * 105, e * 225, e * 107, e * 230, e * 109);
            T.bezierCurveTo(e * 227, e * 113, e * 221, e * 115, e * 215, e * 115);
            T.bezierCurveTo(e * 208, e * 109, e * 211, e * 101, e * 216, e * 98);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 180, e * 85);
            T.bezierCurveTo(e * 193, e * 86, e * 196, e * 98, e * 191, e * 108);
            T.bezierCurveTo(e * 179, e * 112, e * 167, e * 113, e * 155, e * 111);
            T.bezierCurveTo(e * 169, e * 100, e * 176, e * 96, e * 180, e * 85);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 96, e * 114);
            T.bezierCurveTo(e * 102, e * 109, e * 112, e * 110, e * 114, e * 118);
            T.bezierCurveTo(e * 111, e * 134, e * 102, e * 143, e * 95, e * 147);
            T.bezierCurveTo(e * 98, e * 123, e * 97, e * 119, e * 96, e * 115);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 79, e * 92);
            T.bezierCurveTo(e * 86, e * 95, e * 89, e * 102, e * 83, e * 111);
            T.bezierCurveTo(e * 70, e * 110, e * 61, e * 107, e * 54, e * 100);
            T.bezierCurveTo(e * 70, e * 97, e * 70, e * 95, e * 78, e * 92);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 39, e * 130);
            T.bezierCurveTo(e * 37, e * 141, e * 41, e * 143, e * 48, e * 144);
            T.bezierCurveTo(e * 54, e * 134, e * 55, e * 131, e * 56, e * 123);
            T.bezierCurveTo(e * 47, e * 129, e * 43, e * 129, e * 39, e * 129);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 113, e * 189);
            T.bezierCurveTo(e * 119, e * 201, e * 127, e * 198, e * 134, e * 192);
            T.bezierCurveTo(e * 128, e * 175, e * 128, e * 173, e * 128, e * 165);
            T.bezierCurveTo(e * 117, e * 176, e * 116, e * 182, e * 113, e * 187);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 74, e * 154);
            T.bezierCurveTo(e * 76, e * 163, e * 76, e * 170, e * 75, e * 177);
            T.bezierCurveTo(e * 68, e * 179, e * 66, e * 176, e * 63, e * 171);
            T.bezierCurveTo(e * 69, e * 164, e * 72, e * 159, e * 74, e * 154);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 206, e * 152);
            T.bezierCurveTo(e * 198, e * 158, e * 198, e * 166, e * 201, e * 171);
            T.bezierCurveTo(e * 209, e * 170, e * 221, e * 170, e * 226, e * 172);
            T.bezierCurveTo(e * 219, e * 159, e * 210, e * 155, e * 207, e * 153);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 181, e * 184);
            T.bezierCurveTo(e * 170, e * 184, e * 167, e * 187, e * 163, e * 195);
            T.bezierCurveTo(e * 171, e * 207, e * 183, e * 214, e * 191, e * 217);
            T.bezierCurveTo(e * 183, e * 204, e * 184, e * 196, e * 181, e * 184);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 66, e * 199);
            T.bezierCurveTo(e * 73, e * 197, e * 78, e * 199, e * 79, e * 206);
            T.bezierCurveTo(e * 71, e * 216, e * 67, e * 221, e * 57, e * 223);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 182, e * 143);
            T.bezierCurveTo(e * 183, e * 146, e * 183, e * 149, e * 179, e * 152);
            T.bezierCurveTo(e * 174, e * 146, e * 174, e * 146, e * 169, e * 140);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 32, e * 159);
            T.bezierCurveTo(e * 45, e * 160, e * 48, e * 164, e * 45, e * 175);
            T.bezierCurveTo(e * 28, e * 183, e * 25, e * 184, e * 19, e * 184);
            T.bezierCurveTo(e * 30, e * 170, e * 29, e * 164, e * 31, e * 160);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 110, e * 214);
            T.bezierCurveTo(e * 106, e * 212, e * 104, e * 213, e * 102, e * 218);
            T.bezierCurveTo(e * 104, e * 220, e * 107, e * 222, e * 110, e * 224);
            T.bezierCurveTo(e * 110.5, e * 219, e * 110.5, e * 219, e * 111, e * 214);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 40, e * 52);
            T.bezierCurveTo(e * 41, e * 57, e * 40, e * 61, e * 34, e * 60);
            T.bezierCurveTo(e * 31.5, e * 55, e * 31.5, e * 55, e * 29, e * 50);
            T.bezierCurveTo(e * 34, e * 50.5, e * 34, e * 50.5, e * 39, e * 51);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 31, e * 81);
            T.bezierCurveTo(e * 37, e * 84, e * 38, e * 90, e * 34, e * 99);
            T.bezierCurveTo(e * 23, e * 97, e * 19, e * 96, e * 16, e * 93);
            T.bezierCurveTo(e * 24, e * 88, e * 28, e * 85, e * 30, e * 81);
            T.closePath();
            se(T, i[4], i[5], e * 5);
            return o;
        }
        function Po(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 465;
            o.height = e * 310;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 126, e * 192);
            T.bezierCurveTo(e * 198, e * 202, e * 245, e * 203, e * 335, e * 194);
            T.bezierCurveTo(e * 336, e * 232, e * 326, e * 235, e * 232, e * 237);
            T.bezierCurveTo(e * 161, e * 235, e * 122, e * 235, e * 126, e * 193);
            T.closePath();
            se(T, i[0], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 146, e * 239);
            T.bezierCurveTo(e * 174, e * 74, e * 287, e * 88, e * 320, e * 240);
            T.bezierCurveTo(e * 329, e * 231, e * 340, e * 219, e * 332, e * 115);
            T.bezierCurveTo(e * 330, e * 40, e * 144, e * 30, e * 129, e * 116);
            T.bezierCurveTo(e * 124, e * 217, e * 124, e * 228, e * 143, e * 237);
            T.closePath();
            se(T, i[0], i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 126, e * 193);
            T.bezierCurveTo(e * 173, e * 94, e * 209, e * 100, e * 228, e * 57);
            T.bezierCurveTo(e * 190, e * 112, e * 165, e * 115, e * 127, e * 184);
            T.closePath();
            se(T, undefined, i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 230, e * 57);
            T.bezierCurveTo(e * 266, e * 117, e * 310, e * 130, e * 332, e * 183);
            T.bezierCurveTo(e * 290, e * 112, e * 262, e * 109, e * 230, e * 56);
            T.closePath();
            se(T, undefined, i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 154, e * 212);
            T.bezierCurveTo(e * 208, e * 224, e * 252, e * 219, e * 305, e * 212);
            T.bezierCurveTo(e * 267, e * 219, e * 204, e * 222, e * 155, e * 212);
            T.closePath();
            se(T, undefined, i[1], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 239, e * 59);
            T.bezierCurveTo(e * 302, e * 72, e * 325, e * 84, e * 326, e * 115);
            T.bezierCurveTo(e * 289, e * 80, e * 270, e * 88, e * 253, e * 78);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 216, e * 61);
            T.bezierCurveTo(e * 209, e * 70, e * 209, e * 70, e * 202, e * 79);
            T.bezierCurveTo(e * 173, e * 87, e * 162, e * 91, e * 137, e * 107);
            T.bezierCurveTo(e * 153, e * 78, e * 174, e * 67, e * 212, e * 62);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 175, e * 125);
            T.bezierCurveTo(e * 218, e * 94, e * 238, e * 90, e * 281, e * 125);
            T.bezierCurveTo(e * 245, e * 89, e * 240, e * 80, e * 228, e * 67);
            T.bezierCurveTo(e * 207, e * 100, e * 192, e * 104, e * 177, e * 123);
            T.closePath();
            se(T, i[2]);
            return o;
        }
        function yo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 465;
            o.height = e * 405;
            T.globalAlpha = 1;
            T.translate(e * 6, e * 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 39.000030517578125, e * 162.03977966308594);
            T.bezierCurveTo(e * 125.00003051757812, e * 84.03977966308594, e * 108.50003051757812, e * 115.03977966308594, e * 178.00003051757812, e * 68.03977966308594);
            T.bezierCurveTo(e * 299.0000305175781, e * 146.53977966308594, e * 299.0000305175781, e * 146.53977966308594, e * 420.0000305175781, e * 225.03977966308594);
            T.bezierCurveTo(e * 400.0000305175781, e * 288.53977966308594, e * 400.0000305175781, e * 288.53977966308594, e * 380.0000305175781, e * 352.03977966308594);
            T.bezierCurveTo(e * 216.50003051757812, e * 345.53977966308594, e * 216.50003051757812, e * 345.53977966308594, e * 53.000030517578125, e * 339.03977966308594);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 23.000030517578125, e * 306.94886779785156);
            T.bezierCurveTo(e * 5.000030517578125, e * 275.94886779785156, e * 6.000030517578125, e * 201.94886779785156, e * 14.000030517578125, e * 150.94886779785156);
            T.bezierCurveTo(e * 40.000030517578125, e * 34.94886779785156, e * 157.00003051757812, e * 14.948867797851562, e * 199.00003051757812, e * 11.948867797851562);
            T.bezierCurveTo(e * 331.0000305175781, e * 0.9488677978515625, e * 409.0000305175781, e * 61.94886779785156, e * 428.0000305175781, e * 133.94886779785156);
            T.bezierCurveTo(e * 445.0000305175781, e * 207.94886779785156, e * 439.0000305175781, e * 274.94886779785156, e * 426.0000305175781, e * 342.94886779785156);
            T.bezierCurveTo(e * 355.0000305175781, e * 207.94886779785156, e * 345.0000305175781, e * 208.94886779785156, e * 333.0000305175781, e * 202.94886779785156);
            T.bezierCurveTo(e * 262.0000305175781, e * 143.94886779785156, e * 236.00003051757812, e * 148.94886779785156, e * 189.00003051757812, e * 162.94886779785156);
            T.bezierCurveTo(e * 82.00003051757812, e * 190.94886779785156, e * 78.00003051757812, e * 235.94886779785156, e * 62.000030517578125, e * 279.94886779785156);
            T.closePath();
            se(T, i[0], i[1], e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 17.000030517578125, e * 149.94886779785156);
            T.bezierCurveTo(e * 76.00003051757812, e * 67.94886779785156, e * 177.00003051757812, e * 40.94886779785156, e * 232.00003051757812, e * 45.94886779785156);
            T.bezierCurveTo(e * 316.0000305175781, e * 46.94886779785156, e * 359.0000305175781, e * 74.94886779785156, e * 428.0000305175781, e * 145.94886779785156);
            T.bezierCurveTo(e * 414.0000305175781, e * 73.94886779785156, e * 386.0000305175781, e * 68.94886779785156, e * 359.0000305175781, e * 43.94886779785156);
            T.bezierCurveTo(e * 295.0000305175781, e * 5.9488677978515625, e * 239.00003051757812, e * 10.948867797851562, e * 207.00003051757812, e * 10.948867797851562);
            T.bezierCurveTo(e * 121.00003051757812, e * 20.948867797851562, e * 104.00003051757812, e * 34.94886779785156, e * 45.000030517578125, e * 84.94886779785156);
            T.bezierCurveTo(e * 14.000030517578125, e * 128.94886779785156, e * 18.000030517578125, e * 142.94886779785156, e * 16.000030517578125, e * 151.94886779785156);
            T.closePath();
            se(T, i[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 23.000030517578125, e * 306.94886779785156);
            T.bezierCurveTo(e * 5.000030517578125, e * 275.94886779785156, e * 6.000030517578125, e * 201.94886779785156, e * 14.000030517578125, e * 150.94886779785156);
            T.bezierCurveTo(e * 40.000030517578125, e * 34.94886779785156, e * 157.00003051757812, e * 14.948867797851562, e * 199.00003051757812, e * 11.948867797851562);
            T.bezierCurveTo(e * 331.0000305175781, e * 0.9488677978515625, e * 409.0000305175781, e * 61.94886779785156, e * 428.0000305175781, e * 133.94886779785156);
            T.bezierCurveTo(e * 445.0000305175781, e * 207.94886779785156, e * 439.0000305175781, e * 274.94886779785156, e * 426.0000305175781, e * 342.94886779785156);
            T.bezierCurveTo(e * 355.0000305175781, e * 207.94886779785156, e * 345.0000305175781, e * 208.94886779785156, e * 333.0000305175781, e * 202.94886779785156);
            T.bezierCurveTo(e * 262.0000305175781, e * 143.94886779785156, e * 236.00003051757812, e * 148.94886779785156, e * 189.00003051757812, e * 162.94886779785156);
            T.bezierCurveTo(e * 82.00003051757812, e * 190.94886779785156, e * 78.00003051757812, e * 235.94886779785156, e * 62.000030517578125, e * 279.94886779785156);
            T.closePath();
            se(T, undefined, i[1], e * 16);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 60.000030517578125, e * 288.03977966308594);
            T.bezierCurveTo(e * 183.00003051757812, e * 320.03977966308594, e * 342.0000305175781, e * 306.03977966308594, e * 399.0000305175781, e * 286.03977966308594);
            T.bezierCurveTo(e * 420.0000305175781, e * 345.03977966308594, e * 410.0000305175781, e * 335.03977966308594, e * 415.0000305175781, e * 362.03977966308594);
            T.bezierCurveTo(e * 351.0000305175781, e * 384.03977966308594, e * 299.0000305175781, e * 389.03977966308594, e * 215.00003051757812, e * 391.03977966308594);
            T.bezierCurveTo(e * 128.00003051757812, e * 388.03977966308594, e * 69.00003051757812, e * 373.03977966308594, e * 39.000030517578125, e * 359.03977966308594);
            T.closePath();
            se(T, i[0], i[1], e * 13);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 47.000030517578125, e * 327.03977966308594);
            T.bezierCurveTo(e * 203.00003051757812, e * 377.03977966308594, e * 331.0000305175781, e * 349.03977966308594, e * 410.0000305175781, e * 330.03977966308594);
            T.closePath();
            se(T, i[0], i[1], e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 9.000030517578125, e * 339.1306915283203);
            T.bezierCurveTo(e * 2.000030517578125, e * 280.1306915283203, e * 30.000030517578125, e * 219.1306915283203, e * 85.00003051757812, e * 167.1306915283203);
            T.bezierCurveTo(e * 174.00003051757812, e * 82.13069152832031, e * 241.00003051757812, e * 101.13069152832031, e * 284.0000305175781, e * 115.13069152832031);
            T.bezierCurveTo(e * 333.0000305175781, e * 134.1306915283203, e * 376.0000305175781, e * 177.1306915283203, e * 410.0000305175781, e * 247.1306915283203);
            T.bezierCurveTo(e * 439.0000305175781, e * 300.1306915283203, e * 442.0000305175781, e * 346.1306915283203, e * 430.0000305175781, e * 363.1306915283203);
            T.bezierCurveTo(e * 418.0000305175781, e * 366.1306915283203, e * 395.0000305175781, e * 295.1306915283203, e * 355.0000305175781, e * 223.1306915283203);
            T.bezierCurveTo(e * 299.0000305175781, e * 156.1306915283203, e * 262.0000305175781, e * 155.1306915283203, e * 215.00003051757812, e * 159.1306915283203);
            T.bezierCurveTo(e * 133.00003051757812, e * 171.1306915283203, e * 120.00003051757812, e * 193.1306915283203, e * 96.00003051757812, e * 221.1306915283203);
            T.bezierCurveTo(e * 49.000030517578125, e * 262.1306915283203, e * 47.000030517578125, e * 306.1306915283203, e * 38.000030517578125, e * 336.1306915283203);
            T.bezierCurveTo(e * 30.000030517578125, e * 349.1306915283203, e * 30.000030517578125, e * 349.1306915283203, e * 22.000030517578125, e * 362.1306915283203);
            T.closePath();
            se(T, i[2], i[1], e * 20);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 228.00003051757812, e * 128.03977966308594);
            T.bezierCurveTo(e * 315.0000305175781, e * 131.03977966308594, e * 349.0000305175781, e * 178.03977966308594, e * 386.0000305175781, e * 234.03977966308594);
            T.bezierCurveTo(e * 444.0000305175781, e * 329.03977966308594, e * 446.0000305175781, e * 354.03977966308594, e * 427.0000305175781, e * 373.03977966308594);
            T.bezierCurveTo(e * 389.0000305175781, e * 389.03977966308594, e * 399.0000305175781, e * 329.03977966308594, e * 361.0000305175781, e * 277.03977966308594);
            T.bezierCurveTo(e * 306.0000305175781, e * 191.03977966308594, e * 266.0000305175781, e * 183.03977966308594, e * 220.00003051757812, e * 181.03977966308594);
            T.bezierCurveTo(e * 138.00003051757812, e * 184.03977966308594, e * 123.00003051757812, e * 212.03977966308594, e * 89.00003051757812, e * 271.03977966308594);
            T.bezierCurveTo(e * 52.000030517578125, e * 349.03977966308594, e * 68.00003051757812, e * 364.03977966308594, e * 33.000030517578125, e * 369.03977966308594);
            T.bezierCurveTo(e * 6.000030517578125, e * 366.03977966308594, e * 5.000030517578125, e * 341.03977966308594, e * 26.000030517578125, e * 288.03977966308594);
            T.bezierCurveTo(e * 60.000030517578125, e * 207.03977966308594, e * 100.00003051757812, e * 180.03977966308594, e * 113.00003051757812, e * 170.03977966308594);
            T.bezierCurveTo(e * 159.00003051757812, e * 132.03977966308594, e * 196.00003051757812, e * 133.03977966308594, e * 226.00003051757812, e * 129.03977966308594);
            T.closePath();
            se(T, i[0], i[1], e * 20);
            return o;
        }
        function po(e, t, i, o) {
            var T = window.document.createElement("canvas");
            var r = T.getContext("2d");
            T.width = e * 198;
            T.height = e * 147;
            r.globalAlpha = t ? 0.5 : 1;
            r.translate(0, e * 6);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 44, e * 76);
            r.bezierCurveTo(e * 50, e * 82, e * 50, e * 82, e * 56, e * 88);
            r.bezierCurveTo(e * 59, e * 82, e * 59, e * 82, e * 62, e * 76);
            r.bezierCurveTo(e * 59, e * 71, e * 59, e * 71, e * 56, e * 66);
            r.bezierCurveTo(e * 59, e * 69, e * 59, e * 69, e * 62, e * 72);
            r.bezierCurveTo(e * 80, e * 48, e * 102, e * 50, e * 120, e * 62);
            r.bezierCurveTo(e * 127, e * 58, e * 127, e * 58, e * 134, e * 54);
            r.bezierCurveTo(e * 129, e * 60, e * 129, e * 60, e * 124, e * 66);
            r.bezierCurveTo(e * 129, e * 73, e * 129, e * 73, e * 134, e * 80);
            r.bezierCurveTo(e * 140, e * 74, e * 140, e * 74, e * 146, e * 68);
            r.bezierCurveTo(e * 142, e * 76, e * 142, e * 76, e * 138, e * 84);
            r.bezierCurveTo(e * 144, e * 90, e * 142, e * 90, e * 144, e * 90);
            r.bezierCurveTo(e * 136, e * 97, e * 136, e * 97, e * 128, e * 104);
            r.bezierCurveTo(e * 154, e * 110, e * 164, e * 90, e * 160, e * 80);
            r.bezierCurveTo(e * 138, e * 22, e * 148, e * 51, e * 136, e * 22);
            r.bezierCurveTo(e * 97, e * 24, e * 97, e * 24, e * 58, e * 26);
            r.bezierCurveTo(e * 47, e * 54, e * 36, e * 80, e * 36, e * 82);
            r.bezierCurveTo(e * 40, e * 108, e * 54, e * 104, e * 62, e * 104);
            r.bezierCurveTo(e * 46, e * 92, e * 54, e * 97, e * 46, e * 90);
            r.closePath();
            se(r, i[0]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 36, e * 80);
            r.bezierCurveTo(e * 30, e * 84, e * 28, e * 92, e * 34, e * 100);
            r.bezierCurveTo(e * 41.5, e * 102, e * 41.5, e * 102, e * 49, e * 104);
            r.bezierCurveTo(e * 43, e * 105.5, e * 43, e * 105.5, e * 37, e * 107);
            r.bezierCurveTo(e * 46, e * 111, e * 60, e * 114, e * 76, e * 114);
            r.bezierCurveTo(e * 78, e * 110.5, e * 78, e * 110.5, e * 80, e * 107);
            r.bezierCurveTo(e * 81, e * 110.5, e * 81, e * 110.5, e * 82, e * 114);
            r.bezierCurveTo(e * 94.5, e * 113.5, e * 94.5, e * 113.5, e * 107, e * 113);
            r.bezierCurveTo(e * 108.5, e * 110, e * 108.5, e * 110, e * 110, e * 107);
            r.bezierCurveTo(e * 111.5, e * 110.5, e * 111.5, e * 110.5, e * 113, e * 114);
            r.bezierCurveTo(e * 131, e * 112.5, e * 131, e * 112.5, e * 149, e * 111);
            r.bezierCurveTo(e * 148.5, e * 107.5, e * 148.5, e * 107.5, e * 148, e * 104);
            r.bezierCurveTo(e * 150.5, e * 107, e * 150.5, e * 107, e * 153, e * 110);
            r.bezierCurveTo(e * 155.5, e * 108.5, e * 155.5, e * 108.5, e * 158, e * 107);
            r.bezierCurveTo(e * 156.5, e * 104, e * 156.5, e * 104, e * 155, e * 101);
            r.bezierCurveTo(e * 158.5, e * 102.5, e * 158.5, e * 102.5, e * 162, e * 104);
            r.bezierCurveTo(e * 168, e * 100, e * 170, e * 92, e * 169, e * 85);
            r.bezierCurveTo(e * 166, e * 86, e * 166, e * 86, e * 163, e * 87);
            r.bezierCurveTo(e * 165.5, e * 83, e * 165.5, e * 83, e * 168, e * 79);
            r.bezierCurveTo(e * 165.5, e * 76.5, e * 165.5, e * 76.5, e * 163, e * 74);
            r.bezierCurveTo(e * 155, e * 82.5, e * 155, e * 82.5, e * 147, e * 91);
            r.bezierCurveTo(e * 139, e * 95.5, e * 139, e * 95.5, e * 131, e * 100);
            r.bezierCurveTo(e * 97.5, e * 100.5, e * 97.5, e * 100.5, e * 64, e * 101);
            r.bezierCurveTo(e * 49, e * 102, e * 43, e * 90, e * 36, e * 80);
            r.closePath();
            se(r, i[0]);
            r.globalAlpha = 1;
            r.translate(0, e * -6);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 36, e * 80);
            r.bezierCurveTo(e * 30, e * 84, e * 28, e * 92, e * 34, e * 100);
            r.bezierCurveTo(e * 41.5, e * 102, e * 41.5, e * 102, e * 49, e * 104);
            r.bezierCurveTo(e * 43, e * 105.5, e * 43, e * 105.5, e * 37, e * 107);
            r.bezierCurveTo(e * 46, e * 111, e * 60, e * 114, e * 76, e * 114);
            r.bezierCurveTo(e * 78, e * 110.5, e * 78, e * 110.5, e * 80, e * 107);
            r.bezierCurveTo(e * 81, e * 110.5, e * 81, e * 110.5, e * 82, e * 114);
            r.bezierCurveTo(e * 94.5, e * 113.5, e * 94.5, e * 113.5, e * 107, e * 113);
            r.bezierCurveTo(e * 108.5, e * 110, e * 108.5, e * 110, e * 110, e * 107);
            r.bezierCurveTo(e * 111.5, e * 110.5, e * 111.5, e * 110.5, e * 113, e * 114);
            r.bezierCurveTo(e * 131, e * 112.5, e * 131, e * 112.5, e * 149, e * 111);
            r.bezierCurveTo(e * 148.5, e * 107.5, e * 148.5, e * 107.5, e * 148, e * 104);
            r.bezierCurveTo(e * 150.5, e * 107, e * 150.5, e * 107, e * 153, e * 110);
            r.bezierCurveTo(e * 155.5, e * 108.5, e * 155.5, e * 108.5, e * 158, e * 107);
            r.bezierCurveTo(e * 156.5, e * 104, e * 156.5, e * 104, e * 155, e * 101);
            r.bezierCurveTo(e * 158.5, e * 102.5, e * 158.5, e * 102.5, e * 162, e * 104);
            r.bezierCurveTo(e * 168, e * 100, e * 170, e * 92, e * 169, e * 85);
            r.bezierCurveTo(e * 166, e * 86, e * 166, e * 86, e * 163, e * 87);
            r.bezierCurveTo(e * 165.5, e * 83, e * 165.5, e * 83, e * 168, e * 79);
            r.bezierCurveTo(e * 165.5, e * 76.5, e * 165.5, e * 76.5, e * 163, e * 74);
            r.bezierCurveTo(e * 155, e * 82.5, e * 155, e * 82.5, e * 147, e * 91);
            r.bezierCurveTo(e * 139, e * 95.5, e * 139, e * 95.5, e * 131, e * 100);
            r.bezierCurveTo(e * 97.5, e * 100.5, e * 97.5, e * 100.5, e * 64, e * 101);
            r.bezierCurveTo(e * 49, e * 102, e * 43, e * 90, e * 36, e * 80);
            r.closePath();
            se(r, i[1], i[2], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 49, e * 98);
            r.bezierCurveTo(e * 96.5, e * 98, e * 96.5, e * 98, e * 144, e * 98);
            r.bezierCurveTo(e * 136.5, e * 102, e * 136.5, e * 102, e * 129, e * 106);
            r.bezierCurveTo(e * 103, e * 105.5, e * 103, e * 105.5, e * 77, e * 105);
            r.bezierCurveTo(e * 65, e * 105, e * 65, e * 105, e * 53, e * 105);
            r.closePath();
            se(r, i[1]);
            r.globalAlpha = 0.5;
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 54, e * 98);
            r.bezierCurveTo(e * 97, e * 98, e * 97, e * 98, e * 140, e * 98);
            r.bezierCurveTo(e * 134, e * 101, e * 134, e * 101, e * 128, e * 104);
            r.bezierCurveTo(e * 92, e * 104, e * 92, e * 104, e * 56, e * 104);
            r.closePath();
            se(r, i[0]);
            r.globalAlpha = 1;
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 118, e * 47);
            r.bezierCurveTo(e * 124.5, e * 43.5, e * 124.5, e * 43.5, e * 131, e * 40);
            r.bezierCurveTo(e * 128, e * 46, e * 128, e * 46, e * 125, e * 52);
            r.bezierCurveTo(e * 131, e * 57, e * 135, e * 64, e * 139, e * 73);
            r.bezierCurveTo(e * 142.5, e * 69.5, e * 142.5, e * 69.5, e * 146, e * 66);
            r.bezierCurveTo(e * 143.5, e * 72.5, e * 143.5, e * 72.5, e * 141, e * 79);
            r.bezierCurveTo(e * 142, e * 91, e * 141, e * 94, e * 132, e * 98);
            r.bezierCurveTo(e * 117, e * 102, e * 126, e * 108, e * 142, e * 102);
            r.bezierCurveTo(e * 159, e * 98, e * 164, e * 80, e * 162, e * 47);
            r.bezierCurveTo(e * 160, e * 19, e * 150, e * 6, e * 117, e * 4);
            r.bezierCurveTo(e * 44, e * 0, e * 35, e * 20, e * 33, e * 37);
            r.bezierCurveTo(e * 29, e * 69, e * 33, e * 88, e * 44, e * 96);
            r.bezierCurveTo(e * 64, e * 107, e * 70, e * 102, e * 54, e * 93);
            r.bezierCurveTo(e * 49, e * 88, e * 50, e * 82, e * 53, e * 77);
            r.bezierCurveTo(e * 51.5, e * 71, e * 51.5, e * 71, e * 50, e * 65);
            r.bezierCurveTo(e * 53, e * 68.5, e * 53, e * 68.5, e * 56, e * 72);
            r.bezierCurveTo(e * 59, e * 67.5, e * 59, e * 67.5, e * 62, e * 63);
            r.bezierCurveTo(e * 60.5, e * 59.5, e * 60.5, e * 59.5, e * 59, e * 56);
            r.bezierCurveTo(e * 62, e * 57, e * 62, e * 57, e * 65, e * 58);
            r.bezierCurveTo(e * 78, e * 35, e * 103, e * 36, e * 117, e * 47);
            r.closePath();
            se(r, i[1], i[2], e * 6);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 62, e * 21);
            r.bezierCurveTo(e * 63, e * 34, e * 64, e * 37, e * 66, e * 40);
            r.bezierCurveTo(e * 54, e * 49, e * 53, e * 51, e * 48, e * 58);
            r.bezierCurveTo(e * 44, e * 51, e * 42, e * 43, e * 40, e * 36);
            r.bezierCurveTo(e * 47, e * 28, e * 52, e * 25, e * 61, e * 21);
            r.closePath();
            se(r, i[4]);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 60, e * 29);
            r.bezierCurveTo(e * 62, e * 25, e * 65, e * 24, e * 70, e * 23);
            se(r, undefined, i[3], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 61, e * 37);
            r.bezierCurveTo(e * 63, e * 32, e * 66, e * 32, e * 71, e * 32);
            se(r, undefined, i[3], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 52, e * 31);
            r.bezierCurveTo(e * 50, e * 26, e * 50, e * 25, e * 51, e * 23);
            se(r, undefined, i[3], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 46, e * 35);
            r.bezierCurveTo(e * 44, e * 31, e * 43, e * 29, e * 45, e * 26);
            se(r, undefined, i[3], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 58, e * 44);
            r.bezierCurveTo(e * 57, e * 48, e * 57, e * 50, e * 60, e * 52);
            se(r, undefined, i[3], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 53, e * 48);
            r.bezierCurveTo(e * 52, e * 52, e * 52, e * 54, e * 55, e * 57);
            se(r, undefined, i[3], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 46, e * 41);
            r.bezierCurveTo(e * 41, e * 42, e * 39, e * 45, e * 38, e * 48);
            se(r, undefined, i[3], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 48, e * 48);
            r.bezierCurveTo(e * 42, e * 51, e * 42, e * 53, e * 40, e * 55);
            se(r, undefined, i[3], e * 4);
            if (o == 0) {
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 99, e * 101);
            r.bezierCurveTo(e * 118.6666259765625, e * 104.33331298828125, e * 124.6666259765625, e * 116.33331298828125, e * 112.6666259765625, e * 114.33331298828125);
            r.bezierCurveTo(e * 104.6666259765625, e * 112.33331298828125, e * 100.6666259765625, e * 105.33331298828125, e * 99.6666259765625, e * 101.33331298828125);
            se(r, undefined, i[5], e * 6);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 97.6666259765625, e * 101.33331298828125);
            r.bezierCurveTo(e * 81.6666259765625, e * 106.33331298828125, e * 79.6666259765625, e * 114.33331298828125, e * 89.6666259765625, e * 114.33331298828125);
            r.bezierCurveTo(e * 95.6666259765625, e * 111.33331298828125, e * 95.6666259765625, e * 109.33331298828125, e * 98.6666259765625, e * 102.33331298828125);
            se(r, undefined, i[5], e * 6);
            } else {
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 103, e * 100.39999389648438);
            r.bezierCurveTo(e * 120, e * 106.39999389648438, e * 118, e * 107.39999389648438, e * 120, e * 111.39999389648438);
            se(r, undefined, i[5], e * 6);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 103, e * 100.39999389648438);
            r.bezierCurveTo(e * 90, e * 103.39999389648438, e * 89, e * 106.39999389648438, e * 87, e * 112.39999389648438);
            se(r, undefined, i[5], e * 6);
            he(r, e * 86, e * 114.39999389648438, e * 4.5);
            se(r, i[1], i[5], e * 6);
            he(r, e * 121, e * 114.39999389648438, e * 4.5);
            se(r, i[1], i[5], e * 6);
            }
            return T;
        }
        function go(e, t) {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 253;
            i.height = e * 192;
            o.globalAlpha = 0.5;
            o.save();
            o.translate(e * 42, e * 99);
            o.globalAlpha = 0.5;
            Re(o, e * -7, e * -20, e * 14, e * 39, e * 20);
            o.restore();
            se(o, t[0]);
            o.globalAlpha = 1;
            o.save();
            o.translate(e * 37, e * 94);
            Re(o, e * -7, e * -20, e * 14, e * 37, e * 20);
            o.restore();
            se(o, t[2]);
            o.globalAlpha = 0.5;
            o.save();
            o.translate(e * 136, e * 99);
            o.globalAlpha = 0.5;
            Re(o, e * -84, e * -67, e * 168, e * 134, e * 20);
            o.restore();
            se(o, t[0], t[0], e * 13);
            o.globalAlpha = 1;
            o.save();
            o.translate(e * 131, e * 94);
            Re(o, e * -84, e * -67, e * 168, e * 134, e * 20);
            o.restore();
            se(o, t[2], t[2], e * 13);
            o.save();
            o.translate(e * 131, e * 94);
            Re(o, e * -76, e * -61, e * 152, e * 122, e * 20);
            o.restore();
            se(o, t[3], t[1], e * 8);
            o.save();
            o.translate(e * 168.5, e * 93.5);
            Re(o, e * -30.5, e * -58.5, e * 61, e * 117, e * 20);
            o.restore();
            se(o, t[3], t[4], e * 6);
            o.save();
            o.translate(e * 93.5, e * 95.5);
            Re(o, e * -32, e * -59.5, e * 59, e * 119, e * 20);
            o.restore();
            se(o, t[3], t[4], e * 6);
            o.save();
            o.translate(e * 130.5, e * 94);
            Re(o, e * -36, e * -67, e * 73, e * 134, e * 20);
            o.restore();
            se(o, t[3], t[2], e * 8);
            o.globalAlpha = 0.5;
            o.save();
            o.translate(e * 133, e * 97);
            Re(o, e * -83, e * -12, e * 160, e * 24, e * 0);
            o.restore();
            se(o, t[0]);
            o.globalAlpha = 1;
            o.save();
            o.translate(e * 133, e * 92);
            Re(o, e * -83, e * -12, e * 160, e * 24, e * 0);
            o.restore();
            se(o, t[2]);
            o.globalAlpha = 0.5;
            o.save();
            o.translate(e * 228, e * 99.5);
            o.globalAlpha = 0.5;
            Re(o, e * -5, e * -18.5, e * 10, e * 37, e * 20);
            o.restore();
            se(o, t[0]);
            o.globalAlpha = 1;
            o.save();
            o.translate(e * 223, e * 94.5);
            Re(o, e * -5, e * -18.5, e * 10, e * 37, e * 20);
            o.restore();
            se(o, t[2]);
            o.save();
            o.translate(e * 133.5, e * 175.5);
            o.globalAlpha = 0.5;
            Re(o, e * -22.5, e * -6.5, e * 45, e * 13, e * 20);
            o.restore();
            se(o, t[0]);
            o.globalAlpha = 1;
            o.save();
            o.translate(e * 128.5, e * 170.5);
            Re(o, e * -22.5, e * -6.5, e * 45, e * 13, e * 20);
            o.restore();
            se(o, t[2]);
            return i;
        }
        function Mo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 316;
            o.height = e * 365;
            T.save();
            T.translate(e * 156.07142639160156, e * 51.81248474121094);
            T.rotate(0);
            Re(T, e * -21.5, e * -34, e * 43, e * 68, e * 8);
            T.restore();
            se(T, i[1], i[2], e * 15);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 110.57142639160156, e * 197.09820556640625);
            T.bezierCurveTo(e * 158.07142639160156, e * 179.09820556640625, e * 158.07142639160156, e * 179.09820556640625, e * 205.57142639160156, e * 161.09820556640625);
            T.bezierCurveTo(e * 205.57142639160156, e * 235.45535278320312, e * 205.57142639160156, e * 235.45535278320312, e * 205.57142639160156, e * 309.8125);
            T.bezierCurveTo(e * 205.57142639160156, e * 323.8125, e * 200.57142639160156, e * 325.8125, e * 187.57142639160156, e * 326.8125);
            T.bezierCurveTo(e * 155.57142639160156, e * 326.3125, e * 155.57142639160156, e * 326.3125, e * 123.57142639160156, e * 325.8125);
            T.bezierCurveTo(e * 111.57142639160156, e * 326.8125, e * 109.57142639160156, e * 321.8125, e * 110.57142639160156, e * 312.8125);
            T.closePath();
            se(T, i[3], i[4], e * 15);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 126.57142639160156, e * 67.38392639160156);
            T.bezierCurveTo(e * 126.57142639160156, e * 57.38392639160156, e * 132.57142639160156, e * 54.38392639160156, e * 140.57142639160156, e * 54.38392639160156);
            T.bezierCurveTo(e * 177.57142639160156, e * 55.38392639160156, e * 158.07142639160156, e * 54.38392639160156, e * 175.57142639160156, e * 54.38392639160156);
            T.bezierCurveTo(e * 185.57142639160156, e * 56.38392639160156, e * 185.57142639160156, e * 57.38392639160156, e * 184.57142639160156, e * 66.38392639160156);
            T.bezierCurveTo(e * 184.57142639160156, e * 78.38392639160156, e * 184.57142639160156, e * 89.38392639160156, e * 184.57142639160156, e * 90.38392639160156);
            T.bezierCurveTo(e * 177.57142639160156, e * 107.38392639160156, e * 180.57142639160156, e * 112.38392639160156, e * 189.57142639160156, e * 116.38392639160156);
            T.bezierCurveTo(e * 212.57142639160156, e * 127.38392639160156, e * 212.57142639160156, e * 132.38392639160156, e * 211.57142639160156, e * 150.38392639160156);
            T.bezierCurveTo(e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 304.81249618530273);
            T.bezierCurveTo(e * 212.57142639160156, e * 328.81249618530273, e * 209.57142639160156, e * 330.81249618530273, e * 188.57142639160156, e * 333.81249618530273);
            T.bezierCurveTo(e * 155.07142639160156, e * 333.31249618530273, e * 155.07142639160156, e * 333.31249618530273, e * 121.57142639160156, e * 332.81249618530273);
            T.bezierCurveTo(e * 104.57142639160156, e * 327.81249618530273, e * 105.57142639160156, e * 328.81249618530273, e * 104.57142639160156, e * 312.81249618530273);
            T.bezierCurveTo(e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 143.52678298950195);
            T.bezierCurveTo(e * 106.57142639160156, e * 124.52678298950195, e * 110.57142639160156, e * 123.52678298950195, e * 123.57142639160156, e * 116.52678298950195);
            T.bezierCurveTo(e * 136.57142639160156, e * 110.52678298950195, e * 130.57142639160156, e * 106.52678298950195, e * 126.57142639160156, e * 98.52678298950195);
            T.closePath();
            se(T, undefined, i[5], e * 15);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 125.57142639160156, e * 156.66963958740234);
            T.bezierCurveTo(e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 208.66963958740234);
            T.closePath();
            se(T, undefined, i[6], e * 15);
            return o;
        }
        function Lo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 316;
            o.height = e * 365;
            T.save();
            T.translate(e * 156.07142639160156, e * 51.81248474121094);
            T.rotate(0);
            Re(T, e * -21.5, e * -34, e * 43, e * 68, e * 8);
            T.restore();
            se(T, i[1], i[2], e * 15);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 126.57142639160156, e * 67.38392639160156);
            T.bezierCurveTo(e * 126.57142639160156, e * 57.38392639160156, e * 132.57142639160156, e * 54.38392639160156, e * 140.57142639160156, e * 54.38392639160156);
            T.bezierCurveTo(e * 177.57142639160156, e * 55.38392639160156, e * 158.07142639160156, e * 54.38392639160156, e * 175.57142639160156, e * 54.38392639160156);
            T.bezierCurveTo(e * 185.57142639160156, e * 56.38392639160156, e * 185.57142639160156, e * 57.38392639160156, e * 184.57142639160156, e * 66.38392639160156);
            T.bezierCurveTo(e * 184.57142639160156, e * 78.38392639160156, e * 184.57142639160156, e * 89.38392639160156, e * 184.57142639160156, e * 90.38392639160156);
            T.bezierCurveTo(e * 177.57142639160156, e * 107.38392639160156, e * 180.57142639160156, e * 112.38392639160156, e * 189.57142639160156, e * 116.38392639160156);
            T.bezierCurveTo(e * 212.57142639160156, e * 127.38392639160156, e * 212.57142639160156, e * 132.38392639160156, e * 211.57142639160156, e * 150.38392639160156);
            T.bezierCurveTo(e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 304.81249618530273);
            T.bezierCurveTo(e * 212.57142639160156, e * 328.81249618530273, e * 209.57142639160156, e * 330.81249618530273, e * 188.57142639160156, e * 333.81249618530273);
            T.bezierCurveTo(e * 155.07142639160156, e * 333.31249618530273, e * 155.07142639160156, e * 333.31249618530273, e * 121.57142639160156, e * 332.81249618530273);
            T.bezierCurveTo(e * 104.57142639160156, e * 327.81249618530273, e * 105.57142639160156, e * 328.81249618530273, e * 104.57142639160156, e * 312.81249618530273);
            T.bezierCurveTo(e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 143.52678298950195);
            T.bezierCurveTo(e * 106.57142639160156, e * 124.52678298950195, e * 110.57142639160156, e * 123.52678298950195, e * 123.57142639160156, e * 116.52678298950195);
            T.bezierCurveTo(e * 136.57142639160156, e * 110.52678298950195, e * 130.57142639160156, e * 106.52678298950195, e * 126.57142639160156, e * 98.52678298950195);
            T.closePath();
            se(T, undefined, i[5], e * 15);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 125.57142639160156, e * 156.66963958740234);
            T.bezierCurveTo(e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 208.66963958740234);
            T.closePath();
            se(T, undefined, i[6], e * 15);
            return o;
        }
        function Ho(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.translate(0, e * 15);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 154);
            T.bezierCurveTo(e * 108, e * 216.5, e * 108, e * 216.5, e * 114, e * 279);
            T.bezierCurveTo(e * 124, e * 300, e * 237, e * 299, e * 251, e * 279);
            T.bezierCurveTo(e * 257, e * 217, e * 257, e * 217, e * 263, e * 155);
            T.bezierCurveTo(e * 248, e * 194, e * 91, e * 180, e * 103, e * 156);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 154);
            T.bezierCurveTo(e * 106, e * 53, e * 255, e * 53, e * 263, e * 154);
            T.bezierCurveTo(e * 248, e * 38, e * 99, e * 69, e * 103, e * 154);
            T.closePath();
            se(T, undefined, i[0], e * 11);
            T.translate(0, e * -5);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 103, e * 154);
            T.bezierCurveTo(e * 98, e * 119, e * 264, e * 119, e * 264, e * 154);
            T.bezierCurveTo(e * 271, e * 189, e * 94, e * 188, e * 103, e * 154);
            T.closePath();
            se(T, i[3], i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 154);
            T.bezierCurveTo(e * 108, e * 216.5, e * 108, e * 216.5, e * 114, e * 279);
            T.bezierCurveTo(e * 124, e * 300, e * 237, e * 299, e * 251, e * 279);
            T.bezierCurveTo(e * 257, e * 217, e * 257, e * 217, e * 263, e * 155);
            T.bezierCurveTo(e * 248, e * 194, e * 91, e * 180, e * 103, e * 156);
            T.closePath();
            se(T, i[1], i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 182, e * 185);
            T.bezierCurveTo(e * 182.5, e * 237.5, e * 182.5, e * 237.5, e * 183, e * 290);
            T.closePath();
            se(T, undefined, i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 222, e * 287);
            T.bezierCurveTo(e * 226, e * 233.5, e * 226, e * 233.5, e * 230, e * 180);
            T.closePath();
            se(T, undefined, i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 145, e * 290);
            T.bezierCurveTo(e * 140.5, e * 237, e * 140.5, e * 237, e * 136, e * 184);
            T.closePath();
            se(T, i[1], i[2], e * 11);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105, e * 184);
            T.bezierCurveTo(e * 148, e * 205, e * 231, e * 202, e * 260, e * 182);
            T.bezierCurveTo(e * 259, e * 195.5, e * 259, e * 195.5, e * 258, e * 209);
            T.bezierCurveTo(e * 217, e * 218, e * 163, e * 225, e * 108, e * 207);
            T.closePath();
            se(T, i[4], i[2], e * 11);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 251, e * 276);
            T.bezierCurveTo(e * 251.5, e * 267.5, e * 251.5, e * 267.5, e * 252, e * 259);
            T.bezierCurveTo(e * 212, e * 272, e * 156, e * 275, e * 112, e * 260);
            T.bezierCurveTo(e * 112.5, e * 269, e * 112.5, e * 269, e * 113, e * 278);
            T.bezierCurveTo(e * 155, e * 306, e * 253, e * 286, e * 250, e * 276);
            T.closePath();
            se(T, i[4], i[2], e * 11);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 154);
            T.bezierCurveTo(e * 106, e * 53, e * 255, e * 53, e * 263, e * 154);
            T.bezierCurveTo(e * 248, e * 38, e * 99, e * 69, e * 103, e * 154);
            T.closePath();
            se(T, undefined, i[2], e * 11);
            return o;
        }
        function wo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 400;
            o.height = e * 400;
            T.translate(0, e * 15);
            T.globalAlpha = t ? 0.5 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 154);
            T.bezierCurveTo(e * 108, e * 216.5, e * 108, e * 216.5, e * 114, e * 279);
            T.bezierCurveTo(e * 124, e * 300, e * 237, e * 299, e * 251, e * 279);
            T.bezierCurveTo(e * 257, e * 217, e * 257, e * 217, e * 263, e * 155);
            T.bezierCurveTo(e * 248, e * 194, e * 91, e * 180, e * 103, e * 156);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 154);
            T.bezierCurveTo(e * 106, e * 53, e * 255, e * 53, e * 263, e * 154);
            T.bezierCurveTo(e * 248, e * 38, e * 99, e * 69, e * 103, e * 154);
            T.closePath();
            se(T, undefined, i[0], e * 11);
            T.translate(0, e * -5);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 103, e * 154);
            T.bezierCurveTo(e * 98, e * 119, e * 264, e * 119, e * 264, e * 154);
            T.bezierCurveTo(e * 271, e * 189, e * 94, e * 188, e * 103, e * 154);
            T.closePath();
            se(T, i[3], i[2], e * 12);
            T.translate(0, e * 25);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 103, e * 154);
            T.bezierCurveTo(e * 98, e * 119, e * 264, e * 119, e * 264, e * 154);
            T.bezierCurveTo(e * 271, e * 189, e * 94, e * 188, e * 103, e * 154);
            T.closePath();
            se(T, i[5]);
            T.translate(0, e * -25);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 154);
            T.bezierCurveTo(e * 108, e * 216.5, e * 108, e * 216.5, e * 114, e * 279);
            T.bezierCurveTo(e * 124, e * 300, e * 237, e * 299, e * 251, e * 279);
            T.bezierCurveTo(e * 257, e * 217, e * 257, e * 217, e * 263, e * 155);
            T.bezierCurveTo(e * 248, e * 194, e * 91, e * 180, e * 103, e * 156);
            T.closePath();
            se(T, i[1], i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 182, e * 185);
            T.bezierCurveTo(e * 182.5, e * 237.5, e * 182.5, e * 237.5, e * 183, e * 290);
            T.closePath();
            se(T, undefined, i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 222, e * 287);
            T.bezierCurveTo(e * 226, e * 233.5, e * 226, e * 233.5, e * 230, e * 180);
            T.closePath();
            se(T, undefined, i[2], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 145, e * 290);
            T.bezierCurveTo(e * 140.5, e * 237, e * 140.5, e * 237, e * 136, e * 184);
            T.closePath();
            se(T, i[1], i[2], e * 11);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105, e * 184);
            T.bezierCurveTo(e * 148, e * 205, e * 231, e * 202, e * 260, e * 182);
            T.bezierCurveTo(e * 259, e * 195.5, e * 259, e * 195.5, e * 258, e * 209);
            T.bezierCurveTo(e * 217, e * 218, e * 163, e * 225, e * 108, e * 207);
            T.closePath();
            se(T, i[4], i[2], e * 11);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 251, e * 276);
            T.bezierCurveTo(e * 251.5, e * 267.5, e * 251.5, e * 267.5, e * 252, e * 259);
            T.bezierCurveTo(e * 212, e * 272, e * 156, e * 275, e * 112, e * 260);
            T.bezierCurveTo(e * 112.5, e * 269, e * 112.5, e * 269, e * 113, e * 278);
            T.bezierCurveTo(e * 155, e * 306, e * 253, e * 286, e * 250, e * 276);
            T.closePath();
            se(T, i[4], i[2], e * 11);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 102, e * 154);
            T.bezierCurveTo(e * 106, e * 53, e * 255, e * 53, e * 263, e * 154);
            T.bezierCurveTo(e * 248, e * 38, e * 99, e * 69, e * 103, e * 154);
            T.closePath();
            se(T, undefined, i[2], e * 11);
            return o;
        }
        function fo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 80;
            o.height = e * 160;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.save();
            Re(T, e * 33, e * 53, e * 10, e * 98, e * 10);
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * -150, e * -100);
            T.moveTo(e * 167.5, e * 171.0625);
            T.bezierCurveTo(e * 188, e * 171.0625, e * 188, e * 171.0625, e * 208.5, e * 171.0625);
            T.bezierCurveTo(e * 208.5, e * 156.0625, e * 208.5, e * 156.0625, e * 208.5, e * 141.0625);
            T.bezierCurveTo(e * 203.5, e * 113.0625, e * 179.5, e * 96.0625, e * 167.5, e * 141.0625);
            T.closePath();
            se(T, i[0]);
            T.restore();
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.save();
            Re(T, e * 33, e * 53, e * 10, e * 98, e * 10);
            se(T, i[1], i[2], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * -150, e * -100);
            T.moveTo(e * 167.5, e * 171.0625);
            T.bezierCurveTo(e * 188, e * 171.0625, e * 188, e * 171.0625, e * 208.5, e * 171.0625);
            T.bezierCurveTo(e * 208.5, e * 156.0625, e * 208.5, e * 156.0625, e * 208.5, e * 141.0625);
            T.bezierCurveTo(e * 203.5, e * 113.0625, e * 179.5, e * 96.0625, e * 167.5, e * 141.0625);
            T.closePath();
            se(T, i[3], i[4], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.translate(e * 0, e * 1);
            T.moveTo(e * 180.5, e * 169.0625);
            T.bezierCurveTo(e * 180.5, e * 157.5625, e * 180.5, e * 157.5625, e * 180.5, e * 146.0625);
            T.bezierCurveTo(e * 181.5, e * 134.0625, e * 193.5, e * 129.0625, e * 196.5, e * 146.0625);
            T.bezierCurveTo(e * 196.5, e * 157.5625, e * 196.5, e * 157.5625, e * 196.5, e * 169.0625);
            T.closePath();
            se(T, i[5]);
            T.restore();
            return o;
        }
        function zo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 109;
            o.height = e * 110;
            he(T, e * 54.5, e * 55, e * 48.038209575038294);
            se(T, t[0], t[1], e * 8);
            if (i == 0) {
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 54.928558349609375, e * 43.72320556640625);
            T.bezierCurveTo(e * 66.92855834960938, e * 31.72320556640625, e * 69.92855834960938, e * 29.72320556640625, e * 74.92855834960938, e * 29.72320556640625);
            T.bezierCurveTo(e * 86.92855834960938, e * 28.72320556640625, e * 91.92855834960938, e * 42.72320556640625, e * 89.92855834960938, e * 52.72320556640625);
            T.bezierCurveTo(e * 88.92855834960938, e * 63.72320556640625, e * 73.92855834960938, e * 75.72320556640625, e * 55.928558349609375, e * 87.72320556640625);
            T.bezierCurveTo(e * 37.928558349609375, e * 78.72320556640625, e * 26.928558349609375, e * 65.72320556640625, e * 19.928558349609375, e * 54.72320556640625);
            T.bezierCurveTo(e * 13.928558349609375, e * 42.72320556640625, e * 21.928558349609375, e * 28.72320556640625, e * 35.928558349609375, e * 29.72320556640625);
            T.bezierCurveTo(e * 45.928558349609375, e * 31.72320556640625, e * 51.928558349609375, e * 40.72320556640625, e * 53.928558349609375, e * 44.72320556640625);
            T.closePath();
            se(T, t[2]);
            } else if (i == 1) {
            T.save();
            T.translate(e * 55, e * 39.48748779296875);
            Re(T, e * -11.5, e * -36, e * 23, e * 72, e * 10);
            T.restore();
            se(T, t[2], t[3], e * 4);
            he(T, e * 54.5, e * 78.48748779296875, e * 22.02271554554524);
            se(T, t[4], t[3], e * 4);
            T.save();
            T.translate(e * 55.5, e * 57.287506103515625);
            Re(T, e * -9, e * -16, e * 18, e * 32, e * 10);
            T.restore();
            se(T, t[4]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 66.5, e * 25.287506103515625);
            T.bezierCurveTo(e * 60.5, e * 25.287506103515625, e * 63.5, e * 25.287506103515625, e * 54.5, e * 25.287506103515625);
            T.closePath();
            se(T, undefined, t[5], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 66.5, e * 37.287506103515625);
            T.bezierCurveTo(e * 60.5, e * 37.287506103515625, e * 60.5, e * 37.287506103515625, e * 54.5, e * 37.287506103515625);
            T.closePath();
            se(T, undefined, t[5], e * 4);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 66.5, e * 50.287506103515625);
            T.bezierCurveTo(e * 61, e * 50.287506103515625, e * 61, e * 50.287506103515625, e * 55.5, e * 50.287506103515625);
            T.closePath();
            se(T, undefined, t[5], e * 4);
            } else if (i == 2) {
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 45.928558349609375, e * 55.29463195800781);
            T.bezierCurveTo(e * 38.928558349609375, e * 67.29463195800781, e * 38.928558349609375, e * 67.29463195800781, e * 31.928558349609375, e * 79.29463195800781);
            T.bezierCurveTo(e * 15.928558349609375, e * 85.29463195800781, e * 17.928558349609375, e * 86.29463195800781, e * 17.928558349609375, e * 90.29463195800781);
            T.bezierCurveTo(e * 19.928558349609375, e * 94.29463195800781, e * 21.928558349609375, e * 94.29463195800781, e * 27.928558349609375, e * 92.29463195800781);
            T.bezierCurveTo(e * 29.928558349609375, e * 98.29463195800781, e * 30.928558349609375, e * 99.29463195800781, e * 33.928558349609375, e * 99.29463195800781);
            T.bezierCurveTo(e * 38.928558349609375, e * 97.29463195800781, e * 38.928558349609375, e * 93.29463195800781, e * 37.928558349609375, e * 86.29463195800781);
            T.bezierCurveTo(e * 45.428558349609375, e * 73.29463195800781, e * 51.928558349609375, e * 64.29463195800781, e * 52.928558349609375, e * 60.29463195800781);
            T.closePath();
            se(T, t[2]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 55.928558349609375, e * 8.866058349609375);
            T.bezierCurveTo(e * 35.928558349609375, e * 35.866058349609375, e * 37.928558349609375, e * 48.866058349609375, e * 46.928558349609375, e * 62.866058349609375);
            T.bezierCurveTo(e * 65.92855834960938, e * 72.86605834960938, e * 80.92855834960938, e * 55.866058349609375, e * 93.92855834960938, e * 36.866058349609375);
            T.closePath();
            se(T, t[3], t[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 93.92855834960938, e * 36.866058349609375);
            T.bezierCurveTo(e * 82.92855834960938, e * 37.866058349609375, e * 77.92855834960938, e * 36.866058349609375, e * 67.92855834960938, e * 28.866058349609375);
            T.bezierCurveTo(e * 53.928558349609375, e * 16.866058349609375, e * 53.928558349609375, e * 14.866058349609375, e * 55.928558349609375, e * 7.866058349609375);
            T.bezierCurveTo(e * 65.92855834960938, e * 4.866058349609375, e * 71.92855834960938, e * 7.866058349609375, e * 83.92855834960938, e * 13.866058349609375);
            T.bezierCurveTo(e * 96.92855834960938, e * 21.866058349609375, e * 95.92855834960938, e * 31.866058349609375, e * 92.92855834960938, e * 36.866058349609375);
            T.closePath();
            se(T, t[3], t[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 68.92855834960938, e * 16.866058349609375);
            T.bezierCurveTo(e * 71.92855834960938, e * 13.866058349609375, e * 76.92855834960938, e * 16.866058349609375, e * 79.92855834960938, e * 21.866058349609375);
            T.bezierCurveTo(e * 82.92855834960938, e * 24.866058349609375, e * 81.92855834960938, e * 27.866058349609375, e * 73.92855834960938, e * 24.866058349609375);
            T.bezierCurveTo(e * 67.92855834960938, e * 20.866058349609375, e * 66.92855834960938, e * 19.866058349609375, e * 67.92855834960938, e * 17.866058349609375);
            T.closePath();
            se(T, t[2]);
            } else if (i == 3) {
            T.scale(0.9, 0.9);
            T.translate(e * 6, 0);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 54, e * 0.421875);
            T.bezierCurveTo(e * 84, e * 45.421875, e * 89, e * 51.421875, e * 83, e * 74.421875);
            T.bezierCurveTo(e * 74, e * 95.421875, e * 46, e * 98.421875, e * 30, e * 78.421875);
            T.bezierCurveTo(e * 22, e * 59.421875, e * 27, e * 49.421875, e * 34, e * 36.421875);
            T.closePath();
            se(T, t[2], t[3], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 74, e * 52.421875);
            T.bezierCurveTo(e * 77, e * 73.421875, e * 69, e * 81.421875, e * 58, e * 81.421875);
            T.bezierCurveTo(e * 66, e * 71.421875, e * 70, e * 66.421875, e * 74, e * 52.421875);
            T.closePath();
            se(T, t[3]);
            }
            return o;
        }
        function Bo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 573;
            o.height = e * 350;
            if (i == 1) {
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 336, e * 72);
            T.bezierCurveTo(e * 366, e * 15, e * 426, e * 36, e * 497, e * 83);
            T.bezierCurveTo(e * 522, e * 85, e * 522, e * 85, e * 547, e * 87);
            T.bezierCurveTo(e * 476.5, e * 205, e * 476.5, e * 205, e * 406, e * 323);
            T.bezierCurveTo(e * 297.5, e * 319, e * 297.5, e * 319, e * 189, e * 315);
            T.bezierCurveTo(e * 105.5, e * 279, e * 105.5, e * 279, e * 22, e * 243);
            T.bezierCurveTo(e * 92, e * 140, e * 92, e * 140, e * 162, e * 37);
            T.bezierCurveTo(e * 173, e * 39, e * 173, e * 39, e * 184, e * 41);
            T.bezierCurveTo(e * 185, e * 38.5, e * 185, e * 38.5, e * 186, e * 36);
            T.bezierCurveTo(e * 323, e * 13, e * 322, e * 25, e * 337, e * 74);
            T.closePath();
            se(T, t[4], t[4], e * 35);
            }
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 168, e * 42);
            T.bezierCurveTo(e * 255, e * 60, e * 255, e * 60, e * 342, e * 78);
            T.bezierCurveTo(e * 443, e * 81.5, e * 443, e * 81.5, e * 544, e * 85);
            T.bezierCurveTo(e * 475, e * 204.5, e * 475, e * 204.5, e * 406, e * 324);
            T.bezierCurveTo(e * 297.5, e * 320, e * 297.5, e * 320, e * 189, e * 316);
            T.bezierCurveTo(e * 105.5, e * 279, e * 105.5, e * 279, e * 22, e * 242);
            T.closePath();
            se(T, t[0], t[1], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 188, e * 41);
            T.bezierCurveTo(e * 308, e * 15, e * 325, e * 18, e * 337, e * 66);
            T.bezierCurveTo(e * 191, e * 305, e * 196, e * 286, e * 184, e * 307);
            T.bezierCurveTo(e * 175, e * 250, e * 90, e * 254, e * 52, e * 241);
            T.closePath();
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 336, e * 71);
            T.bezierCurveTo(e * 375, e * 8, e * 429, e * 50, e * 518, e * 92);
            T.bezierCurveTo(e * 455, e * 199.5, e * 455, e * 199.5, e * 392, e * 307);
            T.bezierCurveTo(e * 227, e * 301, e * 261, e * 255, e * 188, e * 308);
            T.closePath();
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 357, e * 76);
            T.bezierCurveTo(e * 390, e * 67, e * 414, e * 86, e * 435, e * 104);
            T.bezierCurveTo(e * 417, e * 135, e * 417, e * 135, e * 399, e * 166);
            T.bezierCurveTo(e * 352, e * 140, e * 345, e * 139, e * 319, e * 142);
            T.closePath();
            se(T, t[3], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 309, e * 168);
            T.bezierCurveTo(e * 345, e * 163, e * 372, e * 180, e * 412, e * 203);
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 263, e * 54);
            T.bezierCurveTo(e * 305, e * 44, e * 307, e * 51, e * 311, e * 64);
            T.bezierCurveTo(e * 270.5, e * 129.5, e * 270.5, e * 129.5, e * 230, e * 195);
            T.bezierCurveTo(e * 221, e * 175, e * 203, e * 171, e * 186, e * 172);
            T.closePath();
            se(T, t[3], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 292, e * 198);
            T.bezierCurveTo(e * 328, e * 191, e * 364, e * 211, e * 401, e * 237);
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 245, e * 68);
            T.bezierCurveTo(e * 210, e * 72, e * 210, e * 72, e * 189, e * 69);
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 222, e * 96);
            T.bezierCurveTo(e * 196, e * 97, e * 193, e * 97, e * 177, e * 92);
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 207, e * 124);
            T.bezierCurveTo(e * 179, e * 123, e * 177, e * 124, e * 161, e * 119);
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 115, e * 183);
            T.bezierCurveTo(e * 184, e * 185, e * 203, e * 198, e * 219, e * 221);
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 98, e * 213);
            T.bezierCurveTo(e * 161, e * 214, e * 193, e * 227, e * 201, e * 249);
            se(T, t[2], t[3], e * 12);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 399, e * 257);
            T.bezierCurveTo(e * 287, e * 215, e * 280, e * 215, e * 263, e * 222);
            T.bezierCurveTo(e * 253, e * 238, e * 247, e * 245, e * 243, e * 254);
            T.bezierCurveTo(e * 267, e * 236, e * 292, e * 263, e * 377, e * 284);
            se(T, t[3], t[3], e * 12);
            return o;
        }
        function Go(e, t, i, o) {
            var T = window.document.createElement("canvas");
            var r = T.getContext("2d");
            T.width = e * 170;
            T.height = e * 200;
            r.translate(e * 5, e * 15);
            if (o == 1) {
            r.translate(0, e * -5);
            he(r, e * 77.00003051757812, e * 104.49432373046875, e * 71.84010022264724);
            se(r, i[1], i[5], e * 20);
            he(r, e * 77.00003051757812, e * 104.22160339355469, e * 61.554853586049575);
            se(r, i[1], i[5], e * 20);
            r.save();
            r.translate(e * 77.00003051757812, e * 31.267044067382812);
            Re(r, e * -6, e * -12.5, e * 12, e * 25, e * 10);
            r.restore();
            se(r, i[1], i[5], e * 20);
            r.save();
            r.translate(e * 77.00003051757812, e * 13.267044067382812);
            Re(r, e * -15, e * -10.5, e * 30, e * 21, e * 10);
            r.restore();
            se(r, i[1], i[5], e * 20);
            }
            he(r, e * 77.00003051757812, e * 104.49432373046875, e * 71.84010022264724);
            se(r, i[1], i[2], e * 7);
            he(r, e * 77.00003051757812, e * 104.22160339355469, e * 61.554853586049575);
            se(r, i[1], i[2], e * 7);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 18.000030517578125, e * 105.85795593261719);
            r.bezierCurveTo(e * 134.00003051757812, e * 104.85795593261719, e * 77.00003051757812, e * 104.85795593261719, e * 136.00003051757812, e * 103.85795593261719);
            r.closePath();
            se(r, i[1], i[2], e * 8);
            he(r, e * 77.00003051757812, e * 104.6761474609375, e * 32.55764119219941);
            se(r, i[1], i[2], e * 8);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 78.00003051757812, e * 112.03977966308594);
            r.bezierCurveTo(e * 78.00003051757812, e * 87.03977966308594, e * 78.00003051757812, e * 87.03977966308594, e * 78.00003051757812, e * 62.03977966308594);
            r.closePath();
            se(r, i[3], i[2], e * 8);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 78.00003051757812, e * 48.03977966308594);
            r.bezierCurveTo(e * 82.00003051757812, e * 55.53977966308594, e * 82.00003051757812, e * 55.53977966308594, e * 86.00003051757812, e * 63.03977966308594);
            r.bezierCurveTo(e * 78.00003051757812, e * 63.03977966308594, e * 78.00003051757812, e * 63.03977966308594, e * 70.00003051757812, e * 63.03977966308594);
            r.closePath();
            se(r, i[3], i[2], e * 4);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 80.00003051757812, e * 111.6761474609375);
            r.bezierCurveTo(e * 95.00003051757812, e * 97.1761474609375, e * 95.00003051757812, e * 97.1761474609375, e * 110.00003051757812, e * 82.6761474609375);
            r.closePath();
            se(r, i[3], i[2], e * 8);
            r.beginPath();
            r.lineCap = "round";
            r.lineJoin = "round";
            r.moveTo(e * 107.00003051757812, e * 76.6761474609375);
            r.bezierCurveTo(e * 111.50003051757812, e * 82.6761474609375, e * 111.50003051757812, e * 82.6761474609375, e * 116.00003051757812, e * 88.6761474609375);
            r.bezierCurveTo(e * 118.50003051757812, e * 81.6761474609375, e * 118.50003051757812, e * 81.6761474609375, e * 121.00003051757812, e * 74.6761474609375);
            r.closePath();
            se(r, i[3], i[2], e * 4);
            he(r, e * 77.00003051757812, e * 105.03977966308594, e * 15.556349186104045);
            se(r, i[3], i[2], e * 4);
            r.save();
            r.translate(e * 77.00003051757812, e * 31.267044067382812);
            r.rotate(0);
            Re(r, e * -6, e * -12.5, e * 12, e * 25, e * 10);
            r.restore();
            se(r, i[1], i[2], e * 7);
            r.save();
            r.translate(e * 77.00003051757812, e * 13.267044067382812);
            r.rotate(0);
            Re(r, e * -15, e * -10.5, e * 30, e * 21, e * 10);
            r.restore();
            se(r, i[1], i[2], e * 7);
            return T;
        }
        function Wo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 81;
            o.height = e * 77;
            T.translate(0, e * 10);
            T.scale(0.2, 0.2);
            T.translate(0, e * -30);
            if (i == 1) {
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36.5, e * 278.0625);
            T.bezierCurveTo(e * 67.5, e * 316.0625, e * 134.5, e * 334.0625, e * 199.5, e * 319.0625);
            T.bezierCurveTo(e * 254.5, e * 304.0625, e * 346.5, e * 270.0625, e * 348.5, e * 237.0625);
            T.bezierCurveTo(e * 359.5, e * 206.0625, e * 318.5, e * 129.0625, e * 262.5, e * 122.0625);
            T.bezierCurveTo(e * 213.5, e * 115.0625, e * 166.5, e * 133.0625, e * 104.5, e * 166.0625);
            T.bezierCurveTo(e * 54.5, e * 194.0625, e * 23.5, e * 241.0625, e * 36.5, e * 277.0625);
            T.closePath();
            se(T, t[0], t[3], e * 50);
            }
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 36.5, e * 278.0625);
            T.bezierCurveTo(e * 67.5, e * 316.0625, e * 134.5, e * 334.0625, e * 199.5, e * 319.0625);
            T.bezierCurveTo(e * 254.5, e * 304.0625, e * 346.5, e * 270.0625, e * 348.5, e * 237.0625);
            T.bezierCurveTo(e * 359.5, e * 206.0625, e * 318.5, e * 129.0625, e * 262.5, e * 122.0625);
            T.bezierCurveTo(e * 213.5, e * 115.0625, e * 166.5, e * 133.0625, e * 104.5, e * 166.0625);
            T.bezierCurveTo(e * 54.5, e * 194.0625, e * 23.5, e * 241.0625, e * 36.5, e * 277.0625);
            T.closePath();
            se(T, t[0], t[1], e * 19);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 214.5, e * 124.0625);
            T.bezierCurveTo(e * 242.5, e * 125.0625, e * 272.5, e * 159.0625, e * 283.5, e * 184.0625);
            T.bezierCurveTo(e * 277.5, e * 161.0625, e * 233.5, e * 128.0625, e * 219.5, e * 122.0625);
            T.closePath();
            se(T, t[0], t[1], e * 19);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 157.5, e * 145.0625);
            T.bezierCurveTo(e * 176.5, e * 148.0625, e * 205.5, e * 176.0625, e * 212.5, e * 197.0625);
            T.bezierCurveTo(e * 205.5, e * 178.0625, e * 177.5, e * 152.0625, e * 156.5, e * 142.0625);
            T.closePath();
            se(T, t[0], t[1], e * 19);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 103.5, e * 169.0625);
            T.bezierCurveTo(e * 160.5, e * 166.0625, e * 228.5, e * 312.0625, e * 162.5, e * 323.0625);
            T.bezierCurveTo(e * 128.5, e * 330.0625, e * 45.5, e * 312.0625, e * 34.5, e * 268.0625);
            T.bezierCurveTo(e * 30.5, e * 238.0625, e * 44.5, e * 222.0625, e * 52.5, e * 211.0625);
            T.bezierCurveTo(e * 82.5, e * 174.0625, e * 104.5, e * 166.0625, e * 119.5, e * 172.0625);
            T.closePath();
            se(T, t[2], t[1], e * 19);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 194.5, e * 313.0625);
            T.bezierCurveTo(e * 222.5, e * 306.0625, e * 319.5, e * 271.0625, e * 337.5, e * 241.0625);
            T.bezierCurveTo(e * 274.5, e * 270.0625, e * 216.5, e * 288.0625, e * 199.5, e * 287.0625);
            T.bezierCurveTo(e * 198.5, e * 302.0625, e * 195.5, e * 311.0625, e * 193.5, e * 312.0625);
            T.closePath();
            se(T, t[1]);
            T.scale(3, 3);
            T.translate(15, e * 10);
            if (i == 1) {
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 4, e * 32);
            T.bezierCurveTo(e * 19, e * 25, e * 19, e * 25, e * 34, e * 18);
            T.bezierCurveTo(e * 41.5, e * 23.5, e * 41.5, e * 23.5, e * 49, e * 29);
            T.bezierCurveTo(e * 59.5, e * 20, e * 59.5, e * 20, e * 70, e * 11);
            se(T, undefined, t[3], e * 28);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56, e * 6);
            T.bezierCurveTo(e * 63.5, e * 13.5, e * 63.5, e * 13.5, e * 71, e * 21);
            T.bezierCurveTo(e * 74.5, e * 11.5, e * 74.5, e * 11.5, e * 78, e * 2);
            T.closePath();
            se(T, t[3], t[3], e * 28);
            }
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 4, e * 32);
            T.bezierCurveTo(e * 19, e * 25, e * 19, e * 25, e * 34, e * 18);
            T.bezierCurveTo(e * 41.5, e * 23.5, e * 41.5, e * 23.5, e * 49, e * 29);
            T.bezierCurveTo(e * 59.5, e * 20, e * 59.5, e * 20, e * 70, e * 11);
            se(T, undefined, t[1], e * 17);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56, e * 6);
            T.bezierCurveTo(e * 63.5, e * 13.5, e * 63.5, e * 13.5, e * 71, e * 21);
            T.bezierCurveTo(e * 74.5, e * 11.5, e * 74.5, e * 11.5, e * 78, e * 2);
            T.closePath();
            se(T, t[1], t[1], e * 17);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 4, e * 32);
            T.bezierCurveTo(e * 19, e * 25, e * 19, e * 25, e * 34, e * 18);
            T.bezierCurveTo(e * 41.5, e * 23.5, e * 41.5, e * 23.5, e * 49, e * 29);
            T.bezierCurveTo(e * 59.5, e * 20, e * 59.5, e * 20, e * 70, e * 11);
            se(T, undefined, t[2], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 56, e * 6);
            T.bezierCurveTo(e * 63.5, e * 13.5, e * 63.5, e * 13.5, e * 71, e * 21);
            T.bezierCurveTo(e * 74.5, e * 11.5, e * 74.5, e * 11.5, e * 78, e * 2);
            T.closePath();
            se(T, t[2], t[2], e * 10);
            return o;
        }
        function Vo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 144;
            o.height = e * 280;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(e * 5, e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 62, e * 103.79999542236328);
            T.bezierCurveTo(e * 62.5, e * 148.79999542236328, e * 62.5, e * 148.79999542236328, e * 63, e * 193.79999542236328);
            T.bezierCurveTo(e * 63, e * 219.79999542236328, e * 47, e * 217.79999542236328, e * 51, e * 230.79999542236328);
            T.bezierCurveTo(e * 62, e * 255.79999542236328, e * 74, e * 260.7999954223633, e * 72, e * 248.79999542236328);
            T.bezierCurveTo(e * 65, e * 226.79999542236328, e * 71, e * 229.79999542236328, e * 76, e * 225.79999542236328);
            T.bezierCurveTo(e * 90, e * 224.79999542236328, e * 89, e * 232.79999542236328, e * 90, e * 243.79999542236328);
            T.bezierCurveTo(e * 95, e * 253.79999542236328, e * 99, e * 249.79999542236328, e * 100, e * 229.79999542236328);
            T.bezierCurveTo(e * 102, e * 213.79999542236328, e * 98, e * 214.79999542236328, e * 90, e * 205.79999542236328);
            T.bezierCurveTo(e * 82, e * 201.79999542236328, e * 82, e * 185.79999542236328, e * 82, e * 114.79999542236328);
            T.bezierCurveTo(e * 80, e * 73, e * 82, e * 68, e * 93, e * 53);
            T.bezierCurveTo(e * 98, e * 37, e * 65, e * 14, e * 74, e * 33);
            T.bezierCurveTo(e * 82, e * 56, e * 77, e * 52, e * 69, e * 54);
            T.bezierCurveTo(e * 55, e * 57, e * 57, e * 53, e * 54, e * 39);
            T.bezierCurveTo(e * 46, e * 20, e * 37, e * 61, e * 50, e * 68);
            T.bezierCurveTo(e * 65, e * 81, e * 60, e * 89, e * 62, e * 102);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(e * -5, e * -5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 62, e * 103.79999542236328);
            T.bezierCurveTo(e * 62.5, e * 148.79999542236328, e * 62.5, e * 148.79999542236328, e * 63, e * 193.79999542236328);
            T.bezierCurveTo(e * 63, e * 219.79999542236328, e * 47, e * 217.79999542236328, e * 51, e * 230.79999542236328);
            T.bezierCurveTo(e * 62, e * 255.79999542236328, e * 74, e * 260.7999954223633, e * 72, e * 248.79999542236328);
            T.bezierCurveTo(e * 65, e * 226.79999542236328, e * 71, e * 229.79999542236328, e * 76, e * 225.79999542236328);
            T.bezierCurveTo(e * 90, e * 224.79999542236328, e * 89, e * 232.79999542236328, e * 90, e * 243.79999542236328);
            T.bezierCurveTo(e * 95, e * 253.79999542236328, e * 99, e * 249.79999542236328, e * 100, e * 229.79999542236328);
            T.bezierCurveTo(e * 102, e * 213.79999542236328, e * 98, e * 214.79999542236328, e * 90, e * 205.79999542236328);
            T.bezierCurveTo(e * 82, e * 201.79999542236328, e * 82, e * 185.79999542236328, e * 82, e * 114.79999542236328);
            T.bezierCurveTo(e * 80, e * 73, e * 82, e * 68, e * 93, e * 53);
            T.bezierCurveTo(e * 98, e * 37, e * 65, e * 14, e * 74, e * 33);
            T.bezierCurveTo(e * 82, e * 56, e * 77, e * 52, e * 69, e * 54);
            T.bezierCurveTo(e * 55, e * 57, e * 57, e * 53, e * 54, e * 39);
            T.bezierCurveTo(e * 46, e * 20, e * 37, e * 61, e * 50, e * 68);
            T.bezierCurveTo(e * 65, e * 81, e * 60, e * 89, e * 62, e * 102);
            T.closePath();
            se(T, i[1], i[2], e * 6);
            return o;
        }
        function Ko(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 160;
            o.height = e * 161;
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.save();
            T.translate(e * 80.5, e * 78);
            Re(T, e * -71.5, e * -71, e * 143, e * 143, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.save();
            T.translate(e * 80.5, e * 78);
            Re(T, e * -71.5, e * -71, e * 143, e * 143, e * 10);
            T.restore();
            se(T, i[1], i[2], e * 6);
            T.save();
            T.translate(e * 80, e * 78.5);
            Re(T, e * -17, e * -72.5, e * 34, e * 145, e * 10);
            T.restore();
            se(T, i[3], i[4], e * 6);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.save();
            T.translate(e * 80, e * 79.5);
            Re(T, e * -73, e * -16.5, e * 145, e * 34, e * 10);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.save();
            T.translate(e * 80, e * 79.5);
            Re(T, e * -73, e * -16.5, e * 145, e * 34, e * 10);
            T.restore();
            se(T, i[3], i[4], e * 6);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 79, e * 71);
            T.bezierCurveTo(e * 90, e * 42, e * 98, e * 36, e * 109, e * 43);
            T.bezierCurveTo(e * 119, e * 47, e * 128, e * 62, e * 107, e * 72);
            T.bezierCurveTo(e * 96, e * 78.5, e * 96, e * 78.5, e * 85, e * 85);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84, e * 78);
            T.bezierCurveTo(e * 113, e * 82, e * 123, e * 97, e * 115, e * 108);
            T.bezierCurveTo(e * 110, e * 119, e * 98, e * 124, e * 87, e * 107);
            T.bezierCurveTo(e * 81.5, e * 94.5, e * 81.5, e * 94.5, e * 76, e * 82);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80, e * 73);
            T.bezierCurveTo(e * 64, e * 37, e * 55, e * 34, e * 45, e * 42);
            T.bezierCurveTo(e * 30, e * 54, e * 36, e * 65, e * 51, e * 72);
            T.bezierCurveTo(e * 62.5, e * 77, e * 62.5, e * 77, e * 74, e * 82);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 82, e * 83);
            T.bezierCurveTo(e * 73, e * 107, e * 60, e * 123, e * 47, e * 113);
            T.bezierCurveTo(e * 33, e * 105, e * 33, e * 92, e * 52, e * 85);
            T.bezierCurveTo(e * 74, e * 73, e * 77, e * 76, e * 76, e * 75);
            T.closePath();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 79, e * 71);
            T.bezierCurveTo(e * 90, e * 42, e * 98, e * 36, e * 109, e * 43);
            T.bezierCurveTo(e * 119, e * 47, e * 128, e * 62, e * 107, e * 72);
            T.bezierCurveTo(e * 96, e * 78.5, e * 96, e * 78.5, e * 85, e * 85);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 84, e * 78);
            T.bezierCurveTo(e * 113, e * 82, e * 123, e * 97, e * 115, e * 108);
            T.bezierCurveTo(e * 110, e * 119, e * 98, e * 124, e * 87, e * 107);
            T.bezierCurveTo(e * 81.5, e * 94.5, e * 81.5, e * 94.5, e * 76, e * 82);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 80, e * 73);
            T.bezierCurveTo(e * 64, e * 37, e * 55, e * 34, e * 45, e * 42);
            T.bezierCurveTo(e * 30, e * 54, e * 36, e * 65, e * 51, e * 72);
            T.bezierCurveTo(e * 62.5, e * 77, e * 62.5, e * 77, e * 74, e * 82);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 82, e * 83);
            T.bezierCurveTo(e * 73, e * 107, e * 60, e * 123, e * 47, e * 113);
            T.bezierCurveTo(e * 33, e * 105, e * 33, e * 92, e * 52, e * 85);
            T.bezierCurveTo(e * 74, e * 73, e * 77, e * 76, e * 76, e * 75);
            T.closePath();
            se(T, i[3], i[4], e * 6);
            T.globalAlpha = t ? 0.5 : 1;
            T.translate(0, e * 10);
            T.save();
            T.translate(e * 78.5, e * 78);
            Re(T, e * -13.5, e * -14, e * 27, e * 27, e * 6);
            T.restore();
            se(T, i[0]);
            T.globalAlpha = 1;
            T.translate(0, e * -10);
            T.save();
            T.translate(e * 78.5, e * 78);
            Re(T, e * -13.5, e * -14, e * 27, e * 27, e * 6);
            T.restore();
            se(T, i[3], i[4], e * 6);
            return o;
        }
        function Yo(e, t, i) {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 372;
            o.height = e * 358;
            T.translate(e * 0, e * 10);
            T.globalAlpha = t ? 0.2 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 247.00003051757812, e * 115.76704406738281);
            T.bezierCurveTo(e * 305.0000305175781, e * 124.76704406738281, e * 335.0000305175781, e * 112.76704406738281, e * 359.0000305175781, e * 93.76704406738281);
            T.bezierCurveTo(e * 359.5000305175781, e * 113.26704406738281, e * 359.5000305175781, e * 113.26704406738281, e * 360.0000305175781, e * 132.7670440673828);
            T.bezierCurveTo(e * 339.0000305175781, e * 177.7670440673828, e * 281.0000305175781, e * 178.7670440673828, e * 243.00003051757812, e * 183.7670440673828);
            T.bezierCurveTo(e * 214.50003051757812, e * 214.2670440673828, e * 214.50003051757812, e * 214.2670440673828, e * 186.00003051757812, e * 244.7670440673828);
            T.bezierCurveTo(e * 155.00003051757812, e * 214.2670440673828, e * 155.00003051757812, e * 214.2670440673828, e * 124.00003051757812, e * 183.7670440673828);
            T.bezierCurveTo(e * 51.000030517578125, e * 180.7670440673828, e * 21.000030517578125, e * 161.7670440673828, e * 9.000030517578125, e * 129.7670440673828);
            T.bezierCurveTo(e * 8.500030517578125, e * 110.76704406738281, e * 8.500030517578125, e * 110.76704406738281, e * 8.000030517578125, e * 91.76704406738281);
            T.bezierCurveTo(e * 31.000030517578125, e * 112.76704406738281, e * 87.00003051757812, e * 119.76704406738281, e * 116.00003051757812, e * 117.76704406738281);
            T.bezierCurveTo(e * 175.00003051757812, e * 18.767044067382812, e * 170.00003051757812, e * 23.767044067382812, e * 181.00003051757812, e * 14.767044067382812);
            T.bezierCurveTo(e * 199.00003051757812, e * 34.76704406738281, e * 203.00003051757812, e * 54.76704406738281, e * 247.00003051757812, e * 115.76704406738281);
            T.closePath();
            se(T, i[0], i[0], e * 10);
            T.translate(e * 0, e * -10);
            T.globalAlpha = 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 107.00003051757812, e * 54.13069152832031);
            T.bezierCurveTo(e * 106.50003051757812, e * 38.63069152832031, e * 106.50003051757812, e * 38.63069152832031, e * 106.00003051757812, e * 23.130691528320312);
            T.bezierCurveTo(e * 121.50003051757812, e * 38.13069152832031, e * 121.50003051757812, e * 38.13069152832031, e * 137.00003051757812, e * 53.13069152832031);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 233.00003051757812, e * 53.6761474609375);
            T.bezierCurveTo(e * 247.00003051757812, e * 37.1761474609375, e * 247.00003051757812, e * 37.1761474609375, e * 261.0000305175781, e * 20.6761474609375);
            T.bezierCurveTo(e * 261.0000305175781, e * 36.1761474609375, e * 261.0000305175781, e * 36.1761474609375, e * 261.0000305175781, e * 51.6761474609375);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 293.0000305175781, e * 54.403411865234375);
            T.bezierCurveTo(e * 300.0000305175781, e * 49.903411865234375, e * 300.0000305175781, e * 49.903411865234375, e * 307.0000305175781, e * 45.403411865234375);
            T.bezierCurveTo(e * 307.0000305175781, e * 49.903411865234375, e * 307.0000305175781, e * 49.903411865234375, e * 307.0000305175781, e * 54.403411865234375);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 77.00003051757812, e * 54.403411865234375);
            T.bezierCurveTo(e * 70.00003051757812, e * 50.403411865234375, e * 70.00003051757812, e * 50.403411865234375, e * 63.000030517578125, e * 46.403411865234375);
            T.bezierCurveTo(e * 62.500030517578125, e * 50.903411865234375, e * 62.500030517578125, e * 50.903411865234375, e * 62.000030517578125, e * 55.403411865234375);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 58.000030517578125, e * 122.3125);
            T.bezierCurveTo(e * 59.500030517578125, e * 97.3125, e * 59.500030517578125, e * 97.3125, e * 61.000030517578125, e * 72.3125);
            T.bezierCurveTo(e * 91.00003051757812, e * 89.3125, e * 91.00003051757812, e * 89.3125, e * 121.00003051757812, e * 106.3125);
            T.closePath();
            se(T, i[1], i[1], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 310.0000305175781, e * 127.3125);
            T.bezierCurveTo(e * 308.0000305175781, e * 98.3125, e * 308.0000305175781, e * 98.3125, e * 306.0000305175781, e * 69.3125);
            T.bezierCurveTo(e * 274.5000305175781, e * 88.8125, e * 274.5000305175781, e * 88.8125, e * 243.00003051757812, e * 108.3125);
            T.closePath();
            se(T, i[1], i[1], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 226.00003051757812, e * 87.85795593261719);
            T.bezierCurveTo(e * 243.50003051757812, e * 66.85795593261719, e * 243.50003051757812, e * 66.85795593261719, e * 261.0000305175781, e * 45.85795593261719);
            T.bezierCurveTo(e * 265.0000305175781, e * 83.85795593261719, e * 265.0000305175781, e * 83.85795593261719, e * 269.0000305175781, e * 121.85795593261719);
            T.bezierCurveTo(e * 235.00003051757812, e * 122.85795593261719, e * 233.00003051757812, e * 107.85795593261719, e * 228.00003051757812, e * 90.85795593261719);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105.00003051757812, e * 128.8579559326172);
            T.bezierCurveTo(e * 104.50003051757812, e * 87.85795593261719, e * 104.50003051757812, e * 87.85795593261719, e * 104.00003051757812, e * 46.85795593261719);
            T.bezierCurveTo(e * 126.50003051757812, e * 69.35795593261719, e * 126.50003051757812, e * 69.35795593261719, e * 149.00003051757812, e * 91.85795593261719);
            T.bezierCurveTo(e * 130.00003051757812, e * 123.85795593261719, e * 123.00003051757812, e * 132.8579559326172, e * 107.00003051757812, e * 130.8579559326172);
            T.closePath();
            se(T, i[1], i[1], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 59.000030517578125, e * 121.85795593261719);
            T.bezierCurveTo(e * 59.500030517578125, e * 99.35795593261719, e * 59.500030517578125, e * 99.35795593261719, e * 60.000030517578125, e * 76.85795593261719);
            T.bezierCurveTo(e * 84.00003051757812, e * 92.35795593261719, e * 84.00003051757812, e * 92.35795593261719, e * 108.00003051757812, e * 107.85795593261719);
            T.bezierCurveTo(e * 106.00003051757812, e * 148.8579559326172, e * 86.00003051757812, e * 148.8579559326172, e * 62.000030517578125, e * 123.85795593261719);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 105.00003051757812, e * 132.8579559326172);
            T.bezierCurveTo(e * 104.50003051757812, e * 93.35795593261719, e * 104.50003051757812, e * 93.35795593261719, e * 104.00003051757812, e * 53.85795593261719);
            T.bezierCurveTo(e * 126.50003051757812, e * 75.85795593261719, e * 126.50003051757812, e * 75.85795593261719, e * 149.00003051757812, e * 97.85795593261719);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 311.0000305175781, e * 126.85795593261719);
            T.bezierCurveTo(e * 309.0000305175781, e * 101.35795593261719, e * 309.0000305175781, e * 101.35795593261719, e * 307.0000305175781, e * 75.85795593261719);
            T.bezierCurveTo(e * 271.0000305175781, e * 96.85795593261719, e * 271.0000305175781, e * 96.85795593261719, e * 235.00003051757812, e * 117.85795593261719);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 228.00003051757812, e * 96.85795593261719);
            T.bezierCurveTo(e * 244.50003051757812, e * 74.85795593261719, e * 244.50003051757812, e * 74.85795593261719, e * 261.0000305175781, e * 52.85795593261719);
            T.bezierCurveTo(e * 265.5000305175781, e * 89.85795593261719, e * 265.5000305175781, e * 89.85795593261719, e * 270.0000305175781, e * 126.85795593261719);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 12.000030517578125, e * 86.13069152832031);
            T.bezierCurveTo(e * 36.000030517578125, e * 113.13069152832031, e * 84.00003051757812, e * 111.13069152832031, e * 116.00003051757812, e * 113.13069152832031);
            T.bezierCurveTo(e * 164.00003051757812, e * 23.130691528320312, e * 172.00003051757812, e * 18.130691528320312, e * 181.00003051757812, e * 9.130691528320312);
            T.bezierCurveTo(e * 199.00003051757812, e * 29.130691528320312, e * 221.00003051757812, e * 78.13069152832031, e * 247.00003051757812, e * 112.13069152832031);
            T.bezierCurveTo(e * 301.0000305175781, e * 122.13069152832031, e * 338.0000305175781, e * 111.13069152832031, e * 359.0000305175781, e * 94.13069152832031);
            T.bezierCurveTo(e * 359.0000305175781, e * 113.13069152832031, e * 358.5000305175781, e * 105.13069152832031, e * 358.0000305175781, e * 116.13069152832031);
            T.bezierCurveTo(e * 270.5000305175781, e * 130.1306915283203, e * 270.5000305175781, e * 130.1306915283203, e * 183.00003051757812, e * 144.1306915283203);
            T.bezierCurveTo(e * 98.00003051757812, e * 128.6306915283203, e * 98.00003051757812, e * 128.6306915283203, e * 13.000030517578125, e * 113.13069152832031);
            T.closePath();
            se(T, i[1], i[1], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 247.00003051757812, e * 115.76704406738281);
            T.bezierCurveTo(e * 305.0000305175781, e * 124.76704406738281, e * 335.0000305175781, e * 112.76704406738281, e * 359.0000305175781, e * 93.76704406738281);
            T.bezierCurveTo(e * 359.5000305175781, e * 113.26704406738281, e * 359.5000305175781, e * 113.26704406738281, e * 360.0000305175781, e * 132.7670440673828);
            T.bezierCurveTo(e * 339.0000305175781, e * 177.7670440673828, e * 281.0000305175781, e * 178.7670440673828, e * 243.00003051757812, e * 183.7670440673828);
            T.bezierCurveTo(e * 214.50003051757812, e * 214.2670440673828, e * 214.50003051757812, e * 214.2670440673828, e * 186.00003051757812, e * 244.7670440673828);
            T.bezierCurveTo(e * 155.00003051757812, e * 214.2670440673828, e * 155.00003051757812, e * 214.2670440673828, e * 124.00003051757812, e * 183.7670440673828);
            T.bezierCurveTo(e * 51.000030517578125, e * 180.7670440673828, e * 21.000030517578125, e * 161.7670440673828, e * 9.000030517578125, e * 129.7670440673828);
            T.bezierCurveTo(e * 8.500030517578125, e * 110.76704406738281, e * 8.500030517578125, e * 110.76704406738281, e * 8.000030517578125, e * 91.76704406738281);
            T.bezierCurveTo(e * 31.000030517578125, e * 112.76704406738281, e * 87.00003051757812, e * 119.76704406738281, e * 116.00003051757812, e * 117.76704406738281);
            T.bezierCurveTo(e * 175.00003051757812, e * 18.767044067382812, e * 170.00003051757812, e * 23.767044067382812, e * 181.00003051757812, e * 14.767044067382812);
            T.bezierCurveTo(e * 199.00003051757812, e * 34.76704406738281, e * 203.00003051757812, e * 54.76704406738281, e * 247.00003051757812, e * 115.76704406738281);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 27.000030517578125, e * 94.76704406738281);
            T.bezierCurveTo(e * 11.000030517578125, e * 81.76704406738281, e * 31.000030517578125, e * 72.76704406738281, e * 44.000030517578125, e * 59.76704406738281);
            T.bezierCurveTo(e * 9.000030517578125, e * 65.76704406738281, e * 4.000030517578125, e * 78.76704406738281, e * 9.000030517578125, e * 89.76704406738281);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 352.0000305175781, e * 100.76705932617188);
            T.bezierCurveTo(e * 362.0000305175781, e * 92.76705932617188, e * 352.0000305175781, e * 84.76705932617188, e * 340.0000305175781, e * 68.76705932617188);
            T.bezierCurveTo(e * 360.0000305175781, e * 69.76705932617188, e * 364.0000305175781, e * 79.76705932617188, e * 364.0000305175781, e * 94.76705932617188);
            T.closePath();
            se(T, i[1], i[1], e * 1);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 25.000030517578125, e * 97.94886779785156);
            T.bezierCurveTo(e * 2.000030517578125, e * 76.94886779785156, e * 29.000030517578125, e * 62.94886779785156, e * 44.000030517578125, e * 59.94886779785156);
            T.bezierCurveTo(e * 8.000030517578125, e * 59.94886779785156, e * -0.999969482421875, e * 81.94886779785156, e * 4.000030517578125, e * 92.94886779785156);
            T.closePath();
            se(T, i[3]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 349.0000305175781, e * 100.94886779785156);
            T.bezierCurveTo(e * 366.0000305175781, e * 82.94886779785156, e * 353.0000305175781, e * 76.94886779785156, e * 337.0000305175781, e * 67.94886779785156);
            T.bezierCurveTo(e * 366.0000305175781, e * 69.94886779785156, e * 366.0000305175781, e * 83.94886779785156, e * 363.0000305175781, e * 101.94886779785156);
            T.closePath();
            se(T, i[2], i[3], e * 10);
            he(T, e * 46.000030517578125, e * 137.5852279663086, e * 9.219544457292887);
            se(T, i[4], i[5], e * 1);
            he(T, e * 308.0000305175781, e * 141.5852279663086, e * 8.54400374531753);
            se(T, i[4], i[5], e * 1);
            he(T, e * 92.00003051757812, e * 149.58523559570312, e * 14.866068747318506);
            se(T, i[4], i[5], e * 1);
            he(T, e * 262.0000305175781, e * 148.8579559326172, e * 15.620499351813308);
            se(T, i[4], i[5], e * 1);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 184.00003051757812, e * 68.85795593261719);
            T.bezierCurveTo(e * 203.00003051757812, e * 108.85795593261719, e * 203.00003051757812, e * 108.85795593261719, e * 222.00003051757812, e * 148.8579559326172);
            T.bezierCurveTo(e * 202.50003051757812, e * 177.8579559326172, e * 202.50003051757812, e * 177.8579559326172, e * 183.00003051757812, e * 206.8579559326172);
            T.bezierCurveTo(e * 162.00003051757812, e * 178.8579559326172, e * 162.00003051757812, e * 178.8579559326172, e * 141.00003051757812, e * 150.8579559326172);
            T.closePath();
            se(T, i[4], i[5], e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 183.00003051757812, e * 104.94886779785156);
            T.bezierCurveTo(e * 192.50003051757812, e * 125.44886779785156, e * 192.50003051757812, e * 125.44886779785156, e * 202.00003051757812, e * 145.94886779785156);
            T.bezierCurveTo(e * 192.00003051757812, e * 163.94886779785156, e * 192.00003051757812, e * 163.94886779785156, e * 182.00003051757812, e * 181.94886779785156);
            T.bezierCurveTo(e * 172.50003051757812, e * 164.44886779785156, e * 172.50003051757812, e * 164.44886779785156, e * 163.00003051757812, e * 146.94886779785156);
            T.closePath();
            se(T, i[6]);
            return o;
        }
        function Uo() {
            new window.Date().getTime();
            function e(e) {
            var t = 0;
            for (var i = 0, o = 0; i < e.length; i++) {
                var T = e.charAt(i);
                if (T !== "_" && i !== 5) {
                if (T === "1") {
                    t += window.Math.pow(2, o);
                }
                o++;
                }
            }
            return t;
            }
            render_cosmetics();
            re[SPRITE.RIVER_WAVE] = [S.RIVER_WAVED, S.RIVER_WAVEN];
            re[SPRITE.RIVER_DECO] = [];
            re[SPRITE.RIVER_DECO][SPRITE.DAY] = [];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_010_000")] = [S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO20];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_010_010")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_010_000")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_011_000")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_010_000")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_011_010")] = [S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO22, S.DAY_RIVER_COMPO23, S.DAY_RIVER_COMPO24];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_011_011")] = [S.DAY_RIVER_COMPO4, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO22, S.DAY_RIVER_COMPO23, S.DAY_RIVER_COMPO24, S.DAY_RIVER_COMPO25];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_110_000")] = [S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO20];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_110_010")] = [S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO27];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_110_110")] = [S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO8, S.DAY_RIVER_COMPO9, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO27];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_000")] = [S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO19];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_111")] = [S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO9, S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO4, S.DAY_RIVER_COMPO13];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_010_000")] = [S.DAY_RIVER_COMPO20];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_010_010")] = [S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_011_000")] = [S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO26];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_000")] = [S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")] = [S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO9, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO13, S.DAY_RIVER_COMPO15, S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO19, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO22, S.DAY_RIVER_COMPO23, S.DAY_RIVER_COMPO24, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_011_010")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_011_011")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_010")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_000")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_010")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_110")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_111")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_110")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_010")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_011_000")] = [S.DAY_RIVER_COMPO1, S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO26];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_011_010")] = [S.DAY_RIVER_COMPO1, S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO19, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_011_011")] = [S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO4, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO1, S.DAY_RIVER_COMPO15];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_000")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_011_010")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_010")] = [S.DAY_RIVER_COMPO1, S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO13, S.DAY_RIVER_COMPO15, S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO19, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO22, S.DAY_RIVER_COMPO23, S.DAY_RIVER_COMPO24, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_010")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_110")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_010")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_111")] = [S.DAY_RIVER_COMPO1, S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO4, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO9, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO13, S.DAY_RIVER_COMPO15, S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO19, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO22, S.DAY_RIVER_COMPO23, S.DAY_RIVER_COMPO24, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_110_000")] = [S.DAY_RIVER_COMPO10, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO12, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_110_010")] = [S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO10, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_110_110")] = [S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO9, S.DAY_RIVER_COMPO10, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_000")] = [S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO10, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO12, S.DAY_RIVER_COMPO14, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO19, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_110")] = [S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO9, S.DAY_RIVER_COMPO10, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO13, S.DAY_RIVER_COMPO14, S.DAY_RIVER_COMPO15, S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO19, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO22, S.DAY_RIVER_COMPO23, S.DAY_RIVER_COMPO24, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_111")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_010")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_110")] = [S.DAY_RIVER_COMPO28, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO24, S.DAY_RIVER_COMPO23, S.DAY_RIVER_COMPO22, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO19, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO15, S.DAY_RIVER_COMPO14, S.DAY_RIVER_COMPO13, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO10, S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO1];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_000")] = [S.DAY_RIVER_COMPO12, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO10, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO1, S.DAY_RIVER_COMPO14];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_111")] = [S.DAY_RIVER_COMPO1, S.DAY_RIVER_COMPO2, S.DAY_RIVER_COMPO3, S.DAY_RIVER_COMPO4, S.DAY_RIVER_COMPO5, S.DAY_RIVER_COMPO6, S.DAY_RIVER_COMPO7, S.DAY_RIVER_COMPO9, S.DAY_RIVER_COMPO10, S.DAY_RIVER_COMPO11, S.DAY_RIVER_COMPO13, S.DAY_RIVER_COMPO15, S.DAY_RIVER_COMPO16, S.DAY_RIVER_COMPO17, S.DAY_RIVER_COMPO18, S.DAY_RIVER_COMPO19, S.DAY_RIVER_COMPO20, S.DAY_RIVER_COMPO21, S.DAY_RIVER_COMPO22, S.DAY_RIVER_COMPO23, S.DAY_RIVER_COMPO24, S.DAY_RIVER_COMPO25, S.DAY_RIVER_COMPO26, S.DAY_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_010")] = re[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT] = [];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_010_000")] = [S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO20];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_010_010")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_010_000")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_011_000")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_010_000")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_011_010")] = [S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO22, S.NIGHT_RIVER_COMPO23, S.NIGHT_RIVER_COMPO24];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_011_011")] = [S.NIGHT_RIVER_COMPO4, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO22, S.NIGHT_RIVER_COMPO23, S.NIGHT_RIVER_COMPO24, S.NIGHT_RIVER_COMPO25];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_110_000")] = [S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO20];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_110_010")] = [S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO27];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_110_110")] = [S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO8, S.NIGHT_RIVER_COMPO9, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO27];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_000")] = [S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO19];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_111")] = [S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO9, S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO4, S.NIGHT_RIVER_COMPO13];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_010_000")] = [S.NIGHT_RIVER_COMPO20];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_010_010")] = [S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_011_000")] = [S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO26];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_000")] = [S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")] = [S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO9, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO13, S.NIGHT_RIVER_COMPO15, S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO19, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO22, S.NIGHT_RIVER_COMPO23, S.NIGHT_RIVER_COMPO24, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_011_010")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_011_011")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_010")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_000")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_010")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_110")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_111")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_110")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_010")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_011_000")] = [S.NIGHT_RIVER_COMPO1, S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO26];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_011_010")] = [S.NIGHT_RIVER_COMPO1, S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO19, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_011_011")] = [S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO4, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO1, S.NIGHT_RIVER_COMPO15];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_000")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_011_010")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_010")] = [S.NIGHT_RIVER_COMPO1, S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO13, S.NIGHT_RIVER_COMPO15, S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO19, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO22, S.NIGHT_RIVER_COMPO23, S.NIGHT_RIVER_COMPO24, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_010")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_110")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_010")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_111")] = [S.NIGHT_RIVER_COMPO1, S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO4, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO9, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO13, S.NIGHT_RIVER_COMPO15, S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO19, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO22, S.NIGHT_RIVER_COMPO23, S.NIGHT_RIVER_COMPO24, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_110_000")] = [S.NIGHT_RIVER_COMPO10, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO12, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_110_010")] = [S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO10, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_110_110")] = [S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO9, S.NIGHT_RIVER_COMPO10, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_000")] = [S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO10, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO12, S.NIGHT_RIVER_COMPO14, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO19, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_110")] = [S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO9, S.NIGHT_RIVER_COMPO10, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO13, S.NIGHT_RIVER_COMPO14, S.NIGHT_RIVER_COMPO15, S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO19, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO22, S.NIGHT_RIVER_COMPO23, S.NIGHT_RIVER_COMPO24, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_111")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_010")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_110")] = [S.NIGHT_RIVER_COMPO28, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO24, S.NIGHT_RIVER_COMPO23, S.NIGHT_RIVER_COMPO22, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO19, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO15, S.NIGHT_RIVER_COMPO14, S.NIGHT_RIVER_COMPO13, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO10, S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO1];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_011")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_110")];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_000")] = [S.NIGHT_RIVER_COMPO12, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO10, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO1, S.NIGHT_RIVER_COMPO14];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_111")] = [S.NIGHT_RIVER_COMPO1, S.NIGHT_RIVER_COMPO2, S.NIGHT_RIVER_COMPO3, S.NIGHT_RIVER_COMPO4, S.NIGHT_RIVER_COMPO5, S.NIGHT_RIVER_COMPO6, S.NIGHT_RIVER_COMPO7, S.NIGHT_RIVER_COMPO9, S.NIGHT_RIVER_COMPO10, S.NIGHT_RIVER_COMPO11, S.NIGHT_RIVER_COMPO13, S.NIGHT_RIVER_COMPO15, S.NIGHT_RIVER_COMPO16, S.NIGHT_RIVER_COMPO17, S.NIGHT_RIVER_COMPO18, S.NIGHT_RIVER_COMPO19, S.NIGHT_RIVER_COMPO20, S.NIGHT_RIVER_COMPO21, S.NIGHT_RIVER_COMPO22, S.NIGHT_RIVER_COMPO23, S.NIGHT_RIVER_COMPO24, S.NIGHT_RIVER_COMPO25, S.NIGHT_RIVER_COMPO26, S.NIGHT_RIVER_COMPO28];
            re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_010")] = re[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_110")];
            re[SPRITE.RIVER] = [];
            re[SPRITE.RIVER][SPRITE.DAY] = [];
            re[SPRITE.RIVER][SPRITE.DAY][e("000_010_000")] = S.DAY_RIVER_000_010_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_010_010")] = S.DAY_RIVER_000_010_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_011_000")] = S.DAY_RIVER_000_011_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_011_010")] = S.DAY_RIVER_000_011_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_011_011")] = S.DAY_RIVER_000_011_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_110_000")] = S.DAY_RIVER_000_110_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_110_010")] = S.DAY_RIVER_000_110_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_110_110")] = S.DAY_RIVER_000_110_110;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_111_000")] = S.DAY_RIVER_000_111_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_111_010")] = S.DAY_RIVER_000_111_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_111_011")] = S.DAY_RIVER_000_111_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_111_110")] = S.DAY_RIVER_000_111_110;
            re[SPRITE.RIVER][SPRITE.DAY][e("000_111_111")] = S.DAY_RIVER_000_111_111;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_010_000")] = S.DAY_RIVER_010_010_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_010_010")] = S.DAY_RIVER_010_010_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_011_000")] = S.DAY_RIVER_010_011_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_011_010")] = S.DAY_RIVER_010_011_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_011_011")] = S.DAY_RIVER_010_011_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_110_000")] = S.DAY_RIVER_010_110_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_110_010")] = S.DAY_RIVER_010_110_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_110_110")] = S.DAY_RIVER_010_110_110;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_111_000")] = S.DAY_RIVER_010_111_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_111_010")] = S.DAY_RIVER_010_111_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_111_011")] = S.DAY_RIVER_010_111_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_111_110")] = S.DAY_RIVER_010_111_110;
            re[SPRITE.RIVER][SPRITE.DAY][e("010_111_111")] = S.DAY_RIVER_010_111_111;
            re[SPRITE.RIVER][SPRITE.DAY][e("011_011_000")] = S.DAY_RIVER_011_011_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("011_011_010")] = S.DAY_RIVER_011_011_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("011_011_011")] = S.DAY_RIVER_011_011_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("011_111_000")] = S.DAY_RIVER_011_111_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("011_111_010")] = S.DAY_RIVER_011_111_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("011_111_011")] = S.DAY_RIVER_011_111_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("011_111_110")] = S.DAY_RIVER_011_111_110;
            re[SPRITE.RIVER][SPRITE.DAY][e("011_111_111")] = S.DAY_RIVER_011_111_111;
            re[SPRITE.RIVER][SPRITE.DAY][e("110_110_000")] = S.DAY_RIVER_110_110_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("110_110_010")] = S.DAY_RIVER_110_110_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("110_110_110")] = S.DAY_RIVER_110_110_110;
            re[SPRITE.RIVER][SPRITE.DAY][e("110_111_000")] = S.DAY_RIVER_110_111_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("110_111_010")] = S.DAY_RIVER_110_111_010;
            re[SPRITE.RIVER][SPRITE.DAY][e("110_111_011")] = S.DAY_RIVER_110_111_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("110_111_110")] = S.DAY_RIVER_110_111_110;
            re[SPRITE.RIVER][SPRITE.DAY][e("110_111_111")] = S.DAY_RIVER_110_111_111;
            re[SPRITE.RIVER][SPRITE.DAY][e("111_111_011")] = S.DAY_RIVER_111_111_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("111_111_110")] = S.DAY_RIVER_111_111_110;
            re[SPRITE.RIVER][SPRITE.DAY][e("111_111_011")] = S.DAY_RIVER_111_111_011;
            re[SPRITE.RIVER][SPRITE.DAY][e("111_111_000")] = S.DAY_RIVER_111_111_000;
            re[SPRITE.RIVER][SPRITE.DAY][e("111_111_111")] = S.DAY_RIVER_111_111_111;
            re[SPRITE.RIVER][SPRITE.DAY][e("111_111_010")] = S.DAY_RIVER_111_111_010;
            re[SPRITE.RIVER][SPRITE.NIGHT] = [];
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_010_000")] = S.NIGHT_RIVER_000_010_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_010_010")] = S.NIGHT_RIVER_000_010_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_011_000")] = S.NIGHT_RIVER_000_011_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_011_010")] = S.NIGHT_RIVER_000_011_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_011_011")] = S.NIGHT_RIVER_000_011_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_110_000")] = S.NIGHT_RIVER_000_110_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_110_010")] = S.NIGHT_RIVER_000_110_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_110_110")] = S.NIGHT_RIVER_000_110_110;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_000")] = S.NIGHT_RIVER_000_111_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_010")] = S.NIGHT_RIVER_000_111_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_011")] = S.NIGHT_RIVER_000_111_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_110")] = S.NIGHT_RIVER_000_111_110;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_111")] = S.NIGHT_RIVER_000_111_111;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_010_000")] = S.NIGHT_RIVER_010_010_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_010_010")] = S.NIGHT_RIVER_010_010_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_011_000")] = S.NIGHT_RIVER_010_011_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_011_010")] = S.NIGHT_RIVER_010_011_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_011_011")] = S.NIGHT_RIVER_010_011_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_110_000")] = S.NIGHT_RIVER_010_110_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_110_010")] = S.NIGHT_RIVER_010_110_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_110_110")] = S.NIGHT_RIVER_010_110_110;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_000")] = S.NIGHT_RIVER_010_111_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_010")] = S.NIGHT_RIVER_010_111_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_011")] = S.NIGHT_RIVER_010_111_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_110")] = S.NIGHT_RIVER_010_111_110;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_111")] = S.NIGHT_RIVER_010_111_111;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("011_011_000")] = S.NIGHT_RIVER_011_011_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("011_011_010")] = S.NIGHT_RIVER_011_011_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("011_011_011")] = S.NIGHT_RIVER_011_011_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_000")] = S.NIGHT_RIVER_011_111_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_010")] = S.NIGHT_RIVER_011_111_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_011")] = S.NIGHT_RIVER_011_111_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_110")] = S.NIGHT_RIVER_011_111_110;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_111")] = S.NIGHT_RIVER_011_111_111;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("110_110_000")] = S.NIGHT_RIVER_110_110_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("110_110_010")] = S.NIGHT_RIVER_110_110_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("110_110_110")] = S.NIGHT_RIVER_110_110_110;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_000")] = S.NIGHT_RIVER_110_111_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_010")] = S.NIGHT_RIVER_110_111_010;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_011")] = S.NIGHT_RIVER_110_111_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_110")] = S.NIGHT_RIVER_110_111_110;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_111")] = S.NIGHT_RIVER_110_111_111;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_011")] = S.NIGHT_RIVER_111_111_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_110")] = S.NIGHT_RIVER_111_111_110;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_011")] = S.NIGHT_RIVER_111_111_011;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_000")] = S.NIGHT_RIVER_111_111_000;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_111")] = S.NIGHT_RIVER_111_111_111;
            re[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_010")] = S.NIGHT_RIVER_111_111_010;
            re[ItemType.REIDITE_PICK] = [];
            re[ItemType.REIDITE_PICK][SPRITE.DAY] = S.PICK_REIDITED;
            re[ItemType.REIDITE_PICK][SPRITE.NIGHT] = S.PICK_REIDITEN;
            re[ItemType.CARROT] = [];
            re[ItemType.CARROT][SPRITE.DAY] = S.CARROTD;
            re[ItemType.CARROT][SPRITE.NIGHT] = S.CARROTN;
            re[SPRITE.TOMATO_MINI] = [];
            re[SPRITE.TOMATO_MINI][SPRITE.DAY] = S.TOMATO_MINID;
            re[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = S.TOMATO_MININ;
            re[ItemType.TOMATO] = [];
            re[ItemType.TOMATO][SPRITE.DAY] = S.TOMATOD;
            re[ItemType.TOMATO][SPRITE.NIGHT] = S.TOMATON;
            re[SPRITE.DRIED_CARROT] = [];
            re[SPRITE.DRIED_CARROT][SPRITE.DAY] = S.CARROT_DRIEDD;
            re[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = S.CARROT_DRIEDN;
            re[SPRITE.DRIED_TOMATO_MINI] = [];
            re[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = S.TOMATO_MINI_DRIEDD;
            re[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = S.TOMATO_MINI_DRIEDN;
            re[ItemType.WATERMELON] = [];
            re[ItemType.WATERMELON][SPRITE.DAY] = S.WATERMELOND;
            re[ItemType.WATERMELON][SPRITE.NIGHT] = S.WATERMELONN;
            re[SPRITE.DRIED_WATERMELON] = [];
            re[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = S.DRIED_WATERMELOND;
            re[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = S.DRIED_WATERMELONN;
            re[ItemType.ALOE_VERA] = [];
            re[ItemType.ALOE_VERA][SPRITE.DAY] = S.ALOE_VERA_GROWND;
            re[ItemType.ALOE_VERA][SPRITE.NIGHT] = S.ALOE_VERA_GROWNN;
            re[SPRITE.DRIED_ALOE_VERA] = [];
            re[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = S.ALOE_VERA_DRIEDD;
            re[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = S.ALOE_VERAN_DRIEDN;
            re[SPRITE.CACTUS] = [];
            re[SPRITE.CACTUS][SPRITE.DAY] = [S.CACTUSD];
            re[SPRITE.CACTUS][SPRITE.NIGHT] = [S.CACTUSN];
            re[ItemType.REIDITE_WALL] = [];
            re[ItemType.REIDITE_WALL][SPRITE.DAY] = S.REIDITE_WALLD;
            re[ItemType.REIDITE_WALL][SPRITE.NIGHT] = S.REIDITE_WALLN;
            re[ItemType.REIDITE_SPIKE] = [];
            re[ItemType.REIDITE_SPIKE][SPRITE.DAY] = S.REIDITE_SPIKED;
            re[ItemType.REIDITE_SPIKE][SPRITE.NIGHT] = S.REIDITE_SPIKEN;
            re[ItemType.REIDITE_DOOR] = [];
            re[ItemType.REIDITE_DOOR][SPRITE.DAY] = S.REIDITE_DOORD;
            re[ItemType.REIDITE_DOOR][SPRITE.NIGHT] = S.REIDITE_DOORN;
            re[ItemType.WOOD_DOOR_SPIKE] = [];
            re[ItemType.WOOD_DOOR_SPIKE][SPRITE.DAY] = S.WOOD_DOOR_SPIKED;
            re[ItemType.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = S.WOOD_DOOR_SPIKEN;
            re[ItemType.STONE_DOOR_SPIKE] = [];
            re[ItemType.STONE_DOOR_SPIKE][SPRITE.DAY] = S.STONE_DOOR_SPIKED;
            re[ItemType.STONE_DOOR_SPIKE][SPRITE.NIGHT] = S.STONE_DOOR_SPIKEN;
            re[ItemType.GOLD_DOOR_SPIKE] = [];
            re[ItemType.GOLD_DOOR_SPIKE][SPRITE.DAY] = S.GOLD_DOOR_SPIKED;
            re[ItemType.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = S.GOLD_DOOR_SPIKEN;
            re[ItemType.DIAMOND_DOOR_SPIKE] = [];
            re[ItemType.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = S.DIAMOND_DOOR_SPIKED;
            re[ItemType.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] = S.DIAMOND_DOOR_SPIKEN;
            re[ItemType.AMETHYST_DOOR_SPIKE] = [];
            re[ItemType.AMETHYST_DOOR_SPIKE][SPRITE.DAY] = S.AMETHYST_DOOR_SPIKED;
            re[ItemType.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] = S.AMETHYST_DOOR_SPIKEN;
            re[ItemType.REIDITE_DOOR_SPIKE] = [];
            re[ItemType.REIDITE_DOOR_SPIKE][SPRITE.DAY] = S.REIDITE_DOOR_SPIKED;
            re[ItemType.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] = S.REIDITE_DOOR_SPIKEN;
            re[SPRITE.GOLDEN_HEN] = [];
            re[SPRITE.GOLDEN_HEN][SPRITE.DAY] = S.HEND;
            re[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = S.HENN;
            re[SPRITE.GOLDEN_CHICKEN] = [];
            re[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = S.CHICKEND;
            re[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = S.CHICKENN;
            re[ItemType.REIDITE_HAMMER] = [];
            re[ItemType.REIDITE_HAMMER][SPRITE.DAY] = S.HAMMER_REIDITED;
            re[ItemType.REIDITE_HAMMER][SPRITE.NIGHT] = S.HAMMER_REIDITEN;
            re[SPRITE.HURT_GOLDEN_HEN] = S.HURT_GOLDEN_HEN;
            re[SPRITE.HURT_GOLDEN_CHICKEN] = S.HURT_GOLDEN_CHICKEN;
            re[SPRITE.FOG] = [];
            re[SPRITE.FOG][SPRITE.DAY] = [];
            re[SPRITE.FOG][SPRITE.NIGHT] = [];
            re[SPRITE.FOG][SPRITE.DAY].push(S.FOG0D);
            re[SPRITE.FOG][SPRITE.DAY].push(S.FOG1D);
            re[SPRITE.FOG][SPRITE.DAY].push(S.FOG2D);
            re[SPRITE.FOG][SPRITE.NIGHT].push(S.FOG0N);
            re[SPRITE.FOG][SPRITE.NIGHT].push(S.FOG1N);
            re[SPRITE.FOG][SPRITE.NIGHT].push(S.FOG2N);
            re[SPRITE.FOD] = [];
            re[SPRITE.FOD][SPRITE.DAY] = [];
            re[SPRITE.FOD][SPRITE.NIGHT] = [];
            re[SPRITE.FOD][SPRITE.DAY].push(S.FOD0D);
            re[SPRITE.FOD][SPRITE.DAY].push(S.FOD1D);
            re[SPRITE.FOD][SPRITE.DAY].push(S.FOD2D);
            re[SPRITE.FOD][SPRITE.NIGHT].push(S.FOD0N);
            re[SPRITE.FOD][SPRITE.NIGHT].push(S.FOD1N);
            re[SPRITE.FOD][SPRITE.NIGHT].push(S.FOD2N);
            re[SPRITE.MARKER] = [];
            re[SPRITE.MARKER][SPRITE.DAY] = [];
            re[SPRITE.MARKER][SPRITE.NIGHT] = [];
            re[SPRITE.MARKER][SPRITE.DAY].push(S.MARKER0D);
            re[SPRITE.MARKER][SPRITE.DAY].push(S.MARKER1D);
            re[SPRITE.MARKER][SPRITE.DAY].push(S.MARKER2D);
            re[SPRITE.MARKER][SPRITE.DAY].push(S.MARKER3D);
            re[SPRITE.MARKER][SPRITE.NIGHT].push(S.MARKER0N);
            re[SPRITE.MARKER][SPRITE.NIGHT].push(S.MARKER1N);
            re[SPRITE.MARKER][SPRITE.NIGHT].push(S.MARKER2N);
            re[SPRITE.MARKER][SPRITE.NIGHT].push(S.MARKER3N);
            re[SPRITE.LAVA_DRAGON] = [];
            re[SPRITE.LAVA_DRAGON][SPRITE.DAY] = S.LAVA_DRAGOND;
            re[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = S.LAVA_DRAGONN;
            re[SPRITE.LAVA_WING_LEFT] = [];
            re[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = S.LAVA_WING_LEFTD;
            re[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = S.LAVA_WING_LEFTN;
            re[SPRITE.LAVA_WING_RIGHT] = [];
            re[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = S.LAVA_WING_RIGHTD;
            re[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = S.LAVA_WING_RIGHTN;
            re[SPRITE.HURT_LAVA_DRAGON] = S.HURT_LAVA_DRAGON;
            re[SPRITE.HURT_LAVA_WING_LEFT] = S.HURT_LAVA_WING_LEFT;
            re[SPRITE.HURT_LAVA_WING_RIGHT] = S.HURT_LAVA_WING_RIGHT;
            re[ItemType.DIAMOND_PROTECTION] = [];
            re[ItemType.DIAMOND_PROTECTION][SPRITE.DAY] = S.DIAMOND_PROTECTIOND;
            re[ItemType.DIAMOND_PROTECTION][SPRITE.NIGHT] = S.DIAMOND_PROTECTIONN;
            re[SPRITE.GLOVES_DIAMOND_PROTECTION] = [];
            re[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] = S.HAND_DIAMOND_PROTECTIOND;
            re[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] = S.HAND_DIAMOND_PROTECTIONN;
            re[ItemType.AMETHYST_PROTECTION] = [];
            re[ItemType.AMETHYST_PROTECTION][SPRITE.DAY] = S.AMETHYST_PROTECTIOND;
            re[ItemType.AMETHYST_PROTECTION][SPRITE.NIGHT] = S.AMETHYST_PROTECTIONN;
            re[SPRITE.GLOVES_AMETHYST_PROTECTION] = [];
            re[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] = S.HAND_DIAMOND_PROTECTIOND;
            re[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] = S.HAND_DIAMOND_PROTECTIONN;
            re[ItemType.REIDITE_HELMET] = [];
            re[ItemType.REIDITE_HELMET][SPRITE.DAY] = S.REIDITE_HELMETD;
            re[ItemType.REIDITE_HELMET][SPRITE.NIGHT] = S.REIDITE_HELMETN;
            re[ItemType.REIDITE_SWORD] = [];
            re[ItemType.REIDITE_SWORD][SPRITE.DAY] = S.REIDITE_SWORDD;
            re[ItemType.REIDITE_SWORD][SPRITE.NIGHT] = S.REIDITE_SWORDN;
            re[ItemType.REIDITE_SPEAR] = [];
            re[ItemType.REIDITE_SPEAR][SPRITE.DAY] = S.REIDITE_SPEARD;
            re[ItemType.REIDITE_SPEAR][SPRITE.NIGHT] = S.REIDITE_SPEARN;
            re[ItemType.LAVA_SPEAR] = [];
            re[ItemType.LAVA_SPEAR][SPRITE.DAY] = S.LAVA_SPEARD;
            re[ItemType.LAVA_SPEAR][SPRITE.NIGHT] = S.LAVA_SPEARN;
            re[ItemType.LAVA_SWORD] = [];
            re[ItemType.LAVA_SWORD][SPRITE.DAY] = S.LAVA_SWORDD;
            re[ItemType.LAVA_SWORD][SPRITE.NIGHT] = S.LAVA_SWORDN;
            re[ItemType.LAVA_HELMET] = [];
            re[ItemType.LAVA_HELMET][SPRITE.DAY] = S.LAVA_HELMETD;
            re[ItemType.LAVA_HELMET][SPRITE.NIGHT] = S.LAVA_HELMETN;
            re[ItemType.WITCH_HAT] = [];
            re[ItemType.WITCH_HAT][SPRITE.DAY] = S.WITCHD;
            re[ItemType.WITCH_HAT][SPRITE.NIGHT] = S.WITCHN;
            re[ItemType.NIMBUS] = [];
            re[ItemType.NIMBUS][SPRITE.DAY] = S.NIMBUSD;
            re[ItemType.NIMBUS][SPRITE.NIGHT] = S.NIMBUSN;
            re[ItemType.WOOD_SHIELD] = [];
            re[ItemType.WOOD_SHIELD][SPRITE.DAY] = S.WOOD_SHIELDD;
            re[ItemType.WOOD_SHIELD][SPRITE.NIGHT] = S.WOOD_SHIELDN;
            re[ItemType.STONE_SHIELD] = [];
            re[ItemType.STONE_SHIELD][SPRITE.DAY] = S.STONE_SHIELDD;
            re[ItemType.STONE_SHIELD][SPRITE.NIGHT] = S.STONE_SHIELDN;
            re[ItemType.GOLD_SHIELD] = [];
            re[ItemType.GOLD_SHIELD][SPRITE.DAY] = S.GOLD_SHIELDD;
            re[ItemType.GOLD_SHIELD][SPRITE.NIGHT] = S.GOLD_SHIELDN;
            re[ItemType.DIAMOND_SHIELD] = [];
            re[ItemType.DIAMOND_SHIELD][SPRITE.DAY] = S.DIAMOND_SHIELDD;
            re[ItemType.DIAMOND_SHIELD][SPRITE.NIGHT] = S.DIAMOND_SHIELDN;
            re[ItemType.AMETHYST_SHIELD] = [];
            re[ItemType.AMETHYST_SHIELD][SPRITE.DAY] = S.AMETHYST_SHIELDD;
            re[ItemType.AMETHYST_SHIELD][SPRITE.NIGHT] = S.AMETHYST_SHIELDN;
            re[ItemType.REIDITE_SHIELD] = [];
            re[ItemType.REIDITE_SHIELD][SPRITE.DAY] = S.REIDITE_SHIELDD;
            re[ItemType.REIDITE_SHIELD][SPRITE.NIGHT] = S.REIDITE_SHIELDN;
            re[ItemType.WOOD_ARROW] = [];
            re[ItemType.WOOD_ARROW][SPRITE.DAY] = S.WOOD_ARROWD;
            re[ItemType.WOOD_ARROW][SPRITE.NIGHT] = S.WOOD_ARROWN;
            re[ItemType.WOOD_BOW] = [];
            re[ItemType.WOOD_BOW][SPRITE.DAY] = S.WOOD_BOWD;
            re[ItemType.WOOD_BOW][SPRITE.NIGHT] = S.WOOD_BOWN;
            re[ItemType.STONE_ARROW] = [];
            re[ItemType.STONE_ARROW][SPRITE.DAY] = S.STONE_ARROWD;
            re[ItemType.STONE_ARROW][SPRITE.NIGHT] = S.STONE_ARROWN;
            re[ItemType.STONE_BOW] = [];
            re[ItemType.STONE_BOW][SPRITE.DAY] = S.STONE_BOWD;
            re[ItemType.STONE_BOW][SPRITE.NIGHT] = S.STONE_BOWN;
            re[ItemType.GOLD_ARROW] = [];
            re[ItemType.GOLD_ARROW][SPRITE.DAY] = S.GOLD_ARROWD;
            re[ItemType.GOLD_ARROW][SPRITE.NIGHT] = S.GOLD_ARROWN;
            re[ItemType.GOLD_BOW] = [];
            re[ItemType.GOLD_BOW][SPRITE.DAY] = S.GOLD_BOWD;
            re[ItemType.GOLD_BOW][SPRITE.NIGHT] = S.GOLD_BOWN;
            re[ItemType.DIAMOND_ARROW] = [];
            re[ItemType.DIAMOND_ARROW][SPRITE.DAY] = S.DIAMOND_ARROWD;
            re[ItemType.DIAMOND_ARROW][SPRITE.NIGHT] = S.DIAMOND_ARROWN;
            re[ItemType.DIAMOND_BOW] = [];
            re[ItemType.DIAMOND_BOW][SPRITE.DAY] = S.DIAMOND_BOWD;
            re[ItemType.DIAMOND_BOW][SPRITE.NIGHT] = S.DIAMOND_BOWN;
            re[ItemType.AMETHYST_ARROW] = [];
            re[ItemType.AMETHYST_ARROW][SPRITE.DAY] = S.AMETHYST_ARROWD;
            re[ItemType.AMETHYST_ARROW][SPRITE.NIGHT] = S.AMETHYST_ARROWN;
            re[ItemType.AMETHYST_BOW] = [];
            re[ItemType.AMETHYST_BOW][SPRITE.DAY] = S.AMETHYST_BOWD;
            re[ItemType.AMETHYST_BOW][SPRITE.NIGHT] = S.AMETHYST_BOWN;
            re[ItemType.REIDITE_ARROW] = [];
            re[ItemType.REIDITE_ARROW][SPRITE.DAY] = S.REIDITE_ARROWD;
            re[ItemType.REIDITE_ARROW][SPRITE.NIGHT] = S.REIDITE_ARROWN;
            re[ItemType.REIDITE_BOW] = [];
            re[ItemType.REIDITE_BOW][SPRITE.DAY] = S.REIDITE_BOWD;
            re[ItemType.REIDITE_BOW][SPRITE.NIGHT] = S.REIDITE_BOWN;
            re[ItemType.DRAGON_ARROW] = [];
            re[ItemType.DRAGON_ARROW][SPRITE.DAY] = S.DRAGON_ARROWD;
            re[ItemType.DRAGON_ARROW][SPRITE.NIGHT] = S.DRAGON_ARROWN;
            re[ItemType.DRAGON_BOW] = [];
            re[ItemType.DRAGON_BOW][SPRITE.DAY] = S.DRAGON_BOWD;
            re[ItemType.DRAGON_BOW][SPRITE.NIGHT] = S.DRAGON_BOWN;
            re[ItemType.TURBAN1] = [];
            re[ItemType.TURBAN1][SPRITE.DAY] = S.TURBAN1D;
            re[ItemType.TURBAN1][SPRITE.NIGHT] = S.TURBAN1N;
            re[ItemType.TURBAN2] = [];
            re[ItemType.TURBAN2][SPRITE.DAY] = S.TURBAN2D;
            re[ItemType.TURBAN2][SPRITE.NIGHT] = S.TURBAN2N;
            re[ItemType.REIDITE_PROTECTION] = [];
            re[ItemType.REIDITE_PROTECTION][SPRITE.DAY] = S.REIDITE_PROTECTIOND;
            re[ItemType.REIDITE_PROTECTION][SPRITE.NIGHT] = S.REIDITE_PROTECTIONN;
            re[SPRITE.GLOVES_REIDITE_PROTECTION] = [];
            re[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] = S.HAND_REIDITE_PROTECTIOND;
            re[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] = S.HAND_REIDITE_PROTECTIONN;
            re[SPRITE.LAVA_BUBBLE] = [];
            re[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = [];
            re[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = [];
            re[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(S.LAVA_BUBLE0D);
            re[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(S.LAVA_BUBLE1D);
            re[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(S.LAVA_BUBLE2D);
            re[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(S.LAVA_BUBLE0N);
            re[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(S.LAVA_BUBLE1N);
            re[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(S.LAVA_BUBLE2N);
            re[ItemType.PITCHFORK] = [];
            re[ItemType.PITCHFORK][SPRITE.DAY] = S.PITCHFORKD;
            re[ItemType.PITCHFORK][SPRITE.NIGHT] = S.PITCHFORKN;
            re[ItemType.GOLD_PITCHFORK] = [];
            re[ItemType.GOLD_PITCHFORK][SPRITE.DAY] = S.PITCHFORK2D;
            re[ItemType.GOLD_PITCHFORK][SPRITE.NIGHT] = S.PITCHFORK2N;
            re[ItemType.YUSUKEDAO_ITEM1] = [];
            re[ItemType.YUSUKEDAO_ITEM1][SPRITE.DAY] = S.YUSUKEDAO_ITEM1D;
            re[ItemType.YUSUKEDAO_ITEM1][SPRITE.NIGHT] = S.YUSUKEDAO_ITEM1N;
            re[ItemType.YUSUKEDAO_ITEM2] = [];
            re[ItemType.YUSUKEDAO_ITEM2][SPRITE.DAY] = S.YUSUKEDAO_ITEM2D;
            re[ItemType.YUSUKEDAO_ITEM2][SPRITE.NIGHT] = S.YUSUKEDAO_ITEM2N;
            re[ItemType.EMERALD] = [];
            re[ItemType.EMERALD][SPRITE.DAY] = [];
            re[ItemType.EMERALD][SPRITE.NIGHT] = [];
            re[ItemType.EMERALD][SPRITE.DAY].push(S.EMERALD0D);
            re[ItemType.EMERALD][SPRITE.DAY].push(S.EMERALD1D);
            re[ItemType.EMERALD][SPRITE.DAY].push(S.EMERALD2D);
            re[ItemType.EMERALD][SPRITE.NIGHT].push(S.EMERALD0N);
            re[ItemType.EMERALD][SPRITE.NIGHT].push(S.EMERALD1N);
            re[ItemType.EMERALD][SPRITE.NIGHT].push(S.EMERALD2N);
            re[ItemType.REIDITE] = [];
            re[ItemType.REIDITE][SPRITE.DAY] = [];
            re[ItemType.REIDITE][SPRITE.NIGHT] = [];
            re[ItemType.REIDITE][SPRITE.DAY].push(S.REIDITE0D);
            re[ItemType.REIDITE][SPRITE.DAY].push(S.REIDITE1D);
            re[ItemType.REIDITE][SPRITE.DAY].push(S.REIDITE2D);
            re[ItemType.REIDITE][SPRITE.NIGHT].push(S.REIDITE0N);
            re[ItemType.REIDITE][SPRITE.NIGHT].push(S.REIDITE1N);
            re[ItemType.REIDITE][SPRITE.NIGHT].push(S.REIDITE2N);
            re[SPRITE.MAGMA] = [];
            re[SPRITE.MAGMA][SPRITE.DAY] = [];
            re[SPRITE.MAGMA][SPRITE.NIGHT] = [];
            re[SPRITE.MAGMA][SPRITE.DAY].push(S.MAGMA1D);
            re[SPRITE.MAGMA][SPRITE.DAY].push(S.MAGMA2D);
            re[SPRITE.MAGMA][SPRITE.DAY].push(S.MAGMA3D);
            re[SPRITE.MAGMA][SPRITE.DAY].push(S.MAGMA4D);
            re[SPRITE.MAGMA][SPRITE.DAY].push(S.MAGMA5D);
            re[SPRITE.MAGMA][SPRITE.DAY].push(S.MAGMA6D);
            re[SPRITE.MAGMA][SPRITE.NIGHT].push(S.MAGMA1N);
            re[SPRITE.MAGMA][SPRITE.NIGHT].push(S.MAGMA2N);
            re[SPRITE.MAGMA][SPRITE.NIGHT].push(S.MAGMA3N);
            re[SPRITE.MAGMA][SPRITE.NIGHT].push(S.MAGMA4N);
            re[SPRITE.MAGMA][SPRITE.NIGHT].push(S.MAGMA5N);
            re[SPRITE.MAGMA][SPRITE.NIGHT].push(S.MAGMA6N);
            re[SPRITE.LAVA_GROUND] = [];
            re[SPRITE.LAVA_GROUND][SPRITE.DAY] = [];
            re[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = [];
            re[SPRITE.LAVA_GROUND][SPRITE.DAY].push(S.LAVA_GROUND1D);
            re[SPRITE.LAVA_GROUND][SPRITE.DAY].push(S.LAVA_GROUND2D);
            re[SPRITE.LAVA_GROUND][SPRITE.DAY].push(S.LAVA_GROUND3D);
            re[SPRITE.LAVA_GROUND][SPRITE.DAY].push(S.LAVA_GROUND4D);
            re[SPRITE.LAVA_GROUND][SPRITE.DAY].push(S.LAVA_GROUND5D);
            re[SPRITE.LAVA_GROUND][SPRITE.DAY].push(S.LAVA_GROUND6D);
            re[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(S.LAVA_GROUND1N);
            re[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(S.LAVA_GROUND2N);
            re[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(S.LAVA_GROUND3N);
            re[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(S.LAVA_GROUND4N);
            re[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(S.LAVA_GROUND5N);
            re[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(S.LAVA_GROUND6N);
            re[SPRITE.FIRE_MOB] = [];
            re[SPRITE.FIRE_MOB][SPRITE.DAY] = S.FIRE_MOBD;
            re[SPRITE.FIRE_MOB][SPRITE.NIGHT] = S.FIRE_MOBN;
            re[SPRITE.HURT_FIRE_MOB] = S.FIRE_MOB_HURT;
            re[ItemType.MACHETE] = [];
            re[ItemType.MACHETE][SPRITE.DAY] = S.MACHETED;
            re[ItemType.MACHETE][SPRITE.NIGHT] = S.MACHETEN;
            re[ItemType.BOAT] = [];
            re[ItemType.BOAT][SPRITE.DAY] = S.BOATD;
            re[ItemType.BOAT][SPRITE.NIGHT] = S.BOATN;
            re[ItemType.SLED] = [];
            re[ItemType.SLED][SPRITE.DAY] = S.SLEDD;
            re[ItemType.SLED][SPRITE.NIGHT] = S.SLEDN;
            re[ItemType.PLANE] = [];
            re[ItemType.PLANE][SPRITE.DAY] = S.PLANED;
            re[ItemType.PLANE][SPRITE.NIGHT] = S.PLANEN;
            re[SPRITE.PENGUIN] = [];
            re[SPRITE.PENGUIN][SPRITE.DAY] = S.PENGUIND;
            re[SPRITE.PENGUIN][SPRITE.NIGHT] = S.PENGUINN;
            re[SPRITE.HURT_PENGUIN] = S.HURT_PENGUIN;
            re[SPRITE.SAND_WORM1] = [];
            re[SPRITE.SAND_WORM1][SPRITE.DAY] = S.SAND_WORM1D;
            re[SPRITE.SAND_WORM1][SPRITE.NIGHT] = S.SAND_WORM1N;
            re[SPRITE.SAND_WORM2] = [];
            re[SPRITE.SAND_WORM2][SPRITE.DAY] = S.SAND_WORM2D;
            re[SPRITE.SAND_WORM2][SPRITE.NIGHT] = S.SAND_WORM2N;
            re[SPRITE.HURT_SAND_WORM0] = S.HURT_SAND_WORM0;
            re[SPRITE.HURT_SAND_WORM1] = S.HURT_SAND_WORM1;
            re[SPRITE.HURT_SAND_WORM2] = S.HURT_SAND_WORM2;
            re[SPRITE.SCORPION] = [];
            re[SPRITE.SCORPION][SPRITE.DAY] = S.SCORPIOND;
            re[SPRITE.SCORPION][SPRITE.NIGHT] = S.SCORPIONN;
            re[SPRITE.SCORPION_HAND_LEFT] = [];
            re[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = S.SCORPION_HAND_LEFTD;
            re[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] = S.SCORPION_HAND_LEFTN;
            re[SPRITE.SCORPION_HAND_RIGHT] = [];
            re[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] = S.SCORPION_HAND_RIGHTD;
            re[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] = S.SCORPION_HAND_RIGHTN;
            re[SPRITE.HURT_SCORPION] = S.HURT_SCORPION;
            re[SPRITE.HURT_SCORPION_HAND_RIGHT] = S.HURT_SCORPION_HAND_RIGHT;
            re[SPRITE.HURT_SCORPION_HAND_LEFT] = S.HURT_SCORPION_HAND_LEFT;
            re[SPRITE.CRAB_BOSS_ATTACK] = [];
            re[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = S.CRAB_BOSS_ATTACKD;
            re[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = S.CRAB_BOSS_ATTACKN;
            re[SPRITE.CRAB_BOSS_TAMED] = [];
            re[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = S.CRAB_BOSS_TAMEDD;
            re[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = S.CRAB_BOSS_TAMEDN;
            re[SPRITE.CRAB_BOSS] = [];
            re[SPRITE.CRAB_BOSS][SPRITE.DAY] = S.CRAB_BOSSD;
            re[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = S.CRAB_BOSSN;
            re[SPRITE.CRAB_BOSS_CLAW_LEFT] = [];
            re[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] = S.CRAB_BOSS_CLAW_LEFTD;
            re[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] = S.CRAB_BOSS_CLAW_LEFTN;
            re[SPRITE.CRAB_BOSS_CLAW_RIGHT] = [];
            re[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] = S.CRAB_BOSS_CLAW_RIGHTD;
            re[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] = S.CRAB_BOSS_CLAW_RIGHTN;
            re[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = [];
            re[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] = S.CRAB_BOSS_CLAW_LEFT_ATTACKD;
            re[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = S.CRAB_BOSS_CLAW_LEFT_ATTACKN;
            re[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [];
            re[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] = S.CRAB_BOSS_CLAW_RIGHT_ATTACKD;
            re[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = S.CRAB_BOSS_CLAW_RIGHT_ATTACKN;
            re[SPRITE.HURT_CRAB_BOSS] = S.HURT_CRAB_BOSS;
            re[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = S.HURT_CRAB_BOSS_CLAW_LEFT;
            re[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = S.HURT_CRAB_BOSS_CLAW_RIGHT;
            re[SPRITE.HEAL_CRAB_BOSS] = S.HEAL_CRAB_BOSS;
            re[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = S.HEAL_CRAB_BOSS_CLAW_LEFT;
            re[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = S.HEAL_CRAB_BOSS_CLAW_RIGHT;
            re[SPRITE.BABY_MAMMOTH_ATTACK] = [];
            re[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] = S.BABY_MAMMOTH_ATTACKD;
            re[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] = S.BABY_MAMMOTH_ATTACKN;
            re[SPRITE.BABY_MAMMOTH] = [];
            re[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = S.BABY_MAMMOTHD;
            re[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = S.BABY_MAMMOTHN;
            re[SPRITE.MAMMOTH] = [];
            re[SPRITE.MAMMOTH][SPRITE.DAY] = S.MAMMOTHD;
            re[SPRITE.MAMMOTH][SPRITE.NIGHT] = S.MAMMOTHN;
            re[SPRITE.BABY_MAMMOTH_TAMED] = [];
            re[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = S.BABY_MAMMOTH_TAMEDD;
            re[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] = S.BABY_MAMMOTH_TAMEDN;
            re[SPRITE.HURT_BABY_MAMMOTH] = S.HURT_BABY_MAMMOTH;
            re[SPRITE.HURT_MAMMOTH] = S.HURT_MAMMOTH;
            re[SPRITE.BABY_DRAGON_ATTACK] = [];
            re[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = S.BABY_DRAGON_ATTACKD;
            re[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] = S.BABY_DRAGON_ATTACKN;
            re[SPRITE.BABY_DRAGON] = [];
            re[SPRITE.BABY_DRAGON][SPRITE.DAY] = S.BABY_DRAGOND;
            re[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = S.BABY_DRAGONN;
            re[SPRITE.BABY_DRAGON_TAMED] = [];
            re[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = S.BABY_DRAGON_TAMEDD;
            re[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = S.BABY_DRAGON_TAMEDN;
            re[SPRITE.BABY_DRAGON_WING_LEFT] = [];
            re[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] = S.BABY_DRAGON_WING_LEFTD;
            re[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] = S.BABY_DRAGON_WING_LEFTN;
            re[SPRITE.BABY_DRAGON_WING_RIGHT] = [];
            re[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] = S.BABY_DRAGON_WING_RIGHTD;
            re[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] = S.BABY_DRAGON_WING_RIGHTN;
            re[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = [];
            re[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] = S.BABY_DRAGON_WING_LEFT_ATTACKD;
            re[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] = S.BABY_DRAGON_WING_LEFT_ATTACKN;
            re[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = [];
            re[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] = S.BABY_DRAGON_WING_RIGHT_ATTACKD;
            re[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] = S.BABY_DRAGON_WING_RIGHT_ATTACKN;
            re[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = [];
            re[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] = S.BABY_DRAGON_WING_LEFT_TAMEDD;
            re[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] = S.BABY_DRAGON_WING_LEFT_TAMEDN;
            re[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = [];
            re[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] = S.BABY_DRAGON_WING_RIGHT_TAMEDD;
            re[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] = S.BABY_DRAGON_WING_RIGHT_TAMEDN;
            re[SPRITE.HURT_BABY_DRAGON] = S.HURT_BABY_DRAGON;
            re[SPRITE.HURT_BABY_DRAGON_WING_LEFT] = S.HURT_BABY_DRAGON_WING_LEFT;
            re[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] = S.HURT_BABY_DRAGON_WING_RIGHT;
            re[SPRITE.BABY_LAVA_ATTACK] = [];
            re[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = S.BABY_LAVA_ATTACKD;
            re[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = S.BABY_LAVA_ATTACKN;
            re[SPRITE.BABY_LAVA] = [];
            re[SPRITE.BABY_LAVA][SPRITE.DAY] = S.BABY_LAVAD;
            re[SPRITE.BABY_LAVA][SPRITE.NIGHT] = S.BABY_LAVAN;
            re[SPRITE.BABY_LAVA_TAMED] = [];
            re[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = S.BABY_LAVA_TAMEDD;
            re[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = S.BABY_LAVA_TAMEDN;
            re[SPRITE.BABY_LAVA_WING_LEFT] = [];
            re[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] = S.BABY_LAVA_WING_LEFTD;
            re[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] = S.BABY_LAVA_WING_LEFTN;
            re[SPRITE.BABY_LAVA_WING_RIGHT] = [];
            re[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] = S.BABY_LAVA_WING_RIGHTD;
            re[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] = S.BABY_LAVA_WING_RIGHTN;
            re[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = [];
            re[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] = S.BABY_LAVA_WING_LEFT_ATTACKD;
            re[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] = S.BABY_LAVA_WING_LEFT_ATTACKN;
            re[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = [];
            re[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] = S.BABY_LAVA_WING_RIGHT_ATTACKD;
            re[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] = S.BABY_LAVA_WING_RIGHT_ATTACKN;
            re[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = [];
            re[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] = S.BABY_LAVA_WING_LEFT_TAMEDD;
            re[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] = S.BABY_LAVA_WING_LEFT_TAMEDN;
            re[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = [];
            re[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] = S.BABY_LAVA_WING_RIGHT_TAMEDD;
            re[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] = S.BABY_LAVA_WING_RIGHT_TAMEDN;
            re[SPRITE.HURT_BABY_LAVA] = S.HURT_BABY_LAVA;
            re[SPRITE.HURT_BABY_LAVA_WING_LEFT] = S.HURT_BABY_LAVA_WING_LEFT;
            re[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = S.HURT_BABY_LAVA_WING_RIGHT;
            re[SPRITE.HAWK_ATTACK] = [];
            re[SPRITE.HAWK_ATTACK][SPRITE.DAY] = S.HAWK_ATTACKD;
            re[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = S.HAWK_ATTACKN;
            re[SPRITE.HAWK] = [];
            re[SPRITE.HAWK][SPRITE.DAY] = S.HAWKD;
            re[SPRITE.HAWK][SPRITE.NIGHT] = S.HAWKN;
            re[SPRITE.HURT_HAWK_GROUND] = S.HURT_HAWK_GROUND;
            re[SPRITE.HAWK_GROUND] = [];
            re[SPRITE.HAWK_GROUND][SPRITE.DAY] = S.HAWK_GROUNDD;
            re[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = S.HAWK_GROUNDN;
            re[SPRITE.HAWK_GROUND_ATTACK] = [];
            re[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = S.HAWK_GROUND_ATTACKD;
            re[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] = S.HAWK_GROUND_ATTACKN;
            re[SPRITE.HAWK_TAMED] = [];
            re[SPRITE.HAWK_TAMED][SPRITE.DAY] = S.HAWK_TAMEDD;
            re[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = S.HAWK_TAMEDN;
            re[SPRITE.HAWK_WING_LEFT] = [];
            re[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = S.HAWK_WING_LEFTD;
            re[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = S.HAWK_WING_LEFTN;
            re[SPRITE.HAWK_WING_RIGHT] = [];
            re[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = S.HAWK_WING_RIGHTD;
            re[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = S.HAWK_WING_RIGHTN;
            re[SPRITE.HAWK_WING_LEFT_ATTACK] = [];
            re[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] = S.HAWK_WING_LEFT_ATTACKD;
            re[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] = S.HAWK_WING_LEFT_ATTACKN;
            re[SPRITE.HAWK_WING_RIGHT_ATTACK] = [];
            re[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] = S.HAWK_WING_RIGHT_ATTACKD;
            re[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] = S.HAWK_WING_RIGHT_ATTACKN;
            re[SPRITE.HAWK_WING_LEFT_TAMED] = [];
            re[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] = S.HAWK_WING_LEFT_TAMEDD;
            re[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] = S.HAWK_WING_LEFT_TAMEDN;
            re[SPRITE.HAWK_WING_RIGHT_TAMED] = [];
            re[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] = S.HAWK_WING_RIGHT_TAMEDD;
            re[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] = S.HAWK_WING_RIGHT_TAMEDN;
            re[SPRITE.HURT_HAWK] = S.HURT_HAWK;
            re[SPRITE.HURT_HAWK_WING_LEFT] = S.HURT_HAWK_WING_LEFT;
            re[SPRITE.HURT_HAWK_WING_RIGHT] = S.HURT_HAWK_WING_RIGHT;
            re[SPRITE.VULTURE_ATTACK] = [];
            re[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = S.VULTURE_ATTACKD;
            re[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = S.VULTURE_ATTACKN;
            re[SPRITE.VULTURE] = [];
            re[SPRITE.VULTURE][SPRITE.DAY] = S.VULTURED;
            re[SPRITE.VULTURE][SPRITE.NIGHT] = S.VULTUREN;
            re[SPRITE.HURT_VULTURE_GROUND] = S.HURT_VULTURE_GROUND;
            re[SPRITE.VULTURE_GROUND] = [];
            re[SPRITE.VULTURE_GROUND][SPRITE.DAY] = S.VULTURE_GROUNDD;
            re[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = S.VULTURE_GROUNDN;
            re[SPRITE.VULTURE_GROUND_ATTACK] = [];
            re[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] = S.VULTURE_GROUND_ATTACKD;
            re[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] = S.VULTURE_GROUND_ATTACKN;
            re[SPRITE.VULTURE_TAMED] = [];
            re[SPRITE.VULTURE_TAMED][SPRITE.DAY] = S.VULTURE_TAMEDD;
            re[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = S.VULTURE_TAMEDN;
            re[SPRITE.VULTURE_WING_LEFT] = [];
            re[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = S.VULTURE_WING_LEFTD;
            re[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = S.VULTURE_WING_LEFTN;
            re[SPRITE.VULTURE_WING_RIGHT] = [];
            re[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = S.VULTURE_WING_RIGHTD;
            re[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] = S.VULTURE_WING_RIGHTN;
            re[SPRITE.VULTURE_WING_LEFT_ATTACK] = [];
            re[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] = S.VULTURE_WING_LEFT_ATTACKD;
            re[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] = S.VULTURE_WING_LEFT_ATTACKN;
            re[SPRITE.VULTURE_WING_RIGHT_ATTACK] = [];
            re[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] = S.VULTURE_WING_RIGHT_ATTACKD;
            re[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] = S.VULTURE_WING_RIGHT_ATTACKN;
            re[SPRITE.VULTURE_WING_LEFT_TAMED] = [];
            re[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] = S.VULTURE_WING_LEFT_TAMEDD;
            re[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] = S.VULTURE_WING_LEFT_TAMEDN;
            re[SPRITE.VULTURE_WING_RIGHT_TAMED] = [];
            re[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] = S.VULTURE_WING_RIGHT_TAMEDD;
            re[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] = S.VULTURE_WING_RIGHT_TAMEDN;
            re[SPRITE.HURT_VULTURE] = S.HURT_VULTURE;
            re[SPRITE.HURT_VULTURE_WING_LEFT] = S.HURT_VULTURE_WING_LEFT;
            re[SPRITE.HURT_VULTURE_WING_RIGHT] = S.HURT_VULTURE_WING_RIGHT;
            re[SPRITE.BOAR] = [];
            re[SPRITE.BOAR][SPRITE.DAY] = S.BOARD;
            re[SPRITE.BOAR][SPRITE.NIGHT] = S.BOARN;
            re[SPRITE.BOAR_TAMED] = [];
            re[SPRITE.BOAR_TAMED][SPRITE.DAY] = S.BOAR_TAMEDD;
            re[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = S.BOAR_TAMEDN;
            re[SPRITE.BOAR_ATTACK] = [];
            re[SPRITE.BOAR_ATTACK][SPRITE.DAY] = S.BOAR_ANGRYD;
            re[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = S.BOAR_ANGRYN;
            re[SPRITE.BOAR_STEP] = [];
            re[SPRITE.BOAR_STEP][SPRITE.DAY] = S.BOAR_STEP;
            re[SPRITE.BOAR_STEP][SPRITE.NIGHT] = S.BOAR_STEP;
            re[SPRITE.CRAB_STEP] = [];
            re[SPRITE.CRAB_STEP][SPRITE.DAY] = S.CRAB_STEP;
            re[SPRITE.CRAB_STEP][SPRITE.NIGHT] = S.CRAB_STEP;
            re[SPRITE.BABY_MAMMOTH_STEP] = [];
            re[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = S.BABY_MAMMOTH_STEP;
            re[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = S.BABY_MAMMOTH_STEP;
            re[SPRITE.HURT_BOAR] = S.HURT_BOAR;
            re[ItemType.SADDLE] = [];
            re[ItemType.SADDLE][SPRITE.DAY] = S.SADDLED;
            re[ItemType.SADDLE][SPRITE.NIGHT] = S.SADDLEN;
            re[ItemType.WAND1] = [];
            re[ItemType.WAND1][SPRITE.DAY] = S.WAND1D;
            re[ItemType.WAND1][SPRITE.NIGHT] = S.WAND1N;
            re[SPRITE.SPELL] = [];
            re[SPRITE.SPELL][SPRITE.DAY] = [S.LIGHT_WAND0D, S.LIGHT_WAND1D, S.WOOD_ARROWD, S.STONE_ARROWD, S.GOLD_ARROWD, S.DIAMOND_ARROWD, S.AMETHYST_ARROWD, S.REIDITE_ARROWD, S.DRAGON_ARROWD];
            re[SPRITE.SPELL][SPRITE.NIGHT] = [S.LIGHT_WAND0N, S.LIGHT_WAND1N, S.WOOD_ARROWN, S.STONE_ARROWN, S.GOLD_ARROWN, S.DIAMOND_ARROWN, S.AMETHYST_ARROWN, S.REIDITE_ARROWD, S.DRAGON_ARROWN];
            re[ItemType.WAND2] = [];
            re[ItemType.WAND2][SPRITE.DAY] = S.WAND2D;
            re[ItemType.WAND2][SPRITE.NIGHT] = S.WAND2N;
            re[SPRITE.BOAT_WAVE] = [];
            re[SPRITE.BOAT_WAVE][SPRITE.DAY] = S.BOAT_WAVED;
            re[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = S.BOAT_WAVEN;
            re[SPRITE.SLED_WAVE] = [];
            re[SPRITE.SLED_WAVE][SPRITE.DAY] = S.SLED_WAVED;
            re[SPRITE.SLED_WAVE][SPRITE.NIGHT] = S.SLED_WAVEN;
            re[ItemType.PIRATE_HAT] = [];
            re[ItemType.PIRATE_HAT][SPRITE.DAY] = S.PIRATE_HATD;
            re[ItemType.PIRATE_HAT][SPRITE.NIGHT] = S.PIRATE_HATN;
            re[ItemType.FUR_HAT] = [];
            re[ItemType.FUR_HAT][SPRITE.DAY] = S.FUR_HATD;
            re[ItemType.FUR_HAT][SPRITE.NIGHT] = S.FUR_HATN;
            re[ItemType.FLOWER_HAT] = [];
            re[ItemType.FLOWER_HAT][SPRITE.DAY] = S.FLOWER_HATD;
            re[ItemType.FLOWER_HAT][SPRITE.NIGHT] = S.FLOWER_HATN;
            re[ItemType.PILOT_HAT] = [];
            re[ItemType.PILOT_HAT][SPRITE.DAY] = S.PILOT_HELMETD;
            re[ItemType.PILOT_HAT][SPRITE.NIGHT] = S.PILOT_HELMETN;
            ae.g = [];
            ae.g[0] = [S.MAPDAY_GOLD1, S.MAPNIGHT_GOLD1];
            ae.g[1] = ae.g[0];
            ae.g[2] = [S.MAPDAY_GOLD2, S.MAPNIGHT_GOLD2];
            ae.m = [];
            ae.m[0] = [S.MAPDAY_EMERALD1, S.MAPNIGHT_EMERALD1];
            ae.m[1] = ae.m[0];
            ae.m[2] = [S.MAPDAY_EMERALD2, S.MAPNIGHT_EMERALD2];
            ae.la = [];
            ae.la[0] = [S.MAPDAY_MAGMA, S.MAPNIGHT_MAGMA];
            ae.la[1] = ae.la[0];
            ae.la[2] = ae.la[0];
            ae.la[3] = ae.la[0];
            ae.la[4] = ae.la[0];
            ae.la[5] = ae.la[0];
            ae.s = [];
            ae.s[0] = [S.MAPDAY_STONE1, S.MAPNIGHT_STONE1];
            ae.s[1] = ae.s[0];
            ae.s[2] = [S.MAPDAY_STONE2, S.MAPNIGHT_STONE2];
            ae.p = [];
            ae.p[0] = [S.MAPDAY_BERRY, S.MAPDAY_BERRY];
            ae.a = [];
            ae.a[0] = [S.MAPDAY_AMETHYST, S.MAPNIGHT_AMETHYST];
            ae.a[1] = ae.a[0];
            ae.a[2] = ae.a[0];
            ae.d = [];
            ae.d[0] = [S.MAPDAY_DIAMOND, S.MAPNIGHT_DIAMOND];
            ae.d[1] = ae.d[0];
            ae.d[2] = ae.d[0];
            ae.re = [];
            ae.re[0] = [S.MAPDAY_REIDITE, S.MAPNIGHT_REIDITE];
            ae.re[1] = ae.re[0];
            ae.re[2] = ae.re[0];
            ae.f = [];
            ae.f[0] = [S.MAPDAY_FIR_TREE, S.MAPNIGHT_FIR_TREE];
            ae.f[1] = ae.f[0];
            ae.f[2] = ae.f[0];
            ae.isl = [];
            ae.isl[0] = [S.MAPDAY_ISLAND, S.MAPNIGHT_ISLAND];
            ae.isl[1] = ae.isl[0];
            ae.isl[2] = ae.isl[0];
            ae.c = [];
            ae.c[0] = [S.MAPDAY_CACTUS, S.MAPNIGHT_CACTUS];
            ae.c[1] = ae.c[0];
            ae.c[2] = ae.c[0];
            ae.wtb = [];
            ae.wtb[0] = [S.MAPDAY_RIVER, S.MAPNIGHT_RIVER];
            ae.PIRANHA = [S.MAPDAY_PIRANHA, S.MAPNIGHT_PIRANHA];
            ae.KRAKEN = [S.MAPDAY_KRAKEN, S.MAPNIGHT_KRAKEN];
            ae.FOX = [S.MAPDAY_FOX, S.MAPNIGHT_FOX];
            ae.WOLF = [S.MAPDAY_WOLF, S.MAPNIGHT_WOLF];
            ae.SPIDER = [S.MAPDAY_SPIDER, S.MAPNIGHT_SPIDER];
            ae.BEAR = [S.MAPDAY_BEAR, S.MAPNIGHT_BEAR];
            ae.CAVE = [S.MAPDAY_CAVE, S.MAPNIGHT_CAVE];
            ae.MAP = [S.BIGDAY, S.BIGNIGHT];
            ae.FOREST = [S.MAPDAY_FOREST, S.MAPNIGHT_FOREST];
            ae.WINTER = [S.MAPDAY_WINTER, S.MAPNIGHT_WINTER];
            ae.DESERT = [S.MAPDAY_DESERT, S.MAPNIGHT_DESERT];
            ae.LAVA = [S.MAPDAY_LAVA, S.MAPNIGHT_LAVA];
            for (var t in ae) {
            for (var i = ae[t], o = 0; o < i.length; o++) {
                var T = i[o];
                if (T.tryLoad !== undefined) {
                T.tryLoad();
                } else if (T.length > 0) {
                for (var r = 0; r < T.length; r++) {
                    if (T[r].tryLoad !== undefined) {
                    T[r].tryLoad();
                    }
                }
                }
            }
            }
        }
        function ko() {
            new window.Date().getTime();
            Uo();
            __p_5863156023(() => {
            re[SPRITE.INV_PUMPKIN] = xe(1, [{
                f: co,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CHEST_PUMPKIN] = re[SPRITE.INV_PUMPKIN];
            re[SPRITE.INV_CARROT] = [];
            re[SPRITE.INV_CARROT][0] = S.INV_CARROT_OUT;
            re[SPRITE.INV_CARROT][1] = S.INV_CARROT_IN;
            re[SPRITE.INV_CARROT][2] = S.INV_CARROT_CLICK;
            re[SPRITE.CHEST_CARROT] = re[SPRITE.INV_CARROT];
            re[SPRITE.INV_WATERMELON] = [];
            re[SPRITE.INV_WATERMELON][0] = S.INV_WATERMELON_OUT;
            re[SPRITE.INV_WATERMELON][1] = S.INV_WATERMELON_IN;
            re[SPRITE.INV_WATERMELON][2] = S.INV_WATERMELON_CLICK;
            re[SPRITE.CHEST_WATERMELON] = re[SPRITE.INV_WATERMELON];
            re[SPRITE.INV_ALOE_VERA] = [];
            re[SPRITE.INV_ALOE_VERA][0] = S.INV_ALOE_VERA_OUT;
            re[SPRITE.INV_ALOE_VERA][1] = S.INV_ALOE_VERA_IN;
            re[SPRITE.INV_ALOE_VERA][2] = S.INV_ALOE_VERA_CLICK;
            re[SPRITE.CHEST_ALOE_VERA] = re[SPRITE.INV_ALOE_VERA];
            re[SPRITE.INV_CACTUS] = [];
            re[SPRITE.INV_CACTUS][0] = S.INV_CACTUS_OUT;
            re[SPRITE.INV_CACTUS][1] = S.INV_CACTUS_IN;
            re[SPRITE.INV_CACTUS][2] = S.INV_CACTUS_CLICK;
            re[SPRITE.CHEST_CACTUS] = re[SPRITE.INV_CACTUS];
            re[SPRITE.INV_TOMATO] = [];
            re[SPRITE.INV_TOMATO][0] = S.INV_TOMATO_OUT;
            re[SPRITE.INV_TOMATO][1] = S.INV_TOMATO_IN;
            re[SPRITE.INV_TOMATO][2] = S.INV_TOMATO_CLICK;
            re[SPRITE.CHEST_TOMATO] = re[SPRITE.INV_TOMATO];
            re[SPRITE.INV_BOAT] = [];
            re[SPRITE.INV_BOAT][0] = S.INV_BOAT_OUT;
            re[SPRITE.INV_BOAT][1] = S.INV_BOAT_IN;
            re[SPRITE.INV_BOAT][2] = S.INV_BOAT_CLICK;
            re[SPRITE.CHEST_BOAT] = re[SPRITE.INV_BOAT];
            re[SPRITE.CRAFT_BOAT] = re[SPRITE.INV_BOAT];
            re[SPRITE.INV_MACHETE] = [];
            re[SPRITE.INV_MACHETE][0] = S.INV_MACHETE_OUT;
            re[SPRITE.INV_MACHETE][1] = S.INV_MACHETE_IN;
            re[SPRITE.INV_MACHETE][2] = S.INV_MACHETE_CLICK;
            re[SPRITE.CHEST_MACHETE] = re[SPRITE.INV_MACHETE];
            re[SPRITE.CRAFT_MACHETE] = re[SPRITE.INV_MACHETE];
            re[SPRITE.INV_SLED] = [];
            re[SPRITE.INV_SLED][0] = S.INV_SLED_OUT;
            re[SPRITE.INV_SLED][1] = S.INV_SLED_IN;
            re[SPRITE.INV_SLED][2] = S.INV_SLED_CLICK;
            re[SPRITE.CHEST_SLED] = re[SPRITE.INV_SLED];
            re[SPRITE.CRAFT_SLED] = re[SPRITE.INV_SLED];
            re[SPRITE.INV_PIRATE_HAT] = [];
            re[SPRITE.INV_PIRATE_HAT][0] = S.INV_PIRATE_HAT_OUT;
            re[SPRITE.INV_PIRATE_HAT][1] = S.INV_PIRATE_HAT_IN;
            re[SPRITE.INV_PIRATE_HAT][2] = S.INV_PIRATE_HAT_CLICK;
            re[SPRITE.CHEST_PIRATE_HAT] = re[SPRITE.INV_PIRATE_HAT];
            re[SPRITE.CRAFT_PIRATE_HAT] = re[SPRITE.INV_PIRATE_HAT];
            re[SPRITE.INV_FUR_MAMMOTH] = [];
            re[SPRITE.INV_FUR_MAMMOTH][0] = S.INV_FUR_MAMMOTH_OUT;
            re[SPRITE.INV_FUR_MAMMOTH][1] = S.INV_FUR_MAMMOTH_IN;
            re[SPRITE.INV_FUR_MAMMOTH][2] = S.INV_FUR_MAMMOTH_CLICK;
            re[SPRITE.CHEST_FUR_MAMMOTH] = re[SPRITE.INV_FUR_MAMMOTH];
            re[SPRITE.INV_FUR_HAT] = [];
            re[SPRITE.INV_FUR_HAT][0] = S.INV_FUR_HAT_OUT;
            re[SPRITE.INV_FUR_HAT][1] = S.INV_FUR_HAT_IN;
            re[SPRITE.INV_FUR_HAT][2] = S.INV_FUR_HAT_CLICK;
            re[SPRITE.CHEST_FUR_HAT] = re[SPRITE.INV_FUR_HAT];
            re[SPRITE.CRAFT_FUR_HAT] = re[SPRITE.INV_FUR_HAT];
            re[SPRITE.INV_WOOD_BOW] = [];
            re[SPRITE.INV_WOOD_BOW][0] = S.INV_WOOD_BOW_OUT;
            re[SPRITE.INV_WOOD_BOW][1] = S.INV_WOOD_BOW_IN;
            re[SPRITE.INV_WOOD_BOW][2] = S.INV_WOOD_BOW_CLICK;
            re[SPRITE.CHEST_WOOD_BOW] = re[SPRITE.INV_WOOD_BOW];
            re[SPRITE.CRAFT_WOOD_BOW] = re[SPRITE.INV_WOOD_BOW];
            re[SPRITE.INV_WOOD_ARROW] = [];
            re[SPRITE.INV_WOOD_ARROW][0] = S.INV_WOOD_ARROW_OUT;
            re[SPRITE.INV_WOOD_ARROW][1] = S.INV_WOOD_ARROW_IN;
            re[SPRITE.INV_WOOD_ARROW][2] = S.INV_WOOD_ARROW_CLICK;
            re[SPRITE.CHEST_WOOD_ARROW] = re[SPRITE.INV_WOOD_ARROW];
            re[SPRITE.CRAFT_WOOD_ARROW] = re[SPRITE.INV_WOOD_ARROW];
            re[SPRITE.INV_STONE_BOW] = [];
            re[SPRITE.INV_STONE_BOW][0] = S.INV_STONE_BOW_OUT;
            re[SPRITE.INV_STONE_BOW][1] = S.INV_STONE_BOW_IN;
            re[SPRITE.INV_STONE_BOW][2] = S.INV_STONE_BOW_CLICK;
            re[SPRITE.CHEST_STONE_BOW] = re[SPRITE.INV_STONE_BOW];
            re[SPRITE.CRAFT_STONE_BOW] = re[SPRITE.INV_STONE_BOW];
            re[SPRITE.INV_STONE_ARROW] = [];
            re[SPRITE.INV_STONE_ARROW][0] = S.INV_STONE_ARROW_OUT;
            re[SPRITE.INV_STONE_ARROW][1] = S.INV_STONE_ARROW_IN;
            re[SPRITE.INV_STONE_ARROW][2] = S.INV_STONE_ARROW_CLICK;
            re[SPRITE.CHEST_STONE_ARROW] = re[SPRITE.INV_STONE_ARROW];
            re[SPRITE.CRAFT_STONE_ARROW] = re[SPRITE.INV_STONE_ARROW];
            re[SPRITE.INV_GOLD_BOW] = [];
            re[SPRITE.INV_GOLD_BOW][0] = S.INV_GOLD_BOW_OUT;
            re[SPRITE.INV_GOLD_BOW][1] = S.INV_GOLD_BOW_IN;
            re[SPRITE.INV_GOLD_BOW][2] = S.INV_GOLD_BOW_CLICK;
            re[SPRITE.CHEST_GOLD_BOW] = re[SPRITE.INV_GOLD_BOW];
            re[SPRITE.CRAFT_GOLD_BOW] = re[SPRITE.INV_GOLD_BOW];
            re[SPRITE.INV_GOLD_ARROW] = [];
            re[SPRITE.INV_GOLD_ARROW][0] = S.INV_GOLD_ARROW_OUT;
            re[SPRITE.INV_GOLD_ARROW][1] = S.INV_GOLD_ARROW_IN;
            re[SPRITE.INV_GOLD_ARROW][2] = S.INV_GOLD_ARROW_CLICK;
            re[SPRITE.CHEST_GOLD_ARROW] = re[SPRITE.INV_GOLD_ARROW];
            re[SPRITE.CRAFT_GOLD_ARROW] = re[SPRITE.INV_GOLD_ARROW];
            re[SPRITE.INV_DIAMOND_BOW] = [];
            re[SPRITE.INV_DIAMOND_BOW][0] = S.INV_DIAMOND_BOW_OUT;
            re[SPRITE.INV_DIAMOND_BOW][1] = S.INV_DIAMOND_BOW_IN;
            re[SPRITE.INV_DIAMOND_BOW][2] = S.INV_DIAMOND_BOW_CLICK;
            re[SPRITE.CHEST_DIAMOND_BOW] = re[SPRITE.INV_DIAMOND_BOW];
            re[SPRITE.CRAFT_DIAMOND_BOW] = re[SPRITE.INV_DIAMOND_BOW];
            re[SPRITE.INV_DIAMOND_ARROW] = [];
            re[SPRITE.INV_DIAMOND_ARROW][0] = S.INV_DIAMOND_ARROW_OUT;
            re[SPRITE.INV_DIAMOND_ARROW][1] = S.INV_DIAMOND_ARROW_IN;
            re[SPRITE.INV_DIAMOND_ARROW][2] = S.INV_DIAMOND_ARROW_CLICK;
            re[SPRITE.CHEST_DIAMOND_ARROW] = re[SPRITE.INV_DIAMOND_ARROW];
            re[SPRITE.CRAFT_DIAMOND_ARROW] = re[SPRITE.INV_DIAMOND_ARROW];
            re[SPRITE.INV_AMETHYST_BOW] = [];
            re[SPRITE.INV_AMETHYST_BOW][0] = S.INV_AMETHYST_BOW_OUT;
            re[SPRITE.INV_AMETHYST_BOW][1] = S.INV_AMETHYST_BOW_IN;
            re[SPRITE.INV_AMETHYST_BOW][2] = S.INV_AMETHYST_BOW_CLICK;
            re[SPRITE.CHEST_AMETHYST_BOW] = re[SPRITE.INV_AMETHYST_BOW];
            re[SPRITE.CRAFT_AMETHYST_BOW] = re[SPRITE.INV_AMETHYST_BOW];
            re[SPRITE.INV_AMETHYST_ARROW] = [];
            re[SPRITE.INV_AMETHYST_ARROW][0] = S.INV_AMETHYST_ARROW_OUT;
            re[SPRITE.INV_AMETHYST_ARROW][1] = S.INV_AMETHYST_ARROW_IN;
            re[SPRITE.INV_AMETHYST_ARROW][2] = S.INV_AMETHYST_ARROW_CLICK;
            re[SPRITE.CHEST_AMETHYST_ARROW] = re[SPRITE.INV_AMETHYST_ARROW];
            re[SPRITE.CRAFT_AMETHYST_ARROW] = re[SPRITE.INV_AMETHYST_ARROW];
            re[SPRITE.INV_REIDITE_BOW] = [];
            re[SPRITE.INV_REIDITE_BOW][0] = S.INV_REIDITE_BOW_OUT;
            re[SPRITE.INV_REIDITE_BOW][1] = S.INV_REIDITE_BOW_IN;
            re[SPRITE.INV_REIDITE_BOW][2] = S.INV_REIDITE_BOW_CLICK;
            re[SPRITE.CHEST_REIDITE_BOW] = re[SPRITE.INV_REIDITE_BOW];
            re[SPRITE.CRAFT_REIDITE_BOW] = re[SPRITE.INV_REIDITE_BOW];
            re[SPRITE.INV_REIDITE_ARROW] = [];
            re[SPRITE.INV_REIDITE_ARROW][0] = S.INV_REIDITE_ARROW_OUT;
            re[SPRITE.INV_REIDITE_ARROW][1] = S.INV_REIDITE_ARROW_IN;
            re[SPRITE.INV_REIDITE_ARROW][2] = S.INV_REIDITE_ARROW_CLICK;
            re[SPRITE.CHEST_REIDITE_ARROW] = re[SPRITE.INV_REIDITE_ARROW];
            re[SPRITE.CRAFT_REIDITE_ARROW] = re[SPRITE.INV_REIDITE_ARROW];
            re[SPRITE.INV_DRAGON_BOW] = [];
            re[SPRITE.INV_DRAGON_BOW][0] = S.INV_DRAGON_BOW_OUT;
            re[SPRITE.INV_DRAGON_BOW][1] = S.INV_DRAGON_BOW_IN;
            re[SPRITE.INV_DRAGON_BOW][2] = S.INV_DRAGON_BOW_CLICK;
            re[SPRITE.CHEST_DRAGON_BOW] = re[SPRITE.INV_DRAGON_BOW];
            re[SPRITE.CRAFT_DRAGON_BOW] = re[SPRITE.INV_DRAGON_BOW];
            re[SPRITE.INV_DRAGON_ARROW] = [];
            re[SPRITE.INV_DRAGON_ARROW][0] = S.INV_DRAGON_ARROW_OUT;
            re[SPRITE.INV_DRAGON_ARROW][1] = S.INV_DRAGON_ARROW_IN;
            re[SPRITE.INV_DRAGON_ARROW][2] = S.INV_DRAGON_ARROW_CLICK;
            re[SPRITE.CHEST_DRAGON_ARROW] = re[SPRITE.INV_DRAGON_ARROW];
            re[SPRITE.CRAFT_DRAGON_ARROW] = re[SPRITE.INV_DRAGON_ARROW];
            re[SPRITE.INV_WOOD_SHIELD] = [];
            re[SPRITE.INV_WOOD_SHIELD][0] = S.INV_WOOD_SHIELD_OUT;
            re[SPRITE.INV_WOOD_SHIELD][1] = S.INV_WOOD_SHIELD_IN;
            re[SPRITE.INV_WOOD_SHIELD][2] = S.INV_WOOD_SHIELD_CLICK;
            re[SPRITE.CHEST_WOOD_SHIELD] = re[SPRITE.INV_WOOD_SHIELD];
            re[SPRITE.CRAFT_WOOD_SHIELD] = re[SPRITE.INV_WOOD_SHIELD];
            re[SPRITE.INV_STONE_SHIELD] = [];
            re[SPRITE.INV_STONE_SHIELD][0] = S.INV_STONE_SHIELD_OUT;
            re[SPRITE.INV_STONE_SHIELD][1] = S.INV_STONE_SHIELD_IN;
            re[SPRITE.INV_STONE_SHIELD][2] = S.INV_STONE_SHIELD_CLICK;
            re[SPRITE.CHEST_STONE_SHIELD] = re[SPRITE.INV_STONE_SHIELD];
            re[SPRITE.CRAFT_STONE_SHIELD] = re[SPRITE.INV_STONE_SHIELD];
            re[SPRITE.INV_GOLD_SHIELD] = [];
            re[SPRITE.INV_GOLD_SHIELD][0] = S.INV_GOLD_SHIELD_OUT;
            re[SPRITE.INV_GOLD_SHIELD][1] = S.INV_GOLD_SHIELD_IN;
            re[SPRITE.INV_GOLD_SHIELD][2] = S.INV_GOLD_SHIELD_CLICK;
            re[SPRITE.CHEST_GOLD_SHIELD] = re[SPRITE.INV_GOLD_SHIELD];
            re[SPRITE.CRAFT_GOLD_SHIELD] = re[SPRITE.INV_GOLD_SHIELD];
            re[SPRITE.INV_DIAMOND_SHIELD] = [];
            re[SPRITE.INV_DIAMOND_SHIELD][0] = S.INV_DIAMOND_SHIELD_OUT;
            re[SPRITE.INV_DIAMOND_SHIELD][1] = S.INV_DIAMOND_SHIELD_IN;
            re[SPRITE.INV_DIAMOND_SHIELD][2] = S.INV_DIAMOND_SHIELD_CLICK;
            re[SPRITE.CHEST_DIAMOND_SHIELD] = re[SPRITE.INV_DIAMOND_SHIELD];
            re[SPRITE.CRAFT_DIAMOND_SHIELD] = re[SPRITE.INV_DIAMOND_SHIELD];
            re[SPRITE.INV_AMETHYST_SHIELD] = [];
            re[SPRITE.INV_AMETHYST_SHIELD][0] = S.INV_AMETHYST_SHIELD_OUT;
            re[SPRITE.INV_AMETHYST_SHIELD][1] = S.INV_AMETHYST_SHIELD_IN;
            re[SPRITE.INV_AMETHYST_SHIELD][2] = S.INV_AMETHYST_SHIELD_CLICK;
            re[SPRITE.CHEST_AMETHYST_SHIELD] = re[SPRITE.INV_AMETHYST_SHIELD];
            re[SPRITE.CRAFT_AMETHYST_SHIELD] = re[SPRITE.INV_AMETHYST_SHIELD];
            re[SPRITE.INV_REIDITE_SHIELD] = [];
            re[SPRITE.INV_REIDITE_SHIELD][0] = S.INV_REIDITE_SHIELD_OUT;
            re[SPRITE.INV_REIDITE_SHIELD][1] = S.INV_REIDITE_SHIELD_IN;
            re[SPRITE.INV_REIDITE_SHIELD][2] = S.INV_REIDITE_SHIELD_CLICK;
            re[SPRITE.CHEST_REIDITE_SHIELD] = re[SPRITE.INV_REIDITE_SHIELD];
            re[SPRITE.CRAFT_REIDITE_SHIELD] = re[SPRITE.INV_REIDITE_SHIELD];
            re[SPRITE.INV_FLOWER_HAT] = [];
            re[SPRITE.INV_FLOWER_HAT][0] = S.INV_FLOWER_HAT_OUT;
            re[SPRITE.INV_FLOWER_HAT][1] = S.INV_FLOWER_HAT_IN;
            re[SPRITE.INV_FLOWER_HAT][2] = S.INV_FLOWER_HAT_CLICK;
            re[SPRITE.CHEST_FLOWER_HAT] = re[SPRITE.INV_FLOWER_HAT];
            re[SPRITE.CRAFT_FLOWER_HAT] = re[SPRITE.INV_FLOWER_HAT];
            re[SPRITE.INV_SANDWORM_JUICE] = [];
            re[SPRITE.INV_SANDWORM_JUICE][0] = S.INV_SANDWORM_JUICE_OUT;
            re[SPRITE.INV_SANDWORM_JUICE][1] = S.INV_SANDWORM_JUICE_IN;
            re[SPRITE.INV_SANDWORM_JUICE][2] = S.INV_SANDWORM_JUICE_CLICK;
            re[SPRITE.CHEST_SANDWORM_JUICE] = re[SPRITE.INV_SANDWORM_JUICE];
            re[SPRITE.INV_GARLIC] = xe(1, [{
                f: Se,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
            }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CHEST_GARLIC] = re[SPRITE.INV_GARLIC];
            re[SPRITE.INV_THORNBUSH] = xe(1, [{
                f: vo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CHEST_THORNBUSH] = re[SPRITE.INV_THORNBUSH];
            re[SPRITE.INV_WINDMILL] = xe(1, [{
                f: Ke,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }, {
                f: Ye,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }, {
                f: Ue,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_WINDMILL] = re[SPRITE.INV_WINDMILL];
            re[SPRITE.INV_WILD_WHEAT] = xe(1, [{
                f: Ve,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#A89F67", "#9E8456"]
            }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.INV_WHEAT_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#A89F67", "#9E8456"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_WHEAT_SEED] = re[SPRITE.INV_WHEAT_SEED];
            re[SPRITE.INV_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#493d36", "#332b28"]
            }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_SEED] = re[SPRITE.INV_SEED];
            re[SPRITE.INV_PUMPKIN_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c67933", "#b17238"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_PUMPKIN_SEED] = re[SPRITE.INV_PUMPKIN_SEED];
            re[SPRITE.INV_GARLIC_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e8e8e8", "#bbbbbb"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_GARLIC_SEED] = re[SPRITE.INV_GARLIC_SEED];
            re[SPRITE.INV_THORNBUSH_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#328a56", "#449573"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_THORNBUSH_SEED] = re[SPRITE.INV_THORNBUSH_SEED];
            re[SPRITE.INV_CARROT_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c98e2f", "#a36b11"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_CARROT_SEED] = re[SPRITE.INV_CARROT_SEED];
            re[SPRITE.CHEST_CARROT_SEED] = re[SPRITE.INV_CARROT_SEED];
            re[SPRITE.INV_WATERMELON_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#13a56d", "#098a58"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_WATERMELON_SEED] = re[SPRITE.INV_WATERMELON_SEED];
            re[SPRITE.CHEST_WATERMELON_SEED] = re[SPRITE.INV_WATERMELON_SEED];
            re[SPRITE.INV_ALOE_VERA_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3a8214", "#4a9c1e"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_ALOE_VERA_SEED] = re[SPRITE.INV_ALOE_VERA_SEED];
            re[SPRITE.CHEST_ALOE_VERA_SEED] = re[SPRITE.INV_ALOE_VERA_SEED];
            re[SPRITE.INV_TOMATO_SEED] = xe(1, [{
                f: Nt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#b22419", "#99110e"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_TOMATO_SEED] = re[SPRITE.INV_TOMATO_SEED];
            re[SPRITE.CHEST_TOMATO_SEED] = re[SPRITE.INV_TOMATO_SEED];
            re[SPRITE.INV_FIRE] = xe(1, [{
                f: qe,
                x: -2,
                y: -2,
                a: 1,
                r: -window.Math.PI / 7,
                c: ["#4d2d14", "#432516"]
            }, {
                f: Xe,
                x: -2,
                y: -2,
                a: 1,
                r: -window.Math.PI / 7,
                c: ["#efd435", "#ec8d35", "#e96132"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_FIRE] = re[SPRITE.INV_FIRE];
            re[SPRITE.INV_BIG_FIRE] = xe(1, [{
                f: Je,
                x: -2,
                y: -1,
                a: 1,
                r: -window.Math.PI / 7,
                c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
            }, {
                f: Xe,
                x: -2,
                y: -1,
                a: 1,
                r: -window.Math.PI / 7,
                c: ["#efd435", "#ec8d35", "#e96132"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_BIG_FIRE] = re[SPRITE.INV_BIG_FIRE];
            re[SPRITE.INV_PIRATE_SWORD] = xe(1, [{
                f: It,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
            }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_SUGAR_CAN] = xe(1, [{
                f: lt,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_SWORD_WOOD] = xe(1, [{
                f: at,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_SWORD] = xe(1, [{
                f: Et,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_SWORD_GOLD] = xe(1, [{
                f: ut,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_SWORD_DIAMOND] = xe(1, [{
                f: At,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_SWORD_AMETHYST] = xe(1, [{
                f: Ot,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_PICK_WOOD] = xe(1, [{
                f: nt,
                x: -2,
                y: 5,
                a: 1,
                r: -window.Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_PICK] = xe(1, [{
                f: nt,
                x: -2,
                y: 5,
                a: 1,
                r: -window.Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_PICK_GOLD] = xe(1, [{
                f: nt,
                x: -2,
                y: 5,
                a: 1,
                r: -window.Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_PICK_DIAMOND] = xe(1, [{
                f: nt,
                x: -2,
                y: 5,
                a: 1,
                r: -window.Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_PICK_AMETHYST] = xe(1, [{
                f: nt,
                x: -2,
                y: 5,
                a: 1,
                r: -window.Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_PICK_REIDITE] = [];
            re[SPRITE.INV_PICK_REIDITE][0] = S.INV_PICK_REIDITE_OUT;
            re[SPRITE.INV_PICK_REIDITE][1] = S.INV_PICK_REIDITE_IN;
            re[SPRITE.INV_PICK_REIDITE][2] = S.INV_PICK_REIDITE_CLICK;
            re[SPRITE.CRAFT_PICK_REIDITE] = re[SPRITE.INV_PICK_REIDITE];
            re[SPRITE.CHEST_PICK_REIDITE] = re[SPRITE.INV_PICK_REIDITE];
            re[SPRITE.INV_STONE] = xe(1, [{
                f: mt,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#252B28", "#58645F", "#75827D"]
            }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_GOLD] = xe(1, [{
                f: vt,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#282823", "#877c2d", "#c4bc51"]
            }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_DIAMOND] = xe(1, [{
                f: Pt,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#232828", "#3fc9c9", "#74ede6"]
            }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_WOOD] = xe(1, [{
                f: qe,
                x: 0,
                y: -5,
                a: 1,
                r: window.Math.PI / 2.5,
                c: ["#4d2d14", "#432516"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.CRAFT_SWORD_WOOD] = re[SPRITE.INV_SWORD_WOOD];
            re[SPRITE.CRAFT_SWORD] = re[SPRITE.INV_SWORD];
            re[SPRITE.CRAFT_SWORD_GOLD] = re[SPRITE.INV_SWORD_GOLD];
            re[SPRITE.CRAFT_SWORD_DIAMOND] = re[SPRITE.INV_SWORD_DIAMOND];
            re[SPRITE.CRAFT_SWORD_AMETHYST] = re[SPRITE.INV_SWORD_AMETHYST];
            re[SPRITE.CRAFT_PICK_WOOD] = re[SPRITE.INV_PICK_WOOD];
            re[SPRITE.CRAFT_PICK] = re[SPRITE.INV_PICK];
            re[SPRITE.CRAFT_PICK_GOLD] = re[SPRITE.INV_PICK_GOLD];
            re[SPRITE.CRAFT_PICK_DIAMOND] = re[SPRITE.INV_PICK_DIAMOND];
            re[SPRITE.CRAFT_PICK_AMETHYST] = re[SPRITE.INV_PICK_AMETHYST];
            re[SPRITE.INV_PLANT] = xe(1, [{
                f: pe,
                x: 0,
                y: 0,
                a: 1,
                r: 0
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.INV_WORK] = xe(1, [{
                f: Le,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
            }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_WORK] = re[SPRITE.INV_WORK];
            re[SPRITE.INV_STONE_WALL] = xe(1, [{
                f: Yt,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_STONE_WALL] = re[SPRITE.INV_STONE_WALL];
            re[SPRITE.INV_DIAMOND_WALL] = xe(1, [{
                f: Wt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_DIAMOND_WALL] = re[SPRITE.INV_DIAMOND_WALL];
            re[SPRITE.INV_AMETHYST_WALL] = xe(1, [{
                f: Yt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_AMETHYST_WALL] = re[SPRITE.INV_AMETHYST_WALL];
            re[SPRITE.INV_GOLD_WALL] = xe(1, [{
                f: Ut,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_GOLD_WALL] = re[SPRITE.INV_GOLD_WALL];
            re[SPRITE.INV_WALL] = xe(1, [{
                f: Gt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
            }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_WALL] = re[SPRITE.INV_WALL];
            re[SPRITE.INV_SPIKE] = xe(1, [{
                f: hi,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_SPIKE] = re[SPRITE.INV_SPIKE];
            re[SPRITE.INV_GOLD_SPIKE] = xe(1, [{
                f: ui,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_GOLD_SPIKE] = re[SPRITE.INV_GOLD_SPIKE];
            re[SPRITE.INV_DIAMOND_SPIKE] = xe(1, [{
                f: ui,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_DIAMOND_SPIKE] = re[SPRITE.INV_DIAMOND_SPIKE];
            re[SPRITE.INV_STONE_SPIKE] = xe(1, [{
                f: di,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_STONE_SPIKE] = re[SPRITE.INV_STONE_SPIKE];
            re[SPRITE.INV_AMETHYST_SPIKE] = xe(1, [{
                f: di,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_AMETHYST_SPIKE] = re[SPRITE.INV_AMETHYST_SPIKE];
            re[SPRITE.INV_DOOR_WOOD_CLOSE] = xe(1, [{
                f: kt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_DOOR_WOOD_CLOSE] = re[SPRITE.INV_DOOR_WOOD_CLOSE];
            re[SPRITE.INV_DOOR_STONE_CLOSE] = xe(1, [{
                f: Ft,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_DOOR_STONE_CLOSE] = re[SPRITE.INV_DOOR_STONE_CLOSE];
            re[SPRITE.INV_DOOR_AMETHYST_CLOSE] = xe(1, [{
                f: Ft,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE] = re[SPRITE.INV_DOOR_AMETHYST_CLOSE];
            re[SPRITE.INV_DOOR_GOLD_CLOSE] = xe(1, [{
                f: xt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_DOOR_GOLD_CLOSE] = re[SPRITE.INV_DOOR_GOLD_CLOSE];
            re[SPRITE.INV_DOOR_DIAMOND_CLOSE] = xe(1, [{
                f: qt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE] = re[SPRITE.INV_DOOR_DIAMOND_CLOSE];
            re[SPRITE.INV_CHEST] = xe(1, [{
                f: Ei,
                x: 0,
                y: 2,
                a: 1,
                r: 0,
                c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_CHEST] = re[SPRITE.INV_CHEST];
            re[SPRITE.INV_MEAT] = xe(1, [{
                f: fe,
                x: 0,
                y: -3,
                a: 1,
                r: 0,
                c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
            }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.INV_COOKED_MEAT] = xe(1, [{
                f: fe,
                x: 0,
                y: -3,
                a: 1,
                r: 0,
                c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
            }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_COOKED_MEAT] = re[SPRITE.INV_COOKED_MEAT];
            re[SPRITE.INV_CORD] = xe(1, [{
                f: ke,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#cec0c4", "#ffffff", "#6d6768"]
            }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.INV_BLUE_CORD] = xe(1, [{
                f: ke,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#d4e9ec", "#37b1d7", "#506c71"]
            }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_BLUE_CORD] = re[SPRITE.INV_BLUE_CORD];
            re[SPRITE.INV_FUR] = xe(1, [{
                f: _i,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#ef96be", "#ffffff"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_FUR_BOAR] = xe(1, [{
                f: _i,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#55423e", "#ffffff"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.WINTER_HOOD_FUR] = xe(1, [{
                f: Kt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.WINTER_PEASANT_FUR] = xe(1, [{
                f: Kt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_KRAKEN_SKIN] = xe(1, [{
                f: _i,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#201851", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_FUR_WOLF] = xe(1, [{
                f: _i,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#231f20", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_FUR_WINTER] = xe(1, [{
                f: _i,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#ffffff", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_EARMUFFS] = xe(1, [{
                f: si,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_EARMUFFS] = re[SPRITE.INV_EARMUFFS];
            re[SPRITE.INV_COAT] = xe(1, [{
                f: jt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_COAT] = re[SPRITE.INV_COAT];
            re[SPRITE.INV_CAP_SCARF] = xe(1, [{
                f: Ri,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_CAP_SCARF] = re[SPRITE.INV_CAP_SCARF];
            re[SPRITE.INV_CHRISTMAS_HAT] = xe(1, [{
                f: Qe,
                x: 0,
                y: 5,
                a: 1,
                r: 0,
                c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CHEST_CHRISTMAS_HAT] = re[SPRITE.INV_CHRISTMAS_HAT];
            re[SPRITE.INV_ELF_HAT] = xe(1, [{
                f: $e,
                x: 0,
                y: 5,
                a: 1,
                r: 0,
                c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CHEST_ELF_HAT] = re[SPRITE.INV_ELF_HAT];
            re[SPRITE.INV_BANDAGE] = xe(1, [{
                f: Fe,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#ffffff", "#cec0c4"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_BANDAGE] = re[SPRITE.INV_BANDAGE];
            re[SPRITE.INV_BAG] = [];
            re[SPRITE.INV_BAG][0] = S.INV_BAG_OUT;
            re[SPRITE.INV_BAG][1] = S.INV_BAG_IN;
            re[SPRITE.INV_BAG][2] = S.INV_BAG_CLICK;
            re[SPRITE.CRAFT_BAG] = re[SPRITE.INV_BAG];
            re[SPRITE.INV_PITCHFORK] = [];
            re[SPRITE.INV_PITCHFORK][0] = S.INV_PITCHFORK_OUT;
            re[SPRITE.INV_PITCHFORK][1] = S.INV_PITCHFORK_IN;
            re[SPRITE.INV_PITCHFORK][2] = S.INV_PITCHFORK_CLICK;
            re[SPRITE.CRAFT_PITCHFORK] = re[SPRITE.INV_PITCHFORK];
            re[SPRITE.CHEST_PITCHFORK] = re[SPRITE.INV_PITCHFORK];
            re[SPRITE.INV_PITCHFORK2] = [];
            re[SPRITE.INV_PITCHFORK2][0] = S.INV_PITCHFORK2_OUT;
            re[SPRITE.INV_PITCHFORK2][1] = S.INV_PITCHFORK2_IN;
            re[SPRITE.INV_PITCHFORK2][2] = S.INV_PITCHFORK2_CLICK;
            re[SPRITE.CRAFT_PITCHFORK2] = re[SPRITE.INV_PITCHFORK2];
            re[SPRITE.CHEST_PITCHFORK2] = re[SPRITE.INV_PITCHFORK2];
            re[SPRITE.INV_YUSUKEDAO_ITEM1] = [];
            re[SPRITE.INV_YUSUKEDAO_ITEM1][0] = S.INV_YUSUKEDAO_ITEM1_OUT;
            re[SPRITE.INV_YUSUKEDAO_ITEM1][1] = S.INV_YUSUKEDAO_ITEM1_IN;
            re[SPRITE.INV_YUSUKEDAO_ITEM1][2] = S.INV_YUSUKEDAO_ITEM1_CLICK;
            re[SPRITE.CRAFT_YUSUKEDAO_ITEM1] = re[SPRITE.INV_YUSUKEDAO_ITEM1];
            re[SPRITE.CHEST_YUSUKEDAO_ITEM1] = re[SPRITE.INV_YUSUKEDAO_ITEM1];
            re[SPRITE.INV_YUSUKEDAO_ITEM2] = [];
            re[SPRITE.INV_YUSUKEDAO_ITEM2][0] = S.INV_YUSUKEDAO_ITEM2_OUT;
            re[SPRITE.INV_YUSUKEDAO_ITEM2][1] = S.INV_YUSUKEDAO_ITEM2_IN;
            re[SPRITE.INV_YUSUKEDAO_ITEM2][2] = S.INV_YUSUKEDAO_ITEM2_CLICK;
            re[SPRITE.CRAFT_YUSUKEDAO_ITEM2] = re[SPRITE.INV_YUSUKEDAO_ITEM2];
            re[SPRITE.CHEST_YUSUKEDAO_ITEM2] = re[SPRITE.INV_YUSUKEDAO_ITEM2];
            re[SPRITE.INV_PITCHFORK_PART] = [];
            re[SPRITE.INV_PITCHFORK_PART][0] = S.INV_PITCHFORK_PART_CLICK;
            re[SPRITE.INV_PITCHFORK_PART][1] = S.INV_PITCHFORK_PART_CLICK;
            re[SPRITE.INV_PITCHFORK_PART][2] = S.INV_PITCHFORK_PART_CLICK;
            re[SPRITE.CHEST_PITCHFORK_PART] = re[SPRITE.INV_PITCHFORK_PART];
            re[SPRITE.INV_PILOT_HELMET] = [];
            re[SPRITE.INV_PILOT_HELMET][0] = S.INV_PILOT_HELMET_OUT;
            re[SPRITE.INV_PILOT_HELMET][1] = S.INV_PILOT_HELMET_IN;
            re[SPRITE.INV_PILOT_HELMET][2] = S.INV_PILOT_HELMET_CLICK;
            re[SPRITE.CRAFT_PILOT_HELMET] = re[SPRITE.INV_PILOT_HELMET];
            re[SPRITE.CHEST_PILOT_HELMET] = re[SPRITE.INV_PILOT_HELMET];
            re[SPRITE.INV_PILOT_GLASSES] = [];
            re[SPRITE.INV_PILOT_GLASSES][0] = S.INV_PILOT_GLASSES_CLICK;
            re[SPRITE.INV_PILOT_GLASSES][1] = S.INV_PILOT_GLASSES_CLICK;
            re[SPRITE.INV_PILOT_GLASSES][2] = S.INV_PILOT_GLASSES_CLICK;
            re[SPRITE.CHEST_PILOT_GLASSES] = re[SPRITE.INV_PILOT_GLASSES];
            re[SPRITE.INV_WOOD_TOWER] = [];
            re[SPRITE.INV_WOOD_TOWER][0] = S.INV_WOOD_TOWER_OUT;
            re[SPRITE.INV_WOOD_TOWER][1] = S.INV_WOOD_TOWER_IN;
            re[SPRITE.INV_WOOD_TOWER][2] = S.INV_WOOD_TOWER_CLICK;
            re[SPRITE.CRAFT_WOOD_TOWER] = re[SPRITE.INV_WOOD_TOWER];
            re[SPRITE.CHEST_WOOD_TOWER] = re[SPRITE.INV_WOOD_TOWER];
            re[SPRITE.INV_WOOD_DOOR_SPIKE] = [];
            re[SPRITE.INV_WOOD_DOOR_SPIKE][0] = S.INV_WOOD_DOOR_SPIKE_OUT;
            re[SPRITE.INV_WOOD_DOOR_SPIKE][1] = S.INV_WOOD_DOOR_SPIKE_IN;
            re[SPRITE.INV_WOOD_DOOR_SPIKE][2] = S.INV_WOOD_DOOR_SPIKE_CLICK;
            re[SPRITE.CRAFT_WOOD_DOOR_SPIKE] = re[SPRITE.INV_WOOD_DOOR_SPIKE];
            re[SPRITE.CHEST_WOOD_DOOR_SPIKE] = re[SPRITE.INV_WOOD_DOOR_SPIKE];
            re[SPRITE.INV_STONE_DOOR_SPIKE] = [];
            re[SPRITE.INV_STONE_DOOR_SPIKE][0] = S.INV_STONE_DOOR_SPIKE_OUT;
            re[SPRITE.INV_STONE_DOOR_SPIKE][1] = S.INV_STONE_DOOR_SPIKE_IN;
            re[SPRITE.INV_STONE_DOOR_SPIKE][2] = S.INV_STONE_DOOR_SPIKE_CLICK;
            re[SPRITE.CRAFT_STONE_DOOR_SPIKE] = re[SPRITE.INV_STONE_DOOR_SPIKE];
            re[SPRITE.CHEST_STONE_DOOR_SPIKE] = re[SPRITE.INV_STONE_DOOR_SPIKE];
            re[SPRITE.INV_GOLD_DOOR_SPIKE] = [];
            re[SPRITE.INV_GOLD_DOOR_SPIKE][0] = S.INV_GOLD_DOOR_SPIKE_OUT;
            re[SPRITE.INV_GOLD_DOOR_SPIKE][1] = S.INV_GOLD_DOOR_SPIKE_IN;
            re[SPRITE.INV_GOLD_DOOR_SPIKE][2] = S.INV_GOLD_DOOR_SPIKE_CLICK;
            re[SPRITE.CRAFT_GOLD_DOOR_SPIKE] = re[SPRITE.INV_GOLD_DOOR_SPIKE];
            re[SPRITE.CHEST_GOLD_DOOR_SPIKE] = re[SPRITE.INV_GOLD_DOOR_SPIKE];
            re[SPRITE.INV_DIAMOND_DOOR_SPIKE] = [];
            re[SPRITE.INV_DIAMOND_DOOR_SPIKE][0] = S.INV_DIAMOND_DOOR_SPIKE_OUT;
            re[SPRITE.INV_DIAMOND_DOOR_SPIKE][1] = S.INV_DIAMOND_DOOR_SPIKE_IN;
            re[SPRITE.INV_DIAMOND_DOOR_SPIKE][2] = S.INV_DIAMOND_DOOR_SPIKE_CLICK;
            re[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE] = re[SPRITE.INV_DIAMOND_DOOR_SPIKE];
            re[SPRITE.CHEST_DIAMOND_DOOR_SPIKE] = re[SPRITE.INV_DIAMOND_DOOR_SPIKE];
            re[SPRITE.INV_AMETHYST_DOOR_SPIKE] = [];
            re[SPRITE.INV_AMETHYST_DOOR_SPIKE][0] = S.INV_AMETHYST_DOOR_SPIKE_OUT;
            re[SPRITE.INV_AMETHYST_DOOR_SPIKE][1] = S.INV_AMETHYST_DOOR_SPIKE_IN;
            re[SPRITE.INV_AMETHYST_DOOR_SPIKE][2] = S.INV_AMETHYST_DOOR_SPIKE_CLICK;
            re[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE] = re[SPRITE.INV_AMETHYST_DOOR_SPIKE];
            re[SPRITE.CHEST_AMETHYST_DOOR_SPIKE] = re[SPRITE.INV_AMETHYST_DOOR_SPIKE];
            re[SPRITE.INV_REIDITE_DOOR_SPIKE] = [];
            re[SPRITE.INV_REIDITE_DOOR_SPIKE][0] = S.INV_REIDITE_DOOR_SPIKE_OUT;
            re[SPRITE.INV_REIDITE_DOOR_SPIKE][1] = S.INV_REIDITE_DOOR_SPIKE_IN;
            re[SPRITE.INV_REIDITE_DOOR_SPIKE][2] = S.INV_REIDITE_DOOR_SPIKE_CLICK;
            re[SPRITE.CRAFT_REIDITE_DOOR_SPIKE] = re[SPRITE.INV_REIDITE_DOOR_SPIKE];
            re[SPRITE.CHEST_REIDITE_DOOR_SPIKE] = re[SPRITE.INV_REIDITE_DOOR_SPIKE];
            re[SPRITE.INV_REIDITE_DOOR] = [];
            re[SPRITE.INV_REIDITE_DOOR][0] = S.INV_REIDITE_DOOR_OUT;
            re[SPRITE.INV_REIDITE_DOOR][1] = S.INV_REIDITE_DOOR_IN;
            re[SPRITE.INV_REIDITE_DOOR][2] = S.INV_REIDITE_DOOR_CLICK;
            re[SPRITE.CRAFT_REIDITE_DOOR] = re[SPRITE.INV_REIDITE_DOOR];
            re[SPRITE.CHEST_REIDITE_DOOR] = re[SPRITE.INV_REIDITE_DOOR];
            re[SPRITE.INV_REIDITE_SPIKE] = [];
            re[SPRITE.INV_REIDITE_SPIKE][0] = S.INV_REIDITE_SPIKE_OUT;
            re[SPRITE.INV_REIDITE_SPIKE][1] = S.INV_REIDITE_SPIKE_IN;
            re[SPRITE.INV_REIDITE_SPIKE][2] = S.INV_REIDITE_SPIKE_CLICK;
            re[SPRITE.CRAFT_REIDITE_SPIKE] = re[SPRITE.INV_REIDITE_SPIKE];
            re[SPRITE.CHEST_REIDITE_SPIKE] = re[SPRITE.INV_REIDITE_SPIKE];
            re[SPRITE.INV_REIDITE_WALL] = [];
            re[SPRITE.INV_REIDITE_WALL][0] = S.INV_REIDITE_WALL_OUT;
            re[SPRITE.INV_REIDITE_WALL][1] = S.INV_REIDITE_WALL_IN;
            re[SPRITE.INV_REIDITE_WALL][2] = S.INV_REIDITE_WALL_CLICK;
            re[SPRITE.CRAFT_REIDITE_WALL] = re[SPRITE.INV_REIDITE_WALL];
            re[SPRITE.CHEST_REIDITE_WALL] = re[SPRITE.INV_REIDITE_WALL];
            re[SPRITE.INV_PENGUIN_FEATHER] = [];
            re[SPRITE.INV_PENGUIN_FEATHER][0] = S.INV_PENGUIN_FEATHER;
            re[SPRITE.INV_PENGUIN_FEATHER][1] = S.INV_PENGUIN_FEATHER;
            re[SPRITE.INV_PENGUIN_FEATHER][2] = S.INV_PENGUIN_FEATHER;
            re[SPRITE.CHEST_PENGUIN_FEATHER] = re[SPRITE.INV_PENGUIN_FEATHER];
            re[SPRITE.INV_HAWK_FEATHER] = [];
            re[SPRITE.INV_HAWK_FEATHER][0] = S.INV_HAWK_FEATHER;
            re[SPRITE.INV_HAWK_FEATHER][1] = S.INV_HAWK_FEATHER;
            re[SPRITE.INV_HAWK_FEATHER][2] = S.INV_HAWK_FEATHER;
            re[SPRITE.CHEST_HAWK_FEATHER] = re[SPRITE.INV_HAWK_FEATHER];
            re[SPRITE.INV_VULTURE_FEATHER] = [];
            re[SPRITE.INV_VULTURE_FEATHER][0] = S.INV_VULTURE_FEATHER;
            re[SPRITE.INV_VULTURE_FEATHER][1] = S.INV_VULTURE_FEATHER;
            re[SPRITE.INV_VULTURE_FEATHER][2] = S.INV_VULTURE_FEATHER;
            re[SPRITE.CHEST_VULTURE_FEATHER] = re[SPRITE.INV_VULTURE_FEATHER];
            re[SPRITE.INV_EMERALD] = [];
            re[SPRITE.INV_EMERALD][0] = S.INV_EMERALD;
            re[SPRITE.INV_EMERALD][1] = S.INV_EMERALD;
            re[SPRITE.INV_EMERALD][2] = S.INV_EMERALD;
            re[SPRITE.CHEST_EMERALD] = re[SPRITE.INV_EMERALD];
            re[SPRITE.INV_SADDLE] = [];
            re[SPRITE.INV_SADDLE][0] = S.INV_SADDLE_OUT;
            re[SPRITE.INV_SADDLE][1] = S.INV_SADDLE_IN;
            re[SPRITE.INV_SADDLE][2] = S.INV_SADDLE_CLICK;
            re[SPRITE.CRAFT_SADDLE] = re[SPRITE.INV_SADDLE];
            re[SPRITE.CHEST_SADDLE] = re[SPRITE.INV_SADDLE];
            re[SPRITE.INV_WAND1] = [];
            re[SPRITE.INV_WAND1][0] = S.INV_WAND1_OUT;
            re[SPRITE.INV_WAND1][1] = S.INV_WAND1_IN;
            re[SPRITE.INV_WAND1][2] = S.INV_WAND1_CLICK;
            re[SPRITE.CRAFT_WAND1] = re[SPRITE.INV_WAND1];
            re[SPRITE.CHEST_WAND1] = re[SPRITE.INV_WAND1];
            re[SPRITE.INV_WAND2] = [];
            re[SPRITE.INV_WAND2][0] = S.INV_WAND2_OUT;
            re[SPRITE.INV_WAND2][1] = S.INV_WAND2_IN;
            re[SPRITE.INV_WAND2][2] = S.INV_WAND2_CLICK;
            re[SPRITE.CRAFT_WAND2] = re[SPRITE.INV_WAND2];
            re[SPRITE.CHEST_WAND2] = re[SPRITE.INV_WAND2];
            re[SPRITE.INV_MOUNT_BOAR] = [];
            re[SPRITE.INV_MOUNT_BOAR][0] = S.INV_MOUNT_BOAR_OUT;
            re[SPRITE.INV_MOUNT_BOAR][1] = S.INV_MOUNT_BOAR_IN;
            re[SPRITE.INV_MOUNT_BOAR][2] = S.INV_MOUNT_BOAR_CLICK;
            re[SPRITE.CRAFT_MOUNT_BOAR] = re[SPRITE.INV_MOUNT_BOAR];
            re[SPRITE.CHEST_MOUNT_BOAR] = re[SPRITE.INV_MOUNT_BOAR];
            re[SPRITE.INV_CRAB_BOSS] = [];
            re[SPRITE.INV_CRAB_BOSS][0] = S.INV_CRAB_BOSS_OUT;
            re[SPRITE.INV_CRAB_BOSS][1] = S.INV_CRAB_BOSS_IN;
            re[SPRITE.INV_CRAB_BOSS][2] = S.INV_CRAB_BOSS_CLICK;
            re[SPRITE.CRAFT_CRAB_BOSS] = re[SPRITE.INV_CRAB_BOSS];
            re[SPRITE.CHEST_CRAB_BOSS] = re[SPRITE.INV_CRAB_BOSS];
            re[SPRITE.INV_HAWK] = [];
            re[SPRITE.INV_HAWK][0] = S.INV_HAWK_OUT;
            re[SPRITE.INV_HAWK][1] = S.INV_HAWK_IN;
            re[SPRITE.INV_HAWK][2] = S.INV_HAWK_CLICK;
            re[SPRITE.CRAFT_HAWK] = re[SPRITE.INV_HAWK];
            re[SPRITE.CHEST_HAWK] = re[SPRITE.INV_HAWK];
            re[SPRITE.INV_VULTURE] = [];
            re[SPRITE.CRAFT_VULTURE] = re[SPRITE.INV_VULTURE];
            re[SPRITE.CHEST_VULTURE] = re[SPRITE.INV_VULTURE];
            re[SPRITE.INV_TURBAN1] = [];
            re[SPRITE.INV_TURBAN1][0] = S.INV_TURBAN1_OUT;
            re[SPRITE.INV_TURBAN1][1] = S.INV_TURBAN1_IN;
            re[SPRITE.INV_TURBAN1][2] = S.INV_TURBAN1_CLICK;
            re[SPRITE.CRAFT_TURBAN1] = re[SPRITE.INV_TURBAN1];
            re[SPRITE.CHEST_TURBAN1] = re[SPRITE.INV_TURBAN1];
            re[SPRITE.INV_TURBAN2] = [];
            re[SPRITE.INV_TURBAN2][0] = S.INV_TURBAN2_OUT;
            re[SPRITE.INV_TURBAN2][1] = S.INV_TURBAN2_IN;
            re[SPRITE.INV_TURBAN2][2] = S.INV_TURBAN2_CLICK;
            re[SPRITE.CRAFT_TURBAN2] = re[SPRITE.INV_TURBAN2];
            re[SPRITE.CHEST_TURBAN2] = re[SPRITE.INV_TURBAN2];
            re[SPRITE.INV_PLANE] = [];
            re[SPRITE.INV_PLANE][0] = S.INV_PLANE_OUT;
            re[SPRITE.INV_PLANE][1] = S.INV_PLANE_IN;
            re[SPRITE.INV_PLANE][2] = S.INV_PLANE_CLICK;
            re[SPRITE.CRAFT_PLANE] = re[SPRITE.INV_PLANE];
            re[SPRITE.CHEST_PLANE] = re[SPRITE.INV_PLANE];
            re[SPRITE.INV_BABY_DRAGON] = [];
            re[SPRITE.INV_BABY_DRAGON][0] = S.INV_BABY_DRAGON_OUT;
            re[SPRITE.INV_BABY_DRAGON][1] = S.INV_BABY_DRAGON_IN;
            re[SPRITE.INV_BABY_DRAGON][2] = S.INV_BABY_DRAGON_CLICK;
            re[SPRITE.CRAFT_BABY_DRAGON] = re[SPRITE.INV_BABY_DRAGON];
            re[SPRITE.CHEST_BABY_DRAGON] = re[SPRITE.INV_BABY_DRAGON];
            re[SPRITE.INV_BABY_MAMMOTH] = [];
            re[SPRITE.INV_BABY_MAMMOTH][0] = S.INV_BABY_MAMMOTH_OUT;
            re[SPRITE.INV_BABY_MAMMOTH][1] = S.INV_BABY_MAMMOTH_IN;
            re[SPRITE.INV_BABY_MAMMOTH][2] = S.INV_BABY_MAMMOTH_CLICK;
            re[SPRITE.CRAFT_BABY_MAMMOTH] = re[SPRITE.INV_BABY_MAMMOTH];
            re[SPRITE.CHEST_BABY_MAMMOTH] = re[SPRITE.INV_BABY_MAMMOTH];
            re[SPRITE.INV_BABY_LAVA] = [];
            re[SPRITE.INV_BABY_LAVA][0] = S.INV_BABY_LAVA_OUT;
            re[SPRITE.INV_BABY_LAVA][1] = S.INV_BABY_LAVA_IN;
            re[SPRITE.INV_BABY_LAVA][2] = S.INV_BABY_LAVA_CLICK;
            re[SPRITE.CRAFT_BABY_LAVA] = re[SPRITE.INV_BABY_LAVA];
            re[SPRITE.CHEST_BABY_LAVA] = re[SPRITE.INV_BABY_LAVA];
            re[SPRITE.INV_BREAD_OVEN] = xe(1, [{
                f: uo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
            }, {
                f: Ao,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e4c027"]
            }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_BREAD_OVEN] = re[SPRITE.INV_BREAD_OVEN];
            re[SPRITE.INV_FURNACE] = xe(1, [{
                f: Jt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
            }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_FURNACE] = re[SPRITE.INV_FURNACE];
            re[SPRITE.INV_BED] = xe(1, [{
                f: Qt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
            }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_BED] = re[SPRITE.INV_BED];
            re[SPRITE.CHEST_BED] = re[SPRITE.INV_BED];
            re[SPRITE.INV_CRAB_LOOT] = xe(1, [{
                f: $t,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
            }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CHEST_CRAB_LOOT] = re[SPRITE.INV_CRAB_LOOT];
            re[SPRITE.INV_CRAB_SPEAR] = xe(1, [{
                f: ti,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_CRAB_SPEAR] = re[SPRITE.INV_CRAB_SPEAR];
            re[SPRITE.CHEST_CRAB_SPEAR] = re[SPRITE.INV_CRAB_SPEAR];
            re[SPRITE.INV_WOOD_SPEAR] = xe(1, [{
                f: ii,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_WOOD_SPEAR] = re[SPRITE.INV_WOOD_SPEAR];
            re[SPRITE.INV_SPEAR] = xe(1, [{
                f: oi,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SPEAR] = re[SPRITE.INV_SPEAR];
            re[SPRITE.INV_GOLD_SPEAR] = xe(1, [{
                f: Ti,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_GOLD_SPEAR] = re[SPRITE.INV_GOLD_SPEAR];
            re[SPRITE.INV_DIAMOND_SPEAR] = xe(1, [{
                f: ri,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_DIAMOND_SPEAR] = re[SPRITE.INV_DIAMOND_SPEAR];
            re[SPRITE.INV_AMETHYST_SPEAR] = xe(1, [{
                f: ni,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_AMETHYST_SPEAR] = re[SPRITE.INV_AMETHYST_SPEAR];
            re[SPRITE.INV_DRAGON_SPEAR] = xe(1, [{
                f: ai,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
            }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_DRAGON_SPEAR] = re[SPRITE.INV_DRAGON_SPEAR];
            re[SPRITE.CHEST_DRAGON_SPEAR] = re[SPRITE.INV_DRAGON_SPEAR];
            re[SPRITE.INV_HAMMER] = xe(1, [{
                f: Oi,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_HAMMER] = re[SPRITE.INV_HAMMER];
            re[SPRITE.INV_SPANNER] = xe(1, [{
                f: Vo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SPANNER] = re[SPRITE.INV_SPANNER];
            re[SPRITE.INV_GOLD_WRENCH] = xe(1, [{
                f: Vo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.INV_SUPER_HAMMER] = xe(1, [{
                f: ro,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SUPER_HAMMER] = re[SPRITE.INV_SUPER_HAMMER];
            re[SPRITE.INV_HAMMER_GOLD] = xe(1, [{
                f: Oi,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_HAMMER_GOLD] = re[SPRITE.INV_HAMMER_GOLD];
            re[SPRITE.INV_HAMMER_DIAMOND] = xe(1, [{
                f: Oi,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_HAMMER_DIAMOND] = re[SPRITE.INV_HAMMER_DIAMOND];
            re[SPRITE.INV_HAMMER_AMETHYST] = xe(1, [{
                f: Oi,
                x: 2,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_HAMMER_AMETHYST] = re[SPRITE.INV_HAMMER_AMETHYST];
            re[SPRITE.INV_HAMMER_REIDITE] = [];
            re[SPRITE.INV_HAMMER_REIDITE][0] = S.INV_HAMMER_REIDITE_OUT;
            re[SPRITE.INV_HAMMER_REIDITE][1] = S.INV_HAMMER_REIDITE_IN;
            re[SPRITE.INV_HAMMER_REIDITE][2] = S.INV_HAMMER_REIDITE_CLICK;
            re[SPRITE.CHEST_HAMMER_REIDITE] = re[SPRITE.INV_HAMMER_REIDITE];
            re[SPRITE.CRAFT_HAMMER_REIDITE] = re[SPRITE.INV_HAMMER_REIDITE];
            re[SPRITE.INV_EMERALD_MACHINE] = [];
            re[SPRITE.INV_EMERALD_MACHINE][0] = S.INV_EMERALD_MACHINE_OUT;
            re[SPRITE.INV_EMERALD_MACHINE][1] = S.INV_EMERALD_MACHINE_IN;
            re[SPRITE.INV_EMERALD_MACHINE][2] = S.INV_EMERALD_MACHINE_CLICK;
            re[SPRITE.CHEST_EMERALD_MACHINE] = re[SPRITE.INV_EMERALD_MACHINE];
            re[SPRITE.CRAFT_EMERALD_MACHINE] = re[SPRITE.INV_EMERALD_MACHINE];
            re[SPRITE.INV_EXTRACTOR_MACHINE_STONE] = [];
            re[SPRITE.INV_EXTRACTOR_MACHINE_STONE][0] = S.INV_EXTRACTOR_MACHINE_STONE_OUT;
            re[SPRITE.INV_EXTRACTOR_MACHINE_STONE][1] = S.INV_EXTRACTOR_MACHINE_STONE_IN;
            re[SPRITE.INV_EXTRACTOR_MACHINE_STONE][2] = S.INV_EXTRACTOR_MACHINE_STONE_CLICK;
            re[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE] = re[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
            re[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE] = re[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
            re[SPRITE.INV_EXTRACTOR_MACHINE_GOLD] = [];
            re[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][0] = S.INV_EXTRACTOR_MACHINE_GOLD_OUT;
            re[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][1] = S.INV_EXTRACTOR_MACHINE_GOLD_IN;
            re[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][2] = S.INV_EXTRACTOR_MACHINE_GOLD_CLICK;
            re[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD] = re[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
            re[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD] = re[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
            re[SPRITE.INV_DIAMOND_EXTRACTOR] = [];
            re[SPRITE.INV_DIAMOND_EXTRACTOR][0] = S.INV_DIAMOND_EXTRACTOR_OUT;
            re[SPRITE.INV_DIAMOND_EXTRACTOR][1] = S.INV_DIAMOND_EXTRACTOR_IN;
            re[SPRITE.INV_DIAMOND_EXTRACTOR][2] = S.INV_DIAMOND_EXTRACTOR_CLICK;
            re[SPRITE.CHEST_DIAMOND_EXTRACTOR] = re[SPRITE.INV_DIAMOND_EXTRACTOR];
            re[SPRITE.CRAFT_DIAMOND_EXTRACTOR] = re[SPRITE.INV_DIAMOND_EXTRACTOR];
            re[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST] = [];
            re[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][0] = S.INV_EXTRACTOR_MACHINE_AMETHYST_OUT;
            re[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][1] = S.INV_EXTRACTOR_MACHINE_AMETHYST_IN;
            re[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][2] = S.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK;
            re[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST] = re[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
            re[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = re[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
            re[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE] = [];
            re[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][0] = S.INV_EXTRACTOR_MACHINE_REIDITE_OUT;
            re[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][1] = S.INV_EXTRACTOR_MACHINE_REIDITE_IN;
            re[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][2] = S.INV_EXTRACTOR_MACHINE_REIDITE_CLICK;
            re[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE] = re[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
            re[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE] = re[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
            re[SPRITE.INV_LOCK] = xe(1, [{
                f: xi,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
            }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.CRAFT_LOCK] = re[SPRITE.INV_LOCK];
            re[SPRITE.INV_LOCKPICK] = xe(1, [{
                f: $i,
                x: -2,
                y: -2,
                a: 1,
                r: -window.Math.PI / 5,
                c: ["#141414", "#c4a23a", "#816511"]
            }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.CRAFT_LOCKPICK] = re[SPRITE.INV_LOCKPICK];
            re[SPRITE.INV_DRAGON_HEART] = xe(1, [{
                f: oo,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#141414", "#178a99", "#0a6372", "#03282e"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
            re[SPRITE.INV_LAVA_HEART] = xe(1, [{
                f: oo,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#120202", "#991616", "#750a0a", "#120202"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
            re[SPRITE.INV_RESURRECTION] = xe(1, [{
                f: Qi,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#347f93", "#54a4ba"]
            }, {
                f: io,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
            }, {
                f: to,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#a9e4ed", "#86d4e0"]
            }, {
                f: eo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_RESURRECTION] = re[SPRITE.INV_RESURRECTION];
            re[SPRITE.INV_TOTEM] = xe(1, [{
                f: Ji,
                x: 45,
                y: 70,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_TOTEM] = re[SPRITE.INV_TOTEM];
            re[SPRITE.INV_AMETHYST_HELMET] = xe(1, [{
                f: Ui,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_AMETHYST_HELMET] = re[SPRITE.INV_AMETHYST_HELMET];
            re[SPRITE.INV_WINTER_HOOD] = xe(1, [{
                f: yo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_WINTER_HOOD] = re[SPRITE.INV_WINTER_HOOD];
            re[SPRITE.INV_HOOD] = xe(1, [{
                f: Po,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#2a2938", "#242330", "#313041"]
            }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_HOOD] = re[SPRITE.INV_HOOD];
            re[SPRITE.INV_WINTER_PEASANT] = xe(1, [{
                f: po,
                x: 0,
                y: 3,
                a: 1,
                r: 0,
                c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
            }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_WINTER_PEASANT] = re[SPRITE.INV_WINTER_PEASANT];
            re[SPRITE.INV_PEASANT] = xe(1, [{
                f: po,
                x: 0,
                y: 3,
                a: 1,
                r: 0,
                c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
            }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_PEASANT] = re[SPRITE.INV_PEASANT];
            re[SPRITE.INV_CROWN_GREEN] = xe(1, [{
                f: Yo,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_CROWN_GREEN] = re[SPRITE.INV_CROWN_GREEN];
            re[SPRITE.INV_CROWN_ORANGE] = xe(1, [{
                f: Yo,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_CROWN_ORANGE] = re[SPRITE.INV_CROWN_ORANGE];
            re[SPRITE.INV_CROWN_BLUE] = xe(1, [{
                f: Yo,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_CROWN_BLUE] = re[SPRITE.INV_CROWN_BLUE];
            re[SPRITE.INV_CROWN_CRAB] = xe(1, [{
                f: Zt,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_CROWN_CRAB] = re[SPRITE.INV_CROWN_CRAB];
            re[SPRITE.CHEST_CROWN_CRAB] = re[SPRITE.INV_CROWN_CRAB];
            re[SPRITE.INV_DRAGON_HELMET] = xe(1, [{
                f: Si,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
            }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_DRAGON_HELMET] = re[SPRITE.INV_DRAGON_HELMET];
            re[SPRITE.INV_DRAGON_SWORD] = xe(1, [{
                f: no,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
            }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_DRAGON_SWORD] = re[SPRITE.INV_DRAGON_SWORD];
            re[SPRITE.INV_DRAGON_CUBE] = xe(1, [{
                f: _o,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_DRAGON_ORB] = xe(1, [{
                f: Eo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_LAVA_CUBE] = xe(1, [{
                f: _o,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_LAVA_ORB] = xe(1, [{
                f: Eo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.GEM_GREEN] = xe(1, [{
                f: To,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.GEM_ORANGE] = xe(1, [{
                f: To,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.GEM_BLUE] = xe(1, [{
                f: To,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_SHOVEL] = xe(1, [{
                f: fo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SHOVEL] = re[SPRITE.INV_SHOVEL];
            re[SPRITE.INV_SHOVEL_GOLD] = xe(1, [{
                f: fo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SHOVEL_GOLD] = re[SPRITE.INV_SHOVEL_GOLD];
            re[SPRITE.INV_SHOVEL_DIAMOND] = xe(1, [{
                f: fo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SHOVEL_DIAMOND] = re[SPRITE.INV_SHOVEL_DIAMOND];
            re[SPRITE.INV_SHOVEL_AMETHYST] = xe(1, [{
                f: fo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SHOVEL_AMETHYST] = re[SPRITE.INV_SHOVEL_AMETHYST];
            re[SPRITE.INV_SHOVEL_REIDITE] = xe(1, [{
                f: fo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#0d1b1c", "#6c6464", "#524d4d", "#c24c3a", "#8f392a", "#a03e30"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SHOVEL_REIDITE] = re[SPRITE.INV_SHOVEL_REIDITE];
            re[SPRITE.INV_EXPLORER_HAT] = xe(1, [{
                f: Gi,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_EXPLORER_HAT] = re[SPRITE.INV_EXPLORER_HAT];
            re[SPRITE.INV_WOOD_HELMET] = xe(1, [{
                f: Wi,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#252525", "#73583e", "#493425", "#7d6144"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_WOOD_HELMET] = re[SPRITE.INV_WOOD_HELMET];
            re[SPRITE.INV_STONE_HELMET] = xe(1, [{
                f: Vi,
                x: 0,
                y: -2,
                a: 1,
                r: 0,
                c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_STONE_HELMET] = re[SPRITE.INV_STONE_HELMET];
            re[SPRITE.INV_GOLD_HELMET] = xe(1, [{
                f: Ki,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#dbce71", "#b29c32", "#c4bc51"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_GOLD_HELMET] = re[SPRITE.INV_GOLD_HELMET];
            re[SPRITE.INV_DIAMOND_HELMET] = xe(1, [{
                f: Yi,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_DIAMOND_HELMET] = re[SPRITE.INV_DIAMOND_HELMET];
            re[SPRITE.INV_BOOK] = xe(1, [{
                f: ki,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_BOOK] = re[SPRITE.INV_BOOK];
            re[SPRITE.INV_PAPER] = xe(1, [{
                f: Fi,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#221e1b", "#ffffff", "#f6f0e7"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.CRAFT_PAPER] = re[SPRITE.INV_PAPER];
            re[SPRITE.INV_AMETHYST] = xe(1, [{
                f: Di,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#1d051e", "#c27add", "#cd98e5"]
            }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.SAND] = xe(1, [{
                f: So,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#D7C393", "#a48c6c"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.ICE] = xe(1, [{
                f: Co,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#93CBCE", "#E9F6F6"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[ItemType.GROUND] = xe(1, [{
                f: So,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#866432", "#6b4f25"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.BUCKET_FULL] = xe(1, [{
                f: wo,
                x: 3,
                y: 2,
                a: 1,
                r: 0,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.BUCKET_EMPTY] = xe(1, [{
                f: Ho,
                x: 3,
                y: 2,
                a: 1,
                r: 0,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.CRAFT_BUCKET_FULL] = re[ItemType.BUCKET_FULL];
            re[SPRITE.CRAFT_BUCKET_EMPTY] = re[ItemType.BUCKET_EMPTY];
            re[SPRITE.INV_WELL] = xe(1, [{
                f: lo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
            }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_WELL] = re[SPRITE.INV_WELL];
            re[SPRITE.INV_BOTTLE_FULL] = xe(1, [{
                f: Mo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
            }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.INV_BOTTLE_EMPTY] = xe(1, [{
                f: Lo,
                x: 0,
                y: 0,
                a: 1,
                r: window.Math.PI / 5,
                c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
            }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.CRAFT_BOTTLE_FULL] = re[SPRITE.INV_BOTTLE_FULL];
            re[SPRITE.CRAFT_BOTTLE_EMPTY] = re[SPRITE.INV_BOTTLE_EMPTY];
            re[SPRITE.INV_COOKIE] = xe(1, [{
                f: St,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_COOKIE] = re[SPRITE.INV_COOKIE];
            re[ItemType.CANDY] = xe(1, [{
                f: Ct,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.INV_FERRERO] = xe(1, [{
                f: bt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[ItemType.BREAD] = xe(1, [{
                f: Ro,
                x: 0,
                y: -2,
                a: 1,
                r: 0,
                c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
            }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_BREAD] = re[ItemType.BREAD];
            re[SPRITE.INV_FOODFISH] = xe(1, [{
                f: zt,
                x: -3,
                y: -5,
                a: 1,
                r: 0,
                c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
            }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.INV_FOODFISH_COOKED] = xe(1, [{
                f: Bt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1d051e", "#42261A", "#281818"]
            }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_FOODFISH_COOKED] = re[SPRITE.INV_FOODFISH_COOKED];
            re[SPRITE.INV_DIVING_MASK] = xe(1, [{
                f: Ht,
                x: -3,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
            }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_DIVING_MASK] = re[SPRITE.INV_DIVING_MASK];
            re[SPRITE.INV_SCALES] = xe(1, [{
                f: We,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
            }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_SUPER_DIVING_SUIT] = xe(1, [{
                f: wt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            re[SPRITE.CRAFT_SUPER_DIVING_SUIT] = re[SPRITE.INV_SUPER_DIVING_SUIT];
            re[SPRITE.INV_PLOT] = xe(1, [{
                f: bo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_PLOT] = re[SPRITE.INV_PLOT];
            re[SPRITE.INV_GARLAND] = xe(1, [{
                f: Ce,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#e2d63b", "#ee71a9", "#42b672"]
            }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CHEST_GARLAND] = re[SPRITE.INV_GARLAND];
            re[SPRITE.INV_BRIDGE] = xe(1, [{
                f: Oo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
            }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_BRIDGE] = re[SPRITE.INV_BRIDGE];
            re[SPRITE.INV_ROOF] = xe(1, [{
                f: Ne,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_ROOF] = re[SPRITE.INV_ROOF];
            re[SPRITE.INV_WATERING_CAN_FULL] = xe(1, [{
                f: No,
                x: -1,
                y: 0,
                a: 1,
                r: -window.Math.PI / 5,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
            re[SPRITE.CRAFT_WATERING_CAN_FULL] = re[SPRITE.INV_WATERING_CAN_FULL];
            re[SPRITE.INV_WATERING_CAN] = xe(1, [{
                f: No,
                x: -1,
                y: 0,
                a: 1,
                r: -window.Math.PI / 5,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
            }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.CRAFT_WATERING_CAN] = re[SPRITE.INV_WATERING_CAN];
            re[SPRITE.INV_FLOUR] = xe(1, [{
                f: mo,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[SPRITE.INV_CRAB_STICK] = xe(1, [{
                f: dt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CHEST_CRAB_STICK] = re[SPRITE.INV_CRAB_STICK];
            re[SPRITE.INV_CAKE] = xe(1, [{
                f: ft,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
            }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_CAKE] = re[SPRITE.INV_CAKE];
            re[ItemType.SANDWICH] = xe(1, [{
                f: Ge,
                x: -2,
                y: -8,
                a: 1,
                r: 0,
                c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
            }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_SANDWICH] = re[ItemType.SANDWICH];
            re[SPRITE.INV_LAVA_SWORD] = [];
            re[SPRITE.INV_LAVA_SWORD][0] = S.INV_LAVA_SWORD_OUT;
            re[SPRITE.INV_LAVA_SWORD][1] = S.INV_LAVA_SWORD_IN;
            re[SPRITE.INV_LAVA_SWORD][2] = S.INV_LAVA_SWORD_CLICK;
            re[SPRITE.CRAFT_LAVA_SWORD] = re[SPRITE.INV_LAVA_SWORD];
            re[SPRITE.CHEST_LAVA_SWORD] = re[SPRITE.INV_LAVA_SWORD];
            re[SPRITE.INV_LAVA_SPEAR] = [];
            re[SPRITE.INV_LAVA_SPEAR][0] = S.INV_LAVA_SPEAR_OUT;
            re[SPRITE.INV_LAVA_SPEAR][1] = S.INV_LAVA_SPEAR_IN;
            re[SPRITE.INV_LAVA_SPEAR][2] = S.INV_LAVA_SPEAR_CLICK;
            re[SPRITE.CRAFT_LAVA_SPEAR] = re[SPRITE.INV_LAVA_SPEAR];
            re[SPRITE.CHEST_LAVA_SPEAR] = re[SPRITE.INV_LAVA_SPEAR];
            re[SPRITE.CRAFT_REIDITE_SWORD] = re[SPRITE.INV_REIDITE_SWORD];
            re[SPRITE.CHEST_REIDITE_SWORD] = re[SPRITE.INV_REIDITE_SWORD];
            re[SPRITE.INV_REIDITE_SWORD] = [];
            re[SPRITE.INV_REIDITE_SWORD][0] = S.INV_REIDITE_SWORD_OUT;
            re[SPRITE.INV_REIDITE_SWORD][1] = S.INV_REIDITE_SWORD_IN;
            re[SPRITE.INV_REIDITE_SWORD][2] = S.INV_REIDITE_SWORD_CLICK;
            re[SPRITE.CRAFT_REIDITE_SWORD] = re[SPRITE.INV_REIDITE_SWORD];
            re[SPRITE.CHEST_REIDITE_SWORD] = re[SPRITE.INV_REIDITE_SWORD];
            re[SPRITE.INV_REIDITE_SPEAR] = [];
            re[SPRITE.INV_REIDITE_SPEAR][0] = S.INV_REIDITE_SPEAR_OUT;
            re[SPRITE.INV_REIDITE_SPEAR][1] = S.INV_REIDITE_SPEAR_IN;
            re[SPRITE.INV_REIDITE_SPEAR][2] = S.INV_REIDITE_SPEAR_CLICK;
            re[SPRITE.CRAFT_REIDITE_SPEAR] = re[SPRITE.INV_REIDITE_SPEAR];
            re[SPRITE.CHEST_REIDITE_SPEAR] = re[SPRITE.INV_REIDITE_SPEAR];
            re[SPRITE.INV_DIAMOND_PROTECTION] = [];
            re[SPRITE.INV_DIAMOND_PROTECTION][0] = S.INV_DIAMOND_PROTECTION_OUT;
            re[SPRITE.INV_DIAMOND_PROTECTION][1] = S.INV_DIAMOND_PROTECTION_IN;
            re[SPRITE.INV_DIAMOND_PROTECTION][2] = S.INV_DIAMOND_PROTECTION_CLICK;
            re[SPRITE.CRAFT_DIAMOND_PROTECTION] = re[SPRITE.INV_DIAMOND_PROTECTION];
            re[SPRITE.CHEST_DIAMOND_PROTECTION] = re[SPRITE.INV_DIAMOND_PROTECTION];
            re[SPRITE.INV_AMETHYST_PROTECTION] = [];
            re[SPRITE.INV_AMETHYST_PROTECTION][0] = S.INV_AMETHYST_PROTECTION_OUT;
            re[SPRITE.INV_AMETHYST_PROTECTION][1] = S.INV_AMETHYST_PROTECTION_IN;
            re[SPRITE.INV_AMETHYST_PROTECTION][2] = S.INV_AMETHYST_PROTECTION_CLICK;
            re[SPRITE.CRAFT_AMETHYST_PROTECTION] = re[SPRITE.INV_AMETHYST_PROTECTION];
            re[SPRITE.CHEST_AMETHYST_PROTECTION] = re[SPRITE.INV_AMETHYST_PROTECTION];
            re[SPRITE.INV_REIDITE_PROTECTION] = [];
            re[SPRITE.INV_REIDITE_PROTECTION][0] = S.INV_REIDITE_PROTECTION_OUT;
            re[SPRITE.INV_REIDITE_PROTECTION][1] = S.INV_REIDITE_PROTECTION_IN;
            re[SPRITE.INV_REIDITE_PROTECTION][2] = S.INV_REIDITE_PROTECTION_CLICK;
            re[SPRITE.CRAFT_REIDITE_PROTECTION] = re[SPRITE.INV_REIDITE_PROTECTION];
            re[SPRITE.CHEST_REIDITE_PROTECTION] = re[SPRITE.INV_REIDITE_PROTECTION];
            re[SPRITE.INV_REIDITE_HELMET] = [];
            re[SPRITE.INV_REIDITE_HELMET][0] = S.INV_REIDITE_HELMET_OUT;
            re[SPRITE.INV_REIDITE_HELMET][1] = S.INV_REIDITE_HELMET_IN;
            re[SPRITE.INV_REIDITE_HELMET][2] = S.INV_REIDITE_HELMET_CLICK;
            re[SPRITE.CRAFT_REIDITE_HELMET] = re[SPRITE.INV_REIDITE_HELMET];
            re[SPRITE.CHEST_REIDITE_HELMET] = re[SPRITE.INV_REIDITE_HELMET];
            re[SPRITE.INV_LAVA_HELMET] = [];
            re[SPRITE.INV_LAVA_HELMET][0] = S.INV_LAVA_HELMET_OUT;
            re[SPRITE.INV_LAVA_HELMET][1] = S.INV_LAVA_HELMET_IN;
            re[SPRITE.INV_LAVA_HELMET][2] = S.INV_LAVA_HELMET_CLICK;
            re[SPRITE.CRAFT_LAVA_HELMET] = re[SPRITE.INV_LAVA_HELMET];
            re[SPRITE.CHEST_LAVA_HELMET] = re[SPRITE.INV_LAVA_HELMET];
            re[SPRITE.INV_FIREFLY] = [];
            re[SPRITE.INV_FIREFLY][0] = S.INV_FIREFLY_OUT;
            re[SPRITE.INV_FIREFLY][1] = S.INV_FIREFLY_IN;
            re[SPRITE.INV_FIREFLY][2] = S.INV_FIREFLY_CLICK;
            re[SPRITE.CHEST_FIREFLY] = re[SPRITE.INV_FIREFLY];
            re[SPRITE.INV_WITCH] = [];
            re[SPRITE.INV_WITCH][0] = S.INV_WITCH_OUT;
            re[SPRITE.INV_WITCH][1] = S.INV_WITCH_IN;
            re[SPRITE.INV_WITCH][2] = S.INV_WITCH_CLICK;
            re[SPRITE.CRAFT_WITCH] = re[SPRITE.INV_WITCH];
            re[SPRITE.CHEST_WITCH] = re[SPRITE.INV_WITCH];
            re[SPRITE.INV_NIMBUS] = [];
            re[SPRITE.INV_NIMBUS][0] = S.INV_NIMBUS_OUT;
            re[SPRITE.INV_NIMBUS][1] = S.INV_NIMBUS_IN;
            re[SPRITE.INV_NIMBUS][2] = S.INV_NIMBUS_CLICK;
            re[SPRITE.CRAFT_NIMBUS] = re[SPRITE.INV_NIMBUS];
            re[SPRITE.CHEST_NIMBUS] = re[SPRITE.INV_NIMBUS];
            re[SPRITE.INV_REIDITE] = [];
            re[SPRITE.INV_REIDITE][0] = S.INV_REIDITE_OUT;
            re[SPRITE.INV_REIDITE][1] = S.INV_REIDITE_IN;
            re[SPRITE.INV_REIDITE][2] = S.INV_REIDITE_CLICK;
            re[SPRITE.CHEST_REIDITE] = re[SPRITE.INV_REIDITE];
            re[SPRITE.INV_FLAME] = [];
            re[SPRITE.INV_FLAME][0] = S.INV_FLAME_OUT;
            re[SPRITE.INV_FLAME][1] = S.INV_FLAME_IN;
            re[SPRITE.INV_FLAME][2] = S.INV_FLAME_CLICK;
            re[SPRITE.CHEST_FLAME] = re[SPRITE.INV_FLAME];
            re[SPRITE.CHEST_SHOVEL] = re[SPRITE.INV_SHOVEL];
            re[SPRITE.CHEST_SHOVEL_GOLD] = re[SPRITE.INV_SHOVEL_GOLD];
            re[SPRITE.CHEST_SHOVEL_DIAMOND] = re[SPRITE.INV_SHOVEL_DIAMOND];
            re[SPRITE.CHEST_SHOVEL_AMETHYST] = re[SPRITE.INV_SHOVEL_AMETHYST];
            re[SPRITE.CHEST_SHOVEL_REIDITE] = re[SPRITE.INV_SHOVEL_REIDITE];
            re[SPRITE.CHEST_SEED] = re[SPRITE.INV_SEED];
            re[SPRITE.CHEST_WHEAT_SEED] = re[SPRITE.INV_WHEAT_SEED];
            re[SPRITE.CHEST_WINDMILL] = re[SPRITE.INV_WINDMILL];
            re[SPRITE.CHEST_WILD_WHEAT] = re[SPRITE.INV_WILD_WHEAT];
            re[SPRITE.CHEST_FIRE] = re[SPRITE.INV_FIRE];
            re[SPRITE.CHEST_DRAGON_ORB] = re[SPRITE.INV_DRAGON_ORB];
            re[SPRITE.CHEST_DRAGON_CUBE] = re[SPRITE.INV_DRAGON_CUBE];
            re[SPRITE.CHEST_LAVA_ORB] = re[SPRITE.INV_LAVA_ORB];
            re[SPRITE.CHEST_LAVA_CUBE] = re[SPRITE.INV_LAVA_CUBE];
            re[SPRITE.CHEST_BIG_FIRE] = re[SPRITE.INV_BIG_FIRE];
            re[SPRITE.CHEST_SUGAR_CAN] = re[SPRITE.INV_SUGAR_CAN];
            re[SPRITE.CHEST_PIRATE_SWORD] = re[SPRITE.INV_PIRATE_SWORD];
            re[SPRITE.CHEST_SWORD_WOOD] = re[SPRITE.INV_SWORD_WOOD];
            re[SPRITE.CHEST_SWORD] = re[SPRITE.INV_SWORD];
            re[SPRITE.CHEST_SWORD_GOLD] = re[SPRITE.INV_SWORD_GOLD];
            re[SPRITE.CHEST_SWORD_DIAMOND] = re[SPRITE.INV_SWORD_DIAMOND];
            re[SPRITE.CHEST_SWORD_AMETHYST] = re[SPRITE.INV_SWORD_AMETHYST];
            re[SPRITE.CHEST_PICK_WOOD] = re[SPRITE.INV_PICK_WOOD];
            re[SPRITE.CHEST_PICK] = re[SPRITE.INV_PICK];
            re[SPRITE.CHEST_PICK_GOLD] = re[SPRITE.INV_PICK_GOLD];
            re[SPRITE.CHEST_PICK_DIAMOND] = re[SPRITE.INV_PICK_DIAMOND];
            re[SPRITE.CHEST_PICK_AMETHYST] = re[SPRITE.INV_PICK_AMETHYST];
            re[SPRITE.CHEST_STONE] = re[SPRITE.INV_STONE];
            re[SPRITE.CHEST_GOLD] = re[SPRITE.INV_GOLD];
            re[SPRITE.CHEST_DIAMOND] = re[SPRITE.INV_DIAMOND];
            re[SPRITE.CHEST_WOOD] = re[SPRITE.INV_WOOD];
            re[SPRITE.CHEST_PLANT] = re[SPRITE.INV_PLANT];
            re[SPRITE.CHEST_WORKBENCH] = re[SPRITE.INV_WORK];
            re[SPRITE.CHEST_STONE_WALL] = re[SPRITE.INV_STONE_WALL];
            re[SPRITE.CHEST_DIAMOND_WALL] = re[SPRITE.INV_DIAMOND_WALL];
            re[SPRITE.CHEST_GOLD_WALL] = re[SPRITE.INV_GOLD_WALL];
            re[SPRITE.CHEST_AMETHYST_WALL] = re[SPRITE.INV_AMETHYST_WALL];
            re[SPRITE.CHEST_WALL] = re[SPRITE.INV_WALL];
            re[SPRITE.CHEST_SPIKE] = re[SPRITE.INV_SPIKE];
            re[SPRITE.CHEST_MEAT] = re[SPRITE.INV_MEAT];
            re[SPRITE.CHEST_COOKED_MEAT] = re[SPRITE.INV_COOKED_MEAT];
            re[SPRITE.CHEST_CORD] = re[SPRITE.INV_CORD];
            re[SPRITE.CHEST_BLUE_CORD] = re[SPRITE.INV_BLUE_CORD];
            re[SPRITE.CHEST_BANDAGE] = re[SPRITE.INV_BANDAGE];
            re[SPRITE.CHEST_LOCK] = re[SPRITE.INV_LOCK];
            re[SPRITE.CHEST_LOCKPICK] = re[SPRITE.INV_LOCKPICK];
            re[SPRITE.CHEST_RESURRECTION] = re[SPRITE.INV_RESURRECTION];
            re[SPRITE.CHEST_DRAGON_HEART] = re[SPRITE.INV_DRAGON_HEART];
            re[SPRITE.CHEST_LAVA_HEART] = re[SPRITE.INV_LAVA_HEART];
            re[SPRITE.CHEST_DRAGON_SWORD] = re[SPRITE.INV_DRAGON_SWORD];
            re[SPRITE.CHEST_TOTEM] = re[SPRITE.INV_TOTEM];
            re[SPRITE.CHEST_DOOR_WOOD_CLOSE] = re[SPRITE.INV_DOOR_WOOD_CLOSE];
            re[SPRITE.CHEST_CHEST] = re[SPRITE.INV_CHEST];
            re[SPRITE.CHEST_SLOT] = Y(__p_5863156023((e, t, i) => {
                var o = window.document.createElement("canvas");
                var T = o.getContext("2d");
                o.width = e * 118;
                o.height = e * 129;
                T.save();
                T.translate(e * 90, e * 90);
                Re(T, e * -86.5, e * -86, e * 110, e * 110, e * 15);
                T.restore();
                se(T, i[0], i[1], 4);
                T.save();
                Re(T, e * 30, e * 115, e * 60, e * 5, e * 15);
                T.restore();
                se(T, i[2], i[3], 4);
                T.save();
                Re(T, e * 50, e * 117, e * 20, e * 10, e * 15);
                T.restore();
                se(T, i[2]);
                return o;
            }, 3)(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
            re[SPRITE.CHEST_PLUS] = xe(0.5, [{
                f: Ii,
                x: 0,
                y: 2,
                a: 1,
                r: 0,
                c: ["#ffffff"]
            }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
            re[SPRITE.CHEST_STONE_SPIKE] = re[SPRITE.INV_STONE_SPIKE];
            re[SPRITE.CHEST_GOLD_SPIKE] = re[SPRITE.INV_GOLD_SPIKE];
            re[SPRITE.CHEST_DIAMOND_SPIKE] = re[SPRITE.INV_DIAMOND_SPIKE];
            re[SPRITE.CHEST_AMETHYST_SPIKE] = re[SPRITE.INV_AMETHYST_SPIKE];
            re[SPRITE.CHEST_BAG] = re[SPRITE.INV_BAG];
            re[SPRITE.CHEST_SPECIAL_FUR] = re[ItemType.WINTER_HOOD_FUR];
            re[SPRITE.CHEST_SPECIAL_FUR_2] = re[ItemType.WINTER_PEASANT_FUR];
            re[SPRITE.CHEST_FUR] = re[SPRITE.INV_FUR];
            re[SPRITE.CHEST_KRAKEN_SKIN] = re[SPRITE.INV_KRAKEN_SKIN];
            re[SPRITE.CHEST_FUR_WOLF] = re[SPRITE.INV_FUR_WOLF];
            re[SPRITE.CHEST_FUR_BOAR] = re[SPRITE.INV_FUR_BOAR];
            re[SPRITE.CHEST_FUR_WINTER] = re[SPRITE.INV_FUR_WINTER];
            re[SPRITE.CHEST_EARMUFFS] = re[SPRITE.INV_EARMUFFS];
            re[SPRITE.CHEST_CAP_SCARF] = re[SPRITE.INV_CAP_SCARF];
            re[SPRITE.CHEST_DOOR_STONE_CLOSE] = re[SPRITE.INV_DOOR_STONE_CLOSE];
            re[SPRITE.CHEST_DOOR_GOLD_CLOSE] = re[SPRITE.INV_DOOR_GOLD_CLOSE];
            re[SPRITE.CHEST_DOOR_DIAMOND_CLOSE] = re[SPRITE.INV_DOOR_DIAMOND_CLOSE];
            re[SPRITE.CHEST_DOOR_AMETHYST_CLOSE] = re[SPRITE.INV_DOOR_AMETHYST_CLOSE];
            re[SPRITE.CHEST_COAT] = re[SPRITE.INV_COAT];
            re[SPRITE.CHEST_WOOD_SPEAR] = re[SPRITE.INV_WOOD_SPEAR];
            re[SPRITE.CHEST_SPEAR] = re[SPRITE.INV_SPEAR];
            re[SPRITE.CHEST_GOLD_SPEAR] = re[SPRITE.INV_GOLD_SPEAR];
            re[SPRITE.CHEST_DIAMOND_SPEAR] = re[SPRITE.INV_DIAMOND_SPEAR];
            re[SPRITE.CHEST_AMETHYST_SPEAR] = re[SPRITE.INV_AMETHYST_SPEAR];
            re[SPRITE.CHEST_DRAGON_SPEAR] = re[SPRITE.INV_DRAGON_SPEAR];
            re[SPRITE.CHEST_SUPER_HAMMER] = re[SPRITE.INV_SUPER_HAMMER];
            re[SPRITE.CHEST_SPANNER] = re[SPRITE.INV_SPANNER];
            re[SPRITE.CHEST_HAMMER] = re[SPRITE.INV_HAMMER];
            re[SPRITE.CHEST_HAMMER_GOLD] = re[SPRITE.INV_HAMMER_GOLD];
            re[SPRITE.CHEST_HAMMER_DIAMOND] = re[SPRITE.INV_HAMMER_DIAMOND];
            re[SPRITE.CHEST_HAMMER_AMETHYST] = re[SPRITE.INV_HAMMER_AMETHYST];
            re[SPRITE.CHEST_FURNACE] = re[SPRITE.INV_FURNACE];
            re[SPRITE.CHEST_BREAD_OVEN] = re[SPRITE.INV_BREAD_OVEN];
            re[SPRITE.CHEST_EXPLORER_HAT] = re[SPRITE.INV_EXPLORER_HAT];
            re[SPRITE.CHEST_STONE_HELMET] = re[SPRITE.INV_STONE_HELMET];
            re[SPRITE.CHEST_GOLD_HELMET] = re[SPRITE.INV_GOLD_HELMET];
            re[SPRITE.CHEST_DIAMOND_HELMET] = re[SPRITE.INV_DIAMOND_HELMET];
            re[SPRITE.CHEST_AMETHYST_HELMET] = re[SPRITE.INV_AMETHYST_HELMET];
            re[SPRITE.CHEST_DRAGON_HELMET] = re[SPRITE.INV_DRAGON_HELMET];
            re[SPRITE.CHEST_BOOK] = re[SPRITE.INV_BOOK];
            re[SPRITE.CHEST_PAPER] = re[SPRITE.INV_PAPER];
            re[SPRITE.CHEST_AMETHYST] = re[SPRITE.INV_AMETHYST];
            re[SPRITE.CHEST_BRIDGE] = re[SPRITE.INV_BRIDGE];
            re[SPRITE.CHEST_ROOF] = re[SPRITE.INV_ROOF];
            re[SPRITE.CHEST_PLOT] = re[SPRITE.INV_PLOT];
            re[SPRITE.CHEST_SAND] = re[ItemType.SAND];
            re[SPRITE.CHEST_BREAD] = re[ItemType.BREAD];
            re[SPRITE.CHEST_ICE] = re[ItemType.ICE];
            re[SPRITE.CHEST_GROUND] = re[ItemType.GROUND];
            re[SPRITE.CHEST_BOTTLE_FULL] = re[SPRITE.INV_BOTTLE_FULL];
            re[SPRITE.CHEST_BOTTLE_EMPTY] = re[SPRITE.INV_BOTTLE_EMPTY];
            re[SPRITE.CHEST_WATERING_CAN] = re[SPRITE.INV_WATERING_CAN];
            re[SPRITE.CHEST_FLOUR] = re[SPRITE.INV_FLOUR];
            re[SPRITE.CHEST_COOKIE] = re[SPRITE.INV_COOKIE];
            re[SPRITE.CHEST_CANDY] = re[ItemType.CANDY];
            re[SPRITE.CHEST_FERRERO] = re[SPRITE.INV_FERRERO];
            re[SPRITE.CHEST_SUPER_DIVING_SUIT] = re[SPRITE.INV_SUPER_DIVING_SUIT];
            re[SPRITE.CHEST_DIVING_MASK] = re[SPRITE.INV_DIVING_MASK];
            re[SPRITE.CHEST_WATERING_CAN_FULL] = re[SPRITE.INV_WATERING_CAN_FULL];
            re[SPRITE.CHEST_CAKE] = re[SPRITE.INV_CAKE];
            re[SPRITE.CHEST_CRAB_STICK] = re[SPRITE.INV_CRAB_STICK];
            re[SPRITE.CHEST_FOODFISH] = re[SPRITE.INV_FOODFISH];
            re[SPRITE.CHEST_FOODFISH_COOKED] = re[SPRITE.INV_FOODFISH_COOKED];
            re[SPRITE.CHEST_SCALES] = re[SPRITE.INV_SCALES];
            re[SPRITE.CHEST_SANDWICH] = re[ItemType.SANDWICH];
            re[SPRITE.CHEST_CROWN_GREEN] = re[SPRITE.INV_CROWN_GREEN];
            re[SPRITE.CHEST_GEMME_GREEN] = re[ItemType.GEM_GREEN];
            re[SPRITE.CHEST_CROWN_ORANGE] = re[SPRITE.INV_CROWN_ORANGE];
            re[SPRITE.CHEST_GEMME_ORANGE] = re[ItemType.GEM_ORANGE];
            re[SPRITE.CHEST_CROWN_BLUE] = re[SPRITE.INV_CROWN_BLUE];
            re[SPRITE.CHEST_GEMME_BLUE] = re[ItemType.GEM_BLUE];
            re[SPRITE.CHEST_HOOD] = re[SPRITE.INV_HOOD];
            re[SPRITE.CHEST_PEASANT] = re[SPRITE.INV_PEASANT];
            re[SPRITE.CHEST_WINTER_PEASANT] = re[SPRITE.INV_WINTER_PEASANT];
            re[SPRITE.CHEST_WINTER_HOOD] = re[SPRITE.INV_WINTER_HOOD];
            re[SPRITE.CHEST_BUCKET_EMPTY] = re[ItemType.BUCKET_EMPTY];
            re[SPRITE.CHEST_BUCKET_FULL] = re[ItemType.BUCKET_FULL];
            re[SPRITE.CHEST_WELL] = re[SPRITE.INV_WELL];
            re[SPRITE.CHEST_PUMPKIN_SEED] = re[SPRITE.INV_PUMPKIN_SEED];
            re[SPRITE.CHEST_GARLIC_SEED] = re[SPRITE.INV_GARLIC_SEED];
            re[SPRITE.CHEST_THORNBUSH_SEED] = re[SPRITE.INV_THORNBUSH_SEED];
            re[SPRITE.CHEST_WOOD_HELMET] = re[SPRITE.INV_WOOD_HELMET];
            }, 0)();
            re[SPRITE.BUBBLES] = [];
            re[SPRITE.BUBBLES][SPRITE.DAY] = [];
            re[SPRITE.BUBBLES][SPRITE.NIGHT] = [];
            for (var e = 0; e < SPRITE.BUBBLES_SIZES; e++) {
            re[SPRITE.BUBBLES][SPRITE.DAY].push(Y(Lt(1, 4 + e, "#59B8CE")));
            re[SPRITE.BUBBLES][SPRITE.NIGHT].push(Y(Lt(1, 4 + e, "#90DDD9")));
            }
            re[SPRITE.FLAKES] = [];
            re[SPRITE.FLAKES][SPRITE.DAY] = [];
            re[SPRITE.FLAKES][SPRITE.NIGHT] = [];
            for (e = 0; e < SPRITE.FLAKES_SIZES; e++) {
            re[SPRITE.FLAKES][SPRITE.DAY].push(Y(Lt(1, 4 + e, "#ffffff")));
            re[SPRITE.FLAKES][SPRITE.NIGHT].push(Y(Lt(1, 4 + e, "#ffffff")));
            }
            re[SPRITE.DESERT] = [];
            re[SPRITE.DESERT][SPRITE.DAY] = [];
            re[SPRITE.DESERT][SPRITE.NIGHT] = [];
            for (e = 0; e < SPRITE.FLAKES_SIZES; e++) {
            re[SPRITE.DESERT][SPRITE.DAY].push(Y(Lt(1, 6 + e, "#DDCD8A")));
            re[SPRITE.DESERT][SPRITE.NIGHT].push(Y(Lt(1, 6 + e, "#155E57")));
            }
            re[SPRITE.ASHES] = [];
            re[SPRITE.ASHES][SPRITE.DAY] = [];
            re[SPRITE.ASHES][SPRITE.NIGHT] = [];
            for (e = 0; e < SPRITE.ASHES_SIZES; e++) {
            re[SPRITE.ASHES][SPRITE.DAY].push(Y(Lt(1, 4 + e, "#353326")));
            re[SPRITE.ASHES][SPRITE.NIGHT].push(Y(Lt(1, 4 + e, "#1D2526")));
            }
            re[ItemType.GARLAND] = [];
            re[ItemType.GARLAND][SPRITE.DAY] = Y(be(1.5, 0, ["#ee71a9"]));
            re[ItemType.GARLAND][SPRITE.NIGHT] = Y(be(1.5, 0, ["#ee71a9"]));
            re[SPRITE.GARLANDS] = [re[ItemType.GARLAND]];
            re[SPRITE.GARLANDS][1] = [];
            re[SPRITE.GARLANDS][2] = [];
            re[SPRITE.GARLANDS][3] = [];
            re[SPRITE.GARLANDS][4] = [];
            re[SPRITE.GARLANDS][1][SPRITE.DAY] = Y(be(1.5, 0, ["#e2d63b"]));
            re[SPRITE.GARLANDS][1][SPRITE.NIGHT] = Y(be(1.5, 0, ["#e2d63b"]));
            re[SPRITE.GARLANDS][2][SPRITE.DAY] = Y(be(1.5, 0, ["#309cbd"]));
            re[SPRITE.GARLANDS][2][SPRITE.NIGHT] = Y(be(1.5, 0, ["#309cbd"]));
            re[SPRITE.GARLANDS][3][SPRITE.DAY] = Y(be(1.5, 0, ["#cd232d"]));
            re[SPRITE.GARLANDS][3][SPRITE.NIGHT] = Y(be(1.5, 0, ["#cd232d"]));
            re[SPRITE.GARLANDS][4][SPRITE.DAY] = Y(be(1.5, 0, ["#42b672"]));
            re[SPRITE.GARLANDS][4][SPRITE.NIGHT] = Y(be(1.5, 0, ["#42b672"]));
            if (v.gup("cti", window.location.href)) {
            window.document.getElementById("version").innerHTML += "[CTI]";
            } else {
            Y = __p_5863156023(e => {
                e.loaded = 1;
                return e;
            }, 1);
            }
            re[SPRITE.MARKET_BGD] = Y(__p_5863156023(() => {
            var e = window.document.createElement("canvas");
            var t = e.getContext("2d");
            e.width = 460;
            e.height = 220;
            t.fillStyle = "#3a2a0d";
            t.fillRect(0, 0, e.width, e.height);
            t.lineWidth = 4;
            t.beginPath();
            t.strokeStyle = "#513810";
            for (var i = 20; i < 220; i += 20) {
                t.moveTo(0, i);
                t.lineTo(460, i);
                t.closePath();
                t.stroke();
            }
            return e;
            }, 0)());
            re[ItemType.STONE] = [];
            re[ItemType.STONE][SPRITE.DAY] = [];
            re[ItemType.STONE][SPRITE.NIGHT] = [];
            re[ItemType.STONE][SPRITE.DAY].push(Y(mt(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
            re[ItemType.STONE][SPRITE.DAY].push(Y(mt(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
            re[ItemType.STONE][SPRITE.DAY].push(Y(mt(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
            re[ItemType.STONE][SPRITE.NIGHT].push(Y(mt(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
            re[ItemType.STONE][SPRITE.NIGHT].push(Y(mt(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
            re[ItemType.STONE][SPRITE.NIGHT].push(Y(mt(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
            re[ItemType.GOLD] = [];
            re[ItemType.GOLD][SPRITE.DAY] = [];
            re[ItemType.GOLD][SPRITE.NIGHT] = [];
            re[ItemType.GOLD][SPRITE.DAY].push(Y(vt(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
            re[ItemType.GOLD][SPRITE.DAY].push(Y(vt(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
            re[ItemType.GOLD][SPRITE.DAY].push(Y(vt(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
            re[ItemType.GOLD][SPRITE.NIGHT].push(Y(vt(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
            re[ItemType.GOLD][SPRITE.NIGHT].push(Y(vt(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
            re[ItemType.GOLD][SPRITE.NIGHT].push(Y(vt(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
            re[ItemType.DIAMOND] = [];
            re[ItemType.DIAMOND][SPRITE.DAY] = [];
            re[ItemType.DIAMOND][SPRITE.NIGHT] = [];
            re[ItemType.DIAMOND][SPRITE.DAY].push(Y(Pt(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
            re[ItemType.DIAMOND][SPRITE.DAY].push(Y(Pt(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
            re[ItemType.DIAMOND][SPRITE.DAY].push(Y(Pt(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
            re[ItemType.DIAMOND][SPRITE.NIGHT].push(Y(Pt(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
            re[ItemType.DIAMOND][SPRITE.NIGHT].push(Y(Pt(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
            re[ItemType.DIAMOND][SPRITE.NIGHT].push(Y(Pt(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
            re[ItemType.ALOE_VERA] = [];
            re[ItemType.ALOE_VERA][SPRITE.DAY] = S.ALOE_VERAD;
            re[ItemType.ALOE_VERA][SPRITE.NIGHT] = S.ALOE_VERAN;
            re[SPRITE.HAND_SHADOW] = [];
            re[SPRITE.HAND_SHADOW][SPRITE.DAY] = Y(it(0.6, ["#0d1b1c"]));
            re[SPRITE.HAND_SHADOW][SPRITE.NIGHT] = Y(it(0.6, ["#030d14"]));
            re[SPRITE.GLOVES_HOOD] = [];
            re[SPRITE.GLOVES_HOOD][SPRITE.DAY] = Y(tt(0.6, ["#2a2938", "#242330"]));
            re[SPRITE.GLOVES_HOOD][SPRITE.NIGHT] = Y(tt(0.6, ["#1b1e30", "#161921"]));
            re[SPRITE.ZOMBIE_BODY] = [];
            re[SPRITE.ZOMBIE_BODY][SPRITE.DAY] = Y(ve(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
            re[SPRITE.ZOMBIE_BODY][SPRITE.NIGHT] = Y(ve(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
            re[SPRITE.ZOMBIE_HEAD] = [];
            re[SPRITE.ZOMBIE_HEAD][SPRITE.DAY] = Y(ce(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
            re[SPRITE.ZOMBIE_HEAD][SPRITE.NIGHT] = Y(ce(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
            re[SPRITE.ZOMBIE_HAND] = [];
            re[SPRITE.ZOMBIE_HAND][SPRITE.DAY] = Y(et(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
            re[SPRITE.ZOMBIE_HAND][SPRITE.NIGHT] = Y(et(0.4, ["#030d14", "#11635e", "#02373e"]));
            re[SPRITE.ZOMBIE_HURT] = Y(Pe(0.6, ["#BB0000"]));
            re[SPRITE.ZOMBIE_HUNGER] = Y(Pe(0.6, ["#DBE71C"]));
            re[SPRITE.ZOMBIE_HEAL] = Y(Pe(0.6, ["#00BB00"]));
            re[ItemType.WOOD] = [];
            re[ItemType.WOOD][SPRITE.DAY] = [];
            re[ItemType.WOOD][SPRITE.NIGHT] = [];
            re[ItemType.WOOD][SPRITE.DAY].push(ot(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
            re[ItemType.WOOD][SPRITE.DAY].push(ot(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
            re[ItemType.WOOD][SPRITE.DAY].push(ot(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
            re[ItemType.WOOD][SPRITE.DAY].push(ot(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
            re[ItemType.WOOD][SPRITE.DAY].push(ot(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], false, 0));
            re[ItemType.WOOD][SPRITE.DAY].push(ot(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
            re[ItemType.WOOD][SPRITE.NIGHT].push(ot(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
            re[ItemType.WOOD][SPRITE.NIGHT].push(ot(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
            re[ItemType.WOOD][SPRITE.NIGHT].push(ot(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], false, 0));
            re[ItemType.WOOD][SPRITE.NIGHT].push(ot(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
            re[ItemType.WOOD][SPRITE.NIGHT].push(ot(0.7, ["#030d14", "#082b29", "#073332", "#073332"], false, 0));
            re[ItemType.WOOD][SPRITE.NIGHT].push(ot(0.7, ["#030d14", "#082b29", "#073332", "#073332"], true, 0));
            re[SPRITE.TREE_BRANCH] = [];
            re[SPRITE.TREE_BRANCH][SPRITE.DAY] = [];
            re[SPRITE.TREE_BRANCH][SPRITE.NIGHT] = [];
            re[SPRITE.TREE_BRANCH][SPRITE.DAY].push(Y(rt(Tt(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), re[ItemType.WOOD][SPRITE.DAY][0])));
            re[SPRITE.TREE_BRANCH][SPRITE.DAY].push(Y(rt(Tt(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), re[ItemType.WOOD][SPRITE.DAY][1])));
            re[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(Y(rt(Tt(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), re[ItemType.WOOD][SPRITE.NIGHT][0])));
            re[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(Y(rt(Tt(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), re[ItemType.WOOD][SPRITE.NIGHT][1])));
            re[SPRITE.TREE_BRANCH][SPRITE.DAY].push(Y(rt(Tt(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], false), re[ItemType.WOOD][SPRITE.DAY][2])));
            re[SPRITE.TREE_BRANCH][SPRITE.DAY].push(Y(rt(Tt(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), re[ItemType.WOOD][SPRITE.DAY][2])));
            re[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(Y(rt(Tt(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), re[ItemType.WOOD][SPRITE.NIGHT][2])));
            re[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(Y(rt(Tt(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), re[ItemType.WOOD][SPRITE.NIGHT][3])));
            re[ItemType.WOOD][SPRITE.DAY][5] = Y(re[ItemType.WOOD][SPRITE.DAY][5]);
            re[ItemType.WOOD][SPRITE.DAY][4] = Y(re[ItemType.WOOD][SPRITE.DAY][4]);
            re[ItemType.WOOD][SPRITE.DAY][3] = Y(re[ItemType.WOOD][SPRITE.DAY][3]);
            re[ItemType.WOOD][SPRITE.DAY][2] = Y(re[ItemType.WOOD][SPRITE.DAY][2]);
            re[ItemType.WOOD][SPRITE.DAY][1] = Y(re[ItemType.WOOD][SPRITE.DAY][1]);
            re[ItemType.WOOD][SPRITE.DAY][0] = Y(re[ItemType.WOOD][SPRITE.DAY][0]);
            re[ItemType.WOOD][SPRITE.NIGHT][5] = Y(re[ItemType.WOOD][SPRITE.NIGHT][5]);
            re[ItemType.WOOD][SPRITE.NIGHT][4] = Y(re[ItemType.WOOD][SPRITE.NIGHT][4]);
            re[ItemType.WOOD][SPRITE.NIGHT][3] = Y(re[ItemType.WOOD][SPRITE.NIGHT][3]);
            re[ItemType.WOOD][SPRITE.NIGHT][2] = Y(re[ItemType.WOOD][SPRITE.NIGHT][2]);
            re[ItemType.WOOD][SPRITE.NIGHT][1] = Y(re[ItemType.WOOD][SPRITE.NIGHT][1]);
            re[ItemType.WOOD][SPRITE.NIGHT][0] = Y(re[ItemType.WOOD][SPRITE.NIGHT][0]);
            re[ItemType.WOOD_PICK] = [];
            re[ItemType.WOOD_PICK][SPRITE.DAY] = Y(Ae(4, nt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
            re[ItemType.WOOD_PICK][SPRITE.NIGHT] = Y(Ae(4, nt(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
            re[ItemType.STONE_PICK] = [];
            re[ItemType.STONE_PICK][SPRITE.DAY] = Y(Ae(4, nt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
            re[ItemType.STONE_PICK][SPRITE.NIGHT] = Y(Ae(4, nt(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
            re[ItemType.GOLD_PICK] = [];
            re[ItemType.GOLD_PICK][SPRITE.DAY] = Y(Ae(4, nt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
            re[ItemType.GOLD_PICK][SPRITE.NIGHT] = Y(Ae(4, nt(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
            re[ItemType.DIAMOND_PICK] = [];
            re[ItemType.DIAMOND_PICK][SPRITE.DAY] = Y(Ae(4, nt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
            re[ItemType.DIAMOND_PICK][SPRITE.NIGHT] = Y(Ae(4, nt(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
            re[ItemType.AMETHYST_PICK] = [];
            re[ItemType.AMETHYST_PICK][SPRITE.DAY] = Y(Ae(4, nt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
            re[ItemType.AMETHYST_PICK][SPRITE.NIGHT] = Y(Ae(4, nt(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
            re[ItemType.PIRATE_SWORD] = [];
            re[ItemType.PIRATE_SWORD][SPRITE.DAY] = Y(Ae(3, It(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
            re[ItemType.PIRATE_SWORD][SPRITE.NIGHT] = Y(Ae(3, It(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
            re[ItemType.SUGAR_CAN] = [];
            re[ItemType.SUGAR_CAN][SPRITE.DAY] = Y(Ae(3, lt(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
            re[ItemType.SUGAR_CAN][SPRITE.NIGHT] = Y(Ae(3, lt(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
            re[ItemType.WOOD_SWORD] = [];
            re[ItemType.WOOD_SWORD][SPRITE.DAY] = Y(Ae(3, at(0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
            re[ItemType.WOOD_SWORD][SPRITE.NIGHT] = Y(Ae(3, at(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
            re[ItemType.STONE_SWORD] = [];
            re[ItemType.STONE_SWORD][SPRITE.DAY] = Y(Ae(3, Et(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
            re[ItemType.STONE_SWORD][SPRITE.NIGHT] = Y(Ae(3, Et(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
            re[ItemType.GOLD_SWORD] = [];
            re[ItemType.GOLD_SWORD][SPRITE.DAY] = Y(Ae(3, ut(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
            re[ItemType.GOLD_SWORD][SPRITE.NIGHT] = Y(Ae(3, ut(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
            re[ItemType.DIAMOND_SWORD] = [];
            re[ItemType.DIAMOND_SWORD][SPRITE.DAY] = Y(Ae(3, At(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
            re[ItemType.DIAMOND_SWORD][SPRITE.NIGHT] = Y(Ae(3, At(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
            re[ItemType.AMETHYST_SWORD] = [];
            re[ItemType.AMETHYST_SWORD][SPRITE.DAY] = Y(Ae(3, Ot(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
            re[ItemType.AMETHYST_SWORD][SPRITE.NIGHT] = Y(Ae(3, Ot(0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
            re[SPRITE.HERB] = [];
            re[SPRITE.HERB][SPRITE.DAY] = [];
            re[SPRITE.HERB][SPRITE.NIGHT] = [];
            re[SPRITE.HERB][SPRITE.DAY].push(Y(Mt(0.9, 0, ["#0d4f35"], 0)));
            re[SPRITE.HERB][SPRITE.DAY].push(Y(Mt(0.9, 0, ["#0d4f35"], 1)));
            re[SPRITE.HERB][SPRITE.DAY].push(Y(Mt(0.9, 0, ["#0d4f35"], 2)));
            re[SPRITE.HERB][SPRITE.NIGHT].push(Y(Mt(0.9, 0, ["#053339"], 0)));
            re[SPRITE.HERB][SPRITE.NIGHT].push(Y(Mt(0.9, 0, ["#053339"], 1)));
            re[SPRITE.HERB][SPRITE.NIGHT].push(Y(Mt(0.9, 0, ["#053339"], 2)));
            re[SPRITE.HERB][SPRITE.DAY].push(Y(gt(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
            re[SPRITE.HERB][SPRITE.DAY].push(Y(gt(0.8, ["#292002", "#ba930e", "#6d5704"])));
            re[SPRITE.HERB][SPRITE.NIGHT].push(Y(gt(0.9, ["#052919", "#0a4738", "#06321f"])));
            re[SPRITE.HERB][SPRITE.NIGHT].push(Y(gt(0.8, ["#052918", "#08491c", "#063417"])));
            re[ItemType.BERRY] = [];
            re[ItemType.BERRY][SPRITE.DAY] = [Y(yt(1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
            re[ItemType.BERRY][SPRITE.NIGHT] = [Y(yt(1.2, true, ["#030d14", "#084442", "#0a4049"]))];
            re[SPRITE.DRIED_PLANT] = [];
            re[SPRITE.DRIED_PLANT][SPRITE.DAY] = Y(yt(0.8, true, ["#0e3022", "#68622D", "#665329"]));
            re[SPRITE.DRIED_PLANT][SPRITE.NIGHT] = Y(yt(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
            re[ItemType.PUMPKIN] = [];
            re[ItemType.PUMPKIN][SPRITE.DAY] = Y(co(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
            re[ItemType.PUMPKIN][SPRITE.NIGHT] = Y(co(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
            re[ItemType.GARLIC] = [];
            re[ItemType.GARLIC][SPRITE.DAY] = Y(Se(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
            re[ItemType.GARLIC][SPRITE.NIGHT] = Y(Se(0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
            re[ItemType.THORNBUSH] = [];
            re[ItemType.THORNBUSH][SPRITE.DAY] = Y(vo(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
            re[ItemType.THORNBUSH][SPRITE.NIGHT] = Y(vo(0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
            re[SPRITE.PLANT_MINI] = [];
            re[SPRITE.PLANT_MINI][SPRITE.DAY] = Y(yt(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
            re[SPRITE.PLANT_MINI][SPRITE.NIGHT] = Y(yt(0.8, true, ["#030d14", "#084442", "#0a4049"]));
            re[SPRITE.DRIED_PUMPKIN] = [];
            re[SPRITE.DRIED_PUMPKIN][SPRITE.DAY] = Y(co(0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
            re[SPRITE.DRIED_PUMPKIN][SPRITE.NIGHT] = Y(co(0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
            re[SPRITE.DRIED_GARLIC] = [];
            re[SPRITE.DRIED_GARLIC][SPRITE.DAY] = Y(Se(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
            re[SPRITE.DRIED_GARLIC][SPRITE.NIGHT] = Y(Se(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
            re[SPRITE.DRIED_THORNBUSH] = [];
            re[SPRITE.DRIED_THORNBUSH][SPRITE.DAY] = Y(vo(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
            re[SPRITE.DRIED_THORNBUSH][SPRITE.NIGHT] = Y(vo(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
            re[SPRITE.GIFT] = [];
            re[SPRITE.GIFT][SPRITE.DAY] = Y(Ko(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
            re[SPRITE.GIFT][SPRITE.NIGHT] = Y(Ko(0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
            re[SPRITE.HURT_GIFT] = Y(Ko(0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
            re[SPRITE.FRUIT] = [];
            re[SPRITE.FRUIT][SPRITE.DAY] = Y(pt(1.4, 0, ["#ac222a", "#e6636a"]));
            re[SPRITE.FRUIT][SPRITE.NIGHT] = Y(pt(1.4, 0, ["#46195e", "#744188"]));
            re[SPRITE.FIRE] = [];
            re[SPRITE.FIRE][SPRITE.DAY] = Y(Xe(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
            re[SPRITE.FIRE][SPRITE.NIGHT] = Y(Xe(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
            re[ItemType.BIG_FIRE] = [];
            re[ItemType.BIG_FIRE][SPRITE.DAY] = Y(Je(0.9, 0, ["#4d2d14", "#432516"]));
            re[ItemType.BIG_FIRE][SPRITE.NIGHT] = Y(Je(0.9, 0, ["#282404", "#0a0a01"]));
            re[ItemType.FIRE] = [];
            re[ItemType.FIRE][SPRITE.DAY] = Y(qe(0.9, 0, ["#4d2d14", "#432516"]));
            re[ItemType.FIRE][SPRITE.NIGHT] = Y(qe(0.9, 0, ["#282404", "#0a0a01"]));
            re[SPRITE.HALO_FIRE] = [];
            re[SPRITE.HALO_FIRE][SPRITE.DAY] = Y(Ze(0.9, 0, ["#efd435"]));
            re[SPRITE.HALO_FIRE][SPRITE.NIGHT] = Y(Ze(0.9, 0, ["#fffabb"]));
            re[SPRITE.GROUND_FIRE] = [];
            re[SPRITE.GROUND_FIRE][SPRITE.DAY] = Y(je(0.9, 0, ["#efd435"]));
            re[SPRITE.GROUND_FIRE][SPRITE.NIGHT] = Y(je(0.9, 0, ["#fffabb"]));
            re[SPRITE.HALO_FIRE_PUMPKIN] = [];
            re[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.DAY] = Y(Ze(0.9, 0, ["#efd435"]));
            re[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.NIGHT] = Y(Ze(0.9, 0, ["rgba(255, 84, 0, 1)"]));
            re[SPRITE.GROUND_FIRE_PUMPKIN] = [];
            re[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.DAY] = Y(je(0.9, 0, ["#efd435"]));
            re[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.NIGHT] = Y(je(0.9, 0, ["#ff5704"]));
            re[SPRITE.GEAR] = Y(ge(1, "#ffffff"));
            re[SPRITE.GEAR2] = Y(ge(1.5, "#ffffff"));
            re[SPRITE.YOUR_SCORE] = Y(Dt(1, "Your score:", 15, "#FFF"));
            re[SPRITE.WINDMILL_CASES] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 243;
            i.height = e * 172;
            he(o, e * 119.5, e * 140.125, e * 19);
            se(o, undefined, t[1], e * 5);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 36.5, e * 20.125);
            o.bezierCurveTo(e * 119.5, e * 20.625, e * 119.5, e * 20.625, e * 202.5, e * 21.125);
            o.bezierCurveTo(e * 214.5, e * 22.125, e * 216.5, e * 26.125, e * 217.5, e * 35.125);
            o.bezierCurveTo(e * 221, e * 76.125, e * 221, e * 76.125, e * 224.5, e * 117.125);
            o.bezierCurveTo(e * 225.5, e * 127.125, e * 221.5, e * 131.125, e * 210.5, e * 132.125);
            o.bezierCurveTo(e * 117.5, e * 132.125, e * 117.5, e * 132.125, e * 24.5, e * 132.125);
            o.bezierCurveTo(e * 14.5, e * 131.125, e * 13.5, e * 126.125, e * 16.5, e * 111.125);
            o.bezierCurveTo(e * 19.5, e * 73.125, e * 19.5, e * 73.125, e * 22.5, e * 35.125);
            o.bezierCurveTo(e * 23.5, e * 23.125, e * 29.5, e * 21.125, e * 36.5, e * 20.125);
            o.closePath();
            se(o, t[0], t[1], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 15.5, e * 138.625);
            o.bezierCurveTo(e * 120, e * 138.625, e * 120, e * 138.625, e * 224.5, e * 138.625);
            o.closePath();
            se(o, undefined, t[2], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 13.5, e * 131.625);
            o.bezierCurveTo(e * 119.5, e * 131.625, e * 119.5, e * 131.625, e * 225.5, e * 131.625);
            o.closePath();
            se(o, undefined, t[3], e * 10);
            he(o, e * 119.5, e * 140.125, e * 14.866068747318506);
            se(o, t[4], t[5], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 106.5, e * 146.625);
            o.bezierCurveTo(e * 116.5, e * 137.625, e * 118.5, e * 136.625, e * 123.5, e * 138.625);
            o.bezierCurveTo(e * 131.5, e * 145.625, e * 133.5, e * 148.625, e * 127.5, e * 152.625);
            o.bezierCurveTo(e * 115.5, e * 158.625, e * 111.5, e * 153.625, e * 106.5, e * 147.625);
            o.closePath();
            se(o, t[6], t[7], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 105.5, e * 146.625);
            o.bezierCurveTo(e * 116.5, e * 159.625, e * 124.5, e * 156.625, e * 132.5, e * 146.625);
            se(o, undefined, t[8], e * 5);
            o.save();
            o.translate(e * 75.5, e * 80.125);
            Re(o, e * -39, e * -40, e * 78, e * 78, e * 10);
            o.restore();
            se(o, t[9]);
            o.save();
            o.translate(e * 167, e * 80.125);
            Re(o, e * -38.5, e * -39, e * 78, e * 78, e * 10);
            o.restore();
            se(o, t[9]);
            return i;
            }, 2)(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
            re[SPRITE.EXTRACTOR_CASES] = S.EXTRACTOR_CASES;
            re[ItemType.WINDMILL] = [];
            re[ItemType.WINDMILL][SPRITE.DAY] = Y(Ke(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
            re[ItemType.WINDMILL][SPRITE.NIGHT] = Y(Ke(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
            re[SPRITE.WINDMILL_WINGS] = [];
            re[SPRITE.WINDMILL_WINGS][SPRITE.DAY] = Y(Ye(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
            re[SPRITE.WINDMILL_WINGS][SPRITE.NIGHT] = Y(Ye(2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
            re[SPRITE.WINDMILL_HEAD] = [];
            re[SPRITE.WINDMILL_HEAD][SPRITE.DAY] = Y(Ue(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
            re[SPRITE.WINDMILL_HEAD][SPRITE.NIGHT] = Y(Ue(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
            re[ItemType.WHEAT] = [];
            re[ItemType.WHEAT][SPRITE.DAY] = Y(Ve(2.2, 0, ["#A89F67", "#9E8456"]));
            re[ItemType.WHEAT][SPRITE.NIGHT] = Y(Ve(2.2, 0, ["#0B4049", "#08383D"]));
            re[SPRITE.DRIED_WHEAT] = [];
            re[SPRITE.DRIED_WHEAT][SPRITE.DAY] = Y(Ve(2.2, 0, ["#68622D", "#665329"]));
            re[SPRITE.DRIED_WHEAT][SPRITE.NIGHT] = Y(Ve(2.2, 0, ["#0F3A24", "#083326"]));
            re[SPRITE.WHEAT_MOB] = [];
            re[SPRITE.WHEAT_MOB][SPRITE.DAY] = Y(Nt(0.8, 0, ["#A89F67", "#9E8456"]));
            re[SPRITE.WHEAT_MOB][SPRITE.NIGHT] = Y(Nt(0.8, 0, ["#15514F", "#0F3F3D"]));
            re[SPRITE.PUMPKIN_SEED_MOB] = [];
            re[SPRITE.PUMPKIN_SEED_MOB][SPRITE.DAY] = Y(Nt(0.8, 0, ["#c67933", "#b17238"]));
            re[SPRITE.PUMPKIN_SEED_MOB][SPRITE.NIGHT] = Y(Nt(0.8, 0, ["#043c37", "#032b23"]));
            re[SPRITE.ALOE_VERA_SEED_MOB] = [];
            re[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.DAY] = Y(Nt(0.8, 0, ["#3a8214", "#4a9c1e"]));
            re[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.NIGHT] = Y(Nt(0.8, 0, ["#032d29", "#044640"]));
            re[SPRITE.GARLIC_SEED_MOB] = [];
            re[SPRITE.GARLIC_SEED_MOB][SPRITE.DAY] = Y(Nt(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
            re[SPRITE.GARLIC_SEED_MOB][SPRITE.NIGHT] = Y(Nt(0.8, 0, ["#1c6161", "#07413f"]));
            re[SPRITE.THORNBUSH_SEED_MOB] = [];
            re[SPRITE.THORNBUSH_SEED_MOB][SPRITE.DAY] = Y(Nt(0.8, 0, ["#328a56", "#449573"]));
            re[SPRITE.THORNBUSH_SEED_MOB][SPRITE.NIGHT] = Y(Nt(0.8, 0, ["#043c37", "#032b23"]));
            re[SPRITE.CARROT_SEED_MOB] = [];
            re[SPRITE.CARROT_SEED_MOB][SPRITE.DAY] = Y(Nt(0.8, 0, ["#c98e2f", "#a36b11"]));
            re[SPRITE.CARROT_SEED_MOB][SPRITE.NIGHT] = Y(Nt(0.8, 0, ["#043c37", "#032b23"]));
            re[SPRITE.TOMATO_SEED_MOB] = [];
            re[SPRITE.TOMATO_SEED_MOB][SPRITE.DAY] = Y(Nt(0.8, 0, ["#b22419", "#99110e"]));
            re[SPRITE.TOMATO_SEED_MOB][SPRITE.NIGHT] = Y(Nt(0.8, 0, ["#04323c", "#03222b"]));
            re[SPRITE.WATERMELON_SEED_MOB] = [];
            re[SPRITE.WATERMELON_SEED_MOB][SPRITE.DAY] = Y(Nt(0.8, 0, ["#13a56d", "#098a58"]));
            re[SPRITE.WATERMELON_SEED_MOB][SPRITE.NIGHT] = Y(Nt(0.8, 0, ["#043c37", "#032b23"]));
            re[SPRITE.WINDMILL_WHEAT_SEED] = xe(1, [{
            f: Ve,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
            }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
            re[SPRITE.BREAD_OVEN_WOOD] = xe(1, [{
            f: qe,
            x: 0,
            y: 0,
            a: 1,
            r: -window.Math.PI / 5,
            c: ["#4d2d14", "#432516"]
            }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
            re[SPRITE.BREAD_OVEN_BREAD] = xe(1, [{
            f: Ro,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
            }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
            re[SPRITE.EMPTY_SLOT] = xe(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            re[ItemType.BERRY_SEED] = [];
            re[ItemType.BERRY_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#7d613e", "#9e7e5a"]));
            re[ItemType.BERRY_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#084442", "#125e5a"]));
            re[ItemType.WHEAT_SEED] = [];
            re[ItemType.WHEAT_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#9E8456", "#A89F67"]));
            re[ItemType.WHEAT_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
            re[SPRITE.WHEAT_SEED_DRIED] = [];
            re[SPRITE.WHEAT_SEED_DRIED][SPRITE.DAY] = Y(ye(0.9, 0, ["#665329", "#68622D"]));
            re[SPRITE.WHEAT_SEED_DRIED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#083326", "#0F3A24"]));
            re[ItemType.PUMPKIN_SEED] = [];
            re[ItemType.PUMPKIN_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#c67933", "#ec952d"]));
            re[ItemType.PUMPKIN_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#0e6553", "#094437"]));
            re[ItemType.ALOE_VERA_SEED] = [];
            re[ItemType.ALOE_VERA_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#375809", "#4b770e"]));
            re[ItemType.ALOE_VERA_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#09542d", "#0d5d2f"]));
            re[SPRITE.PLANT_ALOE_VERA_DRIED] = [];
            re[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.DAY] = Y(ye(0.9, 0, ["#585809", "#72770e"]));
            re[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#295209", "#305d0d"]));
            re[ItemType.GARLIC_SEED] = [];
            re[ItemType.GARLIC_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#b9b094", "#e2d2c0"]));
            re[ItemType.GARLIC_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#126366", "#0d484b"]));
            re[ItemType.THORNBUSH_SEED] = [];
            re[ItemType.THORNBUSH_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#3f8662", "#30915d"]));
            re[ItemType.THORNBUSH_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#0e6553", "#094437"]));
            re[SPRITE.PLANT_PUMPKIN_DRIED] = [];
            re[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.DAY] = Y(ye(0.9, 0, ["#c79153", "#dfa868"]));
            re[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#073927", "#075040"]));
            re[SPRITE.PLANT_GARLIC_DRIED] = [];
            re[SPRITE.PLANT_GARLIC_DRIED][SPRITE.DAY] = Y(ye(0.9, 0, ["#768b5b", "#819984"]));
            re[SPRITE.PLANT_GARLIC_DRIED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#0c4540", "#0e5153"]));
            re[SPRITE.PLANT_THORNBUSH_DRIED] = [];
            re[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.DAY] = Y(ye(0.9, 0, ["#567465", "#627c6e"]));
            re[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#073927", "#075040"]));
            re[ItemType.CARROT_SEED] = [];
            re[ItemType.CARROT_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#996b3a", "#bf956b"]));
            re[ItemType.CARROT_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#0e6553", "#094437"]));
            re[SPRITE.PLANT_CARROT_DRIED] = [];
            re[SPRITE.PLANT_CARROT_DRIED][SPRITE.DAY] = Y(ye(0.9, 0, ["#7a634a", "#a68f77"]));
            re[SPRITE.PLANT_CARROT_DRIED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#1e4d43", "#113c32"]));
            re[ItemType.TOMATO_SEED] = [];
            re[ItemType.TOMATO_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#99403c", "#bc796c"]));
            re[ItemType.TOMATO_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#1e434d", "#11303c"]));
            re[SPRITE.PLANT_TOMATO_DRIED] = [];
            re[SPRITE.PLANT_TOMATO_DRIED][SPRITE.DAY] = Y(ye(0.9, 0, ["#88504e", "#b3857c"]));
            re[SPRITE.PLANT_TOMATO_DRIED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#253b41", "#162930"]));
            re[ItemType.WATERMELON_SEED] = [];
            re[ItemType.WATERMELON_SEED][SPRITE.DAY] = Y(ye(0.9, 0, ["#0f8870", "#23af93"]));
            re[ItemType.WATERMELON_SEED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#032829", "#083233"]));
            re[SPRITE.PLANT_WATERMELON_DRIED] = [];
            re[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.DAY] = Y(ye(0.9, 0, ["#618a20", "#84a74e"]));
            re[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.NIGHT] = Y(ye(0.9, 0, ["#1f4632", "#335d47"]));
            re[ItemType.WORKBENCH] = [];
            re[ItemType.WORKBENCH][SPRITE.DAY] = Y(Le(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
            re[ItemType.WORKBENCH][SPRITE.NIGHT] = Y(Le(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
            re[ItemType.WOOD_WALL] = [];
            re[ItemType.WOOD_WALL][SPRITE.DAY] = Y(Gt(1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
            re[ItemType.WOOD_WALL][SPRITE.NIGHT] = Y(Gt(1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
            re[ItemType.DIAMOND_WALL] = [];
            re[ItemType.DIAMOND_WALL][SPRITE.DAY] = Y(Wt(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
            re[ItemType.DIAMOND_WALL][SPRITE.NIGHT] = Y(Wt(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
            re[ItemType.AMETHYST_WALL] = [];
            re[ItemType.AMETHYST_WALL][SPRITE.DAY] = Y(Yt(1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
            re[ItemType.AMETHYST_WALL][SPRITE.NIGHT] = Y(Yt(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
            re[ItemType.STONE_WALL] = [];
            re[ItemType.STONE_WALL][SPRITE.DAY] = Y(Yt(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
            re[ItemType.STONE_WALL][SPRITE.NIGHT] = Y(Yt(1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
            re[ItemType.GOLD_WALL] = [];
            re[ItemType.GOLD_WALL][SPRITE.DAY] = Y(Ut(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
            re[ItemType.GOLD_WALL][SPRITE.NIGHT] = Y(Ut(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
            re[ItemType.WOOD_SPIKE] = [];
            re[ItemType.WOOD_SPIKE][SPRITE.DAY] = Y(hi(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
            re[ItemType.WOOD_SPIKE][SPRITE.NIGHT] = Y(hi(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
            re[ItemType.GOLD_SPIKE] = [];
            re[ItemType.GOLD_SPIKE][SPRITE.DAY] = Y(ui(0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
            re[ItemType.GOLD_SPIKE][SPRITE.NIGHT] = Y(ui(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
            re[ItemType.DIAMOND_SPIKE] = [];
            re[ItemType.DIAMOND_SPIKE][SPRITE.DAY] = Y(Ai(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
            re[ItemType.DIAMOND_SPIKE][SPRITE.NIGHT] = Y(Ai(0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
            re[ItemType.STONE_SPIKE] = [];
            re[ItemType.STONE_SPIKE][SPRITE.DAY] = Y(di(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
            re[ItemType.STONE_SPIKE][SPRITE.NIGHT] = Y(di(0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
            re[ItemType.AMETHYST_SPIKE] = [];
            re[ItemType.AMETHYST_SPIKE][SPRITE.DAY] = Y(di(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
            re[ItemType.AMETHYST_SPIKE][SPRITE.NIGHT] = Y(di(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
            re[ItemType.WOOD_DOOR] = [];
            re[ItemType.WOOD_DOOR][SPRITE.DAY] = Y(kt(1.5, 0, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
            re[ItemType.WOOD_DOOR][SPRITE.NIGHT] = Y(kt(1.5, 0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
            re[ItemType.STONE_DOOR] = [];
            re[ItemType.STONE_DOOR][SPRITE.DAY] = Y(Ft(1.5, 0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
            re[ItemType.STONE_DOOR][SPRITE.NIGHT] = Y(Ft(1.5, 0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
            re[ItemType.GOLD_DOOR] = [];
            re[ItemType.GOLD_DOOR][SPRITE.DAY] = Y(xt(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
            re[ItemType.GOLD_DOOR][SPRITE.NIGHT] = Y(xt(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
            re[ItemType.DIAMOND_DOOR] = [];
            re[ItemType.DIAMOND_DOOR][SPRITE.DAY] = Y(qt(1.5, 0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
            re[ItemType.DIAMOND_DOOR][SPRITE.NIGHT] = Y(qt(1.5, 0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
            re[ItemType.AMETHYST_DOOR] = [];
            re[ItemType.AMETHYST_DOOR][SPRITE.DAY] = Y(Ft(1.5, 0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
            re[ItemType.AMETHYST_DOOR][SPRITE.NIGHT] = Y(Ft(1.5, 0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
            re[ItemType.CHEST] = [];
            re[ItemType.CHEST][SPRITE.DAY] = Y(Ei(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
            re[ItemType.CHEST][SPRITE.NIGHT] = Y(Ei(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
            re[ItemType.CHEST][2] = Y(Ei(0.5, 0, "#4d0000 #4d0000 #4d0000 #4d0000 #4d0000 #614627 #614627 #c4a23a #c4a23a #c4a23a".split(" ")));
            re[SPRITE.TREASURE_CHEST] = [];
            re[SPRITE.TREASURE_CHEST][SPRITE.DAY] = Y(go(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
            re[SPRITE.TREASURE_CHEST][SPRITE.NIGHT] = Y(go(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
            re[SPRITE.RABBIT] = [];
            re[SPRITE.RABBIT][SPRITE.DAY] = Y(He(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
            re[SPRITE.RABBIT][SPRITE.NIGHT] = Y(He(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
            re[SPRITE.SPIDER] = [];
            re[SPRITE.SPIDER][SPRITE.DAY] = Y(Ae(window.Math.PI, ze(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
            re[SPRITE.SPIDER][SPRITE.NIGHT] = Y(Ae(window.Math.PI, ze(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
            re[SPRITE.WEB] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 450;
            i.height = e * 470;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 226.5, e * 91.546875);
            o.bezierCurveTo(e * 254.5, e * 115.546875, e * 261.5, e * 115.546875, e * 294.5, e * 109.546875);
            o.bezierCurveTo(e * 299.5, e * 141.546875, e * 315.5, e * 151.546875, e * 344.5, e * 158.546875);
            o.bezierCurveTo(e * 330.5, e * 195.546875, e * 341.5, e * 207.546875, e * 361.5, e * 226.546875);
            o.bezierCurveTo(e * 331.5, e * 251.546875, e * 335.5, e * 270.546875, e * 342.5, e * 295.546875);
            o.bezierCurveTo(e * 300.5, e * 296.546875, e * 293.5, e * 325.546875, e * 292.5, e * 344.546875);
            o.bezierCurveTo(e * 257.5, e * 326.546875, e * 242.5, e * 338.546875, e * 224.5, e * 361.546875);
            o.bezierCurveTo(e * 200.5, e * 329.546875, e * 180.5, e * 334.546875, e * 155.5, e * 341.546875);
            o.bezierCurveTo(e * 146.5, e * 307.546875, e * 140.5, e * 302.546875, e * 107.5, e * 292.546875);
            o.bezierCurveTo(e * 117.5, e * 253.546875, e * 109.5, e * 244.546875, e * 89.5, e * 224.546875);
            o.bezierCurveTo(e * 118.5, e * 191.546875, e * 114.5, e * 182.546875, e * 108.5, e * 156.546875);
            o.bezierCurveTo(e * 143.5, e * 149.546875, e * 150.5, e * 136.546875, e * 157.5, e * 106.546875);
            o.bezierCurveTo(e * 202.5, e * 120.546875, e * 211.5, e * 103.546875, e * 228.5, e * 91.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 224.5, e * 129.546875);
            o.bezierCurveTo(e * 247.5, e * 147.546875, e * 252.5, e * 143.546875, e * 274.5, e * 141.546875);
            o.bezierCurveTo(e * 279.5, e * 163.546875, e * 289.5, e * 168.546875, e * 311.5, e * 178.546875);
            o.bezierCurveTo(e * 301.5, e * 199.546875, e * 307.5, e * 213.546875, e * 323.5, e * 226.546875);
            o.bezierCurveTo(e * 303.5, e * 240.546875, e * 303.5, e * 255.546875, e * 312.5, e * 275.546875);
            o.bezierCurveTo(e * 281.5, e * 278.546875, e * 276.5, e * 291.546875, e * 272.5, e * 313.546875);
            o.bezierCurveTo(e * 248.5, e * 301.546875, e * 239.5, e * 310.546875, e * 224.5, e * 324.546875);
            o.bezierCurveTo(e * 211.5, e * 304.546875, e * 199.5, e * 301.546875, e * 176.5, e * 309.546875);
            o.bezierCurveTo(e * 165.5, e * 276.546875, e * 159.5, e * 275.546875, e * 138.5, e * 274.546875);
            o.bezierCurveTo(e * 148.5, e * 248.546875, e * 140.5, e * 237.546875, e * 125.5, e * 225.546875);
            o.bezierCurveTo(e * 145.5, e * 205.546875, e * 146.5, e * 195.546875, e * 142.5, e * 176.546875);
            o.bezierCurveTo(e * 173.5, e * 164.546875, e * 173.5, e * 155.546875, e * 178.5, e * 140.546875);
            o.bezierCurveTo(e * 214.5, e * 143.546875, e * 214.5, e * 135.546875, e * 226.5, e * 129.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 224.5, e * 160.546875);
            o.bezierCurveTo(e * 236.5, e * 168.546875, e * 239.5, e * 168.546875, e * 258.5, e * 168.546875);
            o.bezierCurveTo(e * 261.5, e * 185.546875, e * 268.5, e * 187.546875, e * 282.5, e * 192.546875);
            o.bezierCurveTo(e * 277.5, e * 208.546875, e * 283.5, e * 216.546875, e * 289.5, e * 228.546875);
            o.bezierCurveTo(e * 277.5, e * 243.546875, e * 280.5, e * 253.546875, e * 281.5, e * 260.546875);
            o.bezierCurveTo(e * 264.5, e * 260.546875, e * 259.5, e * 269.546875, e * 256.5, e * 283.546875);
            o.bezierCurveTo(e * 244.5, e * 276.546875, e * 232.5, e * 283.546875, e * 223.5, e * 291.546875);
            o.bezierCurveTo(e * 213.5, e * 276.546875, e * 205.5, e * 278.546875, e * 190.5, e * 281.546875);
            o.bezierCurveTo(e * 181.5, e * 262.546875, e * 173.5, e * 259.546875, e * 165.5, e * 258.546875);
            o.bezierCurveTo(e * 169.5, e * 239.546875, e * 167.5, e * 233.546875, e * 157.5, e * 225.546875);
            o.bezierCurveTo(e * 169.5, e * 208.546875, e * 170.5, e * 203.546875, e * 168.5, e * 192.546875);
            o.bezierCurveTo(e * 181.5, e * 187.546875, e * 188.5, e * 179.546875, e * 192.5, e * 168.546875);
            o.bezierCurveTo(e * 216.5, e * 170.546875, e * 218.5, e * 163.546875, e * 225.5, e * 160.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 205.5, e * 194.546875);
            o.bezierCurveTo(e * 216.5, e * 192.546875, e * 219.5, e * 191.546875, e * 225.5, e * 185.546875);
            o.bezierCurveTo(e * 232.5, e * 193.546875, e * 237.5, e * 191.546875, e * 246.5, e * 192.546875);
            o.bezierCurveTo(e * 249.5, e * 202.546875, e * 253.5, e * 205.546875, e * 258.5, e * 207.546875);
            o.bezierCurveTo(e * 259.5, e * 222.546875, e * 256.5, e * 223.546875, e * 265.5, e * 226.546875);
            o.bezierCurveTo(e * 256.5, e * 231.546875, e * 255.5, e * 241.546875, e * 259.5, e * 248.546875);
            o.bezierCurveTo(e * 250.5, e * 245.546875, e * 245.5, e * 252.546875, e * 243.5, e * 260.546875);
            o.bezierCurveTo(e * 234.5, e * 256.546875, e * 229.5, e * 258.546875, e * 223.5, e * 265.546875);
            o.bezierCurveTo(e * 218.5, e * 255.546875, e * 213.5, e * 257.546875, e * 204.5, e * 261.546875);
            o.bezierCurveTo(e * 203.5, e * 251.546875, e * 198.5, e * 248.546875, e * 189.5, e * 244.546875);
            o.bezierCurveTo(e * 194.5, e * 237.546875, e * 192.5, e * 231.546875, e * 184.5, e * 225.546875);
            o.bezierCurveTo(e * 191.5, e * 211.546875, e * 192.5, e * 209.546875, e * 190.5, e * 204.546875);
            o.bezierCurveTo(e * 200.5, e * 204.546875, e * 204.5, e * 198.546875, e * 207.5, e * 194.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 149.5, e * 93.546875);
            o.bezierCurveTo(e * 287.5, e * 332.546875, e * 226, e * 225.546875, e * 302.5, e * 357.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 224.5, e * 66.546875);
            o.bezierCurveTo(e * 224.5, e * 223.546875, e * 224.5, e * 223.546875, e * 224.5, e * 380.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 302.5, e * 88.546875);
            o.bezierCurveTo(e * 222.5, e * 227.546875, e * 222.5, e * 227.546875, e * 142.5, e * 366.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 361.5, e * 147.546875);
            o.bezierCurveTo(e * 223, e * 226.546875, e * 223, e * 226.546875, e * 84.5, e * 305.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 379.5, e * 225.546875);
            o.bezierCurveTo(e * 221, e * 225.546875, e * 221, e * 225.546875, e * 62.5, e * 225.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 90.5, e * 147.546875);
            o.bezierCurveTo(e * 226.5, e * 226.546875, e * 226.5, e * 226.546875, e * 362.5, e * 305.546875);
            o.closePath();
            se(o, undefined, t[0], 4);
            return i;
            }, 2)(0.6, ["#FFFFFF"]));
            re[SPRITE.WOLF] = [];
            re[SPRITE.WOLF][SPRITE.DAY] = Y(we(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
            re[SPRITE.WOLF][SPRITE.NIGHT] = Y(we(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
            re[ItemType.EARMUFFS] = [];
            re[ItemType.EARMUFFS][SPRITE.DAY] = Y(si(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
            re[ItemType.EARMUFFS][SPRITE.NIGHT] = Y(si(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
            re[ItemType.COAT] = [];
            re[ItemType.COAT][SPRITE.DAY] = Y(jt(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
            re[ItemType.COAT][SPRITE.NIGHT] = Y(jt(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
            re[ItemType.CAP_SCARF] = [];
            re[ItemType.CAP_SCARF][SPRITE.DAY] = Y(Ri(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
            re[ItemType.CAP_SCARF][SPRITE.NIGHT] = Y(Ri(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
            re[ItemType.CHRISTMAS_HAT] = [];
            re[ItemType.CHRISTMAS_HAT][SPRITE.DAY] = Y(Qe(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
            re[ItemType.CHRISTMAS_HAT][SPRITE.NIGHT] = Y(Qe(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
            re[ItemType.ELF_HAT] = [];
            re[ItemType.ELF_HAT][SPRITE.DAY] = Y($e(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
            re[ItemType.ELF_HAT][SPRITE.NIGHT] = Y($e(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
            re[SPRITE.BREAD_OVEN_ON] = [];
            re[SPRITE.BREAD_OVEN_ON][SPRITE.DAY] = Y(uo(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
            re[SPRITE.BREAD_OVEN_ON][SPRITE.NIGHT] = Y(uo(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
            re[SPRITE.BREAD_LIGHT_UP] = [];
            re[SPRITE.BREAD_LIGHT_UP][SPRITE.DAY] = Y(Ao(0.9, ["#e4c027"]));
            re[SPRITE.BREAD_LIGHT_UP][SPRITE.NIGHT] = Y(Ao(0.9, ["#D8E57F"]));
            re[ItemType.BREAD_OVEN] = [];
            re[ItemType.BREAD_OVEN][SPRITE.DAY] = Y(ho(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
            re[ItemType.BREAD_OVEN][SPRITE.NIGHT] = Y(ho(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
            re[SPRITE.BREAD_OVEN_UI] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 149;
            i.height = e * 356;
            o.save();
            o.translate(e * 74.5, e * 177.5);
            Re(o, e * -57.5, e * -161.5, e * 100, e * 323, e * 10);
            o.restore();
            se(o, t[0], t[1], e * 4);
            o.save();
            o.translate(e * 74.5, e * 177.5);
            Re(o, e * -57.5, e * 50.5, e * 100, e * 105, e * 10);
            o.restore();
            se(o, t[6], t[1], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 16, e * 125);
            o.bezierCurveTo(e * 74.5, e * 125, e * 118, e * 125, e * 118, e * 125);
            o.closePath();
            se(o, t[2], t[2], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 16, e * 120);
            o.bezierCurveTo(e * 74.5, e * 120, e * 74.5, e * 120, e * 118, e * 120);
            o.closePath();
            se(o, t[3], t[3], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 16, e * 228);
            o.bezierCurveTo(e * 75, e * 228.5, e * 118, e * 228.5, e * 118, e * 229);
            o.closePath();
            se(o, t[2], t[2], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 16, e * 224);
            o.bezierCurveTo(e * 75, e * 224, e * 118, e * 224, e * 118, e * 224);
            o.closePath();
            se(o, t[3], t[3], e * 10);
            o.save();
            o.translate(e * 72, e * 68.5);
            Re(o, e * -41.5, e * -36.5, e * 73, e * 73, e * 13);
            o.restore();
            se(o, t[4]);
            o.save();
            o.translate(e * 72, e * 175.5);
            Re(o, e * -41.5, e * -38.5, e * 73, e * 73, e * 13);
            o.restore();
            se(o, t[4]);
            o.save();
            o.translate(e * 72, e * 279.5);
            Re(o, e * -41.5, e * -40.5, e * 73, e * 73, e * 13);
            o.restore();
            se(o, t[4]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 16, e * 338);
            o.bezierCurveTo(e * 75, e * 338, e * 118, e * 338, e * 118, e * 338);
            o.closePath();
            se(o, t[2], t[2], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 16, e * 333);
            o.bezierCurveTo(e * 75, e * 333, e * 118, e * 333, e * 118, e * 333);
            o.closePath();
            se(o, t[3], t[3], e * 10);
            return i;
            }, 2)(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
            re[SPRITE.FURNACE_ON] = [];
            re[SPRITE.FURNACE_ON][SPRITE.DAY] = Y(Jt(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
            re[SPRITE.FURNACE_ON][SPRITE.NIGHT] = Y(Jt(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
            re[ItemType.FURNACE] = [];
            re[ItemType.FURNACE][SPRITE.DAY] = Y(Xt(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
            re[ItemType.FURNACE][SPRITE.NIGHT] = Y(Xt(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
            re[SPRITE.FURNACE_SLOT] = Y(__p_5863156023((e, t, i) => {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 118;
            o.height = e * 129;
            T.save();
            T.translate(e * 90, e * 90);
            Re(T, e * -86.5, e * -86, e * 110, e * 110, e * 15);
            T.restore();
            se(T, i[0], i[1], 4);
            return o;
            }, 3)(0.8, 0, ["#5f6061", "#939393"]));
            re[SPRITE.FURNACE_BUTTON] = xe(1, [{
            f: qe,
            x: 0,
            y: 0,
            a: 1,
            r: window.Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
            }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
            re[ItemType.BED] = [];
            re[ItemType.BED][SPRITE.DAY] = Y(Qt(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
            re[ItemType.BED][SPRITE.NIGHT] = Y(Qt(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
            re[SPRITE.BED_TOP] = [];
            re[SPRITE.BED_TOP][SPRITE.DAY] = Y(ei(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
            re[SPRITE.BED_TOP][SPRITE.NIGHT] = Y(ei(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
            re[ItemType.CRAB_SPEAR] = [];
            re[ItemType.CRAB_SPEAR][SPRITE.DAY] = Y(Ae(3, ti(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
            re[ItemType.CRAB_SPEAR][SPRITE.NIGHT] = Y(Ae(3, ti(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
            re[ItemType.WOOD_SPEAR] = [];
            re[ItemType.WOOD_SPEAR][SPRITE.DAY] = Y(Ae(3, ii(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
            re[ItemType.WOOD_SPEAR][SPRITE.NIGHT] = Y(Ae(3, ii(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
            re[ItemType.STONE_SPEAR] = [];
            re[ItemType.STONE_SPEAR][SPRITE.DAY] = Y(Ae(3, oi(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
            re[ItemType.STONE_SPEAR][SPRITE.NIGHT] = Y(Ae(3, oi(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
            re[ItemType.GOLD_SPEAR] = [];
            re[ItemType.GOLD_SPEAR][SPRITE.DAY] = Y(Ae(3, Ti(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
            re[ItemType.GOLD_SPEAR][SPRITE.NIGHT] = Y(Ae(3, Ti(0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
            re[ItemType.DIAMOND_SPEAR] = [];
            re[ItemType.DIAMOND_SPEAR][SPRITE.DAY] = Y(Ae(3, ri(0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
            re[ItemType.DIAMOND_SPEAR][SPRITE.NIGHT] = Y(Ae(3, ri(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
            re[ItemType.AMETHYST_SPEAR] = [];
            re[ItemType.AMETHYST_SPEAR][SPRITE.DAY] = Y(Ae(3, ni(0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
            re[ItemType.AMETHYST_SPEAR][SPRITE.NIGHT] = Y(Ae(3, ni(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
            re[ItemType.DRAGON_SPEAR] = [];
            re[ItemType.DRAGON_SPEAR][SPRITE.DAY] = Y(Ae(3, ai(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
            re[ItemType.DRAGON_SPEAR][SPRITE.NIGHT] = Y(Ae(3, ai(1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
            re[ItemType.STONE_HAMMER] = [];
            re[ItemType.STONE_HAMMER][SPRITE.DAY] = Y(Ae(3, Oi(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
            re[ItemType.STONE_HAMMER][SPRITE.NIGHT] = Y(Ae(3, Oi(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
            re[ItemType.WRENCH] = [];
            re[ItemType.WRENCH][SPRITE.DAY] = Y(Ae(3, Vo(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
            re[ItemType.WRENCH][SPRITE.NIGHT] = Y(Ae(3, Vo(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
            re[ItemType.GOLD_WRENCH] = [];
            re[ItemType.GOLD_WRENCH][SPRITE.DAY] = Y(Ae(3, Vo(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
            re[ItemType.GOLD_WRENCH][SPRITE.NIGHT] = Y(Ae(3, Vo(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
            re[ItemType.SUPER_HAMMER] = [];
            re[ItemType.SUPER_HAMMER][SPRITE.DAY] = Y(Ae(3, ro(1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
            re[ItemType.SUPER_HAMMER][SPRITE.NIGHT] = Y(Ae(3, ro(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
            re[ItemType.GOLD_HAMMER] = [];
            re[ItemType.GOLD_HAMMER][SPRITE.DAY] = Y(Ae(3, Oi(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
            re[ItemType.GOLD_HAMMER][SPRITE.NIGHT] = Y(Ae(3, Oi(1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
            re[ItemType.DIAMOND_HAMMER] = [];
            re[ItemType.DIAMOND_HAMMER][SPRITE.DAY] = Y(Ae(3, Oi(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
            re[ItemType.DIAMOND_HAMMER][SPRITE.NIGHT] = Y(Ae(3, Oi(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
            re[ItemType.AMETHYST_HAMMER] = [];
            re[ItemType.AMETHYST_HAMMER][SPRITE.DAY] = Y(Ae(3, Oi(1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
            re[ItemType.AMETHYST_HAMMER][SPRITE.NIGHT] = Y(Ae(3, Oi(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
            re[ItemType.LOCK] = [];
            re[ItemType.LOCK][SPRITE.DAY] = Y(xi(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
            re[ItemType.LOCK][SPRITE.NIGHT] = Y(xi(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
            re[SPRITE.PADLOCK] = [];
            re[SPRITE.PADLOCK].push(Y(xi(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
            re[SPRITE.PADLOCK].push(Y(xi(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
            re[SPRITE.PADLOCK].push(Y(xi(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
            re[SPRITE.LOCKED] = [];
            re[SPRITE.LOCKED].push(re[SPRITE.PADLOCK][0]);
            re[SPRITE.LOCKED].push(re[SPRITE.PADLOCK][0]);
            re[SPRITE.LOCKED].push(re[SPRITE.PADLOCK][0]);
            re[ItemType.LOCK_PICK] = [];
            re[ItemType.LOCK_PICK][SPRITE.DAY] = Y($i(0.06, 0, ["#141414", "#c4a23a", "#816511"]));
            re[ItemType.LOCK_PICK][SPRITE.NIGHT] = Y($i(0.06, 0, ["#030d14", "#2b6664", "#133d3c"]));
            re[SPRITE.KEY] = [];
            re[SPRITE.KEY].push(Y($i(0.08, 0, ["#141414", "#c4a23a", "#816511"])));
            re[SPRITE.KEY].push(Y($i(0.08, 0, ["#141414", "#e2bd4e", "#a38018"])));
            re[SPRITE.KEY].push(Y($i(0.08, 0, ["#141414", "#b0902e", "#634d09"])));
            re[ItemType.DRAGON_HEART] = xe(1.5, [{
            f: oo,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
            }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
            re[SPRITE.RESURRECTION_GROUND] = [];
            re[SPRITE.RESURRECTION_GROUND][SPRITE.DAY] = Y(Qi(0.8, 0, ["#347f93", "#54a4ba"]));
            re[SPRITE.RESURRECTION_GROUND][SPRITE.NIGHT] = Y(Qi(0.8, 0, ["#98ede3", "#94f2e7"]));
            re[SPRITE.RESURRECTION_HOLE] = [];
            re[SPRITE.RESURRECTION_HOLE][SPRITE.DAY] = Y(eo(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
            re[SPRITE.RESURRECTION_HOLE][SPRITE.NIGHT] = Y(eo(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
            re[SPRITE.RESURRECTION_ROTATE] = [];
            re[SPRITE.RESURRECTION_ROTATE][SPRITE.DAY] = Y(to(0.8, 0, ["#a9e4ed", "#86d4e0"]));
            re[SPRITE.RESURRECTION_ROTATE][SPRITE.NIGHT] = Y(to(0.8, 0, ["#83ddd4", "#485e66"]));
            re[ItemType.RESURRECTION] = [];
            re[ItemType.RESURRECTION][SPRITE.DAY] = Y(io(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
            re[ItemType.RESURRECTION][SPRITE.NIGHT] = Y(io(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
            re[SPRITE.EMERALD_MACHINE_GROUND] = [];
            re[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.DAY] = S.EMERALD_MACHINE_GROUNDD;
            re[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.NIGHT] = S.EMERALD_MACHINE_GROUNDN;
            re[SPRITE.EMERALD_MACHINE_HOLE] = [];
            re[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.DAY] = S.EMERALD_MACHINE_HOLED;
            re[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.NIGHT] = S.EMERALD_MACHINE_HOLEN;
            re[SPRITE.EMERALD_MACHINE_ROTATE] = [];
            re[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.DAY] = S.EMERALD_MACHINE_ROTATED;
            re[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.NIGHT] = S.EMERALD_MACHINE_ROTATEN;
            re[ItemType.EMERALD_MACHINE] = [];
            re[ItemType.EMERALD_MACHINE][SPRITE.DAY] = S.EMERALD_MACHINED;
            re[ItemType.EMERALD_MACHINE][SPRITE.NIGHT] = S.EMERALD_MACHINEN;
            re[SPRITE.EXTRACTOR_MACHINE0_STONE] = [];
            re[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.DAY] = S.EXTRACTOR_MACHINE0_STONED;
            re[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE0_STONEN;
            re[ItemType.STONE_EXTRACTOR] = [];
            re[ItemType.STONE_EXTRACTOR][SPRITE.DAY] = S.EXTRACTOR_MACHINE_STONED;
            re[ItemType.STONE_EXTRACTOR][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE_STONEN;
            re[SPRITE.EXTRACTOR_MACHINE0_GOLD] = [];
            re[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.DAY] = S.EXTRACTOR_MACHINE0_GOLDD;
            re[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE0_GOLDN;
            re[ItemType.GOLD_EXTRACTOR] = [];
            re[ItemType.GOLD_EXTRACTOR][SPRITE.DAY] = S.EXTRACTOR_MACHINE_GOLDD;
            re[ItemType.GOLD_EXTRACTOR][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE_GOLDN;
            re[SPRITE.EXTRACTOR_MACHINE0_DIAMOND] = [];
            re[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.DAY] = S.EXTRACTOR_MACHINE0_DIAMONDD;
            re[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE0_DIAMONDN;
            re[ItemType.DIAMOND_EXTRACTOR] = [];
            re[ItemType.DIAMOND_EXTRACTOR][SPRITE.DAY] = S.DIAMOND_EXTRACTORD;
            re[ItemType.DIAMOND_EXTRACTOR][SPRITE.NIGHT] = S.DIAMOND_EXTRACTORN;
            re[SPRITE.EXTRACTOR_MACHINE0_AMETHYST] = [];
            re[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.DAY] = S.EXTRACTOR_MACHINE0_AMETHYSTD;
            re[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE0_AMETHYSTN;
            re[ItemType.AMETHYST_EXTRACTOR] = [];
            re[ItemType.AMETHYST_EXTRACTOR][SPRITE.DAY] = S.EXTRACTOR_MACHINE_AMETHYSTD;
            re[ItemType.AMETHYST_EXTRACTOR][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE_AMETHYSTN;
            re[SPRITE.EXTRACTOR_MACHINE0_REIDITE] = [];
            re[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.DAY] = S.EXTRACTOR_MACHINE0_REIDITED;
            re[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE0_REIDITEN;
            re[ItemType.REIDITE_EXTRACTOR] = [];
            re[ItemType.REIDITE_EXTRACTOR][SPRITE.DAY] = S.EXTRACTOR_MACHINE_REIDITED;
            re[ItemType.REIDITE_EXTRACTOR][SPRITE.NIGHT] = S.EXTRACTOR_MACHINE_REIDITEN;
            re[SPRITE.FIREFLY] = [];
            re[SPRITE.FIREFLY][SPRITE.DAY] = S.FIREFLYD;
            re[SPRITE.FIREFLY][SPRITE.NIGHT] = S.FIREFLYN;
            re[SPRITE.HURT_FIREFLY] = S.HURT_FIREFLY;
            re[ItemType.TOTEM] = [];
            re[ItemType.TOTEM][SPRITE.DAY] = Y(Zi(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
            re[ItemType.TOTEM][SPRITE.NIGHT] = Y(Zi(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
            re[SPRITE.ICON_MEMBER] = Y(Xi(0.3, ["#092813", "#1f773d"], 0));
            re[SPRITE.ICON_LEADER] = Y(Xi(0.3, ["#092813", "#1f773d"], 1));
            re[SPRITE.VERIFIED] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 60;
            i.height = e * 60;
            o.translate(e * -25, e * -25);
            o.translate(0, e * 5);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 24, e * 50);
            o.bezierCurveTo(e * 32.5, e * 54.5, e * 32.5, e * 54.5, e * 41, e * 59);
            o.bezierCurveTo(e * 57, e * 47, e * 57, e * 47, e * 73, e * 35);
            o.bezierCurveTo(e * 57, e * 53, e * 57, e * 53, e * 41, e * 71);
            o.closePath();
            se(o, t[0]);
            o.translate(0, e * -5);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 24, e * 50);
            o.bezierCurveTo(e * 32.5, e * 54.5, e * 32.5, e * 54.5, e * 41, e * 59);
            o.bezierCurveTo(e * 57, e * 47, e * 57, e * 47, e * 73, e * 35);
            o.bezierCurveTo(e * 57, e * 53, e * 57, e * 53, e * 41, e * 71);
            o.closePath();
            se(o, t[1]);
            return i;
            }, 2)(0.6, ["#092813", "#1f773d"]));
            re[SPRITE.TEAM_BUTTON] = [];
            re[SPRITE.TEAM_BUTTON].push(Y(qi(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
            re[SPRITE.TEAM_BUTTON].push(Y(qi(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
            re[SPRITE.TEAM_BUTTON].push(Y(qi(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
            re[SPRITE.FULL_TEAM_BUTTON] = [];
            var t = Y(qi(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
            re[SPRITE.FULL_TEAM_BUTTON].push(t);
            re[SPRITE.FULL_TEAM_BUTTON].push(t);
            re[SPRITE.FULL_TEAM_BUTTON].push(t);
            re[SPRITE.MANAGE_TEAM_BUTTON] = [];
            re[SPRITE.MANAGE_TEAM_BUTTON].push(Y(qi(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
            re[SPRITE.MANAGE_TEAM_BUTTON].push(Y(qi(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
            re[SPRITE.MANAGE_TEAM_BUTTON].push(Y(qi(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
            re[SPRITE.DELAY_SPIKE] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 170;
            var r = e * 172;
            var n = T / 2;
            var a = r / 2;
            i.width = T;
            i.height = r;
            o.translate(n, a);
            o.save();
            for (var I = 0; I < 10; I++) {
                o.rotate(window.Math.PI / 5);
                o.save();
                o.translate(e * 65, 0);
                ue(o, 3, e * 18, e * 4);
                se(o, t[0]);
                o.restore();
            }
            o.restore();
            he(o, 0, 0, e * 40);
            se(o, undefined, t[0], e * 6);
            he(o, 0, 0, e * 20);
            se(o, t[0]);
            return i;
            }, 2)(0.3, ["#FFFFFF"]));
            re[SPRITE.DELAY_WALL] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 130;
            var r = e * 142;
            var n = T / 2;
            var a = r / 2;
            i.width = T;
            i.height = r;
            he(o, n, a, e * 40);
            se(o, undefined, t[0], e * 7);
            he(o, n, a, e * 30);
            se(o, undefined, t[0], e * 7);
            he(o, n, a, e * 20);
            se(o, t[0]);
            return i;
            }, 2)(0.3, ["#FFFFFF"]));
            re[SPRITE.DELAY_TEAM] = Y(Xi(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
            re[SPRITE.DELAY_DRINK] = Y(Ae(window.Math.PI / 5, __p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 316;
            i.height = e * 365;
            o.save();
            o.translate(e * 156.07142639160156, e * 51.81248474121094);
            o.rotate(0);
            Re(o, e * -21.5, e * -34, e * 43, e * 68, e * 8);
            o.restore();
            se(o, t[0], t[0], e * 15);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 126.57142639160156, e * 67.38392639160156);
            o.bezierCurveTo(e * 126.57142639160156, e * 57.38392639160156, e * 132.57142639160156, e * 54.38392639160156, e * 140.57142639160156, e * 54.38392639160156);
            o.bezierCurveTo(e * 177.57142639160156, e * 55.38392639160156, e * 158.07142639160156, e * 54.38392639160156, e * 175.57142639160156, e * 54.38392639160156);
            o.bezierCurveTo(e * 185.57142639160156, e * 56.38392639160156, e * 185.57142639160156, e * 57.38392639160156, e * 184.57142639160156, e * 66.38392639160156);
            o.bezierCurveTo(e * 184.57142639160156, e * 78.38392639160156, e * 184.57142639160156, e * 89.38392639160156, e * 184.57142639160156, e * 90.38392639160156);
            o.bezierCurveTo(e * 177.57142639160156, e * 107.38392639160156, e * 180.57142639160156, e * 112.38392639160156, e * 189.57142639160156, e * 116.38392639160156);
            o.bezierCurveTo(e * 212.57142639160156, e * 127.38392639160156, e * 212.57142639160156, e * 132.38392639160156, e * 211.57142639160156, e * 150.38392639160156);
            o.bezierCurveTo(e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 304.81249618530273);
            o.bezierCurveTo(e * 212.57142639160156, e * 328.81249618530273, e * 209.57142639160156, e * 330.81249618530273, e * 188.57142639160156, e * 333.81249618530273);
            o.bezierCurveTo(e * 155.07142639160156, e * 333.31249618530273, e * 155.07142639160156, e * 333.31249618530273, e * 121.57142639160156, e * 332.81249618530273);
            o.bezierCurveTo(e * 104.57142639160156, e * 327.81249618530273, e * 105.57142639160156, e * 328.81249618530273, e * 104.57142639160156, e * 312.81249618530273);
            o.bezierCurveTo(e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 143.52678298950195);
            o.bezierCurveTo(e * 106.57142639160156, e * 124.52678298950195, e * 110.57142639160156, e * 123.52678298950195, e * 123.57142639160156, e * 116.52678298950195);
            o.bezierCurveTo(e * 136.57142639160156, e * 110.52678298950195, e * 130.57142639160156, e * 106.52678298950195, e * 126.57142639160156, e * 98.52678298950195);
            o.closePath();
            se(o, t[0], t[0], e * 15);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 125.57142639160156, e * 156.66963958740234);
            o.bezierCurveTo(e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 208.66963958740234);
            o.closePath();
            se(o, t[0], t[0], e * 15);
            return i;
            }, 2)(0.2, ["#FFFFFF"])));
            re[ItemType.AMETHYST_HELMET] = [];
            re[ItemType.AMETHYST_HELMET][SPRITE.DAY] = Y(Ui(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
            re[ItemType.AMETHYST_HELMET][SPRITE.NIGHT] = Y(Ui(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
            re[SPRITE.SHOW_TEAM_BUTTON] = [];
            re[SPRITE.SHOW_TEAM_BUTTON].push(Y(qi(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
            re[SPRITE.SHOW_TEAM_BUTTON].push(Y(qi(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
            re[SPRITE.SHOW_TEAM_BUTTON].push(Y(qi(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
            re[ItemType.HOOD] = [];
            re[ItemType.HOOD][SPRITE.DAY] = Y(Po(0.37, 0, ["#2a2938", "#242330", "#313041"]));
            re[ItemType.HOOD][SPRITE.NIGHT] = Y(Po(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
            re[ItemType.WINTER_HOOD] = [];
            re[ItemType.WINTER_HOOD][SPRITE.DAY] = Y(yo(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
            re[ItemType.WINTER_HOOD][SPRITE.NIGHT] = Y(yo(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
            re[ItemType.WINTER_PEASANT] = [];
            re[ItemType.WINTER_PEASANT][SPRITE.DAY] = Y(po(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
            re[ItemType.WINTER_PEASANT][SPRITE.NIGHT] = Y(po(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
            re[ItemType.PEASANT] = [];
            re[ItemType.PEASANT][SPRITE.DAY] = Y(po(0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
            re[ItemType.PEASANT][SPRITE.NIGHT] = Y(po(0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
            re[ItemType.CROWN_GREEN] = [];
            re[ItemType.CROWN_GREEN][SPRITE.DAY] = Y(Yo(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
            re[ItemType.CROWN_GREEN][SPRITE.NIGHT] = Y(Yo(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
            re[ItemType.CROWN_ORANGE] = [];
            re[ItemType.CROWN_ORANGE][SPRITE.DAY] = Y(Yo(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
            re[ItemType.CROWN_ORANGE][SPRITE.NIGHT] = Y(Yo(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
            re[ItemType.CROWN_BLUE] = [];
            re[ItemType.CROWN_BLUE][SPRITE.DAY] = Y(Yo(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
            re[ItemType.CROWN_BLUE][SPRITE.NIGHT] = Y(Yo(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
            re[ItemType.CRAB_HELMET] = [];
            re[ItemType.CRAB_HELMET][SPRITE.DAY] = Y(Zt(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
            re[ItemType.CRAB_HELMET][SPRITE.NIGHT] = Y(Zt(0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
            re[ItemType.DRAGON_HELMET] = [];
            re[ItemType.DRAGON_HELMET][SPRITE.DAY] = Y(Si(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
            re[ItemType.DRAGON_HELMET][SPRITE.NIGHT] = Y(Si(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
            re[ItemType.DRAGON_SWORD] = [];
            re[ItemType.DRAGON_SWORD][SPRITE.DAY] = Y(Ae(3, no(0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
            re[ItemType.DRAGON_SWORD][SPRITE.NIGHT] = Y(Ae(3, no(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
            re[SPRITE.DRAGON_SWORD_HALO] = [];
            re[SPRITE.DRAGON_SWORD_HALO][SPRITE.DAY] = Y(Ae(3, no(1, true, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
            re[SPRITE.DRAGON_SWORD_HALO][SPRITE.NIGHT] = Y(Ae(3, no(1, true, [undefined, undefined, undefined, "#87d2e6", "#87d2e6"])));
            re[SPRITE.QUEST_BUTTON] = [];
            re[SPRITE.QUEST_BUTTON].push(Y(Go(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
            re[SPRITE.QUEST_BUTTON].push(Y(Go(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
            re[SPRITE.QUEST_BUTTON].push(Y(Go(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
            re[SPRITE.MARKET_BUTTON] = [];
            re[SPRITE.MARKET_BUTTON].push(Y(Wo(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
            re[SPRITE.MARKET_BUTTON].push(Y(Wo(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
            re[SPRITE.MARKET_BUTTON].push(Y(Wo(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
            re[ItemType.CURSED_SWORD] = [];
            re[ItemType.CURSED_SWORD][SPRITE.DAY] = Y(Ae(3, ao(0.8, true, ["#0d1b1c", "#b70404", "#ff0000", "#fc5e5e", "#2b0714", "#050c28"])));
            re[ItemType.CURSED_SWORD][SPRITE.NIGHT] = Y(Ae(3, ao(0.8, true, ["#0d1b1c", "#b70404", "#ff0000", "#fc5e5e", "#2b0714", "#050c28"])));
            re[SPRITE.INV_CURSED_SWORD] = xe(1, [{
            f: ao,
            x: 0,
            y: 0,
            a: 1,
            r: window.Math.PI / 5,
            c: ["#0d1b1c", "#b70404", "#ff0000", "#fc5e5e", "#2b0714", "#050c28"]
            }], 0.55, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            re[SPRITE.CRAFT_CURSED_SWORD] = re[SPRITE.INV_CURSED_SWORD];
            re[SPRITE.CHEST_CURSED_SWORD] = re[SPRITE.INV_CURSED_SWORD];
            re[ItemType.STONE_SHOVEL] = [];
            re[ItemType.STONE_SHOVEL][SPRITE.DAY] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
            re[ItemType.STONE_SHOVEL][SPRITE.NIGHT] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
            re[ItemType.GOLD_SHOVEL] = [];
            re[ItemType.GOLD_SHOVEL][SPRITE.DAY] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
            re[ItemType.GOLD_SHOVEL][SPRITE.NIGHT] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
            re[ItemType.DIAMOND_SHOVEL] = [];
            re[ItemType.DIAMOND_SHOVEL][SPRITE.DAY] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
            re[ItemType.DIAMOND_SHOVEL][SPRITE.NIGHT] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
            re[ItemType.AMETHYST_SHOVEL] = [];
            re[ItemType.AMETHYST_SHOVEL][SPRITE.DAY] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
            re[ItemType.AMETHYST_SHOVEL][SPRITE.NIGHT] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
            re[ItemType.REIDITE_SHOVEL] = [];
            re[ItemType.REIDITE_SHOVEL][SPRITE.DAY] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#6c6464", "#524d4d", "#c24c3a", "#8f392a", "#a03e30"])));
            re[ItemType.REIDITE_SHOVEL][SPRITE.NIGHT] = Y(Ae(3, fo(0.7, true, ["#0d1b1c", "#41254b", "#311c42", "#973b29", "#6e1d4f", "#6a1d3e"])));
            re[SPRITE.SHOP] = [];
            re[SPRITE.SHOP].push(Y(Io(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
            re[SPRITE.SHOP].push(Y(Io(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
            re[SPRITE.SHOP].push(Y(Io(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
            re[SPRITE.HURT_WOLF] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 188;
            i.height = e * 190;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 33.00567626953125, e * 95.44320678710938);
            o.bezierCurveTo(e * 42.00567626953125, e * 87.44320678710938, e * 48.00567626953125, e * 51.443206787109375, e * 74.00567626953125, e * 47.443206787109375);
            o.bezierCurveTo(e * 100.00567626953125, e * 42.443206787109375, e * 118.00567626953125, e * 49.443206787109375, e * 131.00567626953125, e * 55.443206787109375);
            o.bezierCurveTo(e * 140.00567626953125, e * 70.44320678710938, e * 145.00567626953125, e * 87.44320678710938, e * 152.00567626953125, e * 94.44320678710938);
            o.bezierCurveTo(e * 149.00567626953125, e * 99.44320678710938, e * 147.00567626953125, e * 98.44320678710938, e * 141.00567626953125, e * 101.44320678710938);
            o.bezierCurveTo(e * 147.00567626953125, e * 108.44320678710938, e * 147.00567626953125, e * 111.44320678710938, e * 147.00567626953125, e * 112.44320678710938);
            o.bezierCurveTo(e * 143.00567626953125, e * 112.44320678710938, e * 141.00567626953125, e * 112.44320678710938, e * 137.00567626953125, e * 111.44320678710938);
            o.bezierCurveTo(e * 138.00567626953125, e * 117.44320678710938, e * 138.00567626953125, e * 120.44320678710938, e * 138.00567626953125, e * 124.44320678710938);
            o.bezierCurveTo(e * 125.00567626953125, e * 107.44320678710938, e * 121.00567626953125, e * 124.44320678710938, e * 110.00567626953125, e * 141.44320678710938);
            o.bezierCurveTo(e * 102.00567626953125, e * 158.44320678710938, e * 89.00567626953125, e * 158.44320678710938, e * 80.00567626953125, e * 144.44320678710938);
            o.bezierCurveTo(e * 61.00567626953125, e * 111.44320678710938, e * 56.00567626953125, e * 117.44320678710938, e * 48.00567626953125, e * 120.44320678710938);
            o.bezierCurveTo(e * 46.00567626953125, e * 118.44320678710938, e * 47.00567626953125, e * 112.44320678710938, e * 48.00567626953125, e * 107.44320678710938);
            o.bezierCurveTo(e * 43.00567626953125, e * 111.44320678710938, e * 40.00567626953125, e * 111.44320678710938, e * 37.00567626953125, e * 110.44320678710938);
            o.bezierCurveTo(e * 39.50567626953125, e * 104.94320678710938, e * 39.50567626953125, e * 104.94320678710938, e * 42.00567626953125, e * 99.44320678710938);
            o.bezierCurveTo(e * 33.00567626953125, e * 99.44320678710938, e * 33.00567626953125, e * 98.44320678710938, e * 33.00567626953125, e * 96.44320678710938);
            o.closePath();
            se(o, t[0], t[0], e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 51.00567626953125, e * 72.53409576416016);
            o.bezierCurveTo(e * 48.00567626953125, e * 56.534095764160156, e * 48.00567626953125, e * 49.534095764160156, e * 54.00567626953125, e * 35.534095764160156);
            o.bezierCurveTo(e * 58.00567626953125, e * 26.534095764160156, e * 65.00567626953125, e * 27.534095764160156, e * 73.00567626953125, e * 40.534095764160156);
            o.bezierCurveTo(e * 81.00567626953125, e * 49.534095764160156, e * 82.00567626953125, e * 50.534095764160156, e * 83.00567626953125, e * 51.534095764160156);
            o.bezierCurveTo(e * 77.00567626953125, e * 71.53409576416016, e * 64.00567626953125, e * 75.53409576416016, e * 51.00567626953125, e * 72.53409576416016);
            o.closePath();
            se(o, t[0], t[0], e * 2);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 105.00567626953125, e * 50.53410339355469);
            o.bezierCurveTo(e * 112.00567626953125, e * 48.53410339355469, e * 125.00567626953125, e * 21.534103393554688, e * 132.00567626953125, e * 33.53410339355469);
            o.bezierCurveTo(e * 138.00567626953125, e * 42.53410339355469, e * 140.00567626953125, e * 64.53410339355469, e * 136.00567626953125, e * 75.53410339355469);
            o.closePath();
            se(o, t[0], t[0], e * 2);
            return i;
            }, 2)(1.1, ["#BB0000"]));
            re[SPRITE.HURT_SPIDER] = Y(Ae(window.Math.PI, __p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 238;
            i.height = e * 230;
            o.translate(e * -93, e * -110);
            he(o, e * 213.5, e * 256.75, e * 75);
            se(o, t);
            he(o, e * 213.5, e * 175.75, e * 25);
            se(o, t);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 156.5, e * 137.75);
            o.bezierCurveTo(e * 170.5, e * 173.75, e * 195.5, e * 177.75, e * 209.5, e * 177.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 217.5, e * 178.75);
            o.bezierCurveTo(e * 251.5, e * 177.75, e * 263.5, e * 153.75, e * 270.5, e * 140.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 130.5, e * 124.75);
            o.bezierCurveTo(e * 153.5, e * 185.75, e * 198.5, e * 185.75, e * 213.5, e * 185.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.5, e * 183.75);
            o.bezierCurveTo(e * 265.5, e * 192.75, e * 293.5, e * 141.75, e * 297.5, e * 124.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 107.5, e * 213.75);
            o.bezierCurveTo(e * 151.5, e * 190.75, e * 198.5, e * 184.75, e * 210.5, e * 184.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 212.5, e * 187.75);
            o.bezierCurveTo(e * 258.5, e * 182.75, e * 286.5, e * 194.75, e * 314.5, e * 206.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 102.5, e * 258.75);
            o.bezierCurveTo(e * 142.5, e * 200.75, e * 193.5, e * 194.75, e * 211.5, e * 185.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 214.5, e * 192.75);
            o.bezierCurveTo(e * 276.5, e * 194.75, e * 306.5, e * 233.75, e * 316.5, e * 246.75);
            o.lineWidth = e * 17;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 219.5, e * 158.75);
            o.bezierCurveTo(e * 226.5, e * 159.75, e * 227.5, e * 147.75, e * 219.5, e * 145.75);
            o.closePath();
            o.lineWidth = e * 10;
            o.strokeStyle = t;
            o.stroke();
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 210.5, e * 160.75);
            o.bezierCurveTo(e * 203.5, e * 159.75, e * 199.5, e * 146.75, e * 210.5, e * 145.75);
            o.closePath();
            o.lineWidth = e * 10;
            o.strokeStyle = t;
            o.stroke();
            return i;
            }, 2)(0.9, "#BB0000")));
            re[ItemType.EXPLORER_HAT] = [];
            re[ItemType.EXPLORER_HAT][SPRITE.DAY] = Y(Gi(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
            re[ItemType.EXPLORER_HAT][SPRITE.NIGHT] = Y(Gi(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
            re[ItemType.WOOD_HELMET] = [];
            re[ItemType.WOOD_HELMET][SPRITE.DAY] = Y(Wi(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
            re[ItemType.WOOD_HELMET][SPRITE.NIGHT] = Y(Wi(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
            re[ItemType.STONE_HELMET] = [];
            re[ItemType.STONE_HELMET][SPRITE.DAY] = Y(Vi(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
            re[ItemType.STONE_HELMET][SPRITE.NIGHT] = Y(Vi(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
            re[ItemType.GOLD_HELMET] = [];
            re[ItemType.GOLD_HELMET][SPRITE.DAY] = Y(Ki(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
            re[ItemType.GOLD_HELMET][SPRITE.NIGHT] = Y(Ki(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
            re[ItemType.DIAMOND_HELMET] = [];
            re[ItemType.DIAMOND_HELMET][SPRITE.DAY] = Y(Yi(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
            re[ItemType.DIAMOND_HELMET][SPRITE.NIGHT] = Y(Yi(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
            re[SPRITE.FIR] = [];
            re[SPRITE.FIR][SPRITE.DAY] = [];
            re[SPRITE.FIR][SPRITE.NIGHT] = [];
            re[SPRITE.FIR][SPRITE.DAY].push(Y(Ni(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
            re[SPRITE.FIR][SPRITE.DAY].push(Y(bi(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
            re[SPRITE.FIR][SPRITE.DAY].push(Y(Ci(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
            re[SPRITE.FIR][SPRITE.NIGHT].push(Y(Ni(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
            re[SPRITE.FIR][SPRITE.NIGHT].push(Y(bi(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
            re[SPRITE.FIR][SPRITE.NIGHT].push(Y(Ci(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
            re[SPRITE.DRAGON] = [];
            re[SPRITE.DRAGON][SPRITE.DAY] = Y(fi(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
            re[SPRITE.DRAGON][SPRITE.NIGHT] = Y(fi(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
            re[SPRITE.WING_LEFT] = [];
            re[SPRITE.WING_LEFT][SPRITE.DAY] = Y(zi(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
            re[SPRITE.WING_LEFT][SPRITE.NIGHT] = Y(zi(1, ["#050505", "#327570", "#021724", "#200333"]));
            re[SPRITE.WING_RIGHT] = [];
            re[SPRITE.WING_RIGHT][SPRITE.DAY] = Y(Bi(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
            re[SPRITE.WING_RIGHT][SPRITE.NIGHT] = Y(Bi(1, ["#050505", "#327570", "#021724", "#200333"]));
            re[SPRITE.DECORATION] = [];
            re[SPRITE.DECORATION][SPRITE.DAY] = [];
            re[SPRITE.DECORATION][SPRITE.NIGHT] = [];
            re[SPRITE.DECORATION][SPRITE.DAY] = [S.DECORATION_0D, S.DECORATION_1D, S.DECORATION_2D, S.DECORATION_3D, S.DECORATION_4D, S.DECORATION_5D, S.DECORATION_6D, S.DECORATION_7D, S.DECORATION_8D, S.DECORATION_9D, S.DECORATION_10D, S.DECORATION_11D, S.DECORATION_12D, S.DECORATION_13D, S.DECORATION_14D, S.DECORATION_15D, S.DECORATION_16D, S.DECORATION_17D, S.DECORATION_18D, S.DECORATION_19D, S.DECORATION_20D, S.DECORATION_21D, S.DECORATION_22D, S.DECORATION_23D, S.DECORATION_24D, S.DECORATION_25D, S.DECORATION_26D, S.DECORATION_27D, S.DECORATION_28D, S.DECORATION_29D, S.DECORATION_30D, S.DECORATION_31D, S.DECORATION_32D, S.DECORATION_33D, S.DECORATION_34D, S.DECORATION_35D, S.DECORATION_36D, S.DECORATION_37D, S.DECORATION_38D, S.DECORATION_39D, S.DECORATION_40D, S.DECORATION_41D, S.DECORATION_42D, S.DECORATION_43D, S.DECORATION_44D, S.DECORATION_45D, S.DECORATION_46D, S.DECORATION_47D, S.DECORATION_48D, S.DECORATION_49D, S.DECORATION_50D, S.DECORATION_51D, S.DECORATION_52D, S.DECORATION_53D, S.DECORATION_54D, S.DECORATION_55D];
            re[SPRITE.DECORATION][SPRITE.NIGHT] = [S.DECORATION_0N, S.DECORATION_1N, S.DECORATION_2N, S.DECORATION_3N, S.DECORATION_4N, S.DECORATION_5N, S.DECORATION_6N, S.DECORATION_7N, S.DECORATION_8N, S.DECORATION_9N, S.DECORATION_10N, S.DECORATION_11N, S.DECORATION_12N, S.DECORATION_13N, S.DECORATION_14N, S.DECORATION_15N, S.DECORATION_16N, S.DECORATION_17N, S.DECORATION_18N, S.DECORATION_19N, S.DECORATION_20N, S.DECORATION_21N, S.DECORATION_22N, S.DECORATION_23N, S.DECORATION_24N, S.DECORATION_25N, S.DECORATION_26N, S.DECORATION_27N, S.DECORATION_28N, S.DECORATION_29N, S.DECORATION_30N, S.DECORATION_31N, S.DECORATION_32N, S.DECORATION_33N, S.DECORATION_34N, S.DECORATION_35N, S.DECORATION_36N, S.DECORATION_37N, S.DECORATION_38N, S.DECORATION_39N, S.DECORATION_40N, S.DECORATION_41N, S.DECORATION_42N, S.DECORATION_43N, S.DECORATION_44N, S.DECORATION_45N, S.DECORATION_46N, S.DECORATION_47N, S.DECORATION_48N, S.DECORATION_49N, S.DECORATION_50N, S.DECORATION_51N, S.DECORATION_52N, S.DECORATION_53N, S.DECORATION_54N, S.DECORATION_55N];
            re[SPRITE.CAVE_STONES] = [];
            re[SPRITE.CAVE_STONES][SPRITE.DAY] = [];
            re[SPRITE.CAVE_STONES][SPRITE.NIGHT] = [];
            re[SPRITE.CAVE_STONES][SPRITE.DAY].push(Y(ct(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
            re[SPRITE.CAVE_STONES][SPRITE.DAY].push(Y(ct(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
            re[SPRITE.CAVE_STONES][SPRITE.DAY].push(Y(ct(1, false, ["#252B28", "#747471", "#83827e"], 2)));
            re[SPRITE.CAVE_STONES][SPRITE.DAY].push(Y(ct(0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
            re[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(Y(ct(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
            re[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(Y(ct(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
            re[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(Y(ct(1, false, ["#030d14", "#123335", "#183f3f"], 2)));
            re[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(Y(ct(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
            re[SPRITE.SHADOW_CAVE_STONES] = [];
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY] = [];
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT] = [];
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(Y(ct(1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(Y(ct(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(Y(ct(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(Y(ct(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(Y(ct(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(Y(ct(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(Y(ct(1, true, ["#030d14", "#123335", "#183f3f"], 2)));
            re[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(Y(ct(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
            re[SPRITE.GOLD_WINTER] = [];
            re[SPRITE.GOLD_WINTER][SPRITE.DAY] = [];
            re[SPRITE.GOLD_WINTER][SPRITE.NIGHT] = [];
            re[SPRITE.GOLD_WINTER][SPRITE.DAY].push(Y(vt(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
            re[SPRITE.GOLD_WINTER][SPRITE.DAY].push(Y(vt(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
            re[SPRITE.GOLD_WINTER][SPRITE.DAY].push(Y(vt(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
            re[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(Y(vt(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
            re[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(Y(vt(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
            re[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(Y(vt(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
            re[SPRITE.DIAMOND_WINTER] = [];
            re[SPRITE.DIAMOND_WINTER][SPRITE.DAY] = [];
            re[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT] = [];
            re[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(Y(Pt(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
            re[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(Y(Pt(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
            re[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(Y(Pt(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
            re[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(Y(Pt(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
            re[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(Y(Pt(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
            re[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(Y(Pt(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
            re[ItemType.AMETHYST] = [];
            re[ItemType.AMETHYST][SPRITE.DAY] = [];
            re[ItemType.AMETHYST][SPRITE.NIGHT] = [];
            re[ItemType.AMETHYST][SPRITE.DAY].push(Y(Di(1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
            re[ItemType.AMETHYST][SPRITE.DAY].push(Y(Di(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
            re[ItemType.AMETHYST][SPRITE.DAY].push(Y(Di(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
            re[ItemType.AMETHYST][SPRITE.NIGHT].push(Y(Di(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
            re[ItemType.AMETHYST][SPRITE.NIGHT].push(Y(Di(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
            re[ItemType.AMETHYST][SPRITE.NIGHT].push(Y(Di(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
            re[SPRITE.WATERBLOCK] = [];
            re[SPRITE.WATERBLOCK][SPRITE.DAY] = [];
            re[SPRITE.WATERBLOCK][SPRITE.NIGHT] = [];
            re[SPRITE.WATERBLOCK][SPRITE.DAY].push(Y(mi(1, ["#2d53c4"])));
            re[SPRITE.WATERBLOCK][SPRITE.NIGHT].push(Y(mi(1, ["#2d53c4"])));
            re[SPRITE.ISLAND_BLOCK] = [];
            re[SPRITE.ISLAND_BLOCK][SPRITE.DAY] = [];
            re[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT] = [];
            re[SPRITE.ISLAND_BLOCK][SPRITE.DAY].push(Y(mi(1, ["#c4912d"])));
            re[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT].push(Y(mi(1, ["#c4912d"])));
            re[SPRITE.CAVE_STEP] = [];
            re[SPRITE.CAVE_STEP][SPRITE.DAY] = Y(Li(1, ["#414040"]));
            re[SPRITE.CAVE_STEP][SPRITE.NIGHT] = Y(Li(1, ["#153635"]));
            re[SPRITE.FOX] = [];
            re[SPRITE.FOX][SPRITE.DAY] = Y(Hi(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
            re[SPRITE.FOX][SPRITE.NIGHT] = Y(Hi(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
            re[SPRITE.BEAR] = [];
            re[SPRITE.BEAR][SPRITE.DAY] = Y(wi(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
            re[SPRITE.BEAR][SPRITE.NIGHT] = Y(wi(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
            re[SPRITE.MINIMAP] = [];
            re[SPRITE.MINIMAP_CTX] = [];
            re[SPRITE.BIGMAP] = [];
            re[SPRITE.BIGMAP_CTX] = [];
            for (e = 0; e < 2; e++) {
            re[SPRITE.MINIMAP][e] = window.document.createElement("canvas");
            re[SPRITE.MINIMAP][e].width = 193;
            re[SPRITE.MINIMAP][e].height = 193;
            re[SPRITE.MINIMAP_CTX][e] = re[SPRITE.MINIMAP][e].getContext("2d");
            re[SPRITE.BIGMAP][e] = window.document.createElement("canvas");
            re[SPRITE.BIGMAP][e].width = 600;
            re[SPRITE.BIGMAP][e].height = 600;
            re[SPRITE.BIGMAP_CTX][e] = re[SPRITE.BIGMAP][e].getContext("2d");
            }
            re[SPRITE.SNOW_STEP] = [];
            re[SPRITE.SNOW_STEP][SPRITE.DAY] = Y(Li(1, ["#c8e0de"]));
            re[SPRITE.SNOW_STEP][SPRITE.NIGHT] = Y(Li(1, ["#147071"]));
            re[SPRITE.LAVA_STEP] = [];
            re[SPRITE.LAVA_STEP][SPRITE.DAY] = Y(Li(1, ["#231912"]));
            re[SPRITE.LAVA_STEP][SPRITE.NIGHT] = Y(Li(1, ["#021719"]));
            re[SPRITE.HURT_TREASURE_CHEST] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 253;
            i.height = e * 192;
            o.save();
            o.translate(e * 37, e * 94);
            Re(o, e * -7, e * -20, e * 14, e * 37, e * 20);
            o.restore();
            se(o, t[0]);
            o.save();
            o.translate(e * 131, e * 94);
            Re(o, e * -84, e * -67, e * 168, e * 134, e * 20);
            o.restore();
            se(o, t[0], t[0], e * 13);
            o.save();
            o.translate(e * 223, e * 94.5);
            Re(o, e * -5, e * -18.5, e * 10, e * 37, e * 20);
            o.restore();
            se(o, t[0]);
            o.save();
            o.translate(e * 128.5, e * 170.5);
            Re(o, e * -22.5, e * -6.5, e * 45, e * 13, e * 20);
            o.restore();
            se(o, t[0]);
            return i;
            }, 2)(0.5, ["#BB0000"]));
            re[SPRITE.HURT_FOX] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 161;
            i.height = e * 190;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 9, e * 93);
            o.bezierCurveTo(e * 17, e * 95, e * 19, e * 95, e * 21, e * 95);
            o.bezierCurveTo(e * 9, e * 83, e * 17, e * 93, e * 4, e * 76);
            o.bezierCurveTo(e * 11, e * 75, e * 11, e * 75, e * 18, e * 75);
            o.bezierCurveTo(e * 13, e * 67, e * 13, e * 67, e * 7, e * 59);
            o.bezierCurveTo(e * 14, e * 59, e * 14, e * 59, e * 21, e * 59);
            o.bezierCurveTo(e * 46, e * 35, e * 35, e * 45, e * 49, e * 31);
            o.bezierCurveTo(e * 53, e * 24, e * 51, e * 21, e * 51, e * 16);
            o.bezierCurveTo(e * 63, e * 23, e * 63, e * 24, e * 69, e * 29);
            o.bezierCurveTo(e * 76, e * 7, e * 75, e * 11, e * 76, e * 6);
            o.bezierCurveTo(e * 81, e * 12, e * 84, e * 18, e * 89, e * 27);
            o.bezierCurveTo(e * 95, e * 25, e * 100, e * 16, e * 105, e * 14);
            o.bezierCurveTo(e * 103, e * 25, e * 111, e * 33, e * 110, e * 34);
            o.bezierCurveTo(e * 123, e * 48, e * 123, e * 48, e * 136, e * 62);
            o.bezierCurveTo(e * 142, e * 60, e * 147, e * 59, e * 155, e * 58);
            o.bezierCurveTo(e * 147, e * 65, e * 147, e * 65, e * 139, e * 73);
            o.bezierCurveTo(e * 145, e * 73, e * 145, e * 73, e * 151, e * 73);
            o.bezierCurveTo(e * 145, e * 80, e * 145, e * 80, e * 138, e * 87);
            o.bezierCurveTo(e * 144, e * 88, e * 144, e * 88, e * 150, e * 89);
            o.bezierCurveTo(e * 125, e * 103, e * 125, e * 125, e * 113, e * 141);
            o.bezierCurveTo(e * 92, e * 178, e * 85, e * 177, e * 76, e * 178);
            o.bezierCurveTo(e * 64, e * 179, e * 51, e * 164, e * 35, e * 131);
            o.bezierCurveTo(e * 18, e * 95, e * 13, e * 99, e * 8, e * 93);
            o.closePath();
            se(o, t, t, e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 25, e * 63);
            o.bezierCurveTo(e * 16, e * 58, e * 17, e * 51, e * 17, e * 33);
            o.bezierCurveTo(e * 19, e * 12, e * 21, e * 12, e * 32, e * 17);
            o.bezierCurveTo(e * 63, e * 31, e * 66, e * 45, e * 66, e * 54);
            se(o, t, t, e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 91, e * 53);
            o.bezierCurveTo(e * 91, e * 40, e * 98, e * 33, e * 121, e * 20);
            o.bezierCurveTo(e * 137, e * 12, e * 137, e * 16, e * 139, e * 27);
            o.bezierCurveTo(e * 141, e * 49, e * 140, e * 57, e * 134, e * 64);
            se(o, t, t, e * 4);
            return i;
            }, 2)(0.9, "#BB0000"));
            re[SPRITE.HURT_BEAR] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 147;
            i.height = e * 172;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 8, e * 50);
            o.bezierCurveTo(e * 15, e * 16, e * 49, e * 6, e * 67, e * 6);
            o.bezierCurveTo(e * 121, e * 3, e * 128, e * 32, e * 135, e * 48);
            o.bezierCurveTo(e * 146, e * 96, e * 124, e * 131, e * 96, e * 135);
            o.bezierCurveTo(e * 96, e * 158, e * 79, e * 156, e * 75, e * 156);
            o.bezierCurveTo(e * 50, e * 154, e * 53, e * 150, e * 52, e * 135);
            o.bezierCurveTo(e * 2, e * 127, e * 3, e * 87, e * 8, e * 50);
            o.closePath();
            se(o, t, t, e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 14, e * 57);
            o.bezierCurveTo(e * 2, e * 50, e * 5, e * 22, e * 24, e * 22);
            o.bezierCurveTo(e * 41, e * 21, e * 54, e * 32, e * 55, e * 48);
            se(o, t, t, e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 93, e * 47);
            o.bezierCurveTo(e * 94, e * 24, e * 116, e * 21, e * 120, e * 20);
            o.bezierCurveTo(e * 144, e * 17, e * 146, e * 52, e * 133, e * 58);
            se(o, t, t, e * 4);
            return i;
            }, 2)(0.9, "#BB0000"));
            re[SPRITE.HURT_DRAGON] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 271;
            i.height = e * 366;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 133, e * 99);
            o.bezierCurveTo(e * 186, e * 123, e * 199, e * 152, e * 209, e * 169);
            o.bezierCurveTo(e * 228, e * 205, e * 224, e * 245, e * 190, e * 276);
            o.bezierCurveTo(e * 161, e * 296, e * 99, e * 292, e * 79, e * 274);
            o.bezierCurveTo(e * 49, e * 253, e * 47, e * 214, e * 50, e * 197);
            o.bezierCurveTo(e * 61, e * 143, e * 102, e * 113, e * 131, e * 99);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 73, e * 270);
            o.bezierCurveTo(e * 79, e * 280, e * 77, e * 280, e * 78, e * 287);
            o.bezierCurveTo(e * 78, e * 290, e * 83, e * 291, e * 82, e * 299);
            o.bezierCurveTo(e * 81, e * 301, e * 87, e * 301, e * 92, e * 314);
            o.bezierCurveTo(e * 94, e * 319, e * 100, e * 321, e * 107, e * 320);
            o.bezierCurveTo(e * 111, e * 323, e * 114, e * 324, e * 119, e * 320);
            o.bezierCurveTo(e * 137, e * 321, e * 146, e * 323, e * 139, e * 320);
            o.bezierCurveTo(e * 141, e * 324, e * 150, e * 324, e * 153, e * 320);
            o.bezierCurveTo(e * 168, e * 319, e * 171, e * 316, e * 173, e * 307);
            o.bezierCurveTo(e * 180, e * 305, e * 180, e * 301, e * 178, e * 296);
            o.bezierCurveTo(e * 183, e * 296, e * 185, e * 289, e * 188, e * 279);
            o.bezierCurveTo(e * 171, e * 286, e * 149, e * 290, e * 132, e * 289);
            o.bezierCurveTo(e * 101, e * 290, e * 86, e * 280, e * 74, e * 271);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 76, e * 252);
            o.bezierCurveTo(e * 85, e * 294, e * 96, e * 314, e * 103, e * 314);
            o.bezierCurveTo(e * 106, e * 316, e * 151, e * 314, e * 156, e * 314);
            o.bezierCurveTo(e * 169, e * 317, e * 182, e * 285, e * 191, e * 256);
            o.bezierCurveTo(e * 134.5, e * 254, e * 134.5, e * 254, e * 78, e * 252);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 84, e * 257);
            o.bezierCurveTo(e * 122, e * 273, e * 146, e * 268, e * 179, e * 261);
            o.bezierCurveTo(e * 190, e * 258, e * 187, e * 266, e * 178, e * 272);
            o.bezierCurveTo(e * 160, e * 284, e * 123, e * 282, e * 100, e * 277);
            o.bezierCurveTo(e * 73, e * 260, e * 79, e * 257, e * 84, e * 257);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 125, e * 65);
            o.bezierCurveTo(e * 133, e * 45, e * 136, e * 42, e * 141, e * 55);
            o.bezierCurveTo(e * 151, e * 96, e * 164, e * 117, e * 175, e * 134);
            o.bezierCurveTo(e * 203, e * 181, e * 207, e * 182, e * 208, e * 215);
            o.bezierCurveTo(e * 206, e * 240, e * 205, e * 246, e * 184, e * 258);
            o.bezierCurveTo(e * 161, e * 267, e * 131, e * 272, e * 86, e * 258);
            o.bezierCurveTo(e * 67, e * 252, e * 68, e * 239, e * 64, e * 216);
            o.bezierCurveTo(e * 62, e * 194, e * 72, e * 169, e * 92, e * 142);
            o.bezierCurveTo(e * 106, e * 121, e * 114, e * 101, e * 125, e * 65);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 115, e * 37);
            o.bezierCurveTo(e * 116, e * 28, e * 119, e * 27, e * 126, e * 37);
            o.bezierCurveTo(e * 134, e * 48, e * 134, e * 49, e * 132, e * 59);
            o.bezierCurveTo(e * 131, e * 67, e * 127, e * 65, e * 120, e * 56);
            o.bezierCurveTo(e * 114, e * 49, e * 113, e * 43, e * 115, e * 38);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 146, e * 34);
            o.bezierCurveTo(e * 152, e * 28, e * 155, e * 27, e * 157, e * 39);
            o.bezierCurveTo(e * 157, e * 45, e * 157, e * 49, e * 150, e * 56);
            o.bezierCurveTo(e * 141, e * 66, e * 138, e * 66, e * 138, e * 57);
            o.bezierCurveTo(e * 137, e * 50, e * 137, e * 47, e * 141, e * 42);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 143, e * 69);
            o.bezierCurveTo(e * 148, e * 56, e * 156, e * 50, e * 158, e * 58);
            o.bezierCurveTo(e * 159, e * 64, e * 160, e * 67, e * 153, e * 77);
            o.bezierCurveTo(e * 148, e * 83, e * 145, e * 84, e * 143, e * 77);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 149, e * 92);
            o.bezierCurveTo(e * 149, e * 89, e * 151, e * 84, e * 156, e * 79);
            o.bezierCurveTo(e * 161, e * 73, e * 163, e * 78, e * 162, e * 86);
            o.bezierCurveTo(e * 161, e * 91, e * 155, e * 99, e * 152, e * 98);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 111, e * 61);
            o.bezierCurveTo(e * 114, e * 51, e * 117, e * 51, e * 124, e * 64);
            o.bezierCurveTo(e * 128, e * 68, e * 128, e * 76, e * 126, e * 79);
            o.bezierCurveTo(e * 123, e * 84, e * 122, e * 82, e * 115, e * 74);
            o.bezierCurveTo(e * 112, e * 67, e * 115, e * 74, e * 115, e * 74);
            o.bezierCurveTo(e * 111, e * 68, e * 111, e * 66, e * 111, e * 62);
            o.closePath();
            se(o, t[0]);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 107, e * 81);
            o.bezierCurveTo(e * 108, e * 74, e * 112, e * 73, e * 118, e * 84);
            o.bezierCurveTo(e * 122, e * 88, e * 122, e * 93, e * 121, e * 98);
            o.bezierCurveTo(e * 114, e * 98, e * 113, e * 98, e * 109, e * 90);
            o.bezierCurveTo(e * 107, e * 87, e * 106, e * 85, e * 107, e * 82);
            o.closePath();
            se(o, t[0]);
            return i;
            }, 2)(1, ["#BB0000"]));
            re[SPRITE.HURT_WING_LEFT] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 85;
            i.height = e * 145;
            o.translate(e * -20, e * -95);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 50, e * 105);
            o.bezierCurveTo(e * 52, e * 119, e * 64, e * 137, e * 71, e * 146);
            o.bezierCurveTo(e * 71, e * 161, e * 74, e * 169, e * 79, e * 179);
            o.bezierCurveTo(e * 68, e * 192, e * 70, e * 204, e * 69, e * 216);
            o.bezierCurveTo(e * 50, e * 189.5, e * 50, e * 189.5, e * 31, e * 163);
            o.closePath();
            se(o, t);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 44, e * 106);
            o.bezierCurveTo(e * 49, e * 90, e * 58, e * 104, e * 51, e * 121);
            o.bezierCurveTo(e * 45, e * 143, e * 41, e * 151, e * 37, e * 162);
            o.bezierCurveTo(e * 48, e * 180, e * 58, e * 188, e * 76, e * 205);
            o.bezierCurveTo(e * 104, e * 209, e * 105, e * 229, e * 92, e * 235);
            o.bezierCurveTo(e * 76, e * 239, e * 75, e * 232, e * 56, e * 213);
            o.bezierCurveTo(e * 31, e * 187, e * 28, e * 176, e * 23, e * 162);
            o.bezierCurveTo(e * 38, e * 131, e * 40, e * 120, e * 44, e * 106);
            o.closePath();
            se(o, t, t, e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 30, e * 159);
            o.bezierCurveTo(e * 46, e * 157, e * 59, e * 152, e * 68, e * 148);
            o.bezierCurveTo(e * 63, e * 155, e * 52, e * 160, e * 44, e * 164);
            o.bezierCurveTo(e * 59, e * 169, e * 66, e * 174, e * 75, e * 178);
            o.bezierCurveTo(e * 58, e * 178, e * 49, e * 175, e * 37, e * 174);
            o.closePath();
            se(o, t);
            return i;
            }, 2)(0.8, "#BB0000"));
            re[SPRITE.HURT_WING_RIGHT] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 85;
            i.height = e * 145;
            o.translate(e * -165, e * -95);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 217, e * 103);
            o.bezierCurveTo(e * 209, e * 129, e * 203, e * 137, e * 195, e * 146);
            o.bezierCurveTo(e * 195, e * 159, e * 194, e * 167, e * 189, e * 178);
            o.bezierCurveTo(e * 193, e * 186, e * 196, e * 195, e * 198, e * 216);
            o.bezierCurveTo(e * 217.5, e * 189.5, e * 217.5, e * 189.5, e * 237, e * 163);
            o.closePath();
            se(o, t);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 231, e * 163);
            o.bezierCurveTo(e * 221, e * 139, e * 218, e * 128, e * 215, e * 114);
            o.bezierCurveTo(e * 213, e * 102, e * 220, e * 92, e * 222, e * 107);
            o.bezierCurveTo(e * 224, e * 118, e * 233, e * 138, e * 244, e * 161);
            o.bezierCurveTo(e * 235, e * 188, e * 224, e * 198, e * 204, e * 221);
            o.bezierCurveTo(e * 190, e * 233, e * 190, e * 235, e * 180, e * 235);
            o.bezierCurveTo(e * 167, e * 235, e * 164, e * 216, e * 175, e * 211);
            o.bezierCurveTo(e * 176, e * 208, e * 181, e * 207, e * 191, e * 205);
            o.bezierCurveTo(e * 213, e * 186, e * 218, e * 180, e * 230, e * 163);
            o.closePath();
            se(o, t, t, e * 4);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 234, e * 154);
            o.bezierCurveTo(e * 227, e * 156, e * 222, e * 156, e * 199, e * 148);
            o.bezierCurveTo(e * 201, e * 151, e * 216, e * 159, e * 224, e * 162);
            o.bezierCurveTo(e * 209, e * 169.5, e * 209, e * 169.5, e * 194, e * 177);
            o.bezierCurveTo(e * 213.5, e * 175, e * 213.5, e * 175, e * 233, e * 173);
            o.closePath();
            se(o, t);
            return i;
            }, 2)(0.8, "#BB0000"));
            re[SPRITE.HURT_RABBIT] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            var T = e * 85;
            var r = e * 115;
            var n = e * 4;
            i.width = T;
            i.height = r;
            o.translate(e * -130, e * -60);
            o.globalAlpha = 1;
            o.beginPath();
            o.bezierCurveTo(e * 190, e * 87, e * 201, e * 59, e * 208, e * 64);
            o.bezierCurveTo(e * 213, e * 68, e * 204, e * 93, e * 195, e * 109);
            o.bezierCurveTo(e * 195, e * 109, e * 202, e * 124, e * 191, e * 141);
            o.bezierCurveTo(e * 182, e * 151, e * 164, e * 155, e * 148, e * 144);
            o.bezierCurveTo(e * 136, e * 135, e * 138, e * 111, e * 145, e * 104);
            o.bezierCurveTo(e * 140, e * 92, e * 131, e * 67, e * 138, e * 63);
            o.bezierCurveTo(e * 145, e * 61, e * 153, e * 82, e * 155, e * 96);
            o.bezierCurveTo(e * 167, e * 91, e * 178, e * 92, e * 187, e * 98);
            o.closePath();
            se(o, t, t, n);
            return i;
            }, 2)(0.9, "#BB0000"));
            re[SPRITE.HURT] = Y(le(0.6, "#BB0000"));
            re[SPRITE.COLD] = Y(le(0.6, "#1CE7E0"));
            re[SPRITE.HUNGER] = Y(le(0.6, "#DBE71C"));
            re[SPRITE.HEAL] = Y(le(0.6, "#00BB00"));
            re[SPRITE.SAND_STEP] = [];
            re[SPRITE.SAND_STEP][SPRITE.DAY] = Y(Li(1, ["#dac291"]));
            re[SPRITE.SAND_STEP][SPRITE.NIGHT] = Y(Li(1, ["#0D423D"]));
            re[SPRITE.ISLAND_STEP] = [];
            re[SPRITE.ISLAND_STEP][SPRITE.DAY] = Y(Li(1, ["#dac291"]));
            re[SPRITE.ISLAND_STEP][SPRITE.NIGHT] = Y(Li(1, ["#0D423D"]));
            re[SPRITE.WELL_FULL] = [];
            re[SPRITE.WELL_FULL][SPRITE.DAY] = Y(lo(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
            re[SPRITE.WELL_FULL][SPRITE.NIGHT] = Y(lo(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
            re[ItemType.WELL] = [];
            re[ItemType.WELL][SPRITE.DAY] = Y(lo(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
            re[ItemType.WELL][SPRITE.NIGHT] = Y(lo(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
            re[ItemType.BOTTLE_FULL] = [Y(Mo(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
            re[ItemType.BOTTLE_EMPTY] = [Y(Mo(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
            re[SPRITE.OCEAN] = [];
            re[SPRITE.OCEAN][SPRITE.DAY] = [];
            re[SPRITE.OCEAN][SPRITE.NIGHT] = [];
            re[SPRITE.OCEAN][SPRITE.DAY].push(Y(ci(1, ["#0B6A84"])));
            re[SPRITE.OCEAN][SPRITE.DAY].push(Y(vi(1, ["#0B6A84"])));
            re[SPRITE.OCEAN][SPRITE.DAY].push(Y(Pi(1, ["#0B6A84"])));
            re[SPRITE.OCEAN][SPRITE.DAY].push(Y(yi(1, ["#0B6A84"])));
            re[SPRITE.OCEAN][SPRITE.DAY].push(Y(pi(1, ["#0B6A84"])));
            re[SPRITE.OCEAN][SPRITE.DAY].push(Y(gi(1, ["#0B6A84"])));
            re[SPRITE.OCEAN][SPRITE.DAY].push(Y(Mi(1, ["#0B6A84"])));
            re[SPRITE.OCEAN][SPRITE.NIGHT].push(Y(ci(1, ["#09373F"])));
            re[SPRITE.OCEAN][SPRITE.NIGHT].push(Y(vi(1, ["#09373F"])));
            re[SPRITE.OCEAN][SPRITE.NIGHT].push(Y(Pi(1, ["#09373F"])));
            re[SPRITE.OCEAN][SPRITE.NIGHT].push(Y(yi(1, ["#09373F"])));
            re[SPRITE.OCEAN][SPRITE.NIGHT].push(Y(pi(1, ["#09373F"])));
            re[SPRITE.OCEAN][SPRITE.NIGHT].push(Y(gi(1, ["#09373F"])));
            re[SPRITE.OCEAN][SPRITE.NIGHT].push(Y(Mi(1, ["#09373F"])));
            re[SPRITE.ISLAND] = [];
            re[SPRITE.ISLAND][SPRITE.DAY] = [];
            re[SPRITE.ISLAND][SPRITE.NIGHT] = [];
            re[SPRITE.ISLAND][SPRITE.DAY].push(Y(li(1.7, ["#FBEFBC"], 0)));
            re[SPRITE.ISLAND][SPRITE.DAY].push(Y(li(1.9, ["#FBEFBC"], 1)));
            re[SPRITE.ISLAND][SPRITE.DAY].push(Y(li(1.7, ["#FBEFBC"], 2)));
            re[SPRITE.ISLAND][SPRITE.NIGHT].push(Y(li(1.7, ["#0F4C48"], 0)));
            re[SPRITE.ISLAND][SPRITE.NIGHT].push(Y(li(1.9, ["#0F4C48"], 1)));
            re[SPRITE.ISLAND][SPRITE.NIGHT].push(Y(li(1.7, ["#0F4C48"], 2)));
            re[SPRITE.WAVE_ONE] = [];
            re[SPRITE.WAVE_ONE][SPRITE.DAY] = [];
            re[SPRITE.WAVE_ONE][SPRITE.NIGHT] = [];
            re[SPRITE.WAVE_ONE][SPRITE.DAY].push(Y(li(1.8, ["#A9D6D3"], 0)));
            re[SPRITE.WAVE_ONE][SPRITE.DAY].push(Y(li(2, ["#A9D6D3"], 1)));
            re[SPRITE.WAVE_ONE][SPRITE.DAY].push(Y(li(1.8, ["#A9D6D3"], 2)));
            re[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(Y(li(1.8, ["#115E60"], 0)));
            re[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(Y(li(2, ["#115E60"], 1)));
            re[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(Y(li(1.8, ["#115E60"], 2)));
            re[SPRITE.WAVE_TWO] = [];
            re[SPRITE.WAVE_TWO][SPRITE.DAY] = [];
            re[SPRITE.WAVE_TWO][SPRITE.NIGHT] = [];
            re[SPRITE.WAVE_TWO][SPRITE.DAY].push(Y(li(1.9, ["#2A8B9B"], 0)));
            re[SPRITE.WAVE_TWO][SPRITE.DAY].push(Y(li(2.1, ["#2A8B9B"], 1)));
            re[SPRITE.WAVE_TWO][SPRITE.DAY].push(Y(li(1.9, ["#2A8B9B"], 2)));
            re[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(Y(li(1.9, ["#0F464C"], 0)));
            re[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(Y(li(2.1, ["#0F464C"], 1)));
            re[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(Y(li(1.9, ["#0F464C"], 2)));
            re[SPRITE.PALM] = [];
            re[SPRITE.PALM][SPRITE.DAY] = [];
            re[SPRITE.PALM][SPRITE.NIGHT] = [];
            re[SPRITE.PALM][SPRITE.DAY].push(Y(Vt(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
            re[SPRITE.PALM][SPRITE.DAY].push(Y(Vt(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
            re[SPRITE.PALM][SPRITE.DAY].push(Y(Vt(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
            re[SPRITE.PALM][SPRITE.NIGHT].push(Y(Vt(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
            re[SPRITE.PALM][SPRITE.NIGHT].push(Y(Vt(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
            re[SPRITE.PALM][SPRITE.NIGHT].push(Y(Vt(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
            re[SPRITE.KRAKEN] = [];
            re[SPRITE.KRAKEN][SPRITE.DAY] = Y(so(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
            re[SPRITE.KRAKEN][SPRITE.NIGHT] = Y(so(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
            re[SPRITE.HURT_KRAKEN] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 376;
            i.height = e * 371;
            o.globalAlpha = 1;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 191.633544921875, e * 123.98580932617188);
            o.bezierCurveTo(e * 215.633544921875, e * 85.98580932617188, e * 187.633544921875, e * 71.98580932617188, e * 202.633544921875, e * 19.985809326171875);
            o.bezierCurveTo(e * 231.633544921875, e * 68.98580932617188, e * 253.633544921875, e * 71.98580932617188, e * 256.633544921875, e * 93.98580932617188);
            o.bezierCurveTo(e * 306.633544921875, e * 64.98580932617188, e * 319.633544921875, e * 61.985809326171875, e * 350.633544921875, e * 58.985809326171875);
            o.bezierCurveTo(e * 280.633544921875, e * 86.98580932617188, e * 281.633544921875, e * 106.98580932617188, e * 268.633544921875, e * 130.98580932617188);
            o.bezierCurveTo(e * 295.633544921875, e * 158.98580932617188, e * 328.633544921875, e * 155.98580932617188, e * 353.633544921875, e * 90.98580932617188);
            o.bezierCurveTo(e * 371.633544921875, e * 158.98580932617188, e * 337.633544921875, e * 210.98580932617188, e * 286.633544921875, e * 209.98580932617188);
            o.bezierCurveTo(e * 323.633544921875, e * 230.98580932617188, e * 317.633544921875, e * 274.9858093261719, e * 356.633544921875, e * 305.9858093261719);
            o.bezierCurveTo(e * 288.633544921875, e * 297.9858093261719, e * 288.633544921875, e * 265.9858093261719, e * 275.633544921875, e * 266.9858093261719);
            o.bezierCurveTo(e * 280.633544921875, e * 294.9858093261719, e * 315.633544921875, e * 306.9858093261719, e * 336.633544921875, e * 316.9858093261719);
            o.bezierCurveTo(e * 295.633544921875, e * 318.9858093261719, e * 264.633544921875, e * 302.9858093261719, e * 254.633544921875, e * 289.9858093261719);
            o.bezierCurveTo(e * 252.633544921875, e * 301.9858093261719, e * 224.633544921875, e * 315.9858093261719, e * 201.633544921875, e * 356.9858093261719);
            o.bezierCurveTo(e * 195.633544921875, e * 313.9858093261719, e * 195.633544921875, e * 308.9858093261719, e * 196.633544921875, e * 307.9858093261719);
            o.bezierCurveTo(e * 197.633544921875, e * 289.9858093261719, e * 207.633544921875, e * 283.9858093261719, e * 195.633544921875, e * 258.9858093261719);
            o.bezierCurveTo(e * 182.633544921875, e * 282.9858093261719, e * 190.633544921875, e * 287.9858093261719, e * 193.633544921875, e * 297.9858093261719);
            o.bezierCurveTo(e * 195.633544921875, e * 306.9858093261719, e * 191.633544921875, e * 334.9858093261719, e * 187.633544921875, e * 354.9858093261719);
            o.bezierCurveTo(e * 165.633544921875, e * 320.9858093261719, e * 138.633544921875, e * 307.9858093261719, e * 135.633544921875, e * 288.9858093261719);
            o.bezierCurveTo(e * 110.633544921875, e * 318.9858093261719, e * 68.633544921875, e * 323.9858093261719, e * 49.633544921875, e * 320.9858093261719);
            o.bezierCurveTo(e * 88.633544921875, e * 308.9858093261719, e * 108.633544921875, e * 284.9858093261719, e * 118.633544921875, e * 258.9858093261719);
            o.bezierCurveTo(e * 86.633544921875, e * 264.9858093261719, e * 75.633544921875, e * 310.9858093261719, e * 19.633544921875, e * 304.9858093261719);
            o.bezierCurveTo(e * 54.633544921875, e * 276.9858093261719, e * 59.633544921875, e * 214.98580932617188, e * 105.633544921875, e * 205.98580932617188);
            o.bezierCurveTo(e * 14.633544921875, e * 201.98580932617188, e * 24.633544921875, e * 141.98580932617188, e * 25.633544921875, e * 82.98580932617188);
            o.bezierCurveTo(e * 49.633544921875, e * 168.98580932617188, e * 87.633544921875, e * 141.98580932617188, e * 112.633544921875, e * 123.98580932617188);
            o.bezierCurveTo(e * 95.633544921875, e * 75.98580932617188, e * 70.633544921875, e * 68.98580932617188, e * 35.633544921875, e * 50.985809326171875);
            o.bezierCurveTo(e * 70.633544921875, e * 53.985809326171875, e * 102.633544921875, e * 65.98580932617188, e * 125.633544921875, e * 84.98580932617188);
            o.bezierCurveTo(e * 133.633544921875, e * 69.98580932617188, e * 166.633544921875, e * 42.985809326171875, e * 176.633544921875, e * 21.985809326171875);
            o.bezierCurveTo(e * 185.633544921875, e * 49.985809326171875, e * 168.633544921875, e * 95.98580932617188, e * 191.633544921875, e * 121.98580932617188);
            o.closePath();
            se(o, t[0], t[0], e * 12);
            return i;
            }, 2)(0.8, ["#B6222A"]));
            re[SPRITE.PIRANHA] = [];
            re[SPRITE.PIRANHA][SPRITE.DAY] = Y(Do(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
            re[SPRITE.PIRANHA][SPRITE.NIGHT] = Y(Do(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
            re[SPRITE.HURT_PIRANHA] = Y(__p_5863156023((e, t) => {
            var i = window.document.createElement("canvas");
            var o = i.getContext("2d");
            i.width = e * 158;
            i.height = e * 201;
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 96.5, e * 76.421875);
            o.bezierCurveTo(e * 100.5, e * 64.421875, e * 103.5, e * 62.421875, e * 110.5, e * 65.421875);
            o.bezierCurveTo(e * 116.5, e * 66.421875, e * 117.5, e * 67.421875, e * 112.5, e * 73.421875);
            o.bezierCurveTo(e * 107, e * 79.921875, e * 107, e * 79.921875, e * 101.5, e * 86.421875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 61.5, e * 78.421875);
            o.bezierCurveTo(e * 57.5, e * 73.421875, e * 51.5, e * 66.421875, e * 45.5, e * 68.421875);
            o.bezierCurveTo(e * 32.5, e * 73.421875, e * 38.5, e * 75.421875, e * 46.5, e * 81.421875);
            o.bezierCurveTo(e * 51.5, e * 84.921875, e * 51.5, e * 84.921875, e * 56.5, e * 88.421875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 116.5, e * 127.421875);
            o.bezierCurveTo(e * 124.5, e * 108.421875, e * 129.5, e * 104.421875, e * 141.5, e * 107.421875);
            o.bezierCurveTo(e * 156.5, e * 112.421875, e * 153.5, e * 113.421875, e * 132.5, e * 134.421875);
            o.bezierCurveTo(e * 123.5, e * 141.921875, e * 123.5, e * 141.921875, e * 114.5, e * 149.421875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 41.5, e * 134.421875);
            o.bezierCurveTo(e * 30.5, e * 119.421875, e * 25.5, e * 111.421875, e * 12.5, e * 115.421875);
            o.bezierCurveTo(e * 4.5, e * 120.421875, e * 4.5, e * 121.421875, e * 26.5, e * 142.421875);
            o.bezierCurveTo(e * 35, e * 149.921875, e * 35, e * 149.921875, e * 43.5, e * 157.421875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 78.5, e * 51.921875);
            o.bezierCurveTo(e * 99.5, e * 75.921875, e * 110.5, e * 96.921875, e * 118.5, e * 120.921875);
            o.bezierCurveTo(e * 121.5, e * 140.921875, e * 107.5, e * 179.921875, e * 75.5, e * 183.921875);
            o.bezierCurveTo(e * 30.5, e * 169.921875, e * 37.5, e * 131.921875, e * 34.5, e * 120.921875);
            o.bezierCurveTo(e * 41.5, e * 89.921875, e * 61.5, e * 67.921875, e * 78.5, e * 51.921875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 72.5, e * 72.421875);
            o.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
            o.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 42.5, e * 163.421875);
            o.bezierCurveTo(e * 62.5, e * 185.421875, e * 86.5, e * 186.421875, e * 111.5, e * 165.421875);
            o.bezierCurveTo(e * 107.5, e * 176.421875, e * 95.5, e * 187.421875, e * 75.5, e * 188.421875);
            o.bezierCurveTo(e * 53.5, e * 188.421875, e * 43.5, e * 171.421875, e * 42.5, e * 164.421875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 79.5, e * 61.421875);
            o.bezierCurveTo(e * 88.5, e * 31.421875, e * 81.5, e * 16.421875, e * 75.5, e * 7.421875);
            o.bezierCurveTo(e * 77.5, e * 28.421875, e * 77.5, e * 37.421875, e * 68.5, e * 42.421875);
            o.bezierCurveTo(e * 79.5, e * 57.421875, e * 79.5, e * 58.421875, e * 80.5, e * 61.421875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            o.beginPath();
            o.lineCap = "round";
            o.lineJoin = "round";
            o.moveTo(e * 72.5, e * 72.421875);
            o.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
            o.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
            o.closePath();
            se(o, t[0], t[0], e * 10);
            return i;
            }, 2)(0.8, ["#B6222A"]));
            re[ItemType.CRAB_LOOT] = Y($t(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
            re[ItemType.CRAB_STICK] = Y(dt(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
            re[SPRITE.CRAB_ATTACK] = [];
            re[SPRITE.CRAB_ATTACK][SPRITE.DAY] = Y(_t(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
            re[SPRITE.CRAB_ATTACK][SPRITE.NIGHT] = Y(_t(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
            re[SPRITE.CRAB] = [];
            re[SPRITE.CRAB][SPRITE.DAY] = Y(_t(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
            re[SPRITE.CRAB][SPRITE.NIGHT] = Y(_t(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
            re[SPRITE.CRAB_CLAW_LEFT] = [];
            re[SPRITE.CRAB_CLAW_LEFT][SPRITE.DAY] = Y(Rt(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
            re[SPRITE.CRAB_CLAW_LEFT][SPRITE.NIGHT] = Y(Rt(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
            re[SPRITE.CRAB_CLAW_RIGHT] = [];
            re[SPRITE.CRAB_CLAW_RIGHT][SPRITE.DAY] = Y(ht(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
            re[SPRITE.CRAB_CLAW_RIGHT][SPRITE.NIGHT] = Y(ht(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
            re[SPRITE.CRAB_CLAW_LEFT_ATTACK] = [];
            re[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.DAY] = Y(Rt(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
            re[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = Y(Rt(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
            re[SPRITE.CRAB_CLAW_RIGHT_ATTACK] = [];
            re[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.DAY] = Y(ht(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
            re[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = Y(ht(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
            re[SPRITE.HURT_CRAB] = Y(st(0.35, ["#B6222A"]));
            re[SPRITE.HURT_CRAB_CLAW_LEFT] = Y(Rt(0.35, 0, [undefined, "#B6222A"]));
            re[SPRITE.HURT_CRAB_CLAW_RIGHT] = Y(ht(0.35, 0, [undefined, "#B6222A"]));
            re[SPRITE.HEAL_CRAB] = Y(st(0.35, ["#22E066"]));
            re[SPRITE.HEAL_CRAB_CLAW_LEFT] = Y(Rt(0.35, 0, [undefined, "#22E066"]));
            re[SPRITE.HEAL_CRAB_CLAW_RIGHT] = Y(ht(0.35, 0, [undefined, "#22E066"]));
            re[ItemType.DIVING_MASK] = [];
            re[ItemType.DIVING_MASK][SPRITE.DAY] = Y(Ht(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
            re[ItemType.DIVING_MASK][SPRITE.NIGHT] = Y(Ht(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
            re[ItemType.SUPER_DIVING_SUIT] = [];
            re[ItemType.SUPER_DIVING_SUIT][SPRITE.DAY] = Y(wt(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
            re[ItemType.SUPER_DIVING_SUIT][SPRITE.NIGHT] = Y(wt(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
            re[ItemType.PLOT] = [];
            re[ItemType.PLOT][SPRITE.DAY] = Y(bo(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
            re[ItemType.PLOT][SPRITE.NIGHT] = Y(bo(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
            re[ItemType.BRIDGE] = [];
            re[ItemType.BRIDGE][SPRITE.DAY] = Y(Oo(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
            re[ItemType.BRIDGE][SPRITE.NIGHT] = Y(Oo(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
            re[ItemType.TOWER] = [];
            re[ItemType.TOWER][SPRITE.DAY] = S.WOOD_TOWERD;
            re[ItemType.TOWER][SPRITE.NIGHT] = S.WOOD_TOWERN;
            re[ItemType.ROOF] = [];
            re[ItemType.ROOF][SPRITE.DAY] = Y(Ne(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
            re[ItemType.ROOF][SPRITE.NIGHT] = Y(Ne(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
            re[SPRITE.ROOFS] = [re[ItemType.ROOF]];
            re[SPRITE.ROOFS][1] = [];
            re[SPRITE.ROOFS][2] = [];
            re[SPRITE.ROOFS][1][SPRITE.DAY] = Y(De(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
            re[SPRITE.ROOFS][1][SPRITE.NIGHT] = Y(De(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
            re[SPRITE.ROOFS][2][SPRITE.DAY] = Y(me(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
            re[SPRITE.ROOFS][2][SPRITE.NIGHT] = Y(me(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
            re[ItemType.WATERING_CAN_FULL] = [];
            re[ItemType.WATERING_CAN_FULL][SPRITE.DAY] = Y(Ae(3 - window.Math.PI / 2, No(0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
            re[ItemType.WATERING_CAN_FULL][SPRITE.NIGHT] = Y(Ae(3 - window.Math.PI / 2, No(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
            re[SPRITE.DEAD_BOX] = [];
            re[SPRITE.DEAD_BOX][SPRITE.DAY] = Y(Be(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
            re[SPRITE.DEAD_BOX][SPRITE.NIGHT] = Y(Be(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
            re[SPRITE.WINDMILL_FLOUR] = xe(1, [{
            f: mo,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
            }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
            re[ItemType.LAVA_HEART] = xe(1.5, [{
            f: oo,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
            }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
            re[SPRITE.HEART_SYMBOL_HUD] = zo(0.35, ["#072428", "#67A242", "#67A242"], 0);
            re[SPRITE.COLD_SYMBOL_HUD] = zo(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
            re[SPRITE.FOOD_SYMBOL_HUD] = zo(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
            re[SPRITE.WATER_SYMBOL_HUD] = zo(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
            re[SPRITE.LEADERBOARD] = Y(__p_5863156023(e => {
            var t = window.document.createElement("canvas");
            var i = t.getContext("2d");
            var o = e * 200;
            var T = e * 270;
            var r = e * 8;
            t.width = o;
            t.height = T + 20;
            i.beginPath();
            Re(i, 0, 0, o, T - r, r);
            i.globalAlpha = 0.5;
            se(i, "#1D6055");
            i.globalAlpha = 1;
            var n = Dt(e, "Leaderboard", 25, "#FFF");
            i.drawImage(n, (o - n.width) / 2, e * 5);
            return t;
            }, 1)(1));
            re[SPRITE.GAUGES] = Y(__p_5863156023(e => {
            var t = window.document.createElement("canvas");
            var i = t.getContext("2d");
            var o = e * 950;
            var T = e * 180;
            var r = e * 50;
            var n = e * 20;
            var a = e * 240;
            var I = e * 35;
            var E = e * 1;
            var _ = e * 4;
            var s = e * 4;
            t.width = o;
            t.height = r;
            i.translate(0, e * 15);
            Re(i, I, E, T, n, _);
            se(i, null, "#69A148", s);
            var R = re[SPRITE.HEART_SYMBOL_HUD];
            i.drawImage(R, 17, -8);
            i.translate(a, 0);
            Re(i, I, E, T, n, _);
            se(i, null, "#AF352A", s);
            R = re[SPRITE.FOOD_SYMBOL_HUD];
            i.drawImage(R, 17, -9);
            i.translate(a, 0);
            Re(i, I, E, T, n, _);
            se(i, null, "#669BB1", s);
            R = re[SPRITE.COLD_SYMBOL_HUD];
            i.drawImage(R, 17, -8);
            i.translate(a, 0);
            Re(i, I, E, T, n, _);
            se(i, null, "#074A87", s);
            R = re[SPRITE.WATER_SYMBOL_HUD];
            i.drawImage(R, 17, -8);
            return t;
            }, 1)(1));
            re[SPRITE.OXYGEN] = Y(__p_5863156023(e => {
            var t = window.document.createElement("canvas");
            var i = t.getContext("2d");
            var o = e * 600;
            var T = e * 22;
            var r = e * 4;
            var n = e * 4;
            t.width = o;
            t.height = T;
            Re(i, e * 5, e * 5, o - e * 10, T - e * 10, r);
            se(i, null, "#BBE8EF", n);
            return t;
            }, 1)(1));
            re[SPRITE.DELAY_HELMET] = Y(Vi(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
            re[SPRITE.DELAY_WEAPON] = Y(Ae(5.8, __p_5863156023((e, t, i) => {
            var o = window.document.createElement("canvas");
            var T = o.getContext("2d");
            o.width = e * 100;
            o.height = e * 250;
            T.translate(e * -135, e * -75);
            T.globalAlpha = t ? 0.8 : 1;
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 178.5, e * 238.03125);
            T.bezierCurveTo(e * 177, e * 175.03125, e * 177, e * 175.03125, e * 175.5, e * 112.03125);
            T.bezierCurveTo(e * 184.5, e * 100.53125, e * 184.5, e * 100.53125, e * 193.5, e * 89.03125);
            T.bezierCurveTo(e * 202, e * 100.03125, e * 202, e * 100.03125, e * 210.5, e * 111.03125);
            T.bezierCurveTo(e * 209.5, e * 174.03125, e * 209.5, e * 174.03125, e * 208.5, e * 237.03125);
            T.closePath();
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 193.5, e * 91.03125);
            T.bezierCurveTo(e * 193.5, e * 163.03125, e * 193.5, e * 163.03125, e * 193.5, e * 235.03125);
            T.closePath();
            se(T, undefined, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 155.5, e * 239.03125);
            T.bezierCurveTo(e * 194, e * 238.53125, e * 194, e * 238.53125, e * 232.5, e * 238.03125);
            T.bezierCurveTo(e * 232.5, e * 243.03125, e * 232.5, e * 243.03125, e * 232.5, e * 248.03125);
            T.bezierCurveTo(e * 194, e * 248.53125, e * 194, e * 248.53125, e * 155.5, e * 249.03125);
            T.closePath();
            se(T, i[0]);
            he(T, e * 160.5, e * 243.03125, e * 7);
            se(T, i[0]);
            he(T, e * 227.5, e * 242.03125, e * 7);
            se(T, i[0]);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 185.5, e * 253.03125);
            T.bezierCurveTo(e * 193.5, e * 253.03125, e * 193.5, e * 253.03125, e * 201.5, e * 253.03125);
            T.bezierCurveTo(e * 201.5, e * 276.03125, e * 201.5, e * 276.03125, e * 201.5, e * 299.03125);
            T.bezierCurveTo(e * 194.5, e * 299.03125, e * 194.5, e * 299.03125, e * 187.5, e * 299.03125);
            T.closePath();
            se(T, i[0], i[0], e * 5);
            he(T, e * 194, e * 298, e * 9);
            se(T, i[0], i[0], e * 5);
            T.globalAlpha = 1;
            T.translate(e * -10, e * 10);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 178.5, e * 238.03125);
            T.bezierCurveTo(e * 177, e * 175.03125, e * 177, e * 175.03125, e * 175.5, e * 112.03125);
            T.bezierCurveTo(e * 184.5, e * 100.53125, e * 184.5, e * 100.53125, e * 193.5, e * 89.03125);
            T.bezierCurveTo(e * 202, e * 100.03125, e * 202, e * 100.03125, e * 210.5, e * 111.03125);
            T.bezierCurveTo(e * 209.5, e * 174.03125, e * 209.5, e * 174.03125, e * 208.5, e * 237.03125);
            T.closePath();
            se(T, i[3], i[4], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 155.5, e * 239.03125);
            T.bezierCurveTo(e * 194, e * 238.53125, e * 194, e * 238.53125, e * 232.5, e * 238.03125);
            T.bezierCurveTo(e * 232.5, e * 243.03125, e * 232.5, e * 243.03125, e * 232.5, e * 248.03125);
            T.bezierCurveTo(e * 194, e * 248.53125, e * 194, e * 248.53125, e * 155.5, e * 249.03125);
            T.closePath();
            se(T, i[1], i[2], e * 5);
            he(T, e * 160.5, e * 243.03125, e * 7);
            se(T, i[1], i[2], e * 5);
            he(T, e * 227.5, e * 242.03125, e * 7);
            se(T, i[1], i[2], e * 5);
            T.beginPath();
            T.lineCap = "round";
            T.lineJoin = "round";
            T.moveTo(e * 185.5, e * 253.03125);
            T.bezierCurveTo(e * 193.5, e * 253.03125, e * 193.5, e * 253.03125, e * 201.5, e * 253.03125);
            T.bezierCurveTo(e * 201.5, e * 276.03125, e * 201.5, e * 276.03125, e * 201.5, e * 299.03125);
            T.bezierCurveTo(e * 194.5, e * 299.03125, e * 194.5, e * 299.03125, e * 187.5, e * 299.03125);
            T.closePath();
            se(T, i[1], i[2], e * 7);
            he(T, e * 194, e * 298, e * 9);
            se(T, i[1], i[2], e * 7);
            return o;
            }, 3)(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
            re[SPRITE.COUNTER] = [];
            re[SPRITE.SLOT_NUMBER] = [];
            for (e = 0; e < WORLD.WITH_BAG + 2; e++) {
            re[SPRITE.SLOT_NUMBER][e] = Dt(1, "" + (e + 1), 12, "#FFF");
            }
            re[SPRITE.RECIPE_BUTTON] = [];
            re[SPRITE.RECIPE_BUTTON].push(Y(Bo(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
            re[SPRITE.RECIPE_BUTTON].push(Y(Bo(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
            re[SPRITE.RECIPE_BUTTON].push(Y(Bo(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
            re[SPRITE.CLOCK] = [];
            re[SPRITE.CLOCK].push(Y(__p_5863156023(e => {
            var t = window.document.createElement("canvas");
            var i = t.getContext("2d");
            t.width = e * 321;
            t.height = e * 345;
            i.translate(0, e * 5);
            i.translate(0, e * 20);
            he(i, e * 160.5, e * 159.5, e * 156.39595138242822);
            se(i, "#322413", "#322413", e * 4);
            i.translate(0, e * -20);
            he(i, e * 160.5, e * 159.5, e * 156.39595138242822);
            se(i, "#392C16", "#5E3E1A", e * 10);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 31.999969482421875, e * 163.07290649414062);
            i.bezierCurveTo(e * 22.999969482421875, e * 67.07290649414062, e * 106, e * 20.072906494140625, e * 162, e * 23.072906494140625);
            i.bezierCurveTo(e * 269.9999694824219, e * 31.072906494140625, e * 292.9999694824219, e * 120.07290649414062, e * 294.9999694824219, e * 161.07290649414062);
            i.bezierCurveTo(e * 165.49996948242188, e * 162.07290649414062, e * 165.49996948242188, e * 162.07290649414062, e * 35.999969482421875, e * 163.07290649414062);
            i.closePath();
            se(i, "#12432D");
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 32.999969482421875, e * 165.07290649414062);
            i.bezierCurveTo(e * 16.999969482421875, e * 221.07290649414062, e * 85, e * 289.0729064941406, e * 156, e * 294.0729064941406);
            i.bezierCurveTo(e * 263.9999694824219, e * 293.0729064941406, e * 295.9999694824219, e * 199.07290649414062, e * 294.9999694824219, e * 159.07290649414062);
            i.closePath();
            se(i, "#3A2A0D");
            he(i, e * 161, e * 158.07290649414062, e * 133.4053971921676);
            se(i, undefined, "#5E3E1A", e * 10);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 31.999969482421875, e * 161.62844848632812);
            i.bezierCurveTo(e * 162.49996948242188, e * 161.62844848632812, e * 162.49996948242188, e * 161.62844848632812, e * 292.9999694824219, e * 161.62844848632812);
            i.closePath();
            se(i, undefined, "#5E3E1A", e * 12);
            i.translate(0, e * 8);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 66, e * 158.29513549804688);
            i.bezierCurveTo(e * 86, e * 158.29513549804688, e * 86, e * 158.29513549804688, e * 106, e * 158.29513549804688);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 57.999969482421875, e * 117.29513549804688);
            i.bezierCurveTo(e * 85, e * 128.29513549804688, e * 85, e * 128.29513549804688, e * 113, e * 139.29513549804688);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 95, e * 90.29513549804688);
            i.bezierCurveTo(e * 112, e * 105.79513549804688, e * 112, e * 105.79513549804688, e * 129, e * 121.29513549804688);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 116, e * 52.850677490234375);
            i.bezierCurveTo(e * 130, e * 83.85067749023438, e * 130, e * 83.85067749023438, e * 144, e * 114.85067749023438);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 159, e * 61.295135498046875);
            i.bezierCurveTo(e * 160.49996948242188, e * 92.29513549804688, e * 160.49996948242188, e * 92.29513549804688, e * 160, e * 123.29513549804688);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 203, e * 51.295135498046875);
            i.bezierCurveTo(e * 190.49996948242188, e * 83.29513549804688, e * 190.49996948242188, e * 83.29513549804688, e * 176, e * 115.29513549804688);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 225, e * 89.29513549804688);
            i.bezierCurveTo(e * 210.49996948242188, e * 104.79513549804688, e * 210.49996948242188, e * 104.79513549804688, e * 194, e * 120.29513549804688);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 266.9999694824219, e * 112.29513549804688);
            i.bezierCurveTo(e * 233.49996948242188, e * 127.29513549804688, e * 233.49996948242188, e * 127.29513549804688, e * 199, e * 142.29513549804688);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 256.9999694824219, e * 155.29513549804688);
            i.bezierCurveTo(e * 238.49996948242188, e * 156.29513549804688, e * 238.49996948242188, e * 156.29513549804688, e * 219, e * 157.29513549804688);
            i.closePath();
            se(i, undefined, "#c7a726", e * 12);
            i.translate(0, e * -8);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 66, e * 158.29513549804688);
            i.bezierCurveTo(e * 86, e * 158.29513549804688, e * 86, e * 158.29513549804688, e * 106, e * 158.29513549804688);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 57.999969482421875, e * 117.29513549804688);
            i.bezierCurveTo(e * 85, e * 128.29513549804688, e * 85, e * 128.29513549804688, e * 113, e * 139.29513549804688);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 95, e * 90.29513549804688);
            i.bezierCurveTo(e * 112, e * 105.79513549804688, e * 112, e * 105.79513549804688, e * 129, e * 121.29513549804688);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 116, e * 52.850677490234375);
            i.bezierCurveTo(e * 130, e * 83.85067749023438, e * 130, e * 83.85067749023438, e * 144, e * 114.85067749023438);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 159, e * 61.295135498046875);
            i.bezierCurveTo(e * 160.49996948242188, e * 92.29513549804688, e * 160.49996948242188, e * 92.29513549804688, e * 160, e * 123.29513549804688);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 203, e * 51.295135498046875);
            i.bezierCurveTo(e * 190.49996948242188, e * 83.29513549804688, e * 190.49996948242188, e * 83.29513549804688, e * 176, e * 115.29513549804688);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 225, e * 89.29513549804688);
            i.bezierCurveTo(e * 210.49996948242188, e * 104.79513549804688, e * 210.49996948242188, e * 104.79513549804688, e * 194, e * 120.29513549804688);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 266.9999694824219, e * 112.29513549804688);
            i.bezierCurveTo(e * 233.49996948242188, e * 127.29513549804688, e * 233.49996948242188, e * 127.29513549804688, e * 199, e * 142.29513549804688);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 256.9999694824219, e * 155.29513549804688);
            i.bezierCurveTo(e * 238.49996948242188, e * 156.29513549804688, e * 238.49996948242188, e * 156.29513549804688, e * 219, e * 157.29513549804688);
            i.closePath();
            se(i, undefined, "#EDCE4F", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 94.00003051757812, e * 164.40341186523438);
            i.bezierCurveTo(e * 162.50003051757812, e * 164.40341186523438, e * 230.00003051757812, e * 165.40341186523438, e * 231.00003051757812, e * 164.40341186523438);
            i.bezierCurveTo(e * 214.00003051757812, e * 267.4034118652344, e * 92.00003051757812, e * 243.40341186523438, e * 93.00003051757812, e * 165.40341186523438);
            i.closePath();
            se(i, "#704618", "#5D3D1A", e * 8);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 96, e * 166);
            i.bezierCurveTo(e * 88, e * 117, e * 129, e * 92, e * 161, e * 91);
            i.bezierCurveTo(e * 201, e * 90, e * 223, e * 121, e * 230, e * 161);
            i.closePath();
            se(i, "#ECBE35", "#EDCE4F", e * 8);
            he(i, e * 160.00003051757812, e * 166.49432373046875, e * 28.30194339616981);
            se(i, "#392C16", "#5E3E1A", e * 10);
            return t;
            }, 1)(0.22)));
            re[SPRITE.CLOCK].push(Y(__p_5863156023(e => {
            var t = window.document.createElement("canvas");
            var i = t.getContext("2d");
            t.width = e * 321;
            t.height = e * 345;
            i.translate(0, e * 5);
            i.translate(0, e * 20);
            he(i, e * 160.5, e * 159.5, e * 156.39595138242822);
            se(i, "#322413", "#322413", e * 4);
            i.translate(0, e * -20);
            he(i, e * 160.5, e * 159.5, e * 156.39595138242822);
            se(i, "#392C16", "#5E3E1A", e * 10);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 31.999969482421875, e * 163.07290649414062);
            i.bezierCurveTo(e * 22.999969482421875, e * 67.07290649414062, e * 106, e * 20.072906494140625, e * 162, e * 23.072906494140625);
            i.bezierCurveTo(e * 269.9999694824219, e * 31.072906494140625, e * 292.9999694824219, e * 120.07290649414062, e * 294.9999694824219, e * 161.07290649414062);
            i.bezierCurveTo(e * 165.49996948242188, e * 162.07290649414062, e * 165.49996948242188, e * 162.07290649414062, e * 35.999969482421875, e * 163.07290649414062);
            i.closePath();
            se(i, "#3A2A0D");
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 32.999969482421875, e * 165.07290649414062);
            i.bezierCurveTo(e * 16.999969482421875, e * 221.07290649414062, e * 85, e * 289.0729064941406, e * 156, e * 294.0729064941406);
            i.bezierCurveTo(e * 263.9999694824219, e * 293.0729064941406, e * 295.9999694824219, e * 199.07290649414062, e * 294.9999694824219, e * 159.07290649414062);
            i.closePath();
            se(i, "#071A1B");
            he(i, e * 161, e * 158.07290649414062, e * 133.4053971921676);
            se(i, undefined, "#5E3E1A", e * 10);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 31.999969482421875, e * 161.62844848632812);
            i.bezierCurveTo(e * 162.49996948242188, e * 161.62844848632812, e * 162.49996948242188, e * 161.62844848632812, e * 292.9999694824219, e * 161.62844848632812);
            i.closePath();
            se(i, undefined, "#5E3E1A", e * 12);
            i.translate(0, e * 8);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 66, e * 158.29513549804688);
            i.bezierCurveTo(e * 86, e * 158.29513549804688, e * 86, e * 158.29513549804688, e * 106, e * 158.29513549804688);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 57.999969482421875, e * 117.29513549804688);
            i.bezierCurveTo(e * 85, e * 128.29513549804688, e * 85, e * 128.29513549804688, e * 113, e * 139.29513549804688);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 95, e * 90.29513549804688);
            i.bezierCurveTo(e * 112, e * 105.79513549804688, e * 112, e * 105.79513549804688, e * 129, e * 121.29513549804688);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 116, e * 52.850677490234375);
            i.bezierCurveTo(e * 130, e * 83.85067749023438, e * 130, e * 83.85067749023438, e * 144, e * 114.85067749023438);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 159, e * 61.295135498046875);
            i.bezierCurveTo(e * 160.49996948242188, e * 92.29513549804688, e * 160.49996948242188, e * 92.29513549804688, e * 160, e * 123.29513549804688);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 203, e * 51.295135498046875);
            i.bezierCurveTo(e * 190.49996948242188, e * 83.29513549804688, e * 190.49996948242188, e * 83.29513549804688, e * 176, e * 115.29513549804688);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 225, e * 89.29513549804688);
            i.bezierCurveTo(e * 210.49996948242188, e * 104.79513549804688, e * 210.49996948242188, e * 104.79513549804688, e * 194, e * 120.29513549804688);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 266.9999694824219, e * 112.29513549804688);
            i.bezierCurveTo(e * 233.49996948242188, e * 127.29513549804688, e * 233.49996948242188, e * 127.29513549804688, e * 199, e * 142.29513549804688);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 256.9999694824219, e * 155.29513549804688);
            i.bezierCurveTo(e * 238.49996948242188, e * 156.29513549804688, e * 238.49996948242188, e * 156.29513549804688, e * 219, e * 157.29513549804688);
            i.closePath();
            se(i, undefined, "#281C08", e * 12);
            i.translate(0, e * -8);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 66, e * 158.29513549804688);
            i.bezierCurveTo(e * 86, e * 158.29513549804688, e * 86, e * 158.29513549804688, e * 106, e * 158.29513549804688);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 57.999969482421875, e * 117.29513549804688);
            i.bezierCurveTo(e * 85, e * 128.29513549804688, e * 85, e * 128.29513549804688, e * 113, e * 139.29513549804688);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 95, e * 90.29513549804688);
            i.bezierCurveTo(e * 112, e * 105.79513549804688, e * 112, e * 105.79513549804688, e * 129, e * 121.29513549804688);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 116, e * 52.850677490234375);
            i.bezierCurveTo(e * 130, e * 83.85067749023438, e * 130, e * 83.85067749023438, e * 144, e * 114.85067749023438);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 159, e * 61.295135498046875);
            i.bezierCurveTo(e * 160.49996948242188, e * 92.29513549804688, e * 160.49996948242188, e * 92.29513549804688, e * 160, e * 123.29513549804688);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 203, e * 51.295135498046875);
            i.bezierCurveTo(e * 190.49996948242188, e * 83.29513549804688, e * 190.49996948242188, e * 83.29513549804688, e * 176, e * 115.29513549804688);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 225, e * 89.29513549804688);
            i.bezierCurveTo(e * 210.49996948242188, e * 104.79513549804688, e * 210.49996948242188, e * 104.79513549804688, e * 194, e * 120.29513549804688);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 266.9999694824219, e * 112.29513549804688);
            i.bezierCurveTo(e * 233.49996948242188, e * 127.29513549804688, e * 233.49996948242188, e * 127.29513549804688, e * 199, e * 142.29513549804688);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 256.9999694824219, e * 155.29513549804688);
            i.bezierCurveTo(e * 238.49996948242188, e * 156.29513549804688, e * 238.49996948242188, e * 156.29513549804688, e * 219, e * 157.29513549804688);
            i.closePath();
            se(i, undefined, "#5E3C10", e * 12);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 96, e * 166);
            i.bezierCurveTo(e * 88, e * 117, e * 129, e * 92, e * 161, e * 91);
            i.bezierCurveTo(e * 201, e * 90, e * 223, e * 121, e * 230, e * 161);
            i.closePath();
            se(i, "#704618", "#5D3D1A", e * 8);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 94.00003051757812, e * 164.40341186523438);
            i.bezierCurveTo(e * 162.50003051757812, e * 164.40341186523438, e * 230.00003051757812, e * 165.40341186523438, e * 231.00003051757812, e * 164.40341186523438);
            i.bezierCurveTo(e * 214.00003051757812, e * 267.4034118652344, e * 92.00003051757812, e * 243.40341186523438, e * 93.00003051757812, e * 165.40341186523438);
            i.closePath();
            se(i, "#E1DDD5", "#EAE7E4", e * 8);
            he(i, e * 160.00003051757812, e * 166.49432373046875, e * 28.30194339616981);
            se(i, "#392C16", "#5E3E1A", e * 10);
            return t;
            }, 1)(0.22)));
            re[SPRITE.ARROW_CLOCK] = Y(__p_5863156023(e => {
            var t = window.document.createElement("canvas");
            var i = t.getContext("2d");
            t.width = e * 321;
            t.height = e * 345;
            i.translate(0, e * 5);
            he(i, e * 161.00003051757812, e * 165.40341186523438, e * 20.808652046684813);
            se(i, "#C09D6F", "#A37943", e * 10);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(e * 162.00003051757812, e * 48.403411865234375);
            i.bezierCurveTo(e * 172.50003051757812, e * 67.40341186523438, e * 172.50003051757812, e * 67.40341186523438, e * 183.00003051757812, e * 86.40341186523438);
            i.bezierCurveTo(e * 160.50003051757812, e * 86.40341186523438, e * 160.50003051757812, e * 86.40341186523438, e * 138.00003051757812, e * 86.40341186523438);
            i.closePath();
            se(i, "#C09D6F", "#A37943", e * 10);
            i.save();
            i.translate(e * 161.50003051757812, e * 117.90341186523438);
            Re(i, e * -5.5, e * -37.5, e * 11, e * 75, e * 10);
            i.restore();
            se(i, "#C09D6F", "#A37943", e * 10);
            i.save();
            i.translate(e * 162.00003051757812, e * 78.90341186523438);
            Re(i, e * -10, e * -5.5, e * 20, e * 11, e * 1);
            i.restore();
            se(i, "#C09D6F");
            he(i, e * 161.00003051757812, e * 163.6761474609375, e * 17.08800749063506);
            se(i, "#C09D6F");
            return t;
            }, 1)(0.22));
            re[SPRITE.OPTION_BUTTON] = [];
            re[SPRITE.OPTION_BUTTON].push(Y(Me(1.5, ["#795026", "#654320", "#eda80d"], 0)));
            re[SPRITE.OPTION_BUTTON].push(Y(Me(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
            re[SPRITE.OPTION_BUTTON].push(Y(Me(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
            re[SPRITE.MICROPHONE] = S.MICROPHONE;
            re[SPRITE.AUTO_FEED] = S.AUTO_FEED;
            re[SPRITE.BANDAGE_ACTIVATED] = S.BANDAGE_ACTIVATED;
            re[SPRITE.STOP_REGENERATION] = S.STOP_REGENERATION;
            re[SPRITE.STOP_REGENERATION_BLIZZARD] = S.STOP_REGENERATION_BLIZZARD;
            re[SPRITE.RECONNECT] = Dt(1, "Reconnecting...", 30, "#FFF");
        }
        function Fo() {
            var e = Bn.time;
            if (re[SPRITE.HERB]) {
            L.drawImage(re[SPRITE.HERB][e][1], z + 480, B + 190);
            L.drawImage(re[SPRITE.HERB][e][2], z + 180, B - 430);
            L.drawImage(re[SPRITE.HERB][e][1], z - 855, B + 100);
            L.drawImage(re[SPRITE.HERB][e][0], z - 550, B - 300);
            L.drawImage(re[SPRITE.HERB][e][0], z - 1020, B - 520);
            }
            if (re[ItemType.STONE]) {
            L.drawImage(re[ItemType.STONE][e][1], z - 80, B - 640);
            L.drawImage(re[ItemType.STONE][e][1], z + 80, B + 490);
            L.drawImage(re[ItemType.STONE][e][2], z - 180, B - 700);
            L.drawImage(re[ItemType.STONE][e][0], z + 550, B + 100);
            L.drawImage(re[ItemType.STONE][e][1], z + 450, B + 300);
            L.drawImage(re[ItemType.STONE][e][1], z + 780, B + 300);
            L.drawImage(re[ItemType.STONE][e][2], z + 980, B + 200);
            L.drawImage(re[ItemType.STONE][e][2], z + 680, B + 600);
            L.drawImage(re[ItemType.STONE][e][2], z - 380, B + 100);
            L.drawImage(re[ItemType.STONE][e][2], z + 280, B + 250);
            }
            if (re[ItemType.BERRY]) {
            L.drawImage(re[ItemType.BERRY][e][0], z - 590, B);
            L.drawImage(re[ItemType.BERRY][e][0], z + 120, B - 390);
            L.drawImage(re[ItemType.BERRY][e][0], z - 270, B + 340);
            }
            if (re[ItemType.WOOD]) {
            L.drawImage(re[ItemType.WOOD][e][4], z - 700, B - 600);
            L.drawImage(re[ItemType.WOOD][e][2], z - 970, B - 250);
            L.drawImage(re[ItemType.WOOD][e][5], z - 720, B - 200);
            L.drawImage(re[ItemType.WOOD][e][2], z - 1020, B + 340);
            L.drawImage(re[ItemType.WOOD][e][0], z - 1120, B - 0);
            L.drawImage(re[ItemType.WOOD][e][1], z - 650, B - 330);
            L.drawImage(re[ItemType.WOOD][e][4], z - 495, B - 90);
            L.drawImage(re[ItemType.WOOD][e][3], z - 520, B + 340);
            L.drawImage(re[ItemType.WOOD][e][2], z + 830, B - 520);
            }
            if (Vn && Wn) {
            var t = Vn.cam.x;
            var i = Vn.cam.y;
            Vn.cam.x = z;
            Vn.cam.y = B;
            var o = Wn.time;
            Wn.time = Bn.time;
            var T;
            var r = Bn.items;
            r[2].x = 400;
            r[2].y = 100;
            r[2].draw(ItemType.WORKBENCH);
            (T = r[1]).x = -500;
            T.y = 100;
            T.fruits[0].x = T.x - 20.5;
            T.fruits[0].y = T.y - 22.5;
            T.fruits[1].x = T.x - 35.5;
            T.fruits[1].y = T.y + 7.5;
            T.fruits[2].x = T.x + 7.5;
            T.fruits[2].y = T.y - 30;
            T.fruits[3].x = T.x + 22.5;
            T.fruits[3].y = T.y;
            T.fruits[4].x = T.x - 7.5;
            T.fruits[4].y = T.y + 14.5;
            for (var n = 0; n < T.info; n++) {
                T.fruits[n].draw(SPRITE.FRUIT);
            }
            (T = r[3]).x = 210;
            T.y = -290;
            T.fruits[0].x = T.x - 20.5;
            T.fruits[0].y = T.y - 22.5;
            T.fruits[1].x = T.x - 35.5;
            T.fruits[1].y = T.y + 7.5;
            T.fruits[2].x = T.x + 7.5;
            T.fruits[2].y = T.y - 30;
            T.fruits[3].x = T.x + 22.5;
            T.fruits[3].y = T.y;
            T.fruits[4].x = T.x - 7.5;
            T.fruits[4].y = T.y + 14.5;
            for (n = 0; n < T.info; n++) {
                T.fruits[n].draw(SPRITE.FRUIT);
            }
            r[0].x = 450;
            r[0].y = -100;
            r[0].draw_bg(ItemType.FIRE);
            r[0].draw_fg();
            Vn.cam.x = t;
            Vn.cam.y = i;
            Wn.time = o;
            }
        }
        let xo = [];
        let Jo = [];
        function Xo(e, t, i, o, T, r, n, a, I, E) {
            if (t.tryLoad === undefined || t.tryLoad() === 1) {
                if(settings.xray.enabled) e.globalAlpha = .3;

            if (E !== undefined) {
                e.drawImage(t, i, o, window.Math.max(1, T), window.Math.max(1, r), n, a, I, E);
            } else if (r !== undefined) {
                e.drawImage(t, i, o, T, r);
            } else {
                e.drawImage(t, i, o);
            }
            }
        }
        function qo() {
            var e = Un.info_box;
            var t = e.id;
            if (e.activated === 1 && e.display === 1) {
            if (xo[t] === undefined) {
                xo[t] = __p_5863156023(e => {
                var t = window.document.createElement("canvas");
                var i = t.getContext("2d");
                var o = te[e];
                i.font = "20px Baloo Paaji";
                var T = 0;
                if (o.length >= 1) {
                    T = window.Math.max(0, i.measureText(o[0]).width);
                }
                i.font = "17px Baloo Paaji";
                if (o.length >= 2) {
                    T = window.Math.max(T, i.measureText(o[1]).width);
                }
                i.font = "14px Baloo Paaji";
                oe = 2;
                for (; oe < o.length; oe++) {
                    T = window.Math.max(T, i.measureText(o[oe]).width);
                }
                var r = T + 35;
                var n = 0;
                n = o.length === 1 ? 55 : o.length === 2 ? 85 : (o.length - 2) * 26 + 85;
                t.width = r;
                t.height = n;
                Re(i, 0, 0, r, n, 10);
                i.fillStyle = "#000000";
                i.globalAlpha = 0.5;
                i.fill();
                if (o.length >= 1) {
                    i.textBaseline = "middle";
                    i.font = "20px Baloo Paaji";
                    i.globalAlpha = 1;
                    i.fillStyle = "#e2c340";
                    i.fillText(o[0], 15, 28);
                }
                if (o.length >= 2) {
                    i.font = "17px Baloo Paaji";
                    i.fillStyle = "#ffffff";
                    i.fillText(o[1], 15, 55);
                    n = 55;
                }
                if (o.length >= 3) {
                    i.font = "14px Baloo Paaji";
                    i.globalAlpha = 0.7;
                    oe = 2;
                    for (; oe < o.length; oe++) {
                    i.fillText(o[oe], 15, n + 28);
                    n += 26;
                    }
                }
                return t;
                }, 1)(t);
            }
            if (e.craft === 1) {
                Xo(L, xo[t], e.x, e.y);
            } else if (e.x - 80 + xo[t].width > H) {
                Xo(L, xo[t], H - xo[t].width - 10, e.y - xo[t].height - 10);
            } else {
                Xo(L, xo[t], e.x - 80, e.y - xo[t].height - 10);
            }
            }
        }
        function jo(e, t, i) {
            var o = re[SPRITE.SLOT_NUMBER][e];
            var T = t.info.translate.x + W * 5;
            var r = t.info.translate.y + W * 5;
            if (t.info.state == Cn || i) {
            r += W * 5;
            }
            Xo(L, o, T, r);
        }
        function Zo(e, t) {
            re[SPRITE.COUNTER][e] ||= Dt(W, "x" + e, 17, "#FFF");
            var i = re[SPRITE.COUNTER][e];
            var o = t.info.translate.x + t.info.img[0].width - i.width - W * 14;
            var T = t.info.translate.y + t.info.img[0].height - i.height - W * 19;
            if (t.info.state == Cn) {
            T += W * 5;
            }
            Xo(L, i, o, T);
        }
        function $o() {
            if (!Vn.chest.open && !Vn.furnace.open && !Vn.windmill.open && !Vn.extractor.open) {
            Vn.bread_oven.open = false;
            var e = Wn.fast_units[Vn.id];
            var t = WORLD.DIST_BREAD_OVEN;
            if (e) {
                for (var i = 0; i < Wn.units[ITEMS.BREAD_OVEN].length; i++) {
                var o = Wn.units[ITEMS.BREAD_OVEN][i];
                var T = v.dist(o, e);
                if (T < t) {
                    t = T;
                    Vn.bread_oven.open = true;
                    Vn.bread_oven.amount_wood = o.info & 31;
                    Vn.bread_oven.amount_flour = (o.info & 992) >> 5;
                    Vn.bread_oven.amount_bread = (o.info & 31744) >> 10;
                    Vn.bread_oven.pid = o.pid;
                }
                }
                if (t < WORLD.DIST_BREAD_OVEN) {
                var r = re[SPRITE.BREAD_OVEN_UI];
                var n = (a = Un.bread_oven_wood_button).info.translate.x - 32;
                Xo(L, r, n, 0);
                if (Vn.bread_oven.amount_wood > 0) {
                    a.draw(L);
                    if ((I = Vn.bread_oven.amount_wood) > 1) {
                    Zo(I, a);
                    }
                }
                var a = Un.bread_oven_bread_button;
                if (Vn.bread_oven.amount_bread > 0) {
                    a.draw(L);
                    if ((I = Vn.bread_oven.amount_bread) > 1) {
                    Zo(I, a);
                    }
                }
                var I;
                a = Un.bread_oven_flour_button;
                if (Vn.bread_oven.amount_flour > 0) {
                    a.draw(L);
                    if ((I = Vn.bread_oven.amount_flour) > 1) {
                    Zo(I, a);
                    }
                }
                }
            }
            }
        }
        function Qo() {
            if (!Vn.chest.open && !Vn.furnace.open) {
            Vn.extractor.open = false;
            var e = Wn.fast_units[Vn.id];
            var t = WORLD.DIST_EXTRACTOR_MACHINE;
            if (e) {
                for (var i = 0; i < Pn.length; i++) {
                for (var o = Pn[i][0], T = Pn[i][1], r = 0; r < Wn.units[o].length; r++) {
                    var n = Wn.units[o][r];
                    var a = v.dist(n, e);
                    if (a < t) {
                    t = a;
                    Vn.extractor.mineral = T;
                    Vn.extractor.type = o;
                    Vn.extractor.open = true;
                    Vn.extractor.amount_wood = n.info & 255;
                    Vn.extractor.amount_mineral = (n.info & 65280) >> 8;
                    Vn.extractor.pid = n.pid;
                    }
                }
                }
                if (t < WORLD.DIST_EXTRACTOR_MACHINE) {
                var I;
                var E = re[SPRITE.EXTRACTOR_CASES];
                var _ = (s = Un.extractor_wood_button).info.translate.x - 33;
                Xo(L, E, _, 0);
                if (Vn.extractor.amount_wood > 0) {
                    s.draw(L);
                    if ((I = Vn.extractor.amount_wood) > 1) {
                    Zo(I, s);
                    }
                }
                switch (Vn.extractor.mineral) {
                    case ItemType.STONE:
                    var s = Un.extractor_stone_button;
                    break;
                    case ItemType.GOLD:
                    s = Un.extractor_gold_button;
                    break;
                    case ItemType.DIAMOND:
                    s = Un.extractor_diamond_button;
                    break;
                    case ItemType.AMETHYST:
                    s = Un.extractor_amethyst_button;
                    break;
                    case ItemType.REIDITE:
                    s = Un.extractor_reidite_button;
                }
                if (Vn.extractor.amount_mineral > 0) {
                    s.draw(L);
                    if ((I = Vn.extractor.amount_mineral) > 1) {
                    Zo(I, s);
                    }
                }
                }
            }
            }
        }
        function eT() {
            if (!Vn.chest.open && !Vn.furnace.open) {
            Vn.windmill.open = false;
            var e = Wn.fast_units[Vn.id];
            var t = WORLD.DIST_WINDMILL;
            if (e) {
                for (var i = 0; i < Wn.units[ITEMS.WINDMILL].length; i++) {
                var o = Wn.units[ITEMS.WINDMILL][i];
                var T = v.dist(o, e);
                if (T < t) {
                    t = T;
                    Vn.windmill.open = true;
                    Vn.windmill.amount_wheat = o.info & 255;
                    Vn.windmill.amount_flour = (o.info & 65280) >> 8;
                    Vn.windmill.pid = o.pid;
                }
                }
                if (t < WORLD.DIST_WINDMILL) {
                var r = re[SPRITE.WINDMILL_CASES];
                var n = (I = Un.windmill_wheat_button).info.translate.x - 33;
                Xo(L, r, n, 0);
                if (Vn.windmill.amount_wheat > 0) {
                    I.draw(L);
                    if ((a = Vn.windmill.amount_wheat) > 1) {
                    Zo(a, I);
                    }
                }
                var a;
                var I = Un.windmill_flour_button;
                if (Vn.windmill.amount_flour > 0) {
                    I.draw(L);
                    if ((a = Vn.windmill.amount_flour) > 1) {
                    Zo(a, I);
                    }
                }
                }
            }
            }
        }
        function tT() {
            if (!Vn.chest.open) {
            Vn.furnace.amount = 0;
            Vn.furnace.open = false;
            var e = Wn.fast_units[Vn.id];
            var t = WORLD.DIST_FURNACE;
            if (e) {
                for (var i = 0; i < Wn.units[ITEMS.FURNACE].length; i++) {
                var o = Wn.units[ITEMS.FURNACE][i];
                var T = v.dist(o, e);
                if (T < t) {
                    t = T;
                    Vn.furnace.open = true;
                    Vn.furnace.amount = o.info;
                    Vn.furnace.pid = o.pid;
                }
                }
                if (t < WORLD.DIST_FURNACE) {
                var r = re[SPRITE.FURNACE_SLOT];
                var n = Un.furnace_button;
                var a = window.Math.floor(n.info.translate.x + (n.info.img[0].width - r.width) / 2);
                var I = window.Math.floor(n.info.translate.y + (n.info.img[0].height - r.height) / 2) + 3;
                Xo(L, r, a, I);
                if (Vn.furnace.amount > 0) {
                    n.draw(L);
                    var E = Vn.furnace.amount;
                    if (E > 1) {
                    Zo(E, n);
                    }
                }
                }
            }
            }
        }
        function iT() {
            Vn.resurrection.open = false;
            var e = Wn.fast_units[Vn.id];
            var t = WORLD.DIST_RESURRECTION;
            if (e) {
            for (var i = 0; i < Wn.units[ITEMS.RESURRECTION].length; i++) {
                var o = Wn.units[ITEMS.RESURRECTION][i];
                var T = v.dist(o, e);
                if (T < t) {
                t = T;
                Vn.resurrection.open = true;
                Vn.resurrection.pid = o.pid;
                }
            }
            if (t < WORLD.DIST_RESURRECTION) {
                Un.resurrection.draw(L);
            }
            }
        }
        function oT() {
            Vn.totem.id = -1;
            Vn.totem.pid = -1;
            if (!Vn.totem.wait && !Vn.zombie) {
            var e = Wn.fast_units[Vn.id];
            var t = WORLD.DIST_TOTEM;
            if (e) {
                for (var i = 0; i < Wn.units[ITEMS.TOTEM].length; i++) {
                var o = Wn.units[ITEMS.TOTEM][i];
                var T = v.dist(o, e);
                if (T < t) {
                    t = T;
                    Vn.totem.id = o.id;
                    Vn.totem.pid = o.pid;
                    Vn.totem.info = o.info;
                    Vn.totem.lock = o.info;
                }
                }
            }
            var r = Un.team_buttons_id;
            Un.team_buttons_id = -1;
            if (Vn.totem.pid == -1 || Vn.team.length != 0 && Vn.id != Vn.totem.pid) {
                if (Vn.team.length != 0 && Vn.team[0] != Vn.id) {
                Un.team_buttons_id = CLIENT.TEAM_LEAVE;
                } else if (Vn.team.length != 0 && Vn.team[0] == Vn.id) {
                Un.team_buttons_id = CLIENT.TEAM_SHOW;
                } else if (Vn.team.length != 0) {
                Un.team_buttons_id = CLIENT.TEAM_JOIN;
                }
            } else if (Vn.team.length == 0 && Vn.totem.info) {
                Un.team_buttons_id = CLIENT.TEAM_FULL;
            } else if (Vn.team.length == 0) {
                Un.team_buttons_id = CLIENT.TEAM_JOIN;
            } else {
                Un.team_buttons_id = CLIENT.TEAM_MANAGE;
            }
            if (Un.team_buttons_id != -1) {
                Un.team_buttons[Un.team_buttons_id].button.draw(L);
            }
            var n = window.document.getElementById("team_box").style;
            if (Un.team_buttons_id != -1 && Un.team_buttons_id != r && n.display == "inline-block") {
                Un.team_buttons[Un.team_buttons_id].action();
            }
            }
        }
        function TT() {
            Vn.chest.id = -1;
            Vn.chest.lock = false;
            Vn.chest.locked = false;
            Vn.chest.lockpick = false;
            Vn.chest.padlock = false;
            Vn.chest.open = false;
            var e = Wn.fast_units[Vn.id];
            var t = WORLD.DIST_CHEST;
            if (e) {
            for (var i = 0; i < Wn.units[ITEMS.CHEST].length; i++) {
                var o = Wn.units[ITEMS.CHEST][i];
                var T = v.dist(o, e);
                if (T < t) {
                t = T;
                Vn.chest.open = true;
                Vn.chest.id = o.extra;
                Vn.chest.amount = o.info;
                Vn.chest.pid = o.pid;
                Vn.chest.locked = o.lock;
                Vn.chest.lock = !!o.lock && Vn.id != o.pid && !Vn.in_team(o.pid);
                Vn.chest.padlock = o.pid === Vn.id && !Vn.chest.locked && Vn.inv.find_item(ItemType.LOCK) != -1;
                if (Vn.chest.locked && Vn.inv.find_item(ItemType.LOCK_PICK) != -1) {
                    Vn.chest.lockpick = true;
                }
                }
            }
            if (t < WORLD.DIST_CHEST) {
                var r = re[SPRITE.CHEST_SLOT];
                var n = Un.chest_buttons[ItemType.STONE_SWORD];
                var a = window.Math.floor(n.info.translate.x + (n.info.img[0].width - r.width) / 2);
                var I = window.Math.floor(n.info.translate.y + (n.info.img[0].height - r.height) / 2) + 3;
                Xo(L, r, a, I);
                if ((!Vn.chest.lock || Vn.chest.pid === Vn.id) && Vn.chest.id >= 1) {
                (n = Un.chest_buttons[Vn.chest.id]).draw(L);
                var E = Vn.chest.amount;
                if (E > 1) {
                    Zo(E, n);
                }
                }
                if (Vn.chest.lock) {
                Un.chest_locked.draw(L);
                } else if (Vn.chest.padlock) {
                Un.chest_padlock.draw(L);
                }
                if (Vn.chest.lockpick) {
                Un.chest_lockpick.draw(L);
                }
            }
            }
        }
        function rT() {
            if (Vn.bigmap) {
            L.globalAlpha = 0.5;
            L.fillStyle = "#000000";
            L.fillRect(0, 0, H, f);
            L.globalAlpha = 0.8;
            var e = re[SPRITE.BIGMAP][Wn.time];
            var t = z - e.width / 2;
            var i = B - e.height / 2;
            Xo(L, e, t, i);
            L.globalAlpha = 1;
            if (Un.minimap.marker.x > -1) {
                L.fillStyle = "#660000";
                he(L, t + Un.minimap.marker.x * 3 * W, i + Un.minimap.marker.y * 3 * W, W * 14);
                L.fill();
            }
            for (var o = Un.minimap.players, T = 0; T < o.length; T++) {
                var r = o[T];
                Wn.time;
                L.fillStyle = "#ff0000";
                he(L, t + r.x / (Wn.nw * 100) * 600 * W, i + r.y / (Wn.nh * 100) * 600 * W, W * 6);
                L.fill();
            }
            var n = Wn.fast_units[Vn.id];
            if (n) {
                L.fillStyle = Wn.time ? "#ffffff" : "#e39716";
                he(L, t + n.x / (Wn.nw * 100) * 600 * W, i + n.y / (Wn.nh * 100) * 600 * W, W * 12);
                L.fill();
            }
            }
        }
        function nT() {
            if (Vn.reconnect.enabled) {
            L.globalAlpha = 0.9;
            L.fillStyle = "#000000";
            Re(L, z - 150, B - 90, 300, 180, 15);
            L.fill();
            L.globalAlpha = 1;
            var e = re[SPRITE.GEAR2];
            L.save();
            Vn.reconnect.rotate = (Vn.reconnect.rotate + Xn * 2) % T;
            L.translate(H / 2, f / 2 - 25);
            L.rotate(Vn.reconnect.rotate);
            Xo(L, e, -e.width / 2, -e.height / 2);
            L.restore();
            e = re[SPRITE.RECONNECT];
            Xo(L, e, (H - e.width) / 2, (f - e.height) / 2 + 25);
            }
        }
        function aT() {
            if (Vn.inv.can_select.length > 0) {
            var e = {
                x: Un.minimap.translate.x,
                y: Un.minimap.translate.y - W * 120
            };
            } else {
            e = {
                x: Un.minimap.translate.x,
                y: Un.minimap.translate.y - W * 50
            };
            }
            L.globalAlpha = 0.8;
            var t = re[SPRITE.MINIMAP][Wn.time];
            Xo(L, t, e.x, e.y);
            L.globalAlpha = 1;
            if (Un.minimap.marker.x > -1) {
            L.fillStyle = "#660000";
            he(L, e.x + Un.minimap.marker.x * W, e.y + Un.minimap.marker.y * W, W * 5);
            L.fill();
            }
            var i = W;
            for (var o = Un.minimap.players, T = 0; T < o.length; T++) {
            var r = o[T];
            L.fillStyle = "#ff0000";
            he(L, e.x + r.x / (Wn.nw * 100) * 193 * W, e.y + r.y / (Wn.nh * 100) * 193 * W, W * 2);
            L.fill();
            }
            var n = Wn.fast_units[Vn.id];
            if (n) {
            L.fillStyle = Wn.time ? "#ffffff" : "#e39716";
            he(L, e.x + n.x / (Wn.nw * 100) * 193 * W, e.y + n.y / (Wn.nh * 100) * 193 * W, W * 4);
            L.fill();
            }
            W = i;
        }
        var IT = [];
        function ET() {
            var e = -8;
            if (Vn.auto_feed.enabled) {
            var t = re[SPRITE.AUTO_FEED];
            Xo(L, t, Vn.auto_feed.translate.x, Vn.auto_feed.translate.y + e);
            e += 70;
            }
            if (Vn.blizzard === 1) {
            t = re[SPRITE.STOP_REGENERATION_BLIZZARD];
            Xo(L, t, Vn.auto_feed.translate.x, Vn.auto_feed.translate.y + e);
            e += 70;
            } else if (Vn.gauges.cold.x < 0.25 || Vn.gauges.hunger.x < 0.25 || Vn.gauges.thirst.x < 0.25 || Vn.gauges.oxygen.x < 0.25 || Vn.gauges.warm.x < 0.25) {
            t = re[SPRITE.STOP_REGENERATION];
            Xo(L, t, Vn.auto_feed.translate.x, Vn.auto_feed.translate.y + e);
            e += 70;
            }
            L.save();
            L.font = "30px Baloo Paaji";
            L.strokeStyle = "black";
            L.lineWidth = 7;
            Math.floor(Math.random() * 5);
            L.strokeText("500" + " FPS", Vn.auto_feed.translate.x - 120, Vn.auto_feed.translate.y - 50);
            L.fillStyle = "white";
            L.fillText("500" + " FPS", Vn.auto_feed.translate.x - 120, Vn.auto_feed.translate.y - 50);
            L.restore();
            L.save();
            L.font = "30px Baloo Paaji";
            L.strokeStyle = "black";
            L.lineWidth = 7;
            L.strokeText(i + " Ping", Vn.auto_feed.translate.x - 120, Vn.auto_feed.translate.y - 20);
            L.fillStyle = "white";
            L.fillText(i + " Ping", Vn.auto_feed.translate.x - 120, Vn.auto_feed.translate.y - 20);
            L.restore();
            if (Vn.bandage > 0) {
            t = re[SPRITE.BANDAGE_ACTIVATED];
            Xo(L, t, Vn.auto_feed.translate.x, Vn.auto_feed.translate.y + e);
            var o = IT[Vn.bandage];
            if (o === undefined) {
                o = Dt(W, Vn.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                IT[Vn.bandage] = o;
            }
            if (Vn.bandage < 9) {
                Xo(L, o, Vn.auto_feed.translate.x - 39, Vn.auto_feed.translate.y + e + 20);
            } else {
                Xo(L, o, Vn.auto_feed.translate.x - 46, Vn.auto_feed.translate.y + e + 20);
            }
            }
        }
        function _T() {
            var e = Vn.ldb;
            var t = Un.leaderboard;
            let i = "#FFF";
            if (e.update) {
            e.update = false;
            var o = e.ids;
            var T = t.can.width;
            var r = t.can.height;
            var n = t.ctx;
            var a = Wn.players;
            var I = false;
            n.clearRect(0, 0, T, r);
            n.drawImage(t.img, 0, 0);
            for (var E = 0; E < o.length; E++) {
                var _ = a[o[E]];
                if (Wn.mode !== WORLD.MODE_ZOMBIES || _.skin !== WORLD.ZOMBIE_SKIN) {
                if (o[E] == Vn.id) {
                    I = true;
                    i = Wn.mode === WORLD.MODE_VAMPIRES && _.skin === WORLD.VAMPIRE_SKIN ? "#FF0000" : "#FFF";
                } else {
                    i = Wn.mode === WORLD.MODE_VAMPIRES && _.skin === WORLD.VAMPIRE_SKIN ? "#990000" : "#A1BDCD";
                }
                n.drawImage(Dt(W, "" + (E + 1), W * 15, i), W * 20, (40 + E * 22) * W);
                if (_ && !_.ldb_label) {
                    _.ldb_label = Dt(W, _.nickname, W * 15, i, undefined, undefined, undefined, undefined, W * 110);
                }
                n.drawImage(_.ldb_label, W * 39, (40 + E * 22) * W);
                n.drawImage(Dt(W, v.simplify_number(_.score), W * 15, i), W * 156, (40 + E * 22) * W);
                }
            }
            if (!I) {
                n.drawImage(re[SPRITE.YOUR_SCORE], W * 15, (46 + E * 22) * W);
                n.drawImage(Dt(W, v.simplify_number(Wn.players[Vn.id].score), W * 15, "#FFF"), W * 100, (46 + E * 22) * W);
            }
            }
            Xo(L, t.can, t.translate.x, t.translate.y);
        }
        function sT() {
            var e = Vn.totem;
            if (e.wait) {
            var t = e.timeout.update();
            L.save();
            var i = re[SPRITE.DELAY_TEAM];
            var o = re[SPRITE.DELAY_WEAPON].height + W * 25;
            L.translate(i.width, Un.gauges.translate.y - W * 188 - o);
            var r = -i.width / 2 - 2;
            var n = -i.height / 2 - 4;
            Xo(L, i, r + 2, n);
            L.beginPath();
            L.lineWidth = W * 5;
            L.strokeStyle = SPRITE.WEAPON_LOADING[Wn.time];
            L.lineCap = "round";
            L.arc(0, n + i.height / 2, W * 25, 0, T * e.timeout.v);
            L.stroke();
            L.restore();
            if (t) {
                e.wait = false;
                e.timeout.v = 0;
                e.timeout.o = false;
            }
            }
        }
        function RT() {
            var e = Wn.clock;
            var t = re[SPRITE.CLOCK][Wn.time];
            Xo(L, t, e.translate.x, e.translate.y);
            L.save();
            L.translate(e.translate.x + t.width / 2, e.translate.y + t.height / 2);
            Wn.clock.now = (new window.Date().getTime() - e.init + e.hour) % WORLD.DAY;
            var i = T * Wn.clock.now / WORLD.DAY - window.Math.PI / 2;
            L.rotate(i);
            Xo(L, re[SPRITE.ARROW_CLOCK], -t.width / 2, -t.height / 2);
            L.restore();
        }
        function hT() {
            var e = Vn.build;
            if (e.wait) {
            var t = e.timeout.update();
            L.save();
            var i = re[SPRITE.DELAY_WALL];
            L.translate(i.width - W * 12, Un.gauges.translate.y - W * 190);
            var o = -i.width / 2 + 9;
            var r = -i.height / 2 - 4;
            Xo(L, i, o, r);
            L.beginPath();
            L.lineWidth = W * 5;
            L.strokeStyle = SPRITE.HELMET_LOADING[Wn.time];
            L.lineCap = "round";
            L.arc(9, r + i.height / 2, W * 25, 0, T * e.timeout.v);
            L.stroke();
            L.restore();
            if (t) {
                e.wait = false;
                e.timeout.v = 0;
                e.timeout.o = false;
            }
            }
        }
        function dT() {
            var e = Vn.helmet;
            if (e.wait) {
            var t = e.timeout.update();
            L.save();
            var i = re[SPRITE.DELAY_HELMET];
            L.translate(i.width - W * 2, Un.gauges.translate.y - W * 125);
            var o = -i.width / 2 + 10;
            var r = -i.height / 2 - 4;
            Xo(L, i, o, r);
            L.beginPath();
            L.lineWidth = W * 5;
            L.strokeStyle = SPRITE.HELMET_LOADING[Wn.time];
            L.lineCap = "round";
            L.arc(9, r + i.height / 2, W * 25, 0, T * e.timeout.v);
            L.stroke();
            L.restore();
            if (t) {
                e.wait = false;
                e.timeout.v = 0;
                e.timeout.o = false;
            }
            }
        }
        function uT() {
            var e = Vn.weapon;
            if (e.wait) {
            var t = e.timeout.update();
            L.save();
            var i = re[SPRITE.DELAY_WEAPON];
            L.translate(i.width - W * 2, Un.gauges.translate.y - W * 60);
            var o = -i.width / 2 - 2;
            var r = -i.height / 2 - 4;
            Xo(L, i, o, r);
            L.beginPath();
            L.lineWidth = W * 5;
            L.strokeStyle = SPRITE.WEAPON_LOADING[Wn.time];
            L.lineCap = "round";
            L.arc(0, r + i.height / 2, W * 25, 0, T * e.timeout.v);
            L.stroke();
            L.restore();
            if (t) {
                e.wait = false;
                e.timeout.v = 0;
                e.timeout.o = false;
            }
            }
        }
        function AT() {
            var e = Vn.craft;
            if (e.crafting) {
            var t = Wn.fast_units[Vn.id];
            L.save();
            L.translate(Vn.cam.x + t.x, Vn.cam.y + t.y);
            var i = re[SPRITE.GEAR];
            var o = -i.width / 2;
            var r = -i.height / 2 - W * 125;
            Xo(L, i, o, r);
            L.beginPath();
            L.lineWidth = W * 5;
            L.strokeStyle = SPRITE.CRAFT_LOADING[Wn.time];
            L.lineCap = "round";
            L.arc(0, r + i.height / 2, W * 25, 0, T * e.timeout.v);
            L.stroke();
            L.restore();
            }
        }
        function OT() {
            var e = Vn.craft;
            if (!e.crafting && e.preview !== -2) {
            var t = Wn.fast_units[Vn.id];
            if (!t) {
                return;
            }
            L.save();
            if (Q[e.preview].grid === 0 && e.mode === 0) {
                L.translate(Vn.cam.x + t.x, Vn.cam.y + t.y);
                L.rotate(t.angle);
                L.translate(120, 0);
            } else {
                var i = window.Math.floor(t.x + window.Math.cos(t.angle) * 120);
                var o = window.Math.floor(t.y + window.Math.sin(t.angle) * 120);
                i = Vn.cam.x + (i - i % 100 + 50);
                o = Vn.cam.y + (o - o % 100 + 50);
                L.translate(i, o);
            }
            var T = re[e.preview][Wn.time];
            L.globalAlpha = 0.5;
            Xo(L, T, -T.width / 2, -T.height / 2);
            L.globalAlpha = 1;
            L.restore();
            if (Q[e.preview].grid === 0) {
                if (!e.label[e.mode]) {
                if (e.mode === 0) {
                    e.label[0] = Dt(W, te[TEXT.MODE_FREE], 20, "#e2c340");
                } else {
                    e.label[1] = Dt(W, te[TEXT.MODE_GRID], 20, "#e2c340");
                }
                }
                T = e.label[e.mode];
                Xo(L, T, z + -T.width / 2, Un.gauges.y - 26);
            }
            }
            if (e.crafting) {
            var r = e.timeout.update();
            for (var n = 0; n < e.can_craft.length; n++) {
                var a = e.can_craft[n];
                if (e.id == a.id) {
                var I = W * 42;
                var E = W * 17;
                Re(L, a.info.translate.x, a.info.translate.y + I * (1 - e.timeout.v), a.info.width, I * e.timeout.v + E, W * 10);
                L.fillStyle = "#55B973";
                L.fill();
                L.globalAlpha = 0.8;
                a.draw(L);
                } else {
                L.globalAlpha = 0.5;
                a.draw(L);
                }
                L.globalAlpha = 1;
            }
            if (r) {
                e.crafting = false;
                e.timeout.v = 0;
                e.timeout.o = false;
            }
            return true;
            }
            for (n = 0; n < e.can_craft.length; n++) {
            e.can_craft[n].draw(L);
            }
            return false;
        }
        function lT() {
            for (var e = Vn.inv, t = Wn.fast_units[Vn.id], i = 0; i < e.can_select.length; i++) {
            var o = e.can_select[i];
            var T = false;
            if ((t = Wn.fast_units[Vn.id]) && (t.right == o.id || t.clothe == o.id && t.clothe > 0)) {
                T = true;
                Xo(L, o.info.img[2], o.info.translate.x, o.info.translate.y, o.info.width, o.info.height);
            } else {
                o.draw(L);
            }
            var r = Vn.inv.n[o.id];
            if (r > 1) {
                Zo(r, o);
            }
            if (r > 0) {
                jo(i, o, T);
            }
            var n = Vn.chest;
            if (!!n.open && (n.id < 1 || n.id == o.id) && (!n.lock || n.pid == Vn.id)) {
                Un.plus_buttons[o.id].draw(L);
            }
            if (Vn.furnace.open && ItemType.WOOD == o.id) {
                Un.plus_buttons[o.id].draw(L);
            }
            if (Vn.well.open && ItemType.BUCKET_FULL == o.id) {
                Un.plus_buttons[o.id].draw(L);
            }
            if (Vn.windmill.open && ItemType.WHEAT == o.id) {
                Un.plus_buttons[o.id].draw(L);
            }
            if (Vn.extractor.open && ItemType.WOOD == o.id) {
                Un.plus_buttons[o.id].draw(L);
            }
            if (!!Vn.bread_oven.open && (ItemType.WOOD == o.id || ItemType.FLOUR == o.id)) {
                Un.plus_buttons[o.id].draw(L);
            }
            }
            if (o && i < e.max) {
            var a = re[SPRITE.EMPTY_SLOT][2];
            x = o.info.translate.x;
            y = o.info.translate.y;
            j = 1;
            for (; i < e.max; i++, j++) {
                Xo(L, a, x + j * (a.width + 5), y);
            }
            }
        }
        function ST() {
            L.save();
            var e = W;
            if (Vn.gauges.life.x < 0.25) {
            L.globalAlpha = Vn.gauges.warn_life.v;
            }
            var t = Vn.inv.can_select.length > 0 ? -70 : 0;
            if (Vn.chest.open || Vn.furnace.open && Vn.inv.find_item(ItemType.WOOD) != -1 || Vn.windmill.open && Vn.inv.find_item(ItemType.WHEAT) != -1 || Vn.extractor.open && Vn.inv.find_item(ItemType.WOOD) != -1 || Vn.well.open && Vn.inv.find_item(ItemType.BUCKET_FULL) != -1 || Vn.bread_oven.open && (Vn.inv.find_item(ItemType.WOOD) != -1 || Vn.inv.find_item(ItemType.FLOUR) != -1)) {
            t -= W * 50;
            }
            L.translate((H - W * 950) / 2, t);
            L.fillStyle = "#69A148";
            L.fillRect(this.translate.x + W * 37, this.translate.y + W * 17, Vn.gauges.life.x * 178 * W, W * 18);
            L.globalAlpha = 1;
            if (Vn.gauges.hunger.x < 0.35) {
            L.fillStyle = "#8F050A";
            L.globalAlpha = Vn.gauges.warn_hunger.v;
            L.fillRect(this.translate.x + W * 277, this.translate.y + W * 17, W * 178, W * 18);
            L.globalAlpha = 1;
            }
            L.fillStyle = "#AF352A";
            L.fillRect(this.translate.x + W * 277, this.translate.y + W * 17, Vn.gauges.hunger.x * 178 * W, W * 18);
            if (Vn.gauges.cold.x < 0.35) {
            L.fillStyle = "#366B91";
            L.globalAlpha = Vn.gauges.warn_cold.v;
            L.fillRect(this.translate.x + W * 517, this.translate.y + W * 17, W * 178, W * 18);
            L.globalAlpha = 1;
            }
            L.fillStyle = "#669BB1";
            L.fillRect(this.translate.x + W * 517, this.translate.y + W * 17, Vn.gauges.cold.x * 178 * W, W * 18);
            if (Vn.gauges.cold.x > 0.99) {
            if (Vn.gauges.warm.x < 0.35) {
                L.fillStyle = "#6C4036";
                L.globalAlpha = Vn.gauges.warn_warm.v;
                L.fillRect(this.translate.x + W * 517, this.translate.y + W * 17, W * 178, W * 18);
                L.globalAlpha = 1;
            }
            L.fillStyle = "#9C4036";
            L.fillRect(this.translate.x + W * 517, this.translate.y + W * 17, (1 - Vn.gauges.warm.x) * 178 * W, W * 18);
            }
            if(settings.percentages.enabled) {
                L.save();
                L.font = "34px Baloo Paaji";
                L.strokeStyle = "#2b2b2b";
                L.fillStyle = settings.colors.percentages;
                L.lineWidth = 7;
                L.strokeText(Math.floor(Vn.gauges.life.x * 200) + "hp", this.translate.x - 80 * W, this.translate.y + 35 * W);
                L.fillText(Math.floor(Vn.gauges.life.x * 200) + "hp", this.translate.x - 80 * W, this.translate.y + 35 * W);
                L.restore();
            };
            if (Vn.gauges.thirst.x < 0.35) {
            L.fillStyle = "#001A57";
            L.globalAlpha = Vn.gauges.warn_thirst.v;
            L.fillRect(this.translate.x + W * 757, this.translate.y + W * 17, W * 178, W * 18);
            L.globalAlpha = 1;
            }
            L.fillStyle = "#074A87";
            L.fillRect(this.translate.x + W * 757, this.translate.y + W * 17, Vn.gauges.thirst.x * 178 * W, W * 18);
            W = e;
            Xo(L, this.img, this.translate.x, this.translate.y);
            this.y = this.translate.y + t;
            L.restore();
            if (Vn.gauges.oxygen.x < 0.99) {
            var i = window.Math.floor(z - re[SPRITE.OXYGEN].width / 2);
            t += this.translate.y - re[SPRITE.OXYGEN].height - W * 5;
            L.fillStyle = "#BBE8EF";
            L.fillRect(i + 5, t + W * 5, W * 588 * Vn.gauges.oxygen.x, W * 10);
            if (Vn.gauges.oxygen.x < 0.35) {
                L.fillStyle = "#9BA8AF";
                L.globalAlpha = Vn.gauges.warn_oxygen.v;
                L.fillRect(i + 5, t + 5, W * 588, W * 10);
                L.globalAlpha = 1;
            }
            Xo(L, re[SPRITE.OXYGEN], i, t);
            this.y = t;
            }
        }
        function CT(e) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var t = (1 - this.hit.anim.v) * Xn * 600 * W;
            var i = window.Math.cos(this.hit.angle - this.angle) * t;
            var o = window.Math.sin(this.hit.angle - this.angle) * t;
            } else {
            i = 0;
            o = 0;
            }
            if (this.info & 1) {
            L.globalAlpha = 0.3;
            }
            var T = re[e][Wn.time];
            w = -T.width;
            h = -T.height;
            Xo(L, T, -w / 2 + i, -h / 2 + o, w, h);
            L.globalAlpha = 1;
            L.restore();
        }
        function bT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = re[ItemType.CHEST][Wn.time];
            w = -o.width;
            h = -o.height;
            Xo(L, o, -w / 2 + t, -h / 2 + i, w, h);
            if (this.lock) {
            o = re[ItemType.LOCK][Wn.time];
            w = -o.width;
            h = -o.height;
            Xo(L, o, -w / 2 + t - W * 1, -h / 2 + i, w, h);
            }
            L.restore();

            if(settings.drawinchest.enabled) {
            if(this.info > 0 && this.extra) {
                    L.save();
                    L.globalAlpha = 0.9;
                    Xo(L, Un.chest_buttons[this.extra].info.img[0], Vn.cam.x + this.x + 25, Vn.cam.y + this.y + 15, w + 25, h + 25);
                    L.globalAlpha = 1;
                    L.font = '20px Baloo Paaji';
                    L.strokeStyle = "black";
                    L.lineWidth = 7;
                    L.strokeText(this.extra, Vn.cam.x + this.x - 32, Vn.cam.y + this.y - 12);
                    L.strokeText("x" + this.info, Vn.cam.x + this.x - 32, Vn.cam.y + this.y + 20);
                    L.fillStyle = "white";
                    L.fillText(this.extra, Vn.cam.x + this.x - 32, Vn.cam.y + this.y - 12);
                    L.fillText("x" + this.info, Vn.cam.x + this.x - 32, Vn.cam.y + this.y + 20);
                    L.restore();
                };
            };
        }
        function NT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            var e = re[SPRITE.THORNBUSH_SEED_MOB][Wn.time];
            w = -e.width;
            h = -e.height;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function DT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            var e = re[SPRITE.GARLIC_SEED_MOB][Wn.time];
            w = -e.width;
            h = -e.height;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function mT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            var e = re[SPRITE.PUMPKIN_SEED_MOB][Wn.time];
            w = -e.width;
            h = -e.height;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function cT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            var e = re[ItemType.ALOE_VERA][Wn.time];
            w = -e.width;
            h = -e.height;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function vT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            var e = re[SPRITE.WHEAT_MOB][Wn.time];
            w = -e.width;
            h = -e.height;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function PT(e) {
            if ((e = e / 100) <= 0.8) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
                if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
                }
                var t = (1 - this.hit.anim.v) * Xn * 600 * W;
                var i = window.Math.cos(this.hit.angle - this.angle) * t;
                var o = window.Math.sin(this.hit.angle - this.angle) * t;
            } else {
                i = 0;
                o = 0;
            }
            L.globalAlpha = 0.5;
            de(L, i, o, W * 18, e);
            se(L, null, "#000000", W * 18);
            L.globalAlpha = 1;
            de(L, i, o, W * 18, e);
            se(L, null, SPRITE.BROWN_LIFE[Wn.time], W * 6);
            L.restore();
            }
        }
        function yT(e) {
            if ((e = e / 100) <= 0.96) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
                if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
                }
                var t = (1 - this.hit.anim.v) * Xn * 600 * W;
                var i = window.Math.cos(this.hit.angle - this.angle) * t;
                var o = window.Math.sin(this.hit.angle - this.angle) * t;
            } else {
                i = 0;
                o = 0;
            }
            L.globalAlpha = 0.5;
            de(L, i, o, W * 28, e);
            se(L, null, "#000000", W * 18);
            L.globalAlpha = 1;
            de(L, i, o, W * 28, e);
            se(L, null, SPRITE.CRAFT_LOADING[Wn.time], W * 6);
            L.restore();
            }
        }
        function pT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = re[SPRITE.ROOFS].length;
            var T = re[SPRITE.ROOFS][(this.j + this.i % 2) % o][Wn.time];
            w = -T.width;
            h = -T.height;
            Wn.fast_units[Vn.id];
            L.globalAlpha = 0.4;
            Xo(L, T, -w / 2 + t, -h / 2 + i, w, h);
            L.globalAlpha = 1;
            L.restore();
        }
        function gT(e) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var t = (1 - this.hit.anim.v) * Xn * 600 * W;
            var i = window.Math.cos(this.hit.angle - this.angle) * t;
            var o = window.Math.sin(this.hit.angle - this.angle) * t;
            } else {
            i = 0;
            o = 0;
            }
            if (this.halo.update()) {
            this.color += 0.2 + window.Math.random() * 0.3;
            }
            var T = re[SPRITE.GARLANDS][window.Math.floor(this.id + this.color) % 5][Wn.time];
            w = -T.width * this.halo.v;
            h = -T.height * this.halo.v;
            Xo(L, T, -w / 2 + i, -h / 2 + o, w, h);
            L.restore();
        }
        function MT(e) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var t = (1 - this.hit.anim.v) * Xn * 600 * W;
            var i = window.Math.cos(this.hit.angle - this.angle) * t;
            var o = window.Math.sin(this.hit.angle - this.angle) * t;
            } else {
            i = 0;
            o = 0;
            }
            if (e === SPRITE.BED_TOP && !Wn.transition) {
            var T = 0;
            for (var r = Wn.units[ITEMS.PLAYERS], n = 0; n < r.length; n++) {
                var a = v.dist(r[n], this);
                if (a < 140 && a > 35) {
                T = 0;
                break;
                }
                if (a <= 35) {
                T = 1;
                }
            }
            this.opacity = T === 0 ? window.Math.max(0.5, this.opacity - Xn / 1.5) : window.Math.min(1, this.opacity + Xn / 1.5);
            L.globalAlpha = this.opacity;
            }
            var I = re[e][Wn.time];
            w = -I.width;
            h = -I.height;
            Xo(L, I, -w / 2 + i, -h / 2 + o, w, h);
            L.globalAlpha = 1;
            L.restore();
        }
        function LT(e) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var t = (1 - this.hit.anim.v) * Xn * 600 * W;
            var i = window.Math.cos(this.hit.angle - this.angle) * t;
            var o = window.Math.sin(this.hit.angle - this.angle) * t;
            } else {
            i = 0;
            o = 0;
            }
            var T = re[e][Wn.time];
            w = -T.width;
            h = -T.height;
            Xo(L, T, -w / 2 + i, -h / 2 + o, w, h);
            L.restore();
        }
        var HT = 0;
        function wT(e, t, i, o, T, r, n, a = 0, I) {
            for (var E = e; E <= t; E++) {
            for (var _ = i; _ <= o; _++) {
                var s = zn.tiles[E][_];
                if (s !== undefined && s[r] !== undefined) {
                var R = s[r];
                var h = re[T][Wn.time][R.river];
                Xo(L, h, Vn.cam.x + R.x - h.width / (_scale_object * 4), Vn.cam.y + R.y - h.height / (_scale_object * 4), h.width / (_scale_object * 2), h.height / (_scale_object * 2));
                if (Gn.quality) {
                    var d = 2147483648;
                    var u = ((E * 1000 + _) * 1103515245 + 12345) % d / d;
                    if (u < 0.2) {
                    u = window.Math.floor(re[SPRITE.RIVER_DECO][Wn.time][R.river].length * (u * 5));
                    h = re[SPRITE.RIVER_DECO][Wn.time][R.river][u];
                    Xo(L, h, Vn.cam.x + R.x - h.width / (_scale_object * 4), Vn.cam.y + R.y - h.height / (_scale_object * 4), h.width / (_scale_object * 2), h.height / (_scale_object * 2));
                    } else if (R.current !== 0) {
                    h = re[SPRITE.RIVER_WAVE][Wn.time];
                    var A = (HT + E % 2 * 30) % 60;
                    L.globalAlpha = A < 30 ? A / 30 : 1 - (A - 30) / 30;
                    Xo(L, h, Vn.cam.x + R.x - h.width / (_scale_object * 4), Vn.cam.y + R.y - h.height / (_scale_object * 4) - 30 + A, h.width / (_scale_object * 2), h.height / (_scale_object * 2));
                    L.globalAlpha = 1;
                    }
                }
                }
            }
            }
        }
        function fT() {
            if ((this.info & 1) == 1) {
            this.dig = window.Math.min(this.dig + Xn, 2.2);
            } else {
            this.dig = window.Math.max(this.dig - Xn, 0);
            this.groundTimer += Xn;
            if (this.groundTimer > 0.1) {
                this.groundTimer = 0;
                var e = {
                x: this.x + window.Math.random() * 60 - 30,
                y: this.y + window.Math.random() * 60 - 30,
                a: 0,
                r: window.Math.random() * 30 + 30
                };
                this.ground.push(e);
            }
            }
            for (var t = 0; t < this.ground.length; t++) {
            e = this.ground[t];
            L.save();
            L.translate(Vn.cam.x + e.x, Vn.cam.y + e.y);
            e.a = window.Math.min(1, e.a + Xn / 2);
            var i = e.a;
            if (i < 0.2) {
                i *= 5;
            } else {
                i = i > 0.8 ? (1 - i) * 5 : 1;
            }
            L.globalAlpha = i * 0.8;
            he(L, 0, 0, e.r);
            se(L, SPRITE.SAND_WORM_GROUND[Wn.time]);
            L.restore();
            if (e.a === 1) {
                this.ground.splice(t, 1);
                t--;
            }
            }
        }
        function zT() {
            var e = undefined;
            var t = undefined;
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.breath.update();
            this.rotate.update();
            if (this.dig >= 0.1 && this.dig <= 1.1) {
            if ((i = window.Math.max(0, window.Math.min(1, this.dig - 0.1))) < 0.2) {
                i *= 5;
            } else {
                i = i > 0.8 ? (1 - i) * 5 : 1;
            }
            e = re[SPRITE.SAND_WORM1][Wn.time];
            w = -e.width * this.breath.v;
            h = -e.height * this.breath.v;
            L.globalAlpha = i;
            Xo(L, e, -w / 4, -h / 4, w / 2, h / 2);
            t = re[SPRITE.HURT_SAND_WORM1];
            }
            if (this.dig >= 0.9) {
            var i;
            if ((i = window.Math.max(0, window.Math.min(1, this.dig - 0.9))) < 0.2) {
                i *= 5;
            } else {
                i = 1;
            }
            e = re[SPRITE.SAND_WORM2][Wn.time];
            w = -e.width * this.breath.v;
            h = -e.height * this.breath.v;
            L.globalAlpha = i;
            Xo(L, e, -w / 4, -h / 4, w / 2, h / 2);
            t = re[SPRITE.HURT_SAND_WORM2];
            }
            if (this.action & STATE.HURT && t !== undefined) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = (0.6 - this.hit.v) * i;
            w = -t.width * this.breath.v;
            h = -t.height * this.breath.v;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            }
            L.globalAlpha = 1;
            L.restore();
        }
        function BT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            var e = v.dist(this, this.r);
            this.scale = e > 350 ? window.Math.min(this.scale + Xn / 2, 1.8) : window.Math.max(this.scale - Xn, 1);
            this.breath.update();
            this.rotate.update();
            this._alpha = e < 350 ? window.Math.max(0, this._alpha - Xn * 2.2) : window.Math.min(1, this._alpha + Xn * 2.2);
            var t = re[SPRITE.VULTURE_GROUND_ATTACK][Wn.time];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            L.globalAlpha = 1 - this._alpha;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            t = re[SPRITE.VULTURE_ATTACK][Wn.time];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            L.globalAlpha = this._alpha;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = (0.6 - this.hit.v) * (1 - this._alpha);
            t = re[SPRITE.HURT_VULTURE_GROUND];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            L.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            t = re[SPRITE.HURT_VULTURE];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            t = re[SPRITE.VULTURE_WING_LEFT_ATTACK][Wn.time];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            L.save();
            L.translate(W * -40, W * 80);
            L.rotate(this.rotate.v);
            L.globalAlpha = this._alpha;
            Xo(L, t, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            t = re[SPRITE.HURT_VULTURE_WING_LEFT];
            Xo(L, t, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
            t = re[SPRITE.VULTURE_WING_RIGHT_ATTACK][Wn.time];
            L.save();
            L.translate(W * 40, W * 80);
            L.rotate(-this.rotate.v);
            L.globalAlpha = this._alpha;
            Xo(L, t, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            t = re[SPRITE.HURT_VULTURE_WING_RIGHT];
            Xo(L, t, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.globalAlpha = 1;
            L.restore();
            L.restore();
        }
        function GT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            var e = v.dist(this, this.r);
            this.scale = e > 350 ? window.Math.min(this.scale + Xn / 2, 1.8) : window.Math.max(this.scale - Xn, 1);
            this.breath.update();
            this.rotate.update();
            this._alpha = e < 350 ? window.Math.max(0, this._alpha - Xn * 2.2) : window.Math.min(1, this._alpha + Xn * 2.2);
            t = (this.info & 1) == 0 ? re[SPRITE.HAWK_GROUND][Wn.time] : re[SPRITE.HAWK_GROUND_ATTACK][Wn.time];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            L.globalAlpha = 1 - this._alpha;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            t = (this.info & 1) == 0 ? re[SPRITE.HAWK][Wn.time] : re[SPRITE.HAWK_ATTACK][Wn.time];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            L.globalAlpha = this._alpha;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = (0.6 - this.hit.v) * (1 - this._alpha);
            var t = re[SPRITE.HURT_HAWK_GROUND];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            L.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            t = re[SPRITE.HURT_HAWK];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            t = (this.info & 1) == 0 ? re[SPRITE.HAWK_WING_LEFT][Wn.time] : re[SPRITE.HAWK_WING_LEFT_ATTACK][Wn.time];
            w = -t.width * this.breath.v * this.scale;
            h = -t.height * this.breath.v * this.scale;
            L.save();
            L.translate(W * -20, W * 0);
            L.rotate(this.rotate.v);
            L.globalAlpha = this._alpha;
            Xo(L, t, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            t = re[SPRITE.HURT_HAWK_WING_LEFT];
            Xo(L, t, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
            t = (this.info & 1) == 0 ? re[SPRITE.HAWK_WING_RIGHT][Wn.time] : re[SPRITE.HAWK_WING_RIGHT_ATTACK][Wn.time];
            L.save();
            L.translate(W * 20, W * 0);
            L.rotate(-this.rotate.v);
            L.globalAlpha = this._alpha;
            Xo(L, t, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            t = re[SPRITE.HURT_HAWK_WING_RIGHT];
            Xo(L, t, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.globalAlpha = 1;
            L.restore();
            L.restore();
        }
        function WT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (v.dist(this, this.r) > 300) {
            this.scale = window.Math.min(this.scale + Xn / 2, 1.8);
            } else {
            this.scale = window.Math.max(this.scale - Xn, 1);
            }
            this.breath.update();
            this.rotate.update();
            e = this.info === 0 ? re[SPRITE.BABY_LAVA][Wn.time] : re[SPRITE.BABY_LAVA_ATTACK][Wn.time];
            w = -e.width * this.breath.v * this.scale;
            h = -e.height * this.breath.v * this.scale;
            Xo(L, e, -w / 4, -h / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            var e = re[SPRITE.HURT_BABY_LAVA];
            Xo(L, e, -w / 4, -h / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            e = this.info === 0 ? re[SPRITE.BABY_LAVA_WING_LEFT][Wn.time] : re[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][Wn.time];
            w = -e.width * this.breath.v * this.scale;
            h = -e.height * this.breath.v * this.scale;
            L.save();
            L.translate(W * -40, W * 10);
            L.rotate(this.rotate.v);
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_BABY_LAVA_WING_LEFT];
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
            e = this.info === 0 ? re[SPRITE.BABY_LAVA_WING_RIGHT][Wn.time] : re[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][Wn.time];
            L.save();
            L.translate(W * 40, W * 10);
            L.rotate(-this.rotate.v);
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_BABY_LAVA_WING_RIGHT];
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
            L.restore();
        }
        function VT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (v.dist(this, this.r) > 300) {
            this.scale = window.Math.min(this.scale + Xn / 2, 1.8);
            } else {
            this.scale = window.Math.max(this.scale - Xn, 1);
            }
            this.breath.update();
            this.rotate.update();
            e = this.info === 0 ? re[SPRITE.BABY_DRAGON][Wn.time] : re[SPRITE.BABY_DRAGON_ATTACK][Wn.time];
            w = -e.width * this.breath.v * this.scale;
            h = -e.height * this.breath.v * this.scale;
            Xo(L, e, -w / 4, -h / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            var e = re[SPRITE.HURT_BABY_DRAGON];
            Xo(L, e, -w / 4, -h / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            e = this.info === 0 ? re[SPRITE.BABY_DRAGON_WING_LEFT][Wn.time] : re[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][Wn.time];
            w = -e.width * this.breath.v * this.scale;
            h = -e.height * this.breath.v * this.scale;
            L.save();
            L.translate(W * -40, W * 10);
            L.rotate(this.rotate.v);
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_BABY_DRAGON_WING_LEFT];
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
            e = this.info === 0 ? re[SPRITE.BABY_DRAGON_WING_RIGHT][Wn.time] : re[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][Wn.time];
            L.save();
            L.translate(W * 40, W * 10);
            L.rotate(-this.rotate.v);
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_BABY_DRAGON_WING_RIGHT];
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
            L.restore();
        }
        function KT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (v.dist(this, this.r) > 300) {
            this.scale = window.Math.min(this.scale + Xn / 2, 1.8);
            } else {
            this.scale = window.Math.max(this.scale - Xn, 1);
            }
            this.breath.update();
            this.rotate.update();
            var e = re[SPRITE.LAVA_DRAGON][Wn.time];
            w = -e.width * this.breath.v * this.scale;
            h = -e.height * this.breath.v * this.scale;
            Xo(L, e, -w / 4, -h / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_LAVA_DRAGON];
            Xo(L, e, -w / 4, -h / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            e = re[SPRITE.LAVA_WING_LEFT][Wn.time];
            w = -e.width * this.breath.v * this.scale;
            h = -e.height * this.breath.v * this.scale;
            L.save();
            L.translate(W * -60, W * 20);
            L.rotate(this.rotate.v);
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_LAVA_WING_LEFT];
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
            e = re[SPRITE.LAVA_WING_RIGHT][Wn.time];
            L.save();
            L.translate(W * 60, W * 20);
            L.rotate(-this.rotate.v);
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_LAVA_WING_RIGHT];
            Xo(L, e, -w * W / 4, -h * W / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
            L.restore();
        }
        function YT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (v.dist(this, this.r) > 300) {
            this.scale = window.Math.min(this.scale + Xn / 2, 1.8);
            } else {
            this.scale = window.Math.max(this.scale - Xn, 1);
            }
            this.breath.update();
            this.rotate.update();
            var e = re[SPRITE.DRAGON][Wn.time];
            w = -e.width * this.breath.v * this.scale;
            h = -e.height * this.breath.v * this.scale;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_DRAGON];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            e = re[SPRITE.WING_LEFT][Wn.time];
            w = -e.width * this.breath.v * this.scale;
            h = -e.height * this.breath.v * this.scale;
            L.save();
            L.translate(W * -30, W * 70);
            L.rotate(this.rotate.v);
            Xo(L, e, W * -10, W * -40, w, h);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_WING_LEFT];
            Xo(L, e, W * -10, W * -40, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
            e = re[SPRITE.WING_RIGHT][Wn.time];
            L.save();
            L.translate(W * 30, W * 70);
            L.rotate(-this.rotate.v);
            Xo(L, e, W * 10 - w, W * -40, w, h);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_WING_RIGHT];
            Xo(L, e, W * 10 - w, W * -40, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
            L.restore();
        }
        function UT(e, t) {
            if (re[e][this.info] !== undefined) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (e === SPRITE.GIFT) {
                e = SPRITE.CRATE;
                this.info = 36;
            }
            var i = re[e][this.info][Wn.time];
            w = -i.width / 2;
            h = -i.height / 2;
            Xo(L, i, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
                if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
                }
                L.globalAlpha = 0.6 - this.hit.v;
                var o = fr(this.info, i, Lr);
                Xo(L, o, -w / 2, -h / 2, w, h);
                L.globalAlpha = 1;
            }
            L.restore();
            }
        }
        function kT(e, t) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            var i = re[e][Wn.time];
            w = -i.width;
            h = -i.height;
            Xo(L, i, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            i = re[t];
            Xo(L, i, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
        }
        function FT() {
            this.breath.update();
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            e = this.info === 0 ? re[SPRITE.BABY_MAMMOTH][Wn.time] : re[SPRITE.BABY_MAMMOTH_ATTACK][Wn.time];
            w = -e.width * this.breath.v;
            h = -e.height * this.breath.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            var e = re[SPRITE.HURT_BABY_MAMMOTH];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
        }
        function xT() {
            this.breath.update();
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            e = this.info === 0 ? re[SPRITE.BOAR][Wn.time] : re[SPRITE.BOAR_ATTACK][Wn.time];
            w = -e.width * this.breath.v;
            h = -e.height * this.breath.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            var e = re[SPRITE.HURT_BOAR];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
        }
        function JT() {
            this.breath.update();
            this.breathl.update();
            this.breathr.update();
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            e = this.info === 0 ? re[SPRITE.CRAB_BOSS][Wn.time] : re[SPRITE.CRAB_BOSS_ATTACK][Wn.time];
            w = -e.width * this.breath.v;
            h = -e.height * this.breath.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            var e = re[SPRITE.HURT_CRAB_BOSS];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            if (this.action & STATE.COLD) {
            if (this.heal.update() && this.heal.o == 0) {
                this.action -= STATE.COLD;
            }
            L.globalAlpha = 0.6 - this.heal.v;
            e = re[SPRITE.HEAL_CRAB_BOSS];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle + n);
            L.translate(100, 0);
            L.rotate(r);
            e = this.info === 0 ? re[SPRITE.CRAB_BOSS_CLAW_LEFT][Wn.time] : re[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][Wn.time];
            w = -e.width * this.breathl.v;
            h = -e.height * this.breathl.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            if (this.action & STATE.COLD) {
            L.globalAlpha = 0.6 - this.heal.v;
            e = re[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle + r + n);
            L.translate(100, 0);
            L.rotate(r);
            e = this.info === 0 ? re[SPRITE.CRAB_BOSS_CLAW_RIGHT][Wn.time] : re[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][Wn.time];
            w = -e.width * this.breathr.v;
            h = -e.height * this.breathr.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            if (this.action & STATE.COLD) {
            L.globalAlpha = 0.6 - this.heal.v;
            e = re[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
        }
        function XT() {
            this.breath.update();
            this.breathl.update();
            this.breathr.update();
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            e = this.info === 0 ? re[SPRITE.CRAB][Wn.time] : re[SPRITE.CRAB_ATTACK][Wn.time];
            w = -e.width * this.breath.v;
            h = -e.height * this.breath.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            var e = re[SPRITE.HURT_CRAB];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            if (this.action & STATE.COLD) {
            if (this.heal.update() && this.heal.o == 0) {
                this.action -= STATE.COLD;
            }
            L.globalAlpha = 0.6 - this.heal.v;
            e = re[SPRITE.HEAL_CRAB];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle + n);
            L.translate(55, 0);
            L.rotate(r);
            e = this.info === 0 ? re[SPRITE.CRAB_CLAW_LEFT][Wn.time] : re[SPRITE.CRAB_CLAW_LEFT_ATTACK][Wn.time];
            w = -e.width * this.breathl.v;
            h = -e.height * this.breathl.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_CRAB_CLAW_LEFT];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            if (this.action & STATE.COLD) {
            L.globalAlpha = 0.6 - this.heal.v;
            e = re[SPRITE.HEAL_CRAB_CLAW_LEFT];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle + r + n);
            L.translate(55, 0);
            L.rotate(r);
            e = this.info === 0 ? re[SPRITE.CRAB_CLAW_RIGHT][Wn.time] : re[SPRITE.CRAB_CLAW_RIGHT_ATTACK][Wn.time];
            w = -e.width * this.breathr.v;
            h = -e.height * this.breathr.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            L.globalAlpha = 0.6 - this.hit.v;
            e = re[SPRITE.HURT_CRAB_CLAW_RIGHT];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            if (this.action & STATE.COLD) {
            L.globalAlpha = 0.6 - this.heal.v;
            e = re[SPRITE.HEAL_CRAB_CLAW_RIGHT];
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
        }
        function qT() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.born = window.Math.min(1, this.born + Xn * 2);
            this.breath.update();
            var e = re[SPRITE.SPELL][Wn.time][this.spell];
            if (this.spell < 2) {
            w = -e.width * this.breath.v;
            h = -e.height * this.breath.v;
            } else if (this.fly === 0) {
            w = -e.width;
            h = -e.height;
            } else {
            w = -e.width * 1.35;
            h = -e.height * 1.35;
            }
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            L.restore();
        }
        function jT(e, t) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.breath.update();
            var i = re[e][Wn.time];
            w = -i.width * this.breath.v;
            h = -i.height * this.breath.v;
            Xo(L, i, -w / 2, -h / 2, w, h);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            i = re[t];
            Xo(L, i, -w / 2, -h / 2, w, h);
            L.globalAlpha = 1;
            }
            L.restore();
        }
        function ZT(e, t) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.breath.update();
            var i = re[e][Wn.time];
            w = -i.width * this.breath.v;
            h = -i.height * this.breath.v;
            Xo(L, i, -w / 4, -h / 4, w / 2, h / 2);
            if (this.action & STATE.HURT) {
            if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
            }
            L.globalAlpha = 0.6 - this.hit.v;
            i = re[t];
            Xo(L, i, -w / 4, -h / 4, w / 2, h / 2);
            L.globalAlpha = 1;
            }
            L.restore();
        }
        function $T(e, t, i) {
            L.save();
            L.translate(Vn.cam.x + t, Vn.cam.y + i);
            L.rotate(this.angle);
            L.translate(this.x - t, this.y - i);
            this.breath.update();
            var o = re[e][Wn.time];
            w = -o.width * this.breath.v;
            h = -o.height * this.breath.v;
            Xo(L, o, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function QT(e) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.breath.update();
            w = -re[e][Wn.time].width * this.breath.v;
            h = -re[e][Wn.time].height * this.breath.v;
            Xo(L, re[e][Wn.time], -w / 2, -h / 2, w, h);
            L.restore();
        }
        function er() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = this.info & 15;
            if (this.info === 10 || o === 0) {
            L.rotate(this.angle);
            this.ground.update();
            if (this.info & 16) {
                var T = re[SPRITE.PLANT_THORNBUSH_DRIED][Wn.time];
            } else {
                T = re[ItemType.THORNBUSH_SEED][Wn.time];
            }
            var r = -T.width * this.ground.v;
            var n = -T.height * this.ground.v;
            Xo(L, T, -r / 2 + t, -n / 2 + i, r, n);
            } else {
            T = this.info & 16 ? re[SPRITE.DRIED_THORNBUSH][Wn.time] : re[ItemType.THORNBUSH][Wn.time];
            L.translate(0, T.height / 2);
            Xo(L, T, t - T.width / 2, -T.height + i);
            }
            L.restore();
        }
        function tr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = this.info & 15;
            if (this.info === 10 || o === 0) {
            L.rotate(this.angle);
            this.ground.update();
            if (this.info & 16) {
                var T = re[SPRITE.PLANT_GARLIC_DRIED][Wn.time];
            } else {
                T = re[ItemType.GARLIC_SEED][Wn.time];
            }
            var r = -T.width * this.ground.v;
            var n = -T.height * this.ground.v;
            Xo(L, T, -r / 2 + t, -n / 2 + i, r, n);
            } else {
            T = this.info & 16 ? re[SPRITE.DRIED_GARLIC][Wn.time] : re[ItemType.GARLIC][Wn.time];
            L.translate(0, T.height / 2);
            Xo(L, T, t - T.width / 2, -T.height + i);
            }
            L.restore();
        }
        function ir() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = this.info & 15;
            if (this.info === 10 || o === 0) {
            L.rotate(this.angle);
            this.ground.update();
            if (this.info & 16) {
                var T = re[SPRITE.PLANT_ALOE_VERA_DRIED][Wn.time];
            } else {
                T = re[ItemType.ALOE_VERA_SEED][Wn.time];
            }
            var r = -T.width * this.ground.v;
            var n = -T.height * this.ground.v;
            Xo(L, T, -r / 2 + t, -n / 2 + i, r, n);
            } else {
            T = this.info & 16 ? re[SPRITE.DRIED_ALOE_VERA][Wn.time] : re[ItemType.ALOE_VERA][Wn.time];
            L.translate(0, T.height / 2);
            Xo(L, T, t - T.width / 2, -T.height + i);
            }
            L.restore();
        }
        function or() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = this.info & 15;
            if (this.info === 10 || o === 0) {
            L.rotate(this.angle);
            this.ground.update();
            if (this.info & 16) {
                var T = re[SPRITE.PLANT_WATERMELON_DRIED][Wn.time];
            } else {
                T = re[ItemType.WATERMELON_SEED][Wn.time];
            }
            var r = -T.width * this.ground.v;
            var n = -T.height * this.ground.v;
            Xo(L, T, -r / 2 + t, -n / 2 + i, r, n);
            } else {
            T = this.info & 16 ? re[SPRITE.DRIED_WATERMELON][Wn.time] : re[ItemType.WATERMELON][Wn.time];
            L.translate(0, T.height / 2);
            Xo(L, T, t - T.width / 2, -T.height + i);
            }
            L.restore();
        }
        function Tr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = this.info & 15;
            if (this.info === 10 || o === 0) {
            L.rotate(this.angle);
            this.ground.update();
            if (this.info & 16) {
                var T = re[SPRITE.PLANT_CARROT_DRIED][Wn.time];
            } else {
                T = re[ItemType.CARROT_SEED][Wn.time];
            }
            var r = -T.width * this.ground.v;
            var n = -T.height * this.ground.v;
            Xo(L, T, -r / 2 + t, -n / 2 + i, r, n);
            } else {
            T = this.info & 16 ? re[SPRITE.DRIED_CARROT][Wn.time] : re[ItemType.CARROT][Wn.time];
            L.translate(0, T.height / 2);
            Xo(L, T, t - T.width / 2, -T.height + i);
            }
            L.restore();
        }
        function rr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = this.info & 15;
            if (this.info === 10 || o === 0) {
            L.rotate(this.angle);
            this.ground.update();
            if (this.info & 16) {
                var T = re[SPRITE.PLANT_PUMPKIN_DRIED][Wn.time];
            } else {
                T = re[ItemType.PUMPKIN_SEED][Wn.time];
            }
            var r = -T.width * this.ground.v;
            var n = -T.height * this.ground.v;
            Xo(L, T, -r / 2 + t, -n / 2 + i, r, n);
            } else {
            T = this.info & 16 ? re[SPRITE.DRIED_PUMPKIN][Wn.time] : re[ItemType.PUMPKIN][Wn.time];
            L.translate(0, T.height / 2);
            Xo(L, T, t - T.width / 2, -T.height + i);
            }
            L.restore();
        }
        function nr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            var o = this.info & 15;
            if (this.info === 10 || o === 0) {
            L.rotate(this.angle);
            this.ground.update();
            if (this.info & 16) {
                var T = re[SPRITE.WHEAT_SEED_DRIED][Wn.time];
            } else {
                T = re[ItemType.WHEAT_SEED][Wn.time];
            }
            var r = -T.width * this.ground.v;
            var n = -T.height * this.ground.v;
            Xo(L, T, -r / 2 + t, -n / 2 + i, r, n);
            } else {
            T = (this.wind.update(), this.info & 16) ? re[SPRITE.DRIED_WHEAT][Wn.time] : re[ItemType.WHEAT][Wn.time];
            L.translate(0, T.height / 2);
            L.rotate(this.wind.v);
            Xo(L, T, t - T.width / 2, -T.height + i);
            }
            L.restore();
        }
        function ar() {
            if (this.info >= 10) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
                if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
                }
                var e = (1 - this.hit.anim.v) * Xn * 600 * W;
                var t = window.Math.cos(this.hit.angle - this.angle) * e;
                var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
                t = 0;
                i = 0;
            }
            this.ground.update();
            var o = re[ItemType.BERRY_SEED][Wn.time];
            var T = -o.width * this.ground.v;
            var r = -o.height * this.ground.v;
            Xo(L, o, -T / 2 + t, -r / 2 + i, T, r);
            L.restore();
            }
        }
        function Ir() {
            if (this.info !== 10) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
                if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
                }
                var e = (1 - this.hit.anim.v) * Xn * 600 * W;
                var t = window.Math.cos(this.hit.angle - this.angle) * e;
                var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
                t = 0;
                i = 0;
            }
            if (this.info & 16) {
                var o = re[SPRITE.DRIED_PLANT][Wn.time];
            } else {
                o = re[SPRITE.PLANT_MINI][Wn.time];
            }
            Xo(L, o, -o.width / 2 + t, -o.width / 2 + i);
            L.restore();
            for (var T = this.info & 15, r = 0; r < T; r++) {
                this.fruits[r].draw(SPRITE.FRUIT);
            }
            }
        }
        function Er() {
            if (this.info >= 10) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
                if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
                }
                var e = (1 - this.hit.anim.v) * Xn * 600 * W;
                var t = window.Math.cos(this.hit.angle - this.angle) * e;
                var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
                t = 0;
                i = 0;
            }
            this.ground.update();
            var o = re[ItemType.TOMATO_SEED][Wn.time];
            var T = -o.width * this.ground.v;
            var r = -o.height * this.ground.v;
            Xo(L, o, -T / 2 + t, -r / 2 + i, T, r);
            L.restore();
            }
        }
        function _r() {
            if (this.info !== 10) {
            for (var e = this.info & 15, t = 0; t < e; t++) {
                this.fruits[t].draw(ItemType.TOMATO, this.x, this.y);
            }
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
                if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
                }
                var i = (1 - this.hit.anim.v) * Xn * 600 * W;
                var o = window.Math.cos(this.hit.angle - this.angle) * i;
                var T = window.Math.sin(this.hit.angle - this.angle) * i;
            } else {
                o = 0;
                T = 0;
            }
            if (this.info & 16) {
                var r = re[SPRITE.DRIED_TOMATO_MINI][Wn.time];
            } else {
                r = re[SPRITE.TOMATO_MINI][Wn.time];
            }
            Xo(L, r, -r.width / 2 + o, -r.width / 2 + T);
            L.restore();
            }
        }
        function sr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            if (this.info) {
            img = re[SPRITE.FURNACE_ON][Wn.time];
            } else {
            img = re[ItemType.FURNACE][Wn.time];
            }
            Xo(L, img, -img.width / 2 + t, -img.height / 2 + i);
            L.restore();
        }
        function Rr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.ground.update();
            L.globalAlpha = 0.3;
            var e = re[SPRITE.GROUND_FIRE][Wn.time];
            var t = -e.width * this.ground.v;
            var i = -e.height * this.ground.v;
            Xo(L, e, -t / 2, -i / 2, t, i);
            L.globalAlpha = 1;
            L.restore();
        }
        function hr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744 && (this.smog.length == 0 || this.smog[this.smog.length - 1] <= SPRITE.SMOG_PUSH)) {
            this.smog.push(SPRITE.SMOG);
            }
            for (var e = 0; e < this.smog.length; e++) {
            this.smog[e] = window.Math.max(0, this.smog[e] - Xn * SPRITE.SMOG_SPEED);
            L.globalAlpha = this.smog[e] / 1.3;
            var t = (1 - this.smog[e]) * 40;
            var i = (1 - this.smog[e]) * 35 + 10;
            he(L, W * -68 + window.Math.cos(-this.angle - window.Math.PI / 2) * t, W * -20 + window.Math.sin(-this.angle - window.Math.PI / 2) * t, i);
            se(L, "#333333");
            }
            L.globalAlpha = 1;
            if (this.smog.length > 0 && this.smog[0] === 0) {
            this.smog.shift();
            }
            L.restore();
        }
        function dr(e) {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.ground.update();
            L.globalAlpha = 0.3;
            var t = -(n = re[SPRITE.GROUND_FIRE][Wn.time]).width * this.ground.v;
            var i = -n.height * this.ground.v;
            Xo(L, n, -t / 2, -i / 2, t, i);
            L.globalAlpha = 1;
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var o = (1 - this.hit.anim.v) * Xn * 600 * W;
            var T = window.Math.cos(this.hit.angle - this.angle) * o;
            var r = window.Math.sin(this.hit.angle - this.angle) * o;
            } else {
            T = 0;
            r = 0;
            }
            var n = re[e][Wn.time];
            Xo(L, n, -n.width / 2 + T, -n.height / 2 + r);
            L.restore();
        }
        function ur() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744) {
            var o = re[SPRITE.BREAD_OVEN_ON][Wn.time];
            Xo(L, o, -o.width / 2 + t, -o.height / 2 + i);
            this.up.update();
            var T = -(o = re[SPRITE.BREAD_LIGHT_UP][Wn.time]).width * this.up.v;
            var r = -o.height * this.up.v;
            Xo(L, o, -T / 2 + W * 1, -r / 2 + W * 3, T, r);
            } else {
            o = re[ItemType.BREAD_OVEN][Wn.time];
            Xo(L, o, -o.width / 2 + t, -o.height / 2 + i);
            }
            L.restore();
        }
        function Ar() {
            if (this.hit.update) {
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            if (this.info & 255 && (this.info & 65280) != 65280) {
            this.rotate = (this.rotate + Xn * 0.5) % T;
            }
            L.save();
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.save();
            L.rotate(this.rotate);
            var o = re[SPRITE.WINDMILL_WINGS][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
            L.save();
            L.rotate(this.angl);
            o = re[SPRITE.WINDMILL_HEAD][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
            L.restore();
        }
        function Or() {
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            L.save();
            if (this.info & 255 && (this.info & 65280) != 65280) {
            t += window.Math.random() * 2 - 1;
            i += window.Math.random() * 2 - 1;
            }
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.rotate(this.angle);
            var o = re[ItemType.STONE_EXTRACTOR][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            if (this.info & 255 && (this.info & 65280) != 65280) {
            this.rotate = (this.rotate + Xn * 3) % T;
            }
            L.rotate(this.rotate);
            o = re[SPRITE.EXTRACTOR_MACHINE0_STONE][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
        }
        function lr() {
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            L.save();
            if (this.info & 255 && (this.info & 65280) != 65280) {
            t += window.Math.random() * 2 - 1;
            i += window.Math.random() * 2 - 1;
            }
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.rotate(this.angle);
            var o = re[ItemType.GOLD_EXTRACTOR][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            if (this.info & 255 && (this.info & 65280) != 65280) {
            this.rotate = (this.rotate + Xn * 3) % T;
            }
            L.rotate(this.rotate);
            o = re[SPRITE.EXTRACTOR_MACHINE0_GOLD][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
        }
        function Sr() {
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            L.save();
            if (this.info & 255 && (this.info & 65280) != 65280) {
            t += window.Math.random() * 2 - 1;
            i += window.Math.random() * 2 - 1;
            }
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.rotate(this.angle);
            var o = re[ItemType.DIAMOND_EXTRACTOR][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            if (this.info & 255 && (this.info & 65280) != 65280) {
            this.rotate = (this.rotate + Xn * 3) % T;
            }
            L.rotate(this.rotate);
            o = re[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
        }
        function Cr() {
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            L.save();
            if (this.info & 255 && (this.info & 65280) != 65280) {
            t += window.Math.random() * 2 - 1;
            i += window.Math.random() * 2 - 1;
            }
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.rotate(this.angle);
            var o = re[ItemType.AMETHYST_EXTRACTOR][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            if (this.info & 255 && (this.info & 65280) != 65280) {
            this.rotate = (this.rotate + Xn * 3) % T;
            }
            L.rotate(this.rotate);
            o = re[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
        }
        function br() {
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            L.save();
            if (this.info & 255 && (this.info & 65280) != 65280) {
            t += window.Math.random() * 2 - 1;
            i += window.Math.random() * 2 - 1;
            }
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.rotate(this.angle);
            var o = re[ItemType.REIDITE_EXTRACTOR][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            if (this.info & 255 && (this.info & 65280) != 65280) {
            this.rotate = (this.rotate + Xn * 3) % T;
            }
            L.rotate(this.rotate);
            o = re[SPRITE.EXTRACTOR_MACHINE0_REIDITE][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
        }
        function Nr() {
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            L.save();
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.rotate(this.angle);
            var o = re[ItemType.WINDMILL][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
        }
        function Dr(e, t, i) {
console.log(e)
            if (Yn.socket && Yn.socket.readyState === 1) {
            Yn.socket.send(window.msgpack.encode(__p_5863156023((e, t = window.Math.floor(window.Math.random() * 256)) => {
                return [...e.map((i, o) => i ^ t ^ (Vn.id ? Vn.id : 0) ^ e.length), t];
            }, 1)(window.msgpack.encode(e))));
            }
        }
        function mr() {
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            this.rotate1 = (this.rotate1 + Xn * 3) % T;
            this.rotate2 = (this.rotate2 - Xn * 3) % T;
            L.save();
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.save();
            L.rotate(this.angle);
            var o = re[ItemType.EMERALD_MACHINE][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
            L.save();
            L.rotate(this.rotate1);
            o = re[SPRITE.EMERALD_MACHINE_ROTATE][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
            L.save();
            L.rotate(this.rotate2);
            o = re[SPRITE.EMERALD_MACHINE_HOLE][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
            L.restore();
        }
        function cr() {
            if (this.hit.update) {
            if (this.hit.anim.update() && this.hit.anim.o == 0) {
                this.hit.update = false;
            }
            var e = (1 - this.hit.anim.v) * Xn * 600 * W;
            var t = window.Math.cos(this.hit.angle - this.angle) * e;
            var i = window.Math.sin(this.hit.angle - this.angle) * e;
            } else {
            t = 0;
            i = 0;
            }
            this.rotate1 = (this.rotate1 + Xn * 3) % T;
            this.rotate2 = (this.rotate2 - Xn * 3) % T;
            L.save();
            L.translate(Vn.cam.x + this.x + t, Vn.cam.y + this.y + i);
            L.save();
            L.rotate(this.angle);
            var o = re[ItemType.RESURRECTION][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
            L.save();
            L.rotate(this.rotate1);
            o = re[SPRITE.RESURRECTION_ROTATE][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
            L.save();
            L.rotate(this.rotate2);
            o = re[SPRITE.RESURRECTION_HOLE][Wn.time];
            Xo(L, o, -o.width / 2, -o.height / 2);
            L.restore();
            L.restore();
        }
        function vr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.halo.update();
            var e = re[SPRITE.EMERALD_MACHINE_GROUND][Wn.time];
            w = -e.width * this.halo.v;
            h = -e.height * this.halo.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function Pr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.halo.update();
            var e = re[SPRITE.RESURRECTION_GROUND][Wn.time];
            w = -e.width * this.halo.v;
            h = -e.height * this.halo.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function yr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.halo.update();
            var e = re[SPRITE.HALO_FIRE][Wn.time];
            w = -e.width * this.halo.v;
            h = -e.height * this.halo.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function pr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.angle);
            this.fire.update();
            var e = re[SPRITE.FIRE][Wn.time];
            w = -e.width * this.fire.v;
            h = -e.height * this.fire.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            this.halo.update();
            e = re[SPRITE.HALO_FIRE][Wn.time];
            w = -e.width * this.halo.v;
            h = -e.height * this.halo.v;
            Xo(L, e, -w / 2, -h / 2, w, h);
            L.restore();
        }
        function gr(e, t, i) {
            if (e >= 0) {
            var o = re[e][Wn.time];
            switch (e) {
                case ItemType.STONE_PICK:
                case ItemType.GOLD_PICK:
                case ItemType.DIAMOND_PICK:
                case ItemType.WOOD_PICK:
                case ItemType.AMETHYST_PICK:
                case ItemType.REIDITE_PICK:
                tn(e, o, -o.width / 2 - W * (45 + t), -o.height / 2 + W * (i + 22));
                break;
                case ItemType.WOOD_SWORD:
                case ItemType.STONE_SWORD:
                case ItemType.GOLD_SWORD:
                case ItemType.DIAMOND_SWORD:
                Tn(e, o, -o.width / 4 - W * (47 + t), -o.height / 4 + W * (i + 45));
                break;
                case ItemType.AMETHYST_SWORD:
                Tn(e, o, -o.width / 4 - W * (52 + t), -o.height / 4 + W * (i + 45));
                break;
                case ItemType.REIDITE_SWORD:
                Tn(e, o, -o.width / 4 - W * (47 + t), -o.height / 4 + W * (i + 44));
                break;
                case ItemType.PIRATE_SWORD:
                tn(e, o, -o.width / 2 - W * (47 + t), -o.height / 2 + W * (i + 44));
                break;
                case ItemType.DRAGON_SWORD:
                tn(e, o, -o.width / 2 - W * (40 + t), -o.height / 2 + W * (i + 65));
                break;
                case ItemType.WOOD_SPEAR:
                case ItemType.REIDITE_SPEAR:
                Tn(e, o, -o.width / 4 - W * (37 + t), -o.height / 4 + W * (i + 85));
                break;
                case ItemType.GOLD_PITCHFORK:
                case ItemType.YUSUKEDAO_ITEM1:
                case ItemType.YUSUKEDAO_ITEM2:
                case ItemType.PITCHFORK:
                Tn(e, o, -o.width / 4 - W * (26 + t), -o.height / 4 + W * (i + 77));
                break;
                case ItemType.LAVA_SPEAR:
                Tn(e, o, -o.width / 4 - W * (37 + t), -o.height / 4 + W * (i + 85));
                break;
                case ItemType.LAVA_SWORD:
                Tn(e, o, -o.width / 4 - W * (47 + t), -o.height / 4 + W * (i + 44));
                break;
                case ItemType.CURSED_SWORD:
                tn(e, o, -o.width / 2 - W * (47 + t), -o.height / 2 + W * (i + 44));
                break;
                case ItemType.WOOD_BOW:
                case ItemType.STONE_BOW:
                case ItemType.GOLD_BOW:
                case ItemType.DIAMOND_BOW:
                case ItemType.AMETHYST_BOW:
                case ItemType.REIDITE_BOW:
                case ItemType.DRAGON_BOW:
                Tn(e, o, -o.width / 4 - W * (37 + t), -o.height / 4 + W * (i + 30));
                break;
                case ItemType.MACHETE:
                Tn(e, o, -o.width / 4 - W * (47 + t), -o.height / 4 + W * (i + 35));
                break;
                case ItemType.WAND1:
                case ItemType.WAND2:
                Tn(e, o, -o.width / 4 - W * (47 + t), -o.height / 4 + W * (i + 40));
                break;
                case ItemType.SADDLE:
                Tn(e, o, -o.width / 4 - W * (47 + t), -o.height / 4 + W * (i + 34));
                break;
                case ItemType.STONE_SPEAR:
                case ItemType.GOLD_SPEAR:
                case ItemType.DIAMOND_SPEAR:
                case ItemType.AMETHYST_SPEAR:
                Tn(e, o, -o.width / 4 - W * (37 + t), -o.height / 4 + W * (i + 90));
                break;
                case ItemType.CRAB_SPEAR:
                Tn(e, o, -o.width / 4 - W * (40 + t), -o.height / 4 + W * (i + 85));
                break;
                case ItemType.DRAGON_SPEAR:
                tn(e, o, -o.width / 2 - W * (39 + t), -o.height / 2 + W * (i + 90));
                break;
                case ItemType.STONE_HAMMER:
                case ItemType.GOLD_HAMMER:
                case ItemType.DIAMOND_HAMMER:
                case ItemType.AMETHYST_HAMMER:
                case ItemType.REIDITE_HAMMER:
                case ItemType.SUPER_HAMMER:
                tn(e, o, -o.width / 2 - W * (46 + t), -o.height / 2 + W * (i + 35));
                break;
                case ItemType.WATERING_CAN_FULL:
                tn(e, o, -o.width / 2 - W * (47 + t), -o.height / 2 + W * (i + 54));
                break;
                case ItemType.STONE_SHOVEL:
                case ItemType.GOLD_SHOVEL:
                case ItemType.DIAMOND_SHOVEL:
                case ItemType.AMETHYST_SHOVEL:
                case ItemType.REIDITE_SHOVEL:
                tn(e, o, -o.width / 2 - W * (46 + t), -o.height / 2 + W * (i + 35));
                break;
                case ItemType.GOLD_WRENCH:
                case ItemType.WRENCH:
                tn(e, o, -o.width / 2 - W * (47 + t), -o.height / 2 + W * (i + 20));
            }
            }
        }
        function Mr() {
            if (!this.ghost && this.vehicle !== 0) {
            if (this.x != this.r.x || this.y != this.r.y) {
                var e = (v.get_angle_2(this.x, this.y, this.r.x, this.r.y) + window.Math.PI / 2) % T;
                this.vehicle_fx2 = v.reduceAngle(e, this.vehicle_fx2);
                this.vehicle_fx2 = v.lerp(this.vehicle_fx2, e, 0.018);
            }
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            L.rotate(this.vehicle_fx2);
            if (this.vehicle === ItemType.BOAT) {
                if (this.speed > 50 || this.vehicle_fx1 > 0) {
                if (this.speed > 50) {
                    this.vehicle_fx1 = window.Math.min(1, this.vehicle_fx1 + Xn);
                } else {
                    this.vehicle_fx1 = window.Math.max(0, this.vehicle_fx1 - Xn);
                }
                L.globalAlpha = this.vehicle_fx1;
                var t = re[SPRITE.BOAT_WAVE][Wn.time];
                Tn(SPRITE.BOAT_WAVE, t, -t.width / 4, -t.height / 4);
                L.globalAlpha = 1;
                }
                t = re[ItemType.BOAT][Wn.time];
                Tn(ItemType.BOAT, t, -t.width / 4, -t.height / 4);
            } else if (this.vehicle === ItemType.HAWK) {
                this.vehicle_fx5 = v.lerp(this.vehicle_fx5, this.speed, 0.018);
                this.vehicle_fx4.update();
                if (this.speed > 85) {
                this.vehicle_fx1 = window.Math.min(1, this.vehicle_fx1 + Xn / 4);
                } else {
                this.vehicle_fx1 = window.Math.max(0.1, this.vehicle_fx1 - Xn);
                }
                t = re[SPRITE.HAWK_TAMED][Wn.time];
                Tn(SPRITE.HAWK_TAMED, t, -t.width / 4, -t.height / 4);
                t = re[SPRITE.HAWK_WING_LEFT_TAMED][Wn.time];
                w = -t.width;
                h = -t.height;
                L.save();
                L.translate(W * -20, W * -20);
                L.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
                Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
                L.restore();
                t = re[SPRITE.HAWK_WING_RIGHT_TAMED][Wn.time];
                L.save();
                L.translate(W * 20, W * -20);
                L.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
                Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
                L.restore();
            } else if (this.vehicle === ItemType.BABY_LAVA) {
                this.vehicle_fx5 = v.lerp(this.vehicle_fx5, this.speed, 0.018);
                this.vehicle_fx4.update();
                if (this.speed > 85) {
                this.vehicle_fx1 = window.Math.min(1, this.vehicle_fx1 + Xn / 4);
                } else {
                this.vehicle_fx1 = window.Math.max(0.1, this.vehicle_fx1 - Xn);
                }
                t = re[SPRITE.BABY_LAVA_TAMED][Wn.time];
                Tn(SPRITE.BABY_LAVA_TAMED, t, -t.width / 4, -t.height / 4);
                t = re[SPRITE.BABY_LAVA_WING_LEFT_TAMED][Wn.time];
                w = -t.width;
                h = -t.height;
                L.save();
                L.translate(W * -40, W * -45);
                L.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
                Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
                L.restore();
                t = re[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][Wn.time];
                L.save();
                L.translate(W * 40, W * -45);
                L.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
                Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
                L.restore();
            } else if (this.vehicle === ItemType.BABY_DRAGON) {
                this.vehicle_fx5 = v.lerp(this.vehicle_fx5, this.speed, 0.018);
                this.vehicle_fx4.update();
                if (this.speed > 85) {
                this.vehicle_fx1 = window.Math.min(1, this.vehicle_fx1 + Xn / 4);
                } else {
                this.vehicle_fx1 = window.Math.max(0.1, this.vehicle_fx1 - Xn);
                }
                t = re[SPRITE.BABY_DRAGON_TAMED][Wn.time];
                Tn(SPRITE.BABY_DRAGON_TAMED, t, -t.width / 4, -t.height / 4);
                t = re[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][Wn.time];
                w = -t.width;
                h = -t.height;
                L.save();
                L.translate(W * -40, W * -45);
                L.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
                Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
                L.restore();
                t = re[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][Wn.time];
                L.save();
                L.translate(W * 40, W * -45);
                L.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
                Xo(L, t, -w / 4, -h / 4, w / 2, h / 2);
                L.restore();
            } else if (this.vehicle === ItemType.NIMBUS) {
                this.vehicle_fx5 = v.lerp(this.vehicle_fx5, this.speed, 0.018);
                t = re[ItemType.NIMBUS][Wn.time];
                Tn(ItemType.NIMBUS, t, -t.width / 4, -t.height / 4);
            } else if (this.vehicle === ItemType.PLANE) {
                this.vehicle_fx5 = v.lerp(this.vehicle_fx5, this.speed, 0.018);
                t = re[ItemType.PLANE][Wn.time];
                Tn(ItemType.PLANE, t, -t.width / 4, -t.height / 4);
            } else if (this.vehicle === ItemType.SLED) {
                t = re[ItemType.SLED][Wn.time];
                Tn(ItemType.SLED, t, -t.width / 4, -t.height / 4);
            } else if (this.vehicle === ItemType.BABY_MAMMOTH) {
                t = re[SPRITE.BABY_MAMMOTH_TAMED][Wn.time];
                if (this.speed > 85) {
                this.vehicle_fx1 = window.Math.min(1, this.vehicle_fx1 + Xn / 4);
                } else {
                this.vehicle_fx1 = window.Math.max(0, this.vehicle_fx1 - Xn);
                }
                this.vehicle_fx3 += Xn * 60;
                if (this.vehicle_fx3 > 60) {
                this.vehicle_fx3 -= 60;
                }
                var i = this.vehicle_fx1 * ((this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12 - 6);
                Tn(SPRITE.BABY_MAMMOTH_TAMED, t, -t.width / 4, -t.height / 4 + i);
            } else if (this.vehicle === ItemType.BOAR) {
                t = re[SPRITE.BOAR_TAMED][Wn.time];
                if (this.speed > 85) {
                this.vehicle_fx1 = window.Math.min(1, this.vehicle_fx1 + Xn / 4);
                } else {
                this.vehicle_fx1 = window.Math.max(0, this.vehicle_fx1 - Xn);
                }
                this.vehicle_fx3 += Xn * 60;
                if (this.vehicle_fx3 > 60) {
                this.vehicle_fx3 -= 60;
                }
                i = this.vehicle_fx1 * ((this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12 - 6);
                Tn(SPRITE.BOAR_TAMED, t, -t.width / 4, -t.height / 4 + i);
            } else if (this.vehicle === ItemType.CRAB_BOSS) {
                t = re[SPRITE.CRAB_BOSS_TAMED][Wn.time];
                if (this.speed > 85) {
                this.vehicle_fx1 = window.Math.min(1, this.vehicle_fx1 + Xn / 4);
                } else {
                this.vehicle_fx1 = window.Math.max(0, this.vehicle_fx1 - Xn);
                }
                this.vehicle_fx3 += Xn * 60;
                if (this.vehicle_fx3 > 60) {
                this.vehicle_fx3 -= 60;
                }
                i = this.vehicle_fx1 * ((this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12 - 6);
                Tn(SPRITE.CRAB_BOSS_TAMED, t, -t.width / 4 + i, -t.height / 4);
                L.restore();
                L.save();
                L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
                L.rotate(window.Math.PI + this.vehicle_fx2 + n);
                L.translate(120, i);
                L.rotate(r);
                t = re[SPRITE.CRAB_BOSS_CLAW_LEFT][Wn.time];
                w = -t.width;
                h = -t.height;
                Xo(L, t, -w / 2, -h / 2, w, h);
                L.restore();
                L.save();
                L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
                L.rotate(window.Math.PI + this.vehicle_fx2 + r + n);
                L.translate(120, i);
                L.rotate(r);
                t = re[SPRITE.CRAB_BOSS_CLAW_RIGHT][Wn.time];
                w = -t.width;
                h = -t.height;
                Xo(L, t, -w / 2, -h / 2, w, h);
            }
            L.restore();
            }
        }
        const Lr = 4;
        const Hr = [[], [], [], [], []];
        const wr = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
        function fr(e, t, i) {
            if (t.tryLoad() !== 1) {
            return t;
            }
            var o = Hr[i][e];
            if (o === undefined) {
            var T = (o = window.document.createElement("canvas")).getContext("2d");
            var r = t.width;
            var n = t.height;
            o.width = r;
            o.height = n;
            T.drawImage(t, 0, 0);
            T.globalCompositeOperation = "source-in";
            T.fillStyle = wr[i];
            T.fillRect(0, 0, r, n);
            Hr[i][e] = o;
            }
            return o;
        }
        function zr() {
            var e = 0;
            switch (this.right) {
            case ItemType.WOOD_SHIELD:
            case ItemType.STONE_SHIELD:
            case ItemType.GOLD_SHIELD:
            case ItemType.DIAMOND_SHIELD:
            case ItemType.AMETHYST_SHIELD:
            case ItemType.REIDITE_SHIELD:
                e = 1;
            }
            if (this.ghost) {
            for (var t = 0; t < this.bubbles.length; t++) {
                var i = this.bubbles[t];
                if (i.life > 0.5) {
                var o = 1 - (i.life - 0.5) * 2;
                } else {
                o = i.life * 2;
                }
                L.globalAlpha = o;
                var T = re[SPRITE.BUBBLES][Wn.time][i.id];
                Xo(L, T, Vn.cam.x + i.x - T.width / 2, Vn.cam.y + i.y - T.height / 2);
                L.globalAlpha = 1;
            }
            } else {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            Wn.dist_from_biomes(this);
            if (this.action & STATE.ATTACK) {
                __p_5863156023(e => {
                if (e.right >= 0) {
                    switch (e.right) {
                    case ItemType.WATERING_CAN_FULL:
                        L.save();
                        var t = e.attack.v * -3 / window.Math.PI;
                        if (e.attack.o) {
                        var i = -window.Math.PI / 3 - (window.Math.PI / 3 + e.attack.v) / 3;
                        } else {
                        i = e.attack.v;
                        }
                        L.rotate(e.angle - window.Math.PI / 2 + i);
                        L.globalAlpha = t / 1.2;
                        he(L, W * -40, W * 90, W * 5);
                        se(L, "#0B6A84");
                        L.globalAlpha = t / 1.2;
                        he(L, W * -52, W * 100, W * 8);
                        se(L, "#0B6A84");
                        L.globalAlpha = t / 1.2;
                        he(L, W * -30, W * 95, W * 4);
                        se(L, "#0B6A84");
                        L.globalAlpha = 1;
                        L.restore();
                        break;
                    case ItemType.STONE_SHOVEL:
                    case ItemType.GOLD_SHOVEL:
                    case ItemType.DIAMOND_SHOVEL:
                    case ItemType.AMETHYST_SHOVEL:
                    case ItemType.REIDITE_SHOVEL:
                        if (e.fly === 1) {
                        break;
                        }
                        if (e.dist_winter > 0) {
                        var o = SPRITE.ICE_SHOVEL_CO[Wn.time];
                        } else {
                        o = e.dist_sand > 0 || e.dist_desert > 0 ? SPRITE.SAND_SHOVEL_CO[Wn.time] : SPRITE.GRD_SHOVEL_CO[Wn.time];
                        }
                        t = e.attack.v * -3 / window.Math.PI;
                        if ((i = e.attack.o ? window.Math.max(0.5 - t / 2 + 0.5, 0) : window.Math.max(t / 2, 0)) === 0) {
                        e.angle_init = e.angle;
                        }
                        L.save();
                        L.rotate(e.angle_init - window.Math.PI / 2);
                        L.globalAlpha = t;
                        var T = W * 25 + i * 25;
                        he(L, T, W * 80, W * 15);
                        se(L, o);
                        he(L, -T, W * 80, W * 15);
                        se(L, o);
                        L.globalAlpha = 1;
                        L.restore();
                    }
                }
                }, 1)(this);
            }
            L.save();
            L.rotate(this.angle - window.Math.PI / 2);
            if (!(this.action & STATE.ATTACK)) {
                if (this.action & STATE.IDLE || this.vehicle !== 0) {
                this.idle.update();
                } else if (this.action & STATE.WALK) {
                this.walk.update();
                }
            }
            var r;
            var n = this.idle.v;
            var a = this.walk.v;
            if (this.clothe === ItemType.WINTER_HOOD) {
                T = re[SPRITE.GLOVES_HOOD][Wn.time];
                r = SPRITE.GLOVES_HOOD;
            } else if (this.clothe === ItemType.DIAMOND_PROTECTION) {
                T = re[SPRITE.GLOVES_DIAMOND_PROTECTION][Wn.time];
                r = SPRITE.GLOVES_DIAMOND_PROTECTION;
            } else if (this.clothe === ItemType.AMETHYST_PROTECTION) {
                T = re[SPRITE.GLOVES_AMETHYST_PROTECTION][Wn.time];
                r = SPRITE.GLOVES_AMETHYST_PROTECTION;
            } else if (this.clothe === ItemType.REIDITE_PROTECTION) {
                T = re[SPRITE.GLOVES_REIDITE_PROTECTION][Wn.time];
                r = SPRITE.GLOVES_REIDITE_PROTECTION;
            } else if (this.superzombie) {
                T = re[SPRITE.ZOMBIE_HAND][Wn.time];
                r = SPRITE.ZOMBIE_HAND;
            } else {
                try {
                T = re[ItemType.HAND][this.skin][Wn.time];
                r = ItemType.HAND;
                } catch (e) {
                console.log(this.skin);
                }
            }
            shadow = re[SPRITE.HAND_SHADOW][Wn.time];
            var I = T;
            var E = r;
            if (this.action & STATE.ATTACK) {
                if (this.attack.update() && this.attack.o == 0) {
                this.hand = !this.hand;
                this.action -= STATE.ATTACK;
                if (this.id == Vn.id) {
                    Vn.control.mouse = 0;
                }
                }
                if (this.right >= 0) {
                this.hand = true;
                }
                var _ = this.hand ? this.attack.v : -this.attack.v / 3;
                var s = this.hand ? this.attack.v / 3 : -this.attack.v;
                if (this.superzombie) {
                L.save();
                L.rotate(_);
                tn(r, T, -T.width / 2 - W * (66 + n), -T.height / 2 + (5 + a) * W);
                L.restore();
                L.save();
                L.rotate(s);
                tn(r, T, -T.width / 2 + W * (66 + n), -T.height / 2 + (5 + a) * W);
                L.restore();
                } else if (e === 0) {
                if (this.right === ItemType.WOOD_BOW) {
                    _ = -v.ease_out_quad(-_);
                }
                L.save();
                L.rotate(_);
                tn(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - W * (49 + n), -shadow.height / 2 + (15 + a) * W);
                if (this.right === ItemType.BOOK) {
                    var R = re[this.right][this.book][Wn.time];
                    on(this.right, this.book, R, -R.width / 4 - W * (62 + n), -R.height / 4 + W * (a + 18));
                } else {
                    gr(this.right, n, a);
                }
                if (r >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
                    Tn(r, T, -T.width / 4 - W * (49 + n), -T.height / 4 + (11 + a) * W);
                } else if (r !== SPRITE.GLOVES_HOOD) {
                    on(r, this.skin, T, -T.width / 4 - W * (49 + n), -T.height / 4 + (11 + a) * W);
                } else {
                    tn(r, T, -T.width / 2 - W * (49 + n), -T.height / 2 + (11 + a) * W);
                }
                L.restore();
                L.save();
                L.rotate(s);
                tn(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + W * (49 + n), -shadow.height / 2 + (15 + a) * W);
                if (r >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
                    Tn(r, T, -T.width / 4 + W * (49 + n), -T.height / 4 + (11 + a) * W);
                } else if (r !== SPRITE.GLOVES_HOOD) {
                    on(r, this.skin, T, -T.width / 4 + W * (49 + n), -T.height / 4 + (11 + a) * W);
                } else {
                    tn(r, T, -T.width / 2 + W * (49 + n), -T.height / 2 + (11 + a) * W);
                }
                L.restore();
                }
            } else if (this.superzombie) {
                tn(r, T, -T.width / 2 - W * (66 + n), -T.height / 2 + (5 + a) * W);
                tn(r, T, -T.width / 2 + W * (66 + n), -T.height / 2 + (5 + a) * W);
            } else if (e === 0) {
                tn(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - W * (49 + n), -shadow.height / 2 + (15 + a) * W);
                if (this.right === ItemType.BOOK) {
                R = re[this.right][this.book][Wn.time];
                on(this.right, this.book, R, -R.width / 4 - W * (62 + n), -R.height / 4 + W * (a + 18));
                } else {
                gr(this.right, n, a);
                }
                if (r >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
                Tn(r, T, -T.width / 4 - W * (49 + n), -T.height / 4 + (11 + a) * W);
                } else if (r !== SPRITE.GLOVES_HOOD) {
                on(r, this.skin, T, -T.width / 4 - W * (49 + n), -T.height / 4 + (11 + a) * W);
                } else {
                tn(r, T, -T.width / 2 - W * (49 + n), -T.height / 2 + (11 + a) * W);
                }
                tn(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + W * (49 + n), -shadow.height / 2 + (15 + a) * W);
                if (r >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
                Tn(r, T, -T.width / 4 + W * (49 + n), -T.height / 4 + (11 + a) * W);
                } else if (r !== SPRITE.GLOVES_HOOD) {
                on(r, this.skin, T, -T.width / 4 + W * (49 + n), -T.height / 4 + (11 + a) * W);
                } else {
                tn(r, T, -T.width / 2 + W * (49 + n), -T.height / 2 + (11 + a) * W);
                }
            }
            if (this.bag && this.clothe < 1) {
                T = re[ItemType.BAG][this.baglook][Wn.time];
                on(ItemType.BAG, this.baglook, T, -T.width / 4, -T.height / 4 - W * 39);
            }
            if (this.superzombie) {
                T = re[SPRITE.ZOMBIE_BODY][Wn.time];
                tn(SPRITE.ZOMBIE_BODY, T, -T.width / 2, -T.height / 2);
                this.move_head.update();
                T = re[SPRITE.ZOMBIE_HEAD][Wn.time];
                tn(SPRITE.ZOMBIE_HEAD, T, -T.width / 2, -T.height / 2 + this.move_head.v);
            } else {
                T = re[SPRITE.BODY][this.skin][Wn.time];
                if (this.clothe !== ItemType.WINTER_HOOD && (on(SPRITE.BODY, this.skin, T, -T.width / 4, -T.height / 4), this.accessory > 0)) {
                try {
                    T = re[SPRITE.ACCESSORY][this.accessory][Wn.time];
                    on(SPRITE.ACCESSORY, this.accessory, T, -T.width / 4, -T.height / 4);
                } catch (e) {
                    console.log(this.accessory);
                }
                }
            }
            if (this.action & STATE.HEAL) {
                if (this.heal.update() && this.heal.o == 0) {
                this.action -= STATE.HEAL;
                }
                L.globalAlpha = 0.6 - this.heal.v;
                if (this.superzombie) {
                T = re[SPRITE.ZOMBIE_HEAL];
                Xo(L, T, -T.width / 2, -T.height / 2);
                } else {
                T = fr(this.skin, re[SPRITE.BODY][this.skin][0], 1);
                Xo(L, T, T.width / 4, T.height / 4, -T.width / 2, -T.height / 2);
                }
                L.globalAlpha = 1;
            }
            if (this.action & STATE.WEB) {
                if (this.web.update() && this.web.o == 0) {
                this.action -= STATE.WEB;
                }
                L.globalAlpha = 0.6 - this.web.v;
                T = re[SPRITE.WEB];
                Xo(L, T, -T.width / 2, -T.height / 2);
                L.globalAlpha = 1;
            }
            if (this.action & STATE.HURT) {
                if (this.hit.update() && this.hit.o == 0) {
                this.action -= STATE.HURT;
                }
                L.globalAlpha = 0.6 - this.hit.v;
                if (this.superzombie) {
                T = re[SPRITE.ZOMBIE_HURT];
                Xo(L, T, -T.width / 2, -T.height / 2);
                } else {
                T = fr(this.skin, re[SPRITE.BODY][this.skin][0], 0);
                Xo(L, T, T.width / 4, T.height / 4, -T.width / 2, -T.height / 2);
                }
                L.globalAlpha = 1;
            }
            if (this.action & STATE.COLD) {
                if (this.freeze.update() && this.freeze.o == 0) {
                this.action -= STATE.COLD;
                }
                L.globalAlpha = 0.6 - this.freeze.v;
                T = fr(this.skin, re[SPRITE.BODY][this.skin][0], 2);
                Xo(L, T, T.width / 4, T.height / 4, -T.width / 2, -T.height / 2);
                L.globalAlpha = 1;
            }
            if (this.action & STATE.HUNGER) {
                if (this.starve.update() && this.starve.o == 0) {
                this.action -= STATE.HUNGER;
                }
                L.globalAlpha = 0.6 - this.starve.v;
                if (this.superzombie) {
                T = re[SPRITE.ZOMBIE_HUNGER];
                Xo(L, T, -T.width / 2, -T.height / 2);
                } else {
                T = fr(this.skin, re[SPRITE.BODY][this.skin][0], 3);
                Xo(L, T, T.width / 4, T.height / 4, -T.width / 2, -T.height / 2);
                }
                L.globalAlpha = 1;
            }
            __p_5863156023(e => {
                if (e > 0) {
                var t = re[e][Wn.time];
                switch (e) {
                    case ItemType.WOOD_HELMET:
                    tn(e, t, -t.width / 2 + W * 2, -t.height / 2 - W * 5);
                    break;
                    case ItemType.EARMUFFS:
                    tn(e, t, -t.width / 2, -t.height / 2 - W * 18);
                    break;
                    case ItemType.COAT:
                    tn(e, t, -t.width / 2, -t.height / 2 - W * 10);
                    break;
                    case ItemType.EXPLORER_HAT:
                    tn(e, t, -t.width / 2, -t.height / 2 - W * 19);
                    break;
                    case ItemType.PIRATE_HAT:
                    Tn(e, t, -t.width / 4, -t.height / 4 - W * 20);
                    break;
                    case ItemType.STONE_HELMET:
                    tn(e, t, -t.width / 2 - W * 1, -t.height / 2 - W * 23);
                    break;
                    case ItemType.GOLD_HELMET:
                    tn(e, t, -t.width / 2, -t.height / 2 - W * 5);
                    break;
                    case ItemType.DIAMOND_HELMET:
                    tn(e, t, -t.width / 2, -t.height / 2 - W * 2);
                    break;
                    case ItemType.AMETHYST_HELMET:
                    tn(e, t, -t.width / 2 + W * 1.5, -t.height / 2 - W * 1);
                    break;
                    case ItemType.REIDITE_HELMET:
                    case ItemType.DIAMOND_PROTECTION:
                    case ItemType.AMETHYST_PROTECTION:
                    case ItemType.REIDITE_PROTECTION:
                    case ItemType.TURBAN1:
                    case ItemType.TURBAN2:
                    case ItemType.PILOT_HAT:
                    case ItemType.LAVA_HELMET:
                    case ItemType.WITCH_HAT:
                    case ItemType.FUR_HAT:
                    case ItemType.FLOWER_HAT:
                    Tn(e, t, -t.width / 4, -t.height / 4 + W * 2);
                    break;
                    case ItemType.CHRISTMAS_HAT:
                    case ItemType.ELF_HAT:
                    tn(e, t, -t.width / 2 - W * 5, -t.height / 2 - W * 2);
                    break;
                    case ItemType.CAP_SCARF:
                    case ItemType.WINTER_HOOD:
                    case ItemType.DIVING_MASK:
                    tn(e, t, -t.width / 2, -t.height / 2 - W * 2);
                    break;
                    case ItemType.SUPER_DIVING_SUIT:
                    tn(e, t, -t.width / 2 + W * 2, -t.height / 2);
                    break;
                    case ItemType.DRAGON_HELMET:
                    tn(e, t, -t.width / 2, -t.height / 2 - W * 5);
                    break;
                    case ItemType.CROWN_GREEN:
                    case ItemType.CROWN_ORANGE:
                    case ItemType.CROWN_BLUE:
                    tn(e, t, -t.width / 2 - W * 1, -t.height / 2);
                    break;
                    case ItemType.HOOD:
                    tn(e, t, -t.width / 2, -t.height / 2 + W * 2);
                    break;
                    case ItemType.PEASANT:
                    case ItemType.WINTER_PEASANT:
                    tn(e, t, -t.width / 2, -t.height / 2 + W * 8);
                    break;
                    case ItemType.CRAB_HELMET:
                    tn(e, t, -t.width / 2, -t.height / 2 - W * 4);
                }
                }
            }, 1)(this.clothe);
            if (e === 1) {
                if (this.action & STATE.ATTACK) {
                n += this.attack.v * 15;
                }
                tn(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - W * 26, -shadow.height / 2 + (31 + a + n) * W);
                if (E >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
                Tn(E, I, -I.width / 4 - W * 26, -I.height / 4 + (27 + a + n) * W);
                } else if (E !== SPRITE.GLOVES_HOOD) {
                on(E, this.skin, I, -I.width / 4 - W * 26, -I.height / 4 + (27 + a + n) * W);
                } else {
                tn(E, I, -I.width / 2 - W * 26, -I.height / 2 + (27 + a + n) * W);
                }
                tn(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + W * 26, -shadow.height / 2 + (31 + a + n) * W);
                if (E >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
                Tn(E, I, -I.width / 4 + W * 26, -I.height / 4 + (27 + a + n) * W);
                } else if (E !== SPRITE.GLOVES_HOOD) {
                on(E, this.skin, I, -I.width / 4 + W * 26, -I.height / 4 + (27 + a + n) * W);
                } else {
                tn(E, I, -I.width / 2 + W * 26, -I.height / 2 + (27 + a + n) * W);
                }
                __p_5863156023((e, t, i) => {
                if (e >= 0) {
                    var o = re[e][Wn.time];
                    switch (e) {
                    case ItemType.WOOD_SHIELD:
                    case ItemType.STONE_SHIELD:
                    case ItemType.GOLD_SHIELD:
                        Tn(e, o, -o.width / 4 - W * (0 + t), -o.height / 4 + W * (i + 35));
                        break;
                    case ItemType.DIAMOND_SHIELD:
                        Tn(e, o, -o.width / 4 - W * (1 + t), -o.height / 4 + W * (i + 45));
                        break;
                    case ItemType.AMETHYST_SHIELD:
                    case ItemType.REIDITE_SHIELD:
                        Tn(e, o, -o.width / 4 - W * (1 + t), -o.height / 4 + W * (i + 40));
                    }
                }
                }, 3)(this.right, 0, a + n);
            }
            L.restore();
            if (this.clothe !== ItemType.HOOD && this.clothe !== ItemType.WINTER_HOOD) {
                if (this.dist_winter > 0) {
                this.player.label_winter ||= Dt(W, this.player.nickname, 20, "#187484", "#000000", 2, null, null, W * 300);
                T = this.player.label_winter;
                } else {
                this.player.label ||= Dt(W, this.player.nickname, 20, "#FFF", "#000000", 2, null, null, W * 300);
                T = this.player.label;
                }
                if (Wn.day == SPRITE.NIGHT) {
                L.globalAlpha = 0.5;
                }
                n = window.Math.floor(-T.width / 2);
                a = window.Math.floor(-T.height / 2 - W * 70);
                Xo(L, T, n, a);
                if (this.player.level > 0) {
                var h = n + T.width + 5;
                T = re[SPRITE.VERIFIED];
                if (Jo[this.player.level] === undefined) {
                    Jo[this.player.level] = Dt(W, "[" + this.player.level + "]", 20, "#F9E8A2", "#000000", 2, null, null, W * 50);
                }
                Xo(L, Jo[this.player.level], h, a);
                }
                L.globalAlpha = 1;
            } else {
                a = window.Math.floor(W * -70);
                n = window.Math.floor(re[SPRITE.ICON_MEMBER].width / 1.5);
            }
            if (Vn.in_team(this.pid)) {
                T = this.pid == Vn.team[0] ? re[SPRITE.ICON_LEADER] : re[SPRITE.ICON_MEMBER];
                Xo(L, T, n - T.width - 5, a - 6);
            }
            L.restore();
            }
        }
        function Br() {
            if (this.enabled && this.delay >= 0) {
            var e = window.Date.now() - this.delay;
            var t = e % 1000 / 1000;
            if (t > 0.5) {
                t = 1 - (t - 0.5) * 2;
            } else {
                t *= 2;
            }
            if ((e = window.Math.floor(e / 1000)) < Wn.ghost_delay) {
                e = Wn.ghost_delay - e;
                this.label ||= Dt(W, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000000", 10);
                if (this.now != e || !this.sec) {
                this.now = e;
                this.sec = Dt(W, "" + e, 40, "#660000", null, null, null, null, null, "#000000", 10);
                }
                Xo(L, this.label, (H - this.label.width) / 2, W * 100);
                L.globalAlpha = t;
                Xo(L, this.sec, (H - this.label.width) / 2 - this.sec.width + W * 15, W * 100);
                L.globalAlpha = 1;
            }
            }
        }
        function Gr() {
            if (this.message !== undefined) {
            var e = Vn.inv.can_select.length > 0 ? -95 : 0;
            Xo(L, this.message, 0, f - this.message.height + e);
            }
        }
        function Wr() {
            if (this.text) {
            if (this.timeout.o) {
                L.globalAlpha = 1 - this.timeout.v;
            } else {
                L.globalAlpha = 1;
            }
            this.label ||= Dt(W, this.text[0], 25, this.text[1], null, null, null, null, null, "#000000", 8);
            Xo(L, this.label, (H - this.label.width) / 2, W * 50);
            L.globalAlpha = 1;
            if (this.timeout.update() && this.timeout.o == 0) {
                this.text = this.list.shift();
                this.label = null;
            }
            }
        }
        function Vr() {
            L.save();
            L.translate(Vn.cam.x + this.x, Vn.cam.y + this.y);
            if (this.text.length > 0) {
            for (var e = 0; e < this.text.length && e < 2; e++) {
                if (!this.label[e]) {
                this.label[e] = Oe(W, this.text[e]);
                this.text_effect[e] = 0;
                this.text_move[e] = 0;
                }
                if (e === 1) {
                this.text_move[0] = v.ease_in_out_quad(this.text_ease) * 30;
                }
            }
            this.text_effect[0] += Xn;
            if (this.text.length > 1) {
                this.text_ease = window.Math.min(this.text_ease + Xn, 1);
                if (this.text_effect[0] > 1 && this.text_ease > 0.5) {
                this.text_effect[1] += Xn;
                }
            }
            for (e = 0; e < this.text.length && e < 2; e++) {
                var t = this.text_effect[e];
                if (t > 0) {
                L.globalAlpha = t < 0.25 ? t * 4 : t > 3.75 ? window.Math.max((4 - t) * 4, 0) : 1;
                Xo(L, this.label[e], -this.label[e].width / 2, -this.text_move[e] + -this.label[e].height / 2 - W * 110);
                }
            }
            if (this.text_effect[0] > 4) {
                this.text_effect.shift();
                this.text.shift();
                this.text_move.shift();
                this.label.shift();
                this.text_ease = 0;
            }
            }
            L.restore();
        }
        var Kr = 0;
        function Yr(e, t, i, o, T, r, n, a = 0) {
            for (var I = n; I >= a; I--) {
            for (var E = e; E <= t; E++) {
                for (var _ = i; _ <= o; _++) {
                var s = zn.tiles[E][_];
                if (s && s[r]) {
                    var R = s[r][I];
                    if (R !== undefined) {
                    for (var h = 0; h < R.length; h++) {
                        var d = R[h];
                        var u = re[T][Wn.time][I];
                        var A = (Kr + (E + _) * 3) % 60;
                        var O = A < 30 ? A / 30 : 1 - (A - 30) / 30;
                        var l = -u.width * (1 + O * 0.9 / 30);
                        var S = -u.height * (1 + O * 0.9 / 30);
                        O = (A = (Kr + (E + _) * 7) % 60) < 30 ? A / 30 : 1 - (A - 30) / 30;
                        var C = L.globalAlpha;
                        L.globalAlpha = (0.9 + O * 0.1) * C;
                        Xo(L, u, Vn.cam.x + d.x - l / 2, Vn.cam.y + d.y - S / 2, l, S);
                        L.globalAlpha = C;
                    }
                    }
                }
                }
            }
            }
        }
        function Ur(e, t, i, o, T, r, n, a = 0) {
            Wn.breath[T].update();
            for (var I = n; I >= a; I--) {
            for (var E = e; E <= t; E++) {
                for (var _ = i; _ <= o; _++) {
                var s = zn.tiles[E][_];
                if (s && s[r]) {
                    var R = s[r][I];
                    if (R !== undefined) {
                    for (var h = 0; h < R.length; h++) {
                        var d = R[h];
                        if (d.update) {
                        if (d.hit.update() && d.hit.o == 0) {
                            d.update = false;
                        }
                        var u = (1 - d.hit.v) * Xn * 600 * W;
                        var A = window.Math.cos(d.angle) * u;
                        var O = window.Math.sin(d.angle) * u;
                        } else {
                        A = 0;
                        O = 0;
                        }
                        var l = re[T][Wn.time][I];
                        var S = -l.width * Wn.breath[T].v;
                        var C = -l.height * Wn.breath[T].v;
                        Xo(L, l, Vn.cam.x + d.x - S / 2 + A, Vn.cam.y + d.y - C / 2 + O, S, C);
                    }
                    }
                }
                }
            }
            }
        }
        var kr = [];
        for (oe = 0; oe < 100; oe++) {
            var Fr = 1;
            if (window.Math.random() < 0.25) {
            Fr = 0;
            }
            kr.push(Fr);
        }
        function xr(e, t, i, o, T, r, n, a = 0, I) {
            for (var E = n; E >= a; E--) {
            for (var _ = e; _ <= t; _++) {
                for (var s = i; s <= o; s++) {
                if (I <= 0 || kr[(_ + s * I) % kr.length] !== 1) {
                    var R = zn.tiles[_][s];
                    if (R !== undefined && R[r] !== undefined) {
                    var h = R[r][E];
                    if (h !== undefined) {
                        for (var d = 0; d < h.length; d++) {
                        var u = h[d];
                        if (u.update) {
                            if (u.hit.update() && u.hit.o == 0) {
                            u.update = false;
                            }
                            var A = (1 - u.hit.v) * Xn * 600 * W;
                            var O = window.Math.cos(u.angle) * A;
                            var l = window.Math.sin(u.angle) * A;
                        } else {
                            O = 0;
                            l = 0;
                        }
                        var S = re[T][Wn.time][E];
                        Xo(L, S, Vn.cam.x + u.x - S.width / (_scale_object * 2) + O, Vn.cam.y + u.y - S.height / (_scale_object * 2) + l, S.width / _scale_object, S.height / _scale_object);
                        }
                    }
                    }
                }
                }
            }
            }
        }
        function Jr(e, t, i, o, T, r, n, a = 0, I) {
            for (var E = e; E <= t; E++) {
            for (var _ = i; _ <= o; _++) {
                var s = zn.tiles[E][_];
                if (s !== undefined && s[r] !== undefined) {
                var R = s[r];
                if (R !== undefined) {
                    if (R.scale === 1) {
                    var h = re[T][Wn.time][R._id];
                    L.save();
                    L.translate(Vn.cam.x + R.x, Vn.cam.y + R.y);
                    L.rotate(R.angle);
                    Xo(L, h, -h.width / 4, -h.height / 4, h.width / 2, h.height / 2);
                    L.restore();
                    } else if (R.scale === 3) {
                    for (var d = 0; d < R.p.length; d++) {
                        L.save();
                        L.translate(Vn.cam.x + R.x, Vn.cam.y + R.y);
                        L.rotate(R.p[d].angle);
                        h = re[T][Wn.time][R.p[d]._id];
                        Xo(L, h, -h.width / 3 + R.p[d].x, -h.height / 3 + R.p[d].y, h.width / 1.5, h.height / 1.5);
                        L.restore();
                    }
                    } else {
                    h = re[T][Wn.time][R._id];
                    L.save();
                    L.translate(Vn.cam.x + R.x, Vn.cam.y + R.y);
                    L.rotate(R.angle);
                    Xo(L, h, -h.width / 2, -h.height / 2, h.width, h.height);
                    L.restore();
                    }
                }
                }
            }
            }
        }
        function Xr(e, t, i, o, T, r, n, a = 0, I) {
            for (var E = n; E >= a; E--) {
            for (var _ = e; _ <= t; _++) {
                for (var s = i; s <= o; s++) {
                var R = zn.tiles[_][s];
                if (R !== undefined && R[r] !== undefined) {
                    var h = R[r][E];
                    if (h !== undefined) {
                    for (var d = 0; d < h.length; d++) {
                        var u = h[d];
                        if (u.update) {
                        if (u.hit.update() && u.hit.o == 0) {
                            u.update = false;
                        }
                        var A = (1 - u.hit.v) * Xn * 600 * W;
                        var O = window.Math.cos(u.angle) * A;
                        var l = window.Math.sin(u.angle) * A;
                        } else {
                        O = 0;
                        l = 0;
                        }
                        for (var S = 0; S < _bubble[E].amount; S++) {
                        if (Wn.lava[S].last !== qn) {
                            Wn.lava[S].update();
                            Wn.lava[S].last = qn;
                        }
                        var C = re[SPRITE.LAVA_BUBBLE][Wn.time][_bubble[E].pos[S].t];
                        var b = -C.width * Wn.lava[S].v;
                        var N = -C.height * Wn.lava[S].v;
                        Xo(L, C, Vn.cam.x + u.x - b / 4 + O + _bubble[E].pos[S].x, Vn.cam.y + u.y - N / 4 + l + _bubble[E].pos[S].y, b / 2, N / 2);
                        }
                    }
                    }
                }
                }
            }
            }
        }
        _scale_object = 1;
        _bubble = [{
            amount: 10,
            pos: [{
            x: -128,
            y: -20,
            t: 0
            }, {
            x: -86,
            y: -4,
            t: 1
            }, {
            x: -60,
            y: -74,
            t: 2
            }, {
            x: -22,
            y: -144,
            t: 0
            }, {
            x: -58,
            y: 86,
            t: 0
            }, {
            x: 3,
            y: -30,
            t: 0
            }, {
            x: 65,
            y: -115,
            t: 1
            }, {
            x: 118,
            y: -50,
            t: 0
            }, {
            x: 73,
            y: 15,
            t: 1
            }, {
            x: 67,
            y: 79,
            t: 0
            }]
        }, {
            amount: 5,
            pos: [{
            x: -45,
            y: -26,
            t: 0
            }, {
            x: -45,
            y: 20,
            t: 2
            }, {
            x: 10,
            y: -60,
            t: 1
            }, {
            x: 52,
            y: -17,
            t: 1
            }, {
            x: 14,
            y: 45,
            t: 0
            }]
        }, {
            amount: 3,
            pos: [{
            x: -30,
            y: 3,
            t: 2
            }, {
            x: 7,
            y: -38,
            t: 2
            }, {
            x: 37,
            y: 5,
            t: 2
            }]
        }, {
            amount: 11,
            pos: [{
            x: -74,
            y: -87,
            t: 2
            }, {
            x: -11,
            y: -10,
            t: 1
            }, {
            x: -99,
            y: 17,
            t: 1
            }, {
            x: -66,
            y: 84,
            t: 0
            }, {
            x: -55,
            y: 123,
            t: 1
            }, {
            x: 10,
            y: 81,
            t: 2
            }, {
            x: 52,
            y: 50,
            t: 0
            }, {
            x: 138,
            y: 9,
            t: 1
            }, {
            x: 104,
            y: -28,
            t: 0
            }, {
            x: 67,
            y: -56,
            t: 2
            }, {
            x: 5,
            y: -112,
            t: 0
            }]
        }, {
            amount: 6,
            pos: [{
            x: -33,
            y: -66,
            t: 2
            }, {
            x: -58,
            y: 10,
            t: 0
            }, {
            x: -19,
            y: 44,
            t: 1
            }, {
            x: 44,
            y: 20,
            t: 0
            }, {
            x: 53,
            y: -36,
            t: 2
            }, {
            x: 7,
            y: -62,
            t: 0
            }]
        }, {
            amount: 3,
            pos: [{
            x: -19,
            y: -25,
            t: 1
            }, {
            x: -29,
            y: 13,
            t: 2
            }, {
            x: 12,
            y: 12,
            t: 0
            }]
        }];
        var qr = 0;
        var jr = 0;
        var Zr = 0;
        var $r = 0;
        function Qr(e, t) {
            if (Wn.transition) {
            L.globalAlpha = 1;
            e.draw_bg(t);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1 - Wn.shade.v;
            e.draw_bg(t);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1;
            } else {
            e.draw_bg(t);
            }
        }
        function en(e, t) {
            if (Wn.transition) {
            L.globalAlpha = 1;
            e.draw_fg(t);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1 - Wn.shade.v;
            e.draw_fg(t);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1;
            } else {
            e.draw_fg(t);
            }
        }
        function tn(e, t, i, o) {
            if (Wn.transition) {
            L.globalAlpha = 1;
            Xo(L, re[e][Wn.time], i, o);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1 - Wn.shade.v;
            Xo(L, re[e][Wn.time], i, o);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1;
            } else {
            Xo(L, t, i, o);
            }
        }
        function on(e, t, i, o, T) {
            var r = i.width;
            var n = i.height;
            var a = window.Math.floor(r / 2);
            var I = window.Math.floor(n / 2);
            if (Wn.transition) {
            L.globalAlpha = 1;
            Xo(L, re[e][t][Wn.time], 0, 0, r, n, o, T, a, I);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1 - Wn.shade.v;
            Xo(L, re[e][t][Wn.time], 0, 0, r, n, o, T, a, I);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1;
            } else {
            Xo(L, re[e][t][Wn.time], 0, 0, r, n, o, T, a, I);
            }
        }
        function Tn(e, t, i, o) {
            var T = t.width;
            var r = t.height;
            var n = window.Math.floor(T / 2);
            var a = window.Math.floor(r / 2);
            if (Wn.transition) {
            L.globalAlpha = 1;
            Xo(L, re[e][Wn.time], 0, 0, T, r, i, o, n, a);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1 - Wn.shade.v;
            Xo(L, re[e][Wn.time], 0, 0, T, r, i, o, n, a);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1;
            } else {
            Xo(L, t, 0, 0, T, r, i, o, n, a);
            }
        }
        function rn(e) {
            L.globalAlpha = e.alpha;
            he(L, e.x + Vn.cam.x, e.y + Vn.cam.y, e.r);
            se(L, SPRITE.SWIM_COLOR[Wn.time]);
            L.globalAlpha = 1;
        }
        function nn(e) {
            L.save();
            L.translate(Vn.cam.x + e.x, Vn.cam.y + e.y);
            L.rotate(e.angle);
            L.globalAlpha = e.alpha;
            var t = re[e.id][Wn.time];
            Xo(L, t, -t.width / 2, -t.height / 2);
            L.globalAlpha = 1;
            L.restore();
        }
        function an(e, t, i, o, T) {
            if (Wn.transition && T == 1) {
            L.globalAlpha = 1;
            Xo(L, re[e][Wn.time][t], i, o);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1 - Wn.shade.v;
            Xo(L, re[e][Wn.time][t], i, o);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1;
            } else {
            L.globalAlpha = T;
            Xo(L, re[e][Wn.time][t], i, o);
            L.globalAlpha = 1;
            }
        }
        function In(e, t, i) {
            if (Wn.transition) {
            L.globalAlpha = 1;
            e.draw(t, i);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1 - Wn.shade.v;
            e.draw(t, i);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1;
            } else {
            e.draw(t, i);
            }
        }
        function En(e, t, i, o, T, r, n, a, I, E) {
            if (Wn.transition) {
            L.globalAlpha = 1;
            e(t, i, o, T, r, n, a, I, E);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1 - Wn.shade.v;
            e(t, i, o, T, r, n, a, I, E);
            Wn.time = Wn.time ? 0 : 1;
            L.globalAlpha = 1;
            } else {
            e(t, i, o, T, r, n, a, I, E);
            }
        }
        function _n(e, t, i, o, T, r, n) {
            var a;
            var I = "#";
            I += (a = window.Math.floor(o * n + (1 - n) * e)) < 16 ? "0" + a.toString(16) : a.toString(16);
            I += (a = window.Math.floor(T * n + (1 - n) * t)) < 16 ? "0" + a.toString(16) : a.toString(16);
            return I += (a = window.Math.floor(r * n + (1 - n) * i)) < 16 ? "0" + a.toString(16) : a.toString(16);
        }
        function sn(e, t, i, o, T, r) {
            var n = o.w1;
            var a = o.w2;
            var I = o.w3;
            var E = Vn.cam.x + e - 700;
            var _ = window.Math.max(Vn.cam.y + t, 0);
            var s = window.Math.max(-Vn.cam.y + f - i - 100, 0);
            var R = _;
            var h = f - _ - s;
            if (r) {
            var d = o.t(n).x;
            } else {
            d = n.r.x;
            }
            var u = E + WORLD.LW1SX;
            d = (u += d + WORLD.W1SX - 2, r) ? o.t(a).x : a.r.x;
            var A = E + WORLD.LW2SX - u + d;
            var O = (u += A - 2) - 2;
            d = r ? o.t(I).x : I.r.x;
            if (O < u + (A = E + WORLD.LW3SX - u + d) - 3) {
            u += A - 2;
            } else {
            u = O;
            }
            A = E + WORLD.LSANDX - u;
            if (r > 0 && T.isSand === 1) {
            if (Wn.transition) {
                var l = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(15, 77, 72, 252, 239, 187, l);
            } else {
                L.fillStyle = SPRITE.SAND_COLOR[Wn.time];
            }
            L.fillRect(u, R, A, h);
            } else {
            if (Wn.transition) {
                l = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(T.night[0], T.night[1], T.night[2], T.day[0], T.day[1], T.day[2], l);
            } else {
                L.fillStyle = T._color[Wn.time];
            }
            L.fillRect(u, R, A, h);
            }
        }
        function Rn(e, t, i, o, T, r) {
            var n = o.w1;
            var a = o.w2;
            var I = o.w3;
            var E = Vn.cam.x + e - 700;
            var _ = window.Math.max(Vn.cam.y + t, 0);
            var s = window.Math.max(-Vn.cam.y + f - i - 100, 0);
            var R = _;
            var h = f - _ - s;
            if (r) {
            var d = o.t(n);
            } else {
            d = n.r;
            }
            var u = E + WORLD.LW1SX;
            var A = u;
            var O = R;
            var l = d.x + WORLD.W1SX;
            var S = h;
            var C = u += d.x + WORLD.W1SX - 2;
            d = r ? o.t(a) : a.r;
            var b = E + WORLD.LW2SX - u + d.x;
            var N = u;
            var D = R;
            var m = b;
            var c = h;
            var v = (u += b - 2) - 2;
            d = r ? o.t(I) : I.r;
            if (v < u + (b = E + WORLD.LW3SX - u + d.x) - 3) {
            var P = true;
            var y = u;
            var p = R;
            var g = b;
            var M = h;
            var H = u += b - 2;
            } else {
            P = false;
            u = v;
            H = -1;
            }
            b = E + WORLD.LSANDX - u;
            if (Wn.transition) {
            var w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
            L.fillStyle = _n(9, 55, 63, 11, 106, 132, w);
            } else {
            L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(A, O, l, S);
            if (r) {
            if (Wn.transition) {
                w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(15, 70, 76, 42, 139, 155, w);
            } else {
                L.fillStyle = SPRITE.WATER_2_COLOR[Wn.time];
            }
            } else if (Wn.transition) {
            w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
            L.fillStyle = _n(9, 55, 63, 11, 106, 132, w);
            } else {
            L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(N, D, m, c);
            if (P) {
            if (r) {
                if (Wn.transition) {
                w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(17, 94, 96, 169, 214, 211, w);
                } else {
                L.fillStyle = SPRITE.WATER_1_COLOR[Wn.time];
                }
            } else if (Wn.transition) {
                w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(9, 55, 63, 11, 106, 132, w);
            } else {
                L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(y, p, g, M);
            }
            if (Gn.quality && r) {
            o.draw_foams_left(v, H, C, E, -Vn.cam.y + O, -Vn.cam.y + O + S);
            }
        }
        function hn(e, t, i, o, T, r) {
            var n = o.w1;
            var a = o.w2;
            var I = o.w3;
            var E = Vn.cam.y + e - 700;
            var _ = window.Math.max(Vn.cam.x + t, 0);
            var s = window.Math.max(-Vn.cam.x + H - i - 100, 0);
            var R = _;
            var h = H - _ - s;
            if (r) {
            var d = o.t(n).x;
            } else {
            d = n.r.x;
            }
            var u = E + WORLD.LW1SX;
            d = (u += d + WORLD.W1SX - 2, r) ? o.t(a).x : a.r.x;
            var A = E + WORLD.LW2SX - u + d;
            var O = (u += A - 2) - 2;
            d = r ? o.t(I).x : I.r.x;
            if (O < u + (A = E + WORLD.LW3SX - u + d) - 3) {
            u += A - 2;
            } else {
            u = O;
            }
            A = E + WORLD.LSANDX - u;
            if (r > 0 && T.isSand === 1) {
            if (Wn.transition) {
                var l = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(15, 77, 72, 252, 239, 187, l);
            } else {
                L.fillStyle = SPRITE.SAND_COLOR[Wn.time];
            }
            L.fillRect(R, u, h, A);
            } else {
            if (Wn.transition) {
                l = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(T.night[0], T.night[1], T.night[2], T.day[0], T.day[1], T.day[2], l);
            } else {
                L.fillStyle = T._color[Wn.time];
            }
            L.fillRect(R, u, h, A);
            }
        }
        function dn(e, t, i, o, T, r) {
            var n = o.w1;
            var a = o.w2;
            var I = o.w3;
            var E = Vn.cam.y + e - 700;
            var _ = window.Math.max(Vn.cam.x + t, 0);
            var s = window.Math.max(-Vn.cam.x + H - i - 100, 0);
            var R = _;
            var h = H - _ - s;
            if (r) {
            var d = o.t(n);
            } else {
            d = n.r;
            }
            var u = E + WORLD.LW1SX;
            var A = R;
            var O = u;
            var l = d.x + WORLD.W1SX;
            var S = h;
            var C = u += d.x + WORLD.W1SX - 2;
            d = r ? o.t(a) : a.r;
            var b = E + WORLD.LW2SX - u + d.x;
            var N = u;
            var D = R;
            var m = b;
            var c = h;
            var v = (u += b - 2) - 2;
            d = r ? o.t(I) : I.r;
            if (v < u + (b = E + WORLD.LW3SX - u + d.x) - 3) {
            var P = true;
            var y = u;
            var p = R;
            var g = b;
            var M = h;
            var w = u += b - 2;
            } else {
            P = false;
            u = v;
            w = -1;
            }
            b = E + WORLD.LSANDX - u;
            if (Wn.transition) {
            var f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
            L.fillStyle = _n(9, 55, 63, 11, 106, 132, f);
            } else {
            L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(A, O, S, l);
            if (r) {
            if (Wn.transition) {
                f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(15, 70, 76, 42, 139, 155, f);
            } else {
                L.fillStyle = SPRITE.WATER_2_COLOR[Wn.time];
            }
            } else if (Wn.transition) {
            f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
            L.fillStyle = _n(9, 55, 63, 11, 106, 132, f);
            } else {
            L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(D, N, c, m);
            if (P) {
            if (r) {
                if (Wn.transition) {
                f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(17, 94, 96, 169, 214, 211, f);
                } else {
                L.fillStyle = SPRITE.WATER_1_COLOR[Wn.time];
                }
            } else if (Wn.transition) {
                f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(9, 55, 63, 11, 106, 132, f);
            } else {
                L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(p, y, M, g);
            }
            if (Gn.quality && r) {
            o.draw_foams_top(v, w, C, E, -Vn.cam.x + A, -Vn.cam.x + A + S);
            }
        }
        function un(e, t, i, o, T, r) {
            var n = o.w1;
            var a = o.w2;
            var I = o.w3;
            var E = Vn.cam.x + e + 820;
            var _ = window.Math.max(Vn.cam.y + t, 0);
            var s = window.Math.max(-Vn.cam.y + f - i - 100, 0);
            var R = _;
            var h = f - _ - s;
            if (r) {
            var d = o.t(n).x;
            } else {
            d = n.r.x;
            }
            var u = E + WORLD.LW1SX;
            u += -d + WORLD.W1SX + 2;
            d = r ? o.t(a).x : a.r.x;
            var A = E - WORLD.LW2SX - u - d;
            var O = (u += A + 2) - 2;
            d = r ? o.t(I).x : I.r.x;
            if (O > u + (A = E - WORLD.LW3SX - u - d)) {
            u += A + 2;
            } else {
            u = O;
            }
            A = E - WORLD.LSANDX - u;
            if (r > 0 && T.isSand === 1) {
            if (Wn.transition) {
                var l = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(15, 77, 72, 252, 239, 187, l);
            } else {
                L.fillStyle = SPRITE.SAND_COLOR[Wn.time];
            }
            L.fillRect(u, R, A, h);
            } else {
            if (Wn.transition) {
                l = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(T.night[0], T.night[1], T.night[2], T.day[0], T.day[1], T.day[2], l);
            } else {
                L.fillStyle = T._color[Wn.time];
            }
            L.fillRect(u, R, A, h);
            }
        }
        function An(e, t, i, o, T, r) {
            var n = o.w1;
            var a = o.w2;
            var I = o.w3;
            var E = Vn.cam.x + e + 820;
            var _ = window.Math.max(Vn.cam.y + t, 0);
            var s = window.Math.max(-Vn.cam.y + f - i - 100, 0);
            var R = _;
            var h = f - _ - s;
            if (r) {
            var d = o.t(n);
            } else {
            d = n.r;
            }
            var u = E + WORLD.LW1SX;
            var A = u;
            var O = R;
            var l = -d.x + WORLD.W1SX;
            var S = h;
            var C = u += -d.x + WORLD.W1SX + 2;
            d = r ? o.t(a) : a.r;
            var b = E - WORLD.LW2SX - u - d.x;
            var N = u;
            var D = R;
            var m = b;
            var c = h;
            var v = (u += b + 2) - 2;
            d = r ? o.t(I) : I.r;
            if (v > u + (b = E - WORLD.LW3SX - u - d.x)) {
            var P = true;
            var y = u;
            var p = R;
            var g = b;
            var M = h;
            var H = u += b + 2;
            } else {
            P = false;
            u = v;
            H = -1;
            }
            b = E - WORLD.LSANDX - u;
            if (Wn.transition) {
            var w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
            L.fillStyle = _n(9, 55, 63, 11, 106, 132, w);
            } else {
            L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(A, O, l, S);
            if (r) {
            if (Wn.transition) {
                w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(15, 70, 76, 42, 139, 155, w);
            } else {
                L.fillStyle = SPRITE.WATER_2_COLOR[Wn.time];
            }
            } else if (Wn.transition) {
            w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
            L.fillStyle = _n(9, 55, 63, 11, 106, 132, w);
            } else {
            L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(N, D, m, c);
            if (P) {
            if (r) {
                if (Wn.transition) {
                w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(17, 94, 96, 169, 214, 211, w);
                } else {
                L.fillStyle = SPRITE.WATER_1_COLOR[Wn.time];
                }
            } else if (Wn.transition) {
                w = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(9, 55, 63, 11, 106, 132, w);
            } else {
                L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(y, p, g, M);
            }
            if (Gn.quality && r) {
            o.draw_foams_right(v, H, C, E, -Vn.cam.y + O, -Vn.cam.y + O + S);
            }
        }
        function On(e, t, i, o, T, r) {
            var n = o.w1;
            var a = o.w2;
            var I = o.w3;
            var E = Vn.cam.y + e + 710;
            var _ = window.Math.max(Vn.cam.x + t, 0);
            var s = window.Math.max(-Vn.cam.x + H - i - 100, 0);
            var R = _;
            var h = H - _ - s;
            if (r) {
            var d = o.t(n).x;
            } else {
            d = n.r.x;
            }
            var u = E + WORLD.LW1SX;
            d = (u += -d + WORLD.W1SX + 2, r) ? o.t(a).x : a.r.x;
            var A = E - WORLD.LW2SX - u - d;
            var O = (u += A + 2) - 2;
            d = r ? o.t(I).x : I.r.x;
            if (O > u + (A = E - WORLD.LW3SX - u - d)) {
            u += A + 2;
            } else {
            u = O;
            }
            A = E - WORLD.LSANDX - u;
            if (r > 0 && T.isSand === 1) {
            if (Wn.transition) {
                var l = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(15, 77, 72, 252, 239, 187, l);
            } else {
                L.fillStyle = SPRITE.SAND_COLOR[Wn.time];
            }
            L.fillRect(R, u, h, A);
            } else {
            if (Wn.transition) {
                l = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(T.night[0], T.night[1], T.night[2], T.day[0], T.day[1], T.day[2], l);
            } else {
                L.fillStyle = T._color[Wn.time];
            }
            L.fillRect(R, u, h, A);
            }
        }
        function ln(e, t, i, o, T, r) {
            var n = o.w1;
            var a = o.w2;
            var I = o.w3;
            var E = Vn.cam.y + e + 710;
            var _ = window.Math.max(Vn.cam.x + t, 0);
            var s = window.Math.max(-Vn.cam.x + H - i - 100, 0);
            var R = _;
            var h = H - _ - s;
            if (r) {
            var d = o.t(n);
            } else {
            d = n.r;
            }
            var u = E + WORLD.LW1SX;
            var A = u;
            var O = R;
            var l = -d.x + WORLD.W1SX;
            var S = h;
            var C = u += -d.x + WORLD.W1SX + 2;
            d = r ? o.t(a) : a.r;
            var b = E - WORLD.LW2SX - u - d.x;
            var N = u;
            var D = R;
            var m = b;
            var c = h;
            var v = (u += b + 2) - 2;
            d = r ? o.t(I) : I.r;
            if (v > u + (b = E - WORLD.LW3SX - u - d.x)) {
            var P = true;
            var y = u;
            var p = R;
            var g = b;
            var M = h;
            var w = u += b + 2;
            } else {
            P = false;
            u = v;
            w = -1;
            }
            b = E - WORLD.LSANDX - u;
            if (Wn.transition) {
            var f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
            L.fillStyle = _n(9, 55, 63, 11, 106, 132, f);
            } else {
            L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(O, A, S, l);
            if (r) {
            if (Wn.transition) {
                f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(15, 70, 76, 42, 139, 155, f);
            } else {
                L.fillStyle = SPRITE.WATER_2_COLOR[Wn.time];
            }
            } else if (Wn.transition) {
            f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
            L.fillStyle = _n(9, 55, 63, 11, 106, 132, f);
            } else {
            L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(D, N, c, m);
            if (P) {
            if (r) {
                if (Wn.transition) {
                f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(17, 94, 96, 169, 214, 211, f);
                } else {
                L.fillStyle = SPRITE.WATER_1_COLOR[Wn.time];
                }
            } else if (Wn.transition) {
                f = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                L.fillStyle = _n(9, 55, 63, 11, 106, 132, f);
            } else {
                L.fillStyle = SPRITE.WATER_3_COLOR[Wn.time];
            }
            L.fillRect(p, y, M, g);
            }
            if (Gn.quality && r) {
            o.draw_foams_bottom(v, w, C, E, -Vn.cam.x + O, -Vn.cam.x + O + S);
            }
        }
        function Sn() {
            L.globalAlpha = 1;
            if (Wn.transition) {
            var t = Wn.shade.update();
            }
            Wn.update_dist_from_biomes(-Vn.cam.x, -Vn.cam.y);
            qr = window.Math.max(window.Math.floor(-Vn.cam.x / Wn.dw) - 5, 0);
            jr = window.Math.min(window.Math.floor((-Vn.cam.x + H) / Wn.dw) + 4, Wn.nw - 1);
            Zr = window.Math.max(window.Math.floor(-Vn.cam.y / Wn.dh) - 3, 0);
            $r = window.Math.min(window.Math.floor((-Vn.cam.y + f) / Wn.dh) + 3, Wn.nh - 1);
            __p_5863156023(() => {
            for (var e = Wn.biomes.length - 1; e >= 0; e--) {
                if ((d = Wn.biomes[e]).t === Wn.BIOME_SEA) {
                var t = Wn.BIOME[d.t];
                if (-Vn.cam.x >= d.x1 - 230 - H && -Vn.cam.x <= d.x2 + 330 && -Vn.cam.y >= d.y1 - f && -Vn.cam.y <= d.y2 + 100) {
                    var i = d.x2;
                    if (d.t !== Wn.BIOME_SEA) {
                    i -= 610;
                    }
                    var o = d.x1;
                    if (d.t !== Wn.BIOME_SEA) {
                    o += 610;
                    }
                    var T = d.y2;
                    if (d.t !== Wn.BIOME_SEA) {
                    T -= 610;
                    }
                    var r = d.y1;
                    if (d.t !== Wn.BIOME_SEA) {
                    r += 610;
                    }
                    if (Wn.transition) {
                    var n = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                    L.fillStyle = _n(t.night[0], t.night[1], t.night[2], t.day[0], t.day[1], t.day[1], n);
                    } else {
                    L.fillStyle = t._color[Wn.time];
                    }
                    var a = window.Math.max(Vn.cam.x + o - 2 - 230, 0);
                    var I = window.Math.max(-Vn.cam.x + H - i - 330 - 2, 0);
                    var E = window.Math.max(Vn.cam.y + r - 2, 0);
                    var _ = window.Math.max(-Vn.cam.y + f - T - 100 - 2, 0);
                    L.beginPath();
                    L.fillRect(a, E, H - I - a, f - E - _);
                }
                }
            }
            for (e = Wn.biomes.length - 1; e >= 0; e--) {
                if ((d = Wn.biomes[e]).t !== Wn.BIOME_SEA) {
                i = d.x2;
                if (d.t !== Wn.BIOME_SEA) {
                    i -= 400;
                }
                o = d.x1;
                if (d.t !== Wn.BIOME_SEA) {
                    o += 400;
                }
                T = d.y2;
                if (d.t !== Wn.BIOME_SEA) {
                    T -= 300;
                }
                r = d.y1;
                if (d.t !== Wn.BIOME_SEA) {
                    r += 300;
                }
                if ((d.v & WORLD.RIGHT) == 0 && -Vn.cam.x >= i - H + 120 && -Vn.cam.x <= i + 820 && -Vn.cam.y >= r + 88 - f && -Vn.cam.y <= T + 50) {
                    un(i, r + 88, T - 88, Vn.beach[0], Wn.BIOME[d.t], d.v & WORLD.RIGHT);
                    An(i, r + 88, T - 88, Vn.beach[0], Wn.BIOME[d.t], d.v & WORLD.RIGHT);
                }
                if ((d.v & WORLD.LEFT) == 0 && -Vn.cam.x >= o - H - 700 && -Vn.cam.x <= o - 20 && -Vn.cam.y >= r + 88 - f && -Vn.cam.y <= T + 50) {
                    sn(o, r + 88, T - 88, Vn.beach[1], Wn.BIOME[d.t], d.v & WORLD.LEFT);
                    Rn(o, r + 88, T - 88, Vn.beach[1], Wn.BIOME[d.t], d.v & WORLD.LEFT);
                }
                if ((d.v & WORLD.BOTTOM) == 0 && -Vn.cam.x >= o - 235 - H && -Vn.cam.x <= i + 350 && -Vn.cam.y >= T - f - 275 && -Vn.cam.y <= T + 490) {
                    On(T - 230, o - 230, i + 230, Vn.beach[2], Wn.BIOME[d.t], d.v & WORLD.BOTTOM);
                    ln(T - 230, o - 230, i + 230, Vn.beach[2], Wn.BIOME[d.t], d.v & WORLD.BOTTOM);
                }
                if ((d.v & WORLD.TOP) == 0 && -Vn.cam.x >= o - 235 - H && -Vn.cam.x <= i + 350 && -Vn.cam.y >= r - f - 390 && -Vn.cam.y <= r + 315) {
                    hn(r + 310, o - 230, i + 230, Vn.beach[3], Wn.BIOME[d.t], d.v & WORLD.TOP);
                    dn(r + 310, o - 230, i + 230, Vn.beach[3], Wn.BIOME[d.t], d.v & WORLD.TOP);
                }
                }
            }
            for (e = Wn.biomes.length - 1; e >= 0; e--) {
                if ((d = Wn.biomes[e]).t !== Wn.BIOME_SEA) {
                i = d.x2;
                if (d.t !== Wn.BIOME_SEA) {
                    i -= 400;
                }
                o = d.x1;
                if (d.t !== Wn.BIOME_SEA) {
                    o += 400;
                }
                T = d.y2;
                if (d.t !== Wn.BIOME_SEA) {
                    T -= 300;
                }
                r = d.y1;
                if (d.t !== Wn.BIOME_SEA) {
                    r += 300;
                }
                if ((d.v & WORLD.RIGHT) != 0 && -Vn.cam.x >= i - H + 120 && -Vn.cam.x <= i + 820 && -Vn.cam.y >= r + 88 - f && -Vn.cam.y <= T + 50) {
                    un(i, r + 88, T - 88, Vn.beach[0], Wn.BIOME[d.t], d.v & WORLD.RIGHT);
                }
                if ((d.v & WORLD.LEFT) != 0 && -Vn.cam.x >= o - H - 700 && -Vn.cam.x <= o - 20 && -Vn.cam.y >= r + 88 - f && -Vn.cam.y <= T + 50) {
                    sn(o, r + 88, T - 88, Vn.beach[1], Wn.BIOME[d.t], d.v & WORLD.LEFT);
                }
                if ((d.v & WORLD.BOTTOM) != 0 && -Vn.cam.x >= o - 235 - H && -Vn.cam.x <= i + 350 && -Vn.cam.y >= T - f - 275 && -Vn.cam.y <= T + 490) {
                    On(T - 230, o - 230, i + 230, Vn.beach[2], Wn.BIOME[d.t], d.v & WORLD.BOTTOM);
                }
                if ((d.v & WORLD.TOP) != 0 && -Vn.cam.x >= o - 235 - H && -Vn.cam.x <= i + 350 && -Vn.cam.y >= r - f - 390 && -Vn.cam.y <= r + 315) {
                    hn(r + 310, o - 230, i + 230, Vn.beach[3], Wn.BIOME[d.t], d.v & WORLD.TOP);
                }
                }
            }
            for (e = Wn.biomes.length - 1; e >= 0; e--) {
                if ((d = Wn.biomes[e]).t !== Wn.BIOME_SEA) {
                t = Wn.BIOME[d.t];
                if (-Vn.cam.x >= d.x1 - 230 - H && -Vn.cam.x <= d.x2 + 330 && -Vn.cam.y >= d.y1 - f && -Vn.cam.y <= d.y2 + 100) {
                    i = d.x2;
                    if (d.t !== Wn.BIOME_SEA) {
                    if ((d.v & WORLD.RIGHT) == 0) {
                        i -= 414;
                    } else {
                        i -= 610;
                    }
                    }
                    o = d.x1;
                    if (d.t !== Wn.BIOME_SEA) {
                    if ((d.v & WORLD.LEFT) == 0) {
                        o += 414;
                    } else {
                        o += 610;
                    }
                    }
                    T = d.y2;
                    if (d.t !== Wn.BIOME_SEA) {
                    if ((d.v & WORLD.BOTTOM) == 0) {
                        T -= 414;
                    } else {
                        T -= 610;
                    }
                    }
                    r = d.y1;
                    if (d.t !== Wn.BIOME_SEA) {
                    if ((d.v & WORLD.TOP) == 0) {
                        r += 414;
                    } else {
                        r += 610;
                    }
                    }
                    if (Wn.transition) {
                    n = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                    L.fillStyle = _n(t.night[0], t.night[1], t.night[2], t.day[0], t.day[1], t.day[2], n);
                    } else {
                    L.fillStyle = t._color[Wn.time];
                    }
                    if (d.x1 === 0) {
                    o = 0;
                    }
                    if (d.y1 === 0) {
                    r = 0;
                    }
                    a = window.Math.max(Vn.cam.x + o - 2 - 230, 0);
                    I = window.Math.max(-Vn.cam.x + H - i - 330 - 2, 0);
                    E = window.Math.max(Vn.cam.y + r - 2, 0);
                    _ = window.Math.max(-Vn.cam.y + f - T - 100 - 2, 0);
                    L.beginPath();
                    L.fillRect(a, E, H - I - a, f - E - _);
                }
                }
            }
            if (Gn.quality) {
                En(Ur, Zr, $r, qr, jr, SPRITE.WAVE_TWO, "isl", 2);
                En(Ur, Zr, $r, qr, jr, SPRITE.WAVE_ONE, "isl", 2);
            }
            En(xr, Zr, $r, qr, jr, SPRITE.ISLAND, "isl", 2);
            if (Gn.quality) {
                En(Jr, Zr, $r, qr, jr, SPRITE.DECORATION, "de");
            }
            var s = Wn.units[ITEMS.PLAYERS];
            for (e = 0; e < s.length; e++) {
                for (var R = s[e], h = 0; h < R.foot.length; h++) {
                nn(R.foot[h]);
                }
            }
            if ((HT += Xn * 40) > 60) {
                HT -= 60;
            }
            En(wT, Zr, $r, qr, jr, SPRITE.RIVER, "r");
            e = 0;
            for (; e < Wn.biomes.length; e++) {
                var d;
                if ((d = Wn.biomes[e]).t !== Wn.BIOME_SEA) {
                i = d.x2;
                if (d.t !== Wn.BIOME_SEA) {
                    i -= 400;
                }
                o = d.x1;
                if (d.t !== Wn.BIOME_SEA) {
                    o += 400;
                }
                T = d.y2;
                if (d.t !== Wn.BIOME_SEA) {
                    T -= 300;
                }
                r = d.y1;
                if (d.t !== Wn.BIOME_SEA) {
                    r += 300;
                }
                if ((d.v & WORLD.RIGHT) > 0 && -Vn.cam.x >= i - H + 120 && -Vn.cam.x <= i + 820 && -Vn.cam.y >= r + 88 - f && -Vn.cam.y <= T + 50) {
                    An(i, r + 88, T - 88, Vn.beach[0], Wn.BIOME[d.t], d.v & WORLD.RIGHT);
                }
                if ((d.v & WORLD.LEFT) > 0 && -Vn.cam.x >= o - H - 700 && -Vn.cam.x <= o - 20 && -Vn.cam.y >= r + 88 - f && -Vn.cam.y <= T + 50) {
                    Rn(o, r + 88, T - 88, Vn.beach[1], Wn.BIOME[d.t], d.v & WORLD.LEFT);
                }
                if ((d.v & WORLD.BOTTOM) > 0 && -Vn.cam.x >= o - 235 - H && -Vn.cam.x <= i + 350 && -Vn.cam.y >= T - f - 275 && -Vn.cam.y <= T + 490) {
                    ln(T - 230, o - 230, i + 230, Vn.beach[2], Wn.BIOME[d.t], d.v & WORLD.BOTTOM);
                }
                if ((d.v & WORLD.TOP) > 0 && -Vn.cam.x >= o - 235 - H && -Vn.cam.x <= i + 350 && -Vn.cam.y >= r - f - 390 && -Vn.cam.y <= r + 315) {
                    dn(r + 310, o - 230, i + 230, Vn.beach[3], Wn.BIOME[d.t], d.v & WORLD.TOP);
                }
                }
            }
            }, 0)();
            __p_5863156023(() => {
            var t = qr;
            var i = jr;
            var o = Zr;
            var T = $r;
            if (Gn.quality) {
                En(xr, o, T, t, i, SPRITE.LAVA_GROUND, "la", 5);
            }
            En(xr, o, T, t, i, SPRITE.MAGMA, "la", 5);
            if (Gn.quality) {
                En(Xr, o, T, t, i, SPRITE.MAGMA, "la", 5);
            }
            En(xr, o, T, t, i, SPRITE.MARKER, "ma", 3);
            for (var r = Wn.units[ITEMS.SAND_WORM], n = 0; n < r.length; n++) {
                r[n].draw_ground();
            }
            var a = Wn.units[ITEMS.PLAYERS];
            for (n = 0; n < a.length; n++) {
                for (var I = a[n], E = 0; E < I.swim.length; E++) {
                rn(I.swim[E]);
                }
            }
            var _ = Wn.units[ITEMS.BRIDGE];
            for (n = 0; n < _.length; n++) {
                In(_[n], ItemType.BRIDGE);
                _[n].draw_life(_[n].info);
            }
            var s = Wn.units[ITEMS.FURNACE];
            for (n = 0; n < s.length; n++) {
                if (s[n].info) {
                Qr(s[n]);
                }
            }
            var R = Wn.units[ITEMS.FIRE];
            for (n = 0; n < R.length; n++) {
                Qr(R[n], ItemType.FIRE);
            }
            var h = Wn.units[ITEMS.RESURRECTION];
            for (n = 0; n < h.length; n++) {
                Qr(h[n]);
            }
            var d = Wn.units[ITEMS.EMERALD_MACHINE];
            for (n = 0; n < d.length; n++) {
                Qr(d[n]);
            }
            var u = Wn.units[ITEMS.BIG_FIRE];
            for (n = 0; n < u.length; n++) {
                Qr(u[n], ItemType.BIG_FIRE);
            }
            var A = Wn.units[ITEMS.PLOT];
            for (n = 0; n < A.length; n++) {
                In(A[n], ItemType.PLOT);
            }
            var O = Wn.units[ITEMS.SEED];
            for (n = 0; n < O.length; n++) {
                Qr(O[n]);
            }
            O = Wn.units[ITEMS.TOMATO_SEED];
            n = 0;
            for (; n < O.length; n++) {
                Qr(O[n]);
            }
            O = Wn.units[ITEMS.SEED];
            n = 0;
            for (; n < O.length; n++) {
                en(O[n]);
            }
            var l = Wn.units[ITEMS.CARROT_SEED];
            for (n = 0; n < l.length; n++) {
                if ((l[n].info & 15) == 0 || l[n].info === 10) {
                In(l[n]);
                }
            }
            var S = Wn.units[ITEMS.WATERMELON_SEED];
            for (n = 0; n < S.length; n++) {
                if ((S[n].info & 15) == 0 || S[n].info === 10) {
                In(S[n]);
                }
            }
            var C = Wn.units[ITEMS.ALOE_VERA_SEED];
            for (n = 0; n < C.length; n++) {
                if ((C[n].info & 15) == 0 || C[n].info === 10) {
                In(C[n]);
                }
            }
            var b = Wn.units[ITEMS.WHEAT_MOB];
            for (n = 0; n < b.length; n++) {
                In(b[n], ItemType.WHEAT_SEED);
            }
            var N = Wn.units[ITEMS.GARLIC_SEED];
            for (n = 0; n < N.length; n++) {
                if ((N[n].info & 15) == 0 || N[n].info === 10) {
                In(N[n]);
                }
            }
            var D = Wn.units[ITEMS.THORNBUSH_SEED];
            for (n = 0; n < D.length; n++) {
                if ((D[n].info & 15) == 0 || D[n].info === 10) {
                In(D[n]);
                }
            }
            var m = Wn.units[ITEMS.PUMPKIN_SEED];
            for (n = 0; n < m.length; n++) {
                if ((m[n].info & 15) == 0 || m[n].info === 10) {
                In(m[n]);
                }
            }
            b = Wn.units[ITEMS.WHEAT_SEED];
            n = 0;
            for (; n < b.length; n++) {
                In(b[n]);
            }
            if(!settings.boxontop.enabled) {
                var c = Wn.units[ITEMS.CRATE];
                for (n = 0; n < c.length; n++) {
                In(c[n], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
                }
                var P = Wn.units[ITEMS.DEAD_BOX];
                for (n = 0; n < P.length; n++) {
                In(P[n], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
                }
                var y = Wn.units[ITEMS.GIFT];
                for (n = 0; n < y.length; n++) {
                In(y[n], SPRITE.GIFT, SPRITE.HURT_GIFT);
                }
            }
            var p = Wn.units[ITEMS.RABBIT];
            for (n = 0; n < p.length; n++) {
                In(p[n], SPRITE.RABBIT, SPRITE.HURT_RABBIT);
            }
            var g = Wn.units[ITEMS.BED];
            for (n = 0; n < g.length; n++) {
                In(g[n], ItemType.BED);
            }
            r = Wn.units[ITEMS.SAND_WORM];
            n = 0;
            for (; n < r.length; n++) {
                In(r[n], SPRITE.SAND_WORM1, SPRITE.HURT_SAND_WORM1);
            }
            var M = Wn.units[ITEMS.SPELL];
            for (n = 0; n < M.length; n++) {
                if (M[n].fly === 0) {
                In(M[n]);
                }
            }
            g = Wn.units[ITEMS.BED];
            n = 0;
            for (; n < g.length; n++) {
                In(g[n], SPRITE.BED_TOP);
            }
            var w = Wn.units[ITEMS.CRAB];
            for (n = 0; n < w.length; n++) {
                In(w[n]);
            }
            var f = Wn.units[ITEMS.FOX];
            for (n = 0; n < f.length; n++) {
                In(f[n], SPRITE.FOX, SPRITE.HURT_FOX);
            }
            var z = Wn.units[ITEMS.BOAR];
            for (n = 0; n < z.length; n++) {
                In(z[n]);
            }
            var B = Wn.units[ITEMS.WOLF];
            for (n = 0; n < B.length; n++) {
                In(B[n], SPRITE.WOLF, SPRITE.HURT_WOLF);
            }
            var G = Wn.units[ITEMS.BABY_DRAGON];
            for (n = 0; n < G.length; n++) {
                In(G[n], SPRITE.BABY_DRAGON, SPRITE.HURT_BABY_DRAGON);
            }
            var W = Wn.units[ITEMS.BABY_LAVA];
            for (n = 0; n < W.length; n++) {
                In(W[n], SPRITE.BABY_LAVA, SPRITE.HURT_BABY_LAVA);
            }
            l = Wn.units[ITEMS.CARROT_SEED];
            n = 0;
            for (; n < l.length; n++) {
                if ((l[n].info & 15) != 0 && l[n].info !== 10) {
                In(l[n]);
                }
            }
            S = Wn.units[ITEMS.WATERMELON_SEED];
            n = 0;
            for (; n < S.length; n++) {
                if ((S[n].info & 15) != 0 && S[n].info !== 10) {
                In(S[n]);
                }
            }
            C = Wn.units[ITEMS.ALOE_VERA_MOB];
            n = 0;
            for (; n < C.length; n++) {
                In(C[n], ItemType.ALOE_VERA);
            }
            C = Wn.units[ITEMS.ALOE_VERA_SEED];
            n = 0;
            for (; n < C.length; n++) {
                if ((C[n].info & 15) != 0 && C[n].info !== 10) {
                In(C[n]);
                }
            }
            O = Wn.units[ITEMS.TOMATO_SEED];
            n = 0;
            for (; n < O.length; n++) {
                en(O[n]);
            }
            N = Wn.units[ITEMS.GARLIC_SEED];
            n = 0;
            for (; n < N.length; n++) {
                if ((N[n].info & 15) != 0 && N[n].info !== 10) {
                In(N[n]);
                }
            }
            D = Wn.units[ITEMS.THORNBUSH_SEED];
            n = 0;
            for (; n < D.length; n++) {
                if ((D[n].info & 15) != 0 && D[n].info !== 10) {
                In(D[n]);
                }
            }
            m = Wn.units[ITEMS.PUMPKIN_SEED];
            n = 0;
            for (; n < m.length; n++) {
                if ((m[n].info & 15) != 0 && m[n].info !== 10) {
                In(m[n]);
                }
            }
            var V = Wn.units[ITEMS.TREASURE_CHEST];
            for (n = 0; n < V.length; n++) {
                In(V[n], SPRITE.TREASURE_CHEST, SPRITE.HURT_TREASURE_CHEST);
            }
            var K = Wn.units[ITEMS.KRAKEN];
            for (n = 0; n < K.length; n++) {
                In(K[n], SPRITE.KRAKEN, SPRITE.HURT_KRAKEN);
            }
            var Y = Wn.units[ITEMS.PIRANHA];
            for (n = 0; n < Y.length; n++) {
                In(Y[n], SPRITE.PIRANHA, SPRITE.HURT_PIRANHA);
            }
            var U = Wn.units[ITEMS.SPIDER];
            for (n = 0; n < U.length; n++) {
                In(U[n], SPRITE.SPIDER, SPRITE.HURT_SPIDER);
            }
            var k = Wn.units[ITEMS.PENGUIN];
            for (n = 0; n < k.length; n++) {
                In(k[n], SPRITE.PENGUIN, SPRITE.HURT_PENGUIN);
            }
            var F = Wn.units[ITEMS.BEAR];
            for (n = 0; n < F.length; n++) {
                In(F[n], SPRITE.BEAR, SPRITE.HURT_BEAR);
            }
            var x = Wn.units[ITEMS.BABY_MAMMOTH];
            for (n = 0; n < x.length; n++) {
                In(x[n]);
            }
            var J = Wn.units[ITEMS.FLAME];
            for (n = 0; n < J.length; n++) {
                In(J[n], SPRITE.FIRE_MOB, SPRITE.HURT_FIRE_MOB);
            }
            var X = Wn.units[ITEMS.CRAB_BOSS];
            for (n = 0; n < X.length; n++) {
                In(X[n]);
            }
            var q = Wn.units[ITEMS.MAMMOTH];
            for (n = 0; n < q.length; n++) {
                In(q[n], SPRITE.MAMMOTH, SPRITE.HURT_MAMMOTH);
            }
            var j = Wn.units[ITEMS.DRAGON];
            for (n = 0; n < j.length; n++) {
                if (j[n].scale === 1) {
                In(j[n], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
                }
            }
            j = Wn.units[ITEMS.LAVA_DRAGON];
            n = 0;
            for (; n < j.length; n++) {
                if (j[n].scale === 1) {
                In(j[n], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
                }
            }
            if(!settings.chestontop.enabled) {
                var Z = Wn.units[ITEMS.CHEST];
                for (n = 0; n < Z.length; n++) {
                In(Z[n]);
                }
            }
            var $ = Wn.units[ITEMS.WORKBENCH];
            for (n = 0; n < $.length; n++) {
                In($[n], ItemType.WORKBENCH);
            }
            s = Wn.units[ITEMS.FURNACE];
            n = 0;
            for (; n < s.length; n++) {
                In(s[n]);
            }
            var Q = Wn.units[ITEMS.BREAD_OVEN];
            for (n = 0; n < Q.length; n++) {
                In(Q[n]);
            }
            var ee = Wn.units[ITEMS.WOOD_DOOR];
            for (n = 0; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10012 : 10013 : ItemType.WOOD_DOOR);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.STONE_DOOR];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10014 : 10015 : ItemType.STONE_DOOR);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.GOLD_DOOR];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10016 : 10017 : ItemType.GOLD_DOOR);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.DIAMOND_DOOR];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10018 : 10019 : ItemType.DIAMOND_DOOR);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.AMETHYST_DOOR];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10020 : 10021 : ItemType.AMETHYST_DOOR);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.REIDITE_DOOR];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10022 : 10023 : ItemType.REIDITE_DOOR);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.WOOD_DOOR_SPIKE];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10024 : 10025 : ItemType.WOOD_DOOR_SPIKE);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.STONE_DOOR_SPIKE];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10026 : 10027 : ItemType.STONE_DOOR_SPIKE);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.GOLD_DOOR_SPIKE];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10028 : 10029 : ItemType.GOLD_DOOR_SPIKE);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.DIAMOND_DOOR_SPIKE];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10030 : 10031 : ItemType.DIAMOND_DOOR_SPIKE);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.AMETHYST_DOOR_SPIKE];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10032 : 10033 : ItemType.AMETHYST_DOOR_SPIKE);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            ee = Wn.units[ITEMS.REIDITE_DOOR_SPIKE];
            n = 0;
            for (; n < ee.length; n++) {
                if (ee[n].info) {
                In(ee[n], e.coloredspikes.enabled ? Vn.team.includes(ee[n].pid) || Vn.id == ee[n].pid ? 10034 : 10035 : ItemType.REIDITE_DOOR_SPIKE);
                }
                ee[n].draw_life(ee[n].info >> 1);
            }
            var te = Wn.units[ITEMS.WALL];
            for (n = 0; n < te.length; n++) {
                In(te[n], ItemType.WOOD_WALL);
                te[n].draw_life(te[n].info);
            }
            te = Wn.units[ITEMS.STONE_WALL];
            n = 0;
            for (; n < te.length; n++) {
                In(te[n], ItemType.STONE_WALL);
                te[n].draw_life(te[n].info);
            }
            te = Wn.units[ITEMS.GOLD_WALL];
            n = 0;
            for (; n < te.length; n++) {
                In(te[n], ItemType.GOLD_WALL);
                te[n].draw_life(te[n].info);
            }
            te = Wn.units[ITEMS.DIAMOND_WALL];
            n = 0;
            for (; n < te.length; n++) {
                In(te[n], ItemType.DIAMOND_WALL);
                te[n].draw_life(te[n].info);
            }
            te = Wn.units[ITEMS.AMETHYST_WALL];
            n = 0;
            for (; n < te.length; n++) {
                In(te[n], ItemType.AMETHYST_WALL);
                te[n].draw_life(te[n].info);
            }
            te = Wn.units[ITEMS.REIDITE_WALL];
            n = 0;
            for (; n < te.length; n++) {
                In(te[n], ItemType.REIDITE_WALL);
                te[n].draw_life(te[n].info);
            }
            var ie = Wn.units[ITEMS.SPIKE];
            for (n = 0; n < ie.length; n++) {
                In(ie[n], e.coloredspikes.enabled ? Vn.team.includes(ie[n].pid) || Vn.id == ie[n].pid ? 10010 : 10011 : ItemType.WOOD_SPIKE);
                ie[n].draw_life(ie[n].info);
            }
            ie = Wn.units[ITEMS.STONE_SPIKE];
            n = 0;
            for (; n < ie.length; n++) {
                In(ie[n], e.coloredspikes.enabled ? Vn.team.includes(ie[n].pid) || Vn.id == ie[n].pid ? 10008 : 10009 : ItemType.STONE_SPIKE);
                ie[n].draw_life(ie[n].info);
            }
            ie = Wn.units[ITEMS.GOLD_SPIKE];
            n = 0;
            for (; n < ie.length; n++) {
                In(ie[n], e.coloredspikes.enabled ? Vn.team.includes(ie[n].pid) || Vn.id == ie[n].pid ? 10006 : 10007 : ItemType.GOLD_SPIKE);
                ie[n].draw_life(ie[n].info);
            }
            ie = Wn.units[ITEMS.DIAMOND_SPIKE];
            n = 0;
            for (; n < ie.length; n++) {
                In(ie[n], e.coloredspikes.enabled ? Vn.team.includes(ie[n].pid) || Vn.id == ie[n].pid ? 10004 : 10005 : ItemType.DIAMOND_SPIKE);
                ie[n].draw_life(ie[n].info);
            }
            ie = Wn.units[ITEMS.AMETHYST_SPIKE];
            n = 0;
            for (; n < ie.length; n++) {
                In(ie[n], e.coloredspikes.enabled ? Vn.team.includes(ie[n].pid) || Vn.id == ie[n].pid ? 10002 : 10003 : ItemType.AMETHYST_SPIKE);
                ie[n].draw_life(ie[n].info);
            }
            ie = Wn.units[ITEMS.REIDITE_SPIKE];
            n = 0;
            for (; n < ie.length; n++) {
                In(ie[n], e.coloredspikes.enabled ? Vn.team.includes(ie[n].pid) || Vn.id == ie[n].pid ? 10000 : 10001 : ItemType.REIDITE_SPIKE);
                ie[n].draw_life(ie[n].info);
            }
            var oe = Wn.units[ITEMS.WELL];
            for (n = 0; n < oe.length; n++) {
                var Te = oe[n];
                if (Te.info > 0) {
                In(Te, SPRITE.WELL_FULL);
                } else {
                In(Te, ItemType.WELL);
                }
            }
            if(!settings.totemontop.enabled) {
                var re = Wn.units[ITEMS.TOTEM];
                for (n = 0; n < re.length; n++) {
                In(re[n], ItemType.TOTEM);
                }
            }
            En(xr, o, T, t, i, ItemType.GOLD, "g", 2);
            En(xr, o, T, t, i, ItemType.DIAMOND, "d", 2);
            En(xr, o, T, t, i, ItemType.BERRY, "p", 0);
            En(xr, o, T, t, i, ItemType.EMERALD, "m", 2);
            En(xr, o, T, t, i, ItemType.AMETHYST, "a", 2);
            En(xr, o, T, t, i, ItemType.REIDITE, "re", 2);
            En(xr, o, T, t, i, SPRITE.SHADOW_CAVE_STONES, "cs", 3, 3);
            En(xr, o, T, t, i, SPRITE.SHADOW_CAVE_STONES, "cs", 2, 2);
            En(xr, o, T, t, i, SPRITE.SHADOW_CAVE_STONES, "cs", 1, 1);
            En(xr, o, T, t, i, SPRITE.SHADOW_CAVE_STONES, "cs", 0, 0);
            En(xr, o, T, t, i, SPRITE.CAVE_STONES, "cs", 3, 3);
            En(xr, o, T, t, i, SPRITE.CAVE_STONES, "cs", 2, 2);
            En(xr, o, T, t, i, SPRITE.CAVE_STONES, "cs", 1, 1);
            En(xr, o, T, t, i, SPRITE.CAVE_STONES, "cs", 0, 0);
            var ne = Wn.units[ITEMS.FRUIT];
            for (n = 0; n < ne.length; n++) {
                for (E = 0; E < ne[n].info; E++) {
                In(ne[n].fruits[E], SPRITE.FRUIT);
                }
            }
            En(xr, o, T, t, i, ItemType.STONE, "s", 2);
            var ae = Wn.units[ITEMS.EXTRACTOR_MACHINE_STONE];
            for (n = 0; n < ae.length; n++) {
                In(ae[n]);
            }
            ae = Wn.units[ITEMS.EXTRACTOR_MACHINE_GOLD];
            n = 0;
            for (; n < ae.length; n++) {
                In(ae[n]);
            }
            ae = Wn.units[ITEMS.DIAMOND_EXTRACTOR];
            n = 0;
            for (; n < ae.length; n++) {
                In(ae[n]);
            }
            ae = Wn.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST];
            n = 0;
            for (; n < ae.length; n++) {
                In(ae[n]);
            }
            ae = Wn.units[ITEMS.EXTRACTOR_MACHINE_REIDITE];
            n = 0;
            for (; n < ae.length; n++) {
                In(ae[n]);
            }
            var Ie = Wn.units[ITEMS.WINDMILL];
            for (n = 0; n < Ie.length; n++) {
                Qr(Ie[n]);
            }
            R = Wn.units[ITEMS.FIRE];
            n = 0;
            for (; n < R.length; n++) {
                en(R[n]);
            }
            R = Wn.units[ITEMS.BIG_FIRE];
            n = 0;
            for (; n < R.length; n++) {
                en(R[n]);
            }
            s = Wn.units[ITEMS.FURNACE];
            n = 0;
            for (; n < s.length; n++) {
                if (s[n].info) {
                en(s[n]);
                }
            }
            Q = Wn.units[ITEMS.BREAD_OVEN];
            n = 0;
            for (; n < Q.length; n++) {
                en(Q[n]);
            }
            h = Wn.units[ITEMS.RESURRECTION];
            n = 0;
            for (; n < h.length; n++) {
                en(h[n]);
            }
            d = Wn.units[ITEMS.EMERALD_MACHINE];
            n = 0;
            for (; n < d.length; n++) {
                en(d[n]);
                d[n].draw_life(d[n].info);
            }
            En(xr, o, T, t, i, SPRITE.CACTUS, "c", 0);
            En(xr, o, T, t, i, ItemType.WOOD, "t", 5, 4);
            En(xr, o, T, t, i, SPRITE.FIR, "f", 2, 2);
            En(xr, o, T, t, i, SPRITE.PALM, "plm", 0, 0);
            En(xr, o, T, t, i, SPRITE.TREE_BRANCH, "b", 3, 2);
            En(xr, o, T, t, i, ItemType.WOOD, "t", 3, 2);
            En(xr, o, T, t, i, SPRITE.TREE_BRANCH, "b", 1, 0);
            En(xr, o, T, t, i, SPRITE.FIR, "f", 1, 1);
            En(xr, o, T, t, i, SPRITE.PALM, "plm", 1, 1);
            En(xr, o, T, t, i, ItemType.WOOD, "t", 1, 0);
            En(xr, o, T, t, i, SPRITE.FIR, "f", 0, 0);
            En(xr, o, T, t, i, SPRITE.PALM, "plm", 2, 2);
            Ie = Wn.units[ITEMS.WINDMILL];
            n = 0;
            for (; n < Ie.length; n++) {
                en(Ie[n]);
            }
            var Ee = Wn.units[ITEMS.WOOD_TOWER];
            for (n = 0; n < Ee.length; n++) {
                In(Ee[n], ItemType.TOWER);
            }
            a = Wn.units[ITEMS.PLAYERS];
            n = 0;
            for (; n < a.length; n++) {
                if ((I = a[n]).tower === 1 && (I.speed < 180 || I.vehicle !== ItemType.BABY_DRAGON && I.vehicle !== ItemType.BABY_LAVA && I.vehicle !== ItemType.NIMBUS && I.vehicle !== ItemType.HAWK && I.vehicle !== ItemType.PLANE)) {
                I.tower_fx = v.lerp(I.tower_fx, 100, 0.018);
                H = 1 + window.Math.min(1, window.Math.max(I.tower_fx, 0) / 100) * 0.18;
                L.save();
                L.scale(H, H);
                Vn.cam.x /= H;
                Vn.cam.y /= H;
                I.x /= H;
                I.y /= H;
                I.r.x /= H;
                I.r.y /= H;
                I.draw_vehicle();
                I.draw();
                Vn.cam.x *= H;
                Vn.cam.y *= H;
                I.x *= H;
                I.y *= H;
                I.r.x *= H;
                I.r.y *= H;
                L.restore();
                }
            }
            var _e = Wn.units[ITEMS.ROOF];
            for (n = 0; n < _e.length; n++) {
                In(_e[n], ItemType.ROOF);
                _e[n].draw_life(_e[n].info);
            }
            var se = Wn.units[ITEMS.FIREFLY];
            for (n = 0; n < se.length; n++) {
                In(se[n], SPRITE.FIREFLY, SPRITE.HURT_FIREFLY);
            }
            var Re = Wn.units[ITEMS.GARLAND];
            for (n = 0; n < Re.length; n++) {
                In(Re[n], ItemType.GARLAND);
            }
            a = Wn.units[ITEMS.PLAYERS];
            n = 0;
            for (; n < a.length; n++) {
                if (((I = a[n]).vehicle === ItemType.BABY_DRAGON || I.vehicle === ItemType.BABY_LAVA || I.vehicle === ItemType.NIMBUS || I.vehicle === ItemType.HAWK || I.vehicle === ItemType.PLANE) && I.speed > 180) {
                I.fly = 1;
                L.save();
                H = 1 + window.Math.min(1, window.Math.max(I.vehicle_fx5 - 30, 0) / 180) * 0.35;
                L.scale(H, H);
                Vn.cam.x /= H;
                Vn.cam.y /= H;
                I.x /= H;
                I.y /= H;
                I.r.x /= H;
                I.r.y /= H;
                I.draw_vehicle();
                I.draw();
                Vn.cam.x *= H;
                Vn.cam.y *= H;
                I.x *= H;
                I.y *= H;
                I.r.x *= H;
                I.r.y *= H;
                L.restore();
                }
            }
            M = Wn.units[ITEMS.SPELL];
            n = 0;
            for (; n < M.length; n++) {
                if (M[n].fly === 1) {
                In(M[n]);
                }
            }
            j = Wn.units[ITEMS.DRAGON];
            n = 0;
            for (; n < j.length; n++) {
                if (j[n].scale > 1) {
                In(j[n], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
                }
            }
            j = Wn.units[ITEMS.LAVA_DRAGON];
            n = 0;
            for (; n < j.length; n++) {
                if (j[n].scale > 1) {
                In(j[n], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
                }
            }
            var he = Wn.units[ITEMS.HAWK];
            for (n = 0; n < he.length; n++) {
                In(he[n], SPRITE.HAWK, SPRITE.HURT_HAWK);
            }
            var de = Wn.units[ITEMS.VULTURE];
            for (n = 0; n < de.length; n++) {
                In(de[n], SPRITE.VULTURE, SPRITE.HURT_VULTURE);
            }
            if ((Kr += Xn * 15) > 60) {
                Kr -= 60;
            }
            En(Yr, o, T, t, i, SPRITE.FOG, "fo", 2);
            En(Yr, o, T, t, i, SPRITE.FOD, "fod", 2);
            a = Wn.units[ITEMS.PLAYERS];
            n = 0;
            for (; n < a.length; n++) {
                if ((I = a[n]).x + Vn.cam.x >= -130 && I.y + Vn.cam.y >= -130 && I.x + Vn.cam.x <= window.innerWidth + 130 && I.y + Vn.cam.y <= window.innerHeight + 130) {
                if (a[n].vehicle !== ItemType.BABY_DRAGON && a[n].vehicle !== ItemType.BABY_LAVA && a[n].vehicle !== ItemType.HAWK && a[n].vehicle !== ItemType.PLANE && a[n].vehicle !== ItemType.NIMBUS) {
                    if (I.tower === 0) {
                    if (I.tower_fx > 0.001) {
                        I.tower_fx = v.lerp(I.tower_fx, 0, 0.018);
                        var H = 1 + window.Math.min(1, window.Math.max(I.tower_fx, 0) / 100) * 0.18;
                        L.save();
                        L.scale(H, H);
                        Vn.cam.x /= H;
                        Vn.cam.y /= H;
                        I.x /= H;
                        I.y /= H;
                        I.r.x /= H;
                        I.r.y /= H;
                        I.draw_vehicle();
                        I.draw();
                        Vn.cam.x *= H;
                        Vn.cam.y *= H;
                        I.x *= H;
                        I.y *= H;
                        I.r.x *= H;
                        I.r.y *= H;
                        L.restore();
                    } else {
                        I.fly = 0;
                        I.draw_vehicle();
                        I.draw();
                    }
                    }
                } else if (I.speed <= 180) {
                    L.save();
                    H = 1 + window.Math.min(1, window.Math.max(I.vehicle_fx5 - 30, 0) / 180) * 0.35;
                    L.scale(H, H);
                    Vn.cam.x /= H;
                    Vn.cam.y /= H;
                    I.x /= H;
                    I.y /= H;
                    I.r.x /= H;
                    I.r.y /= H;
                    I.fly = 0;
                    I.draw_vehicle();
                    I.draw();
                    Vn.cam.x *= H;
                    Vn.cam.y *= H;
                    I.x *= H;
                    I.y *= H;
                    I.r.x *= H;
                    I.r.y *= H;
                    L.restore();
                }
                }
            }
            if(settings.chestontop.enabled) {
                var Z = Wn.units[ITEMS.CHEST];
                for (n = 0; n < Z.length; n++) {
                In(Z[n]);
                }
            };
            if(settings.totemontop.enabled) {
                var re = Wn.units[ITEMS.TOTEM];
                for (n = 0; n < re.length; n++) {
                In(re[n], ItemType.TOTEM);
                }
            };
            if(settings.boxontop.enabled) {
                var c = Wn.units[ITEMS.CRATE];
                for (n = 0; n < c.length; n++) {
                In(c[n], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
                }
                var P = Wn.units[ITEMS.DEAD_BOX];
                for (n = 0; n < P.length; n++) {
                In(P[n], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
                }
                var y = Wn.units[ITEMS.GIFT];
                for (n = 0; n < y.length; n++) {
                In(y[n], SPRITE.GIFT, SPRITE.HURT_GIFT);
                }
            };
            if(settings.tracers.enabled) {
                const players = Wn.units[ITEMS.PLAYERS];
                for(const player of players) {
                    L.save();
                    L.beginPath();
                    L.strokeStyle = Vn.team.includes(player.pid) ? settings.colors.tracersally : settings.colors.tracersenemy;
                    L.lineWidth = 3.3;
                    L.moveTo(Vn.cam.x + Wn.fast_units[Vn.id].x, Vn.cam.y + Wn.fast_units[Vn.id].y);
                    L.lineTo(Vn.cam.x + player.x, Vn.cam.y + player.y);
                    L.stroke();
                    L.restore();
                };
            };
            if(settings.movementpredicter.enabled) {
                const players = Wn.units[ITEMS.PLAYERS];
                for(const player of players) {
                    L.save();
                    L.beginPath();
                    L.strokeStyle = settings.colors.movementpredicter;
                    L.lineWidth = 3.3;
                    L.moveTo(player.x + Vn.cam.x, player.y + Vn.cam.y);
                    L.lineTo(player.r.x + Vn.cam.x, player.r.y + Vn.cam.y);
                    L.stroke();
                    L.restore();
                };
            };
            if(settings.enabledhacks.enabled) {
            let forY = 20;
            for(const hack in settings) {
                if(settings[hack].enabled && settings[hack].draw) {
                L.save();
                L.lineWidth = 6;
                L.font = "24px Baloo Paaji";
                L.strokeStyle = "black";
                L.fillStyle = settings.colors.enabledhacks;
                L.strokeText(hack, 20, 400 + forY);
                L.fillText(hack, 20, 400 + forY);
                L.restore();
                forY += 30;
                };
            };
            };
            }, 0)();
            if (Gn.quality && Wn.mode !== WORLD.MODE_ZOMBIES && Wn.mode !== WORLD.MODE_LEGACY && Wn.mode !== WORLD.MODE_BR) {
            __p_5863156023(() => {
                var e = Vn.desert;
                if (e.tempest === 0) {
                e.tempest_speed = window.Math.max(0, e.tempest_speed - Xn / 10);
                } else {
                e.tempest_speed = window.Math.min(1, e.tempest_speed + Xn / 10);
                }
                for (var t = e.flakes, i = 0; i < t.length; i++) {
                var o = t[i];
                e.update(o);
                an(SPRITE.DESERT, o.id, Vn.cam.x + o.x, Vn.cam.y + o.y, o.alpha);
                }
                for (i = 0; i < t.length; i++) {
                if ((o = t[i]).life <= 0 || o.x > -Vn.cam.x + H || o.x < -Vn.cam.x - H / 2 || o.y > -Vn.cam.y + f) {
                    t.splice(i, 1);
                }
                }
                var T = -Vn.cam.y;
                if (Wn.dist_desert > -1000) {
                e.add(T);
                }
            }, 0)();
            __p_5863156023(() => {
                var e = Vn.winter;
                if (e.tempest === 0) {
                e.tempest_speed = window.Math.max(0, e.tempest_speed - Xn / 10);
                } else {
                e.tempest_speed = window.Math.min(1, e.tempest_speed + Xn / 10);
                }
                for (var t = e.flakes, i = 0; i < t.length; i++) {
                var o = t[i];
                e.update(o);
                an(SPRITE.FLAKES, o.id, Vn.cam.x + o.x, Vn.cam.y + o.y, o.alpha);
                }
                for (i = 0; i < t.length; i++) {
                if ((o = t[i]).life <= 0 || o.x > -Vn.cam.x + H || o.x < -Vn.cam.x || o.y > -Vn.cam.y + f) {
                    t.splice(i, 1);
                }
                }
                var T = -Vn.cam.y;
                if (Wn.dist_winter > 300) {
                e.add(T);
                }
            }, 0)();
            __p_5863156023(() => {
                var e = Vn.ash;
                for (var t = e.flakes, i = 0; i < t.length; i++) {
                var o = t[i];
                e.update(o);
                an(SPRITE.ASHES, o.id, Vn.cam.x + o.x, Vn.cam.y + o.y, o.alpha);
                }
                for (i = 0; i < t.length; i++) {
                if ((o = t[i]).life <= 0 || o.x > -Vn.cam.x + H || o.x < -Vn.cam.x || o.y > -Vn.cam.y + f) {
                    t.splice(i, 1);
                }
                }
                var T = -Vn.cam.y;
                if (Wn.dist_lava > 300) {
                e.add(T);
                }
            }, 0)();
            }
            if (Wn.transition && t) {
            Wn.transition = false;
            Wn.shade.v = 0;
            Wn.shade.o = false;
            }
        }
        var Cn = 2;
        function bn(e) {
            return {
            x: e.clientX,
            y: e.clientY
            };
        }
        function Nn(e, t, i, o, T, r, n = 0, a = 0, I = 0, E, _, s, R, h = 0, d) {
            if (e.length === 0) {
            e = " ";
            }
            var u = window.document.createElement("canvas");
            var A = u.getContext("2d");
            A.textBaseline = "middle";
            A.font = (d !== undefined ? d + " " : "") + o + "px " + t;
            T = T !== undefined ? window.Math.min(A.measureText(e).width, T) : A.measureText(e).width;
            u.width = T + n;
            u.height = o + a;
            if (r !== undefined) {
            if (_ !== undefined) {
                A.globalAlpha = _;
            }
            A.fillStyle = r;
            if (s !== undefined) {
                roundRect(A, I + 2, I, T + n - I * 2 - 4, o + a - I * 2, s);
                A.fill();
            } else {
                A.fillRect(I, I, T + n - I * 2, o + a - I * 2);
            }
            A.globalAlpha = 1;
            if (I !== 0) {
                A.lineWidth = I;
                A.strokeStyle = E;
                A.stroke();
            }
            }
            A.textBaseline = "middle";
            A.font = (d !== undefined ? d + " " : "") + o + "px " + t;
            if (R !== undefined) {
            A.strokeStyle = R;
            A.lineWidth = h;
            A.lineJoin = "miter";
            A.miterLimit = 2;
            A.strokeText(e, window.Math.floor(n / 2), window.Math.floor(a / 2) + window.Math.floor(o / 2), T);
            }
            A.fillStyle = i;
            A.fillText(e, window.Math.floor(n / 2), window.Math.floor(a / 2) + window.Math.floor(o / 2), T);
            u.w2 = u.width / 2;
            u.h2 = u.height / 2;
            return u;
        }
        function Dn(e, t, i, o, T, r, n, a = 0, I = 0, E = 0, _ = 1) {
            if (r !== 1) {
            r = 0;
            }
            if (o) {
            var s = o;
            }
            var R;
            var h = {
            width: e,
            height: t,
            img: s,
            state: 0,
            translate: {
                x: a,
                y: I,
                _x: a,
                _y: I
            },
            enable_breath: r,
            breath: 0,
            callback: n,
            position: E,
            active: _
            };
            var d = __p_5863156023(() => {
            return h.img[h.state];
            }, 0);
            var u = __p_5863156023(e => {
            var t = h.translate;
            if (h.width === 0 || h.height === 0) {
                h.width = h.img[0].width;
                h.height = h.img[0].height;
            }
            return e.x > t.x && e.x < t.x + h.width / T && e.y > t.y && e.y < t.y + h.height / T;
            }, 1);
            r = __p_5863156023(() => {
            var e = 0;
            if (h.enable_breath === 1) {
                if (h.state === 1 || h.state === Cn) {
                h.breath = (h.breath + Xn * 1000) % 1000;
                } else if (h.breath > 0) {
                h.breath = h.breath > 500 ? h.breath + Xn * 1000 : h.breath - Xn * 1000;
                if (h.breath < 0 || h.breath > 1000) {
                    h.breath = 0;
                }
                }
                e = v.ease_in_out_quad(h.breath > 500 ? (1000 - h.breath) / 500 : h.breath / 500) * 0.2;
            }
            return e;
            }, 0);
            if ((T = T === 3 ? 3 : T === 1 ? 2 : 1) === 2) {
            R = __p_5863156023(e => {
                var t = 1 + r();
                var i = d();
                var o = h.width * t / 2;
                var T = h.height * t / 2;
                var n = (o - h.width / 2) / 2;
                var a = (T - h.height / 2) / 2;
                Xo(e, i, h.translate.x - n, h.translate.y - a, o, T);
            }, 1);
            } else if (T === 3) {
            R = __p_5863156023(e => {
                var t = d();
                var i = h.width;
                var o = h.height;
                var T = (i - h.width) / 2;
                var r = (o - h.height) / 2;
                Xo(e, t, h.translate.x - T, h.translate.y - r, i, o);
            }, 1);
            T = 1;
            } else {
            R = __p_5863156023(e => {
                Xo(e, d(), h.translate.x, h.translate.y);
            }, 1);
            }
            return {
            info: h,
            trigger: __p_5863156023((e, t, i) => {
                if (u(t)) {
                if (i == 1) {
                    h.state = Cn;
                } else if (i == 2 || i == 0 && h.state != Cn) {
                    h.state = 1;
                }
                return true;
                } else {
                h.state = 0;
                return false;
                }
            }, 3),
            draw: R,
            in_button: u
            };
        }
        function mn(e, t, i, o, T) {
            var r = {
            x: i,
            y: o,
            _x: i,
            _y: o
            };
            return {
            translate: r,
            draw: __p_5863156023(t => {
                Xo(t, e, r.x, r.y, e.width / 2, e.height / 2);
            }, 1),
            active: t,
            position: T
            };
        }
        var cn = [];
        for (oe = 0; oe < 500; oe++) {
            cn[oe] = 0;
        }
        cn[ItemType.SUPER_DIVING_SUIT] = 1;
        cn[ItemType.WOOD_SWORD] = 1;
        cn[ItemType.STONE_SWORD] = 1;
        cn[ItemType.GOLD_SWORD] = 1;
        cn[ItemType.DIAMOND_SWORD] = 1;
        cn[ItemType.AMETHYST_SWORD] = 1;
        cn[ItemType.REIDITE_SWORD] = 1;
        cn[ItemType.PIRATE_SWORD] = 1;
        cn[ItemType.DRAGON_SWORD] = 1;
        cn[ItemType.LAVA_SWORD] = 1;
        cn[ItemType.CURSED_SWORD] = 1;
        cn[ItemType.STONE_SPEAR] = 1;
        cn[ItemType.GOLD_SPEAR] = 1;
        cn[ItemType.DIAMOND_SPEAR] = 1;
        cn[ItemType.AMETHYST_SPEAR] = 1;
        cn[ItemType.REIDITE_SPEAR] = 1;
        cn[ItemType.DRAGON_SPEAR] = 1;
        cn[ItemType.LAVA_SPEAR] = 1;
        cn[ItemType.WOOD_SPEAR] = 1;
        cn[ItemType.CRAB_SPEAR] = 1;
        var vn = [WORLD.DAY * 6, WORLD.DAY * 3, WORLD.DAY * 4, WORLD.DAY * 3, WORLD.DAY * 6, WORLD.DAY * 5, WORLD.DAY * 5, WORLD.DAY * 10, WORLD.DAY * 6, WORLD.DAY * 7, WORLD.DAY * 6, WORLD.DAY * 8, WORLD.DAY * 7];
        var Pn = [[ITEMS.EXTRACTOR_MACHINE_STONE, ItemType.STONE], [ITEMS.EXTRACTOR_MACHINE_GOLD, ItemType.GOLD], [ITEMS.DIAMOND_EXTRACTOR, ItemType.DIAMOND], [ITEMS.EXTRACTOR_MACHINE_AMETHYST, ItemType.AMETHYST], [ITEMS.EXTRACTOR_MACHINE_REIDITE, ItemType.REIDITE]];
        class yn {
            constructor() {
            this.nickname = "";
            this.skin = 0;
            this.accessory = 0;
            this.bag = 0;
            this.baglook = 0;
            this.book = 0;
            this.level = 0;
            this.label = null;
            this.label_winter = null;
            this.ldb_label = null;
            this.alive = false;
            this.score = 0;
            }
        }
        class pn {
            constructor(e, t, i, o, r, a, I, E, _, s) {
            this.type = e;
            this.pid = t;
            this.id = i;
            this.x = o;
            this.y = r;
            this.angle = a;
            this.nangle = a;
            this.action = I;
            this.info = E;
            this.extra = s;
            this.r = {
                x: o,
                y: r
            };
            this.speed = _;
            switch (e) {
                case ITEMS.PLAYERS:
                this.player = Wn.players[this.pid];
                this.skin = 0;
                this.baglook = 0;
                this.book = 0;
                this.accessory = 0;
                this.dist_forest = -1000000;
                this.dist_lava = -1000000;
                this.dist_winter = -1000000;
                this.dist_desert = -1000000;
                this.dist_water = -1000000;
                this.dist_sand = -1000000;
                this.dist_dragon = -1000000;
                this.zombie = Wn.mode === WORLD.MODE_ZOMBIES && this.skin === WORLD.ZOMBIE_SKIN;
                this.vampire = Wn.mode === WORLD.MODE_VAMPIRES && this.skin === WORLD.VAMPIRE_SKIN;
                this.superzombie = !!this.zombie && this.player.nickname === "  ";
                this.foot = [];
                this.tower = 0;
                this.move_effect = true;
                this.id_foot = 0;
                this.fly = 0;
                this.swim = [];
                this.r = {
                    x: o,
                    y: r
                };
                this.draw = zr;
                this.draw_vehicle = Mr;
                this.vehicle_fx1 = 0;
                this.vehicle_fx2 = 0;
                this.vehicle_fx3 = 0;
                this.vehicle_fx4 = new P(false, 0, 0, -window.Math.PI / 6, 0.5, 1);
                this.vehicle_fx5 = 0;
                this.tower_fx = 0;
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                this.heal = new P(false, 0.6, 0.6, 0, 5, 3);
                this.freeze = new P(false, 0.6, 0.6, 0, 5, 3);
                this.starve = new P(false, 0.6, 0.6, 0, 5, 3);
                this.idle = new P(true, 0, 2.25, -1.5, 3.75, 7.5);
                this.walk = new P(true, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new P(false, 0, 0, -window.Math.PI / 3, 6, 9);
                this.slow_attack = 0;
                this.web = new P(false, 0.6, 0.6, 0, 1, 3);
                this.move_head = this.superzombie ? new P(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.angle_init = 0;
                this.text_ease = 0;
                this.text_effect = [];
                this.text_move = [];
                this.text = [];
                this.label = [];
                this.draw_text = Vr;
                this.hand = true;
                this.right = -1;
                this.vehicle = -1;
                this.action = STATE.IDLE;
                this.clothe = 0;
                this.ghost = false;
                this.bubbles = [];
                this.bag = 0;
                this.update = function (e) {
                    if (this.info & 16384) {
                    this.info = this.info & -16385;
                    this.bag = 1;
                    } else {
                    this.bag = 0;
                    }
                    this.clothe = window.Math.floor(this.info / 128);
                    this.info -= this.clothe * 128;
                    if (this.info === ItemType.HAND || this.superzombie) {
                    this.right = -1;
                    } else {
                    this.right = this.info;
                    }
                    this.tower = Wn.find_tower(window.Math.floor(this.r.y / 100), window.Math.floor(this.r.x / 100));
                    this.vehicle = this.extra & 255;
                    if (this.extra === WORLD.GHOST) {
                    this.ghost = true;
                    } else {
                    this.ghost = false;
                    }
                    if (cn[this.right]) {
                    this.weapon = true;
                    } else {
                    this.weapon = false;
                    }
                    if (e & STATE.WEB) {
                    this.web.o = false;
                    this.web.v = 0.6;
                    } else if (e & STATE.COLD) {
                    this.freeze.o = false;
                    this.freeze.v = 0.6;
                    } else if (e & STATE.HEAL) {
                    this.heal.o = false;
                    this.heal.v = 0.6;
                    }
                    if (e & STATE.HUNGER) {
                    this.starve.o = false;
                    this.starve.v = 0.6;
                    }
                    if (e & STATE.HURT) {
                    this.hit.o = false;
                    this.hit.v = 0.6;
                    }
                    if (e & STATE.ATTACK) {
                    this.slow_attack = CLIENT.SLOW_ATTACK;
                    }
                };
                this.update();
                break;
                case ITEMS.EMERALD_MACHINE:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_bg = vr;
                this.draw_fg = mr;
                this.halo = new P(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.rotate1 = 0;
                this.rotate2 = 0;
                this.draw_life = yT;
                break;
                case ITEMS.RESURRECTION:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_bg = Pr;
                this.draw_fg = cr;
                this.halo = new P(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.rotate1 = 0;
                this.rotate2 = 0;
                break;
                case ITEMS.FIRE:
                case ITEMS.BIG_FIRE:
                this.draw_bg = dr;
                this.draw_fg = pr;
                this.fire = new P(false, 1, 1.03, 0.98, 0.3, 0.3);
                this.ground = new P(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.halo = new P(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.TOMATO_SEED:
                this.draw_bg = Er;
                this.draw_fg = _r;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.fruits = [];
                for (var R = 0; R < 3; R++) {
                    this.fruits.push({
                    draw: $T,
                    breath: new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.fruits[0].x = this.x - 16.5;
                this.fruits[0].y = this.y - 15.5;
                this.fruits[0].angle = this.angle;
                this.fruits[1].x = this.x + 36;
                this.fruits[1].y = this.y + 17;
                this.fruits[1].angle = this.angle;
                this.fruits[2].x = this.x - 18.5;
                this.fruits[2].y = this.y + 39;
                this.fruits[2].angle = this.angle;
                break;
                case ITEMS.SEED:
                this.draw_bg = ar;
                this.draw_fg = Ir;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.fruits = [];
                for (R = 0; R < 3; R++) {
                    this.fruits.push({
                    draw: QT,
                    breath: new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.fruits[0].x = this.x - 16.5;
                this.fruits[0].y = this.y - 15.5;
                this.fruits[1].x = this.x - 5.5;
                this.fruits[1].y = this.y + 7.5;
                this.fruits[2].x = this.x + 18;
                this.fruits[2].y = this.y - 5;
                break;
                case ITEMS.BABY_MAMMOTH:
                this.draw = FT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.BOAR:
                this.draw = xT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.CRAB_BOSS:
                this.draw = JT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.breathl = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.breathr = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                this.heal = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.CRAB:
                this.draw = XT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.breathl = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.breathr = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                this.heal = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.FLAME:
                this.draw = ZT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.FIREFLY:
                this.draw = jT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.SPELL:
                this.spell = this.info & 15;
                this.fly = this.extra & 1;
                this.born = 0;
                this.x = this.info;
                this.y = this.extra;
                this.draw = qT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
                case ITEMS.RABBIT:
                case ITEMS.WOLF:
                case ITEMS.SPIDER:
                case ITEMS.FOX:
                case ITEMS.BEAR:
                case ITEMS.MAMMOTH:
                case ITEMS.PIRANHA:
                case ITEMS.KRAKEN:
                case ITEMS.PENGUIN:
                this.draw = jT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.BREAD_OVEN:
                this.draw_fg = hr;
                this.draw = ur;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.up = new P(false, 1, 1.03, 0.98, 0.1, 0.1);
                this.smog = [];
                break;
                case ITEMS.GIFT:
                this.angle = window.Math.random() * window.Math.PI / 2;
                case ITEMS.CRATE:
                case ITEMS.DEAD_BOX:
                this.draw = UT;
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.TREASURE_CHEST:
                this.draw = kT;
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.LAVA_DRAGON:
                this.scale = 1;
                this.draw = KT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new P(false, 0, 0, -window.Math.PI / 6, 0.5, 1);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.SAND_WORM:
                this.dig = 0;
                this.ground = [];
                this.groundTimer = 0;
                this.draw_ground = fT;
                this.draw = zT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new P(false, 0, 0, -window.Math.PI / 6, 0.5, 1);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.VULTURE:
                this.x = this.info;
                this.y = this.extra;
                this.scale = 1;
                this._alpha = 0;
                this.draw = BT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new P(false, 0, 0, -window.Math.PI / 6, 0.5, 1);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.HAWK:
                this.x = this.info;
                this.y = this.extra;
                this.scale = 1;
                this._alpha = 0;
                this.draw = GT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new P(false, 0, 0, -window.Math.PI / 6, 0.5, 1);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.BABY_LAVA:
                this.scale = 1;
                this.draw = WT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new P(false, 0, 0, -window.Math.PI / 6, 0.5, 1);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.BABY_DRAGON:
                this.scale = 1;
                this.draw = VT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new P(false, 0, 0, -window.Math.PI / 6, 0.5, 1);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.DRAGON:
                this.scale = 1;
                this.draw = YT;
                this.breath = new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new P(false, 0, 0, -window.Math.PI / 6, 0.5, 1);
                this.hit = new P(false, 0.6, 0.6, 0, 5, 3);
                break;
                case ITEMS.FRUIT:
                this.fruits = [];
                for (R = 0; R < 5; R++) {
                    this.fruits.push({
                    draw: QT,
                    breath: new P(false, 0.9 + window.Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                    this.fruits[0].x = this.x - 20.5;
                    this.fruits[0].y = this.y - 22.5;
                    this.fruits[1].x = this.x - 35.5;
                    this.fruits[1].y = this.y + 7.5;
                    this.fruits[2].x = this.x + 7.5;
                    this.fruits[2].y = this.y - 30;
                    this.fruits[3].x = this.x + 22.5;
                    this.fruits[3].y = this.y;
                    this.fruits[4].x = this.x - 7.5;
                    this.fruits[4].y = this.y + 14.5;
                    break;
                    case 1:
                    this.fruits[0].x = this.x - 30.5;
                    this.fruits[0].y = this.y - 22.5;
                    this.fruits[1].x = this.x - 15.5;
                    this.fruits[1].y = this.y + 7.5;
                    this.fruits[2].x = this.x + 15.5;
                    this.fruits[2].y = this.y - 30;
                    this.fruits[3].x = this.x + 12.5;
                    this.fruits[3].y = this.y + 5;
                    this.fruits[4].x = this.x - 40.5;
                    this.fruits[4].y = this.y + 14.5;
                    break;
                    case 2:
                    this.fruits[0].x = this.x - 20.5;
                    this.fruits[0].y = this.y - 20.5;
                    this.fruits[1].x = this.x - 35.5;
                    this.fruits[1].y = this.y + 15.5;
                    this.fruits[2].x = this.x + 7.5;
                    this.fruits[2].y = this.y - 17;
                    this.fruits[3].x = this.x + 22.5;
                    this.fruits[3].y = this.y + 5;
                    this.fruits[4].x = this.x - 7.5;
                    this.fruits[4].y = this.y + 1.5;
                }
                break;
                case ITEMS.WHEAT_SEED:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = nr;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.wind = new P(false, 0, window.Math.PI / 30, -window.Math.PI / 30, 0.06, 0.06);
                break;
                case ITEMS.THORNBUSH_SEED:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = er;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
                case ITEMS.GARLIC_SEED:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = tr;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
                case ITEMS.CARROT_SEED:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = Tr;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
                case ITEMS.ALOE_VERA_SEED:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = ir;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
                case ITEMS.WATERMELON_SEED:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = or;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
                case ITEMS.PUMPKIN_SEED:
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = rr;
                this.ground = new P(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
                case ITEMS.EXTRACTOR_MACHINE_STONE:
                this.draw = Or;
                this.rotate = 0;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.EXTRACTOR_MACHINE_GOLD:
                this.draw = lr;
                this.rotate = 0;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.DIAMOND_EXTRACTOR:
                this.draw = Sr;
                this.rotate = 0;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
                this.draw = Cr;
                this.rotate = 0;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.EXTRACTOR_MACHINE_REIDITE:
                this.draw = br;
                this.rotate = 0;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.WINDMILL:
                this.draw_bg = Nr;
                this.draw_fg = Ar;
                this.rotate = 0;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.ROOF:
                this.draw = pT;
                this.j = window.Math.floor(this.x / 100);
                this.i = window.Math.floor(this.y / 100);
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.opacity = 1;
                this.draw_life = PT;
                break;
                case ITEMS.GARLAND:
                this.draw = gT;
                this.halo = new P(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.PLOT:
                case ITEMS.WORKBENCH:
                case ITEMS.WOOD_TOWER:
                case ITEMS.WELL:
                case ITEMS.TOTEM:
                this.draw = LT;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
                case ITEMS.BRIDGE:
                this.draw = LT;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_life = PT;
                break;
                case ITEMS.WALL:
                case ITEMS.STONE_WALL:
                case ITEMS.GOLD_WALL:
                case ITEMS.DIAMOND_WALL:
                case ITEMS.AMETHYST_WALL:
                case ITEMS.REIDITE_WALL:
                case ITEMS.SPIKE:
                case ITEMS.STONE_SPIKE:
                case ITEMS.GOLD_SPIKE:
                case ITEMS.DIAMOND_SPIKE:
                case ITEMS.AMETHYST_SPIKE:
                case ITEMS.REIDITE_SPIKE:
                this.draw = LT;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_life = yT;
                break;
                case ITEMS.BED:
                this.draw = MT;
                this.opacity = 1;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                var h = this.angle % (window.Math.PI / 2);
                if (h < n) {
                    this.angle -= h;
                } else {
                    this.angle += window.Math.PI / 2 - h;
                }
                break;
                case ITEMS.WHEAT_MOB:
                this.draw = vT;
                this.angle = window.Math.random() * T;
                break;
                case ITEMS.ALOE_VERA_MOB:
                this.draw = cT;
                this.angle = window.Math.random() * T;
                break;
                case ITEMS.PUMPKIN_MOB:
                this.draw = mT;
                this.angle = window.Math.random() * T;
                break;
                case ITEMS.GARLIC_MOB:
                this.draw = DT;
                this.angle = window.Math.random() * T;
                break;
                case ITEMS.THORNBUSH_MOB:
                this.draw = NT;
                this.angle = window.Math.random() * T;
                break;
                case ITEMS.CHEST:
                this.update = function (e) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = e;
                };
                this.draw = bT;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.lock = 0;
                this.update(this.action);
                break;
                case ITEMS.WOOD_DOOR_SPIKE:
                case ITEMS.STONE_DOOR_SPIKE:
                case ITEMS.GOLD_DOOR_SPIKE:
                case ITEMS.DIAMOND_DOOR_SPIKE:
                case ITEMS.AMETHYST_DOOR_SPIKE:
                case ITEMS.REIDITE_DOOR_SPIKE:
                case ITEMS.WOOD_DOOR:
                case ITEMS.STONE_DOOR:
                case ITEMS.GOLD_DOOR:
                case ITEMS.DIAMOND_DOOR:
                case ITEMS.AMETHYST_DOOR:
                case ITEMS.REIDITE_DOOR:
                this.draw = CT;
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_life = yT;
                break;
                case ITEMS.FURNACE:
                this.draw_bg = Rr;
                this.draw = sr;
                this.draw_fg = yr;
                this.ground = new P(false, 1, 1.23, 1.18, 0.02, 0.02);
                this.halo = new P(false, 1, 1.23, 1.18, 0.04, 0.04);
                this.hit = {
                    anim: new P(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.update = function (e) {
                    this.action = e;
                };
            }
            }
        }
        class gn {
            constructor() {
            function e(e, t, i, o, T) {
                var r = t + window.Math.floor(Wn.RNG.get() * o);
                var n = i + window.Math.floor(Wn.RNG.get() * o);
                var a = 10 + window.Math.floor(Wn.RNG.get() * (Wn.nw - r - 20));
                var I = 10 + window.Math.floor(Wn.RNG.get() * (Wn.nh - n - 20));
                var E = a + r;
                var _ = I + n;
                for (var s = 0; s < Wn.biomes.length; s++) {
                var R = Wn.biomes[s];
                if (v.intersect_aabb(a, E, I, _, R.x1 / 100 - T, R.x2 / 100 + T, R.y1 / 100 - T, R.y2 / 100 + T) === 1) {
                    return 0;
                }
                }
                Wn.biomes.push(new m(e, a, I, r, n, 15));
                return 1;
            }
            function t(e, t, i) {
                var o = t;
                for (var T = i; T < Wn.nh; T++) {
                for (var r = t; r < Wn.nw && (T === i && (o = window.Math.max(r, o)), r <= o) && e[T][r] !== 1; r++) {
                    e[T][r] = 1;
                }
                if (r < o) {
                    break;
                }
                }
                Wn.biomes.push(new m(Wn.BIOME_SEA, t, i, o - t + 1, T - i, 15));
            }
            function i(t, i, o, T, r) {
                for (var n = 0; n < r && e(t, i, o, T, 8) !== 1; n++);
                if (n === r) {
                return 0;
                } else {
                return 1;
                }
            }
            function o(e, t, i, o, T, r, n, a) {
                var I = window.Math.floor(n / 2);
                var E = window.Math.max(1, window.Math.floor(n / 2));
                var _ = window.Math.floor(a / 2);
                var s = window.Math.max(1, window.Math.floor(a / 2));
                for (var R = 0; R < i; R++) {
                for (var h = e - _; h < e + s; h++) {
                    for (var d = t - I; d < t + E; d++) {
                    if (l(h, d, "wtb", 0, 1) === 1) {
                        r.push([h, d, 1]);
                    }
                    }
                }
                e += o;
                t += T;
                }
            }
            function r(e, t) {
                var i = Wn.biomes[e];
                var T = window.Math.floor(i.y1 / 100);
                var r = window.Math.floor(i.x1 / 100);
                var n = window.Math.floor(i.h / 100);
                var a = r + (u = window.Math.floor(i.w / 100));
                var I = 2;
                var E = n;
                var _ = T;
                for (var s = r + 10 + window.Math.floor((u - 20) * Wn.RNG.get()), R = s - 4; R < s + 4; R++) {
                l(T - 1, R, "wtb", 0, 1);
                }
                while (E > 0) {
                if (I !== 2) {
                    if (E < 10) {
                    for (O = 1; E > 0; O++) {
                        o(_, s, 1, 1, 0, t, O, 1);
                        E -= 1;
                        _ += 1;
                    }
                    } else if (I !== 1) {
                    I = 1;
                    var h = window.Math.floor(1 + Wn.RNG.get() * 2);
                    var d = 1 + window.Math.floor(Wn.RNG.get() * 4);
                    if (s < r + 16) {
                        o(_, s, h, 0, 1, t, d, d);
                        s += h;
                    } else if (s > a - 16) {
                        o(_, s, h, 0, -1, t, d, d);
                        s -= h;
                    } else if (Wn.RNG.get() > 0.5) {
                        o(_, s, h, 0, 1, t, d, d);
                        s += h;
                    } else {
                        o(_, s, h, 0, -1, t, d, d);
                        s -= h;
                    }
                    } else {
                    var u;
                    var A = window.Math.min(E, window.Math.floor(1 + Wn.RNG.get() * 4));
                    o(_, s, A, 1, 0, t, u = 1 + window.Math.floor(Wn.RNG.get() * 4), u);
                    I = 0;
                    E -= A;
                    _ += A;
                    }
                } else {
                    for (var O = 10; O > 1; O--) {
                    o(_, s, 1, 1, 0, t, O, 1);
                    E -= 1;
                    _ += 1;
                    }
                    I = 0;
                }
                }
                for (R = s - 1; R < s + 2; R++) {
                l(_, R, "wtb", 0, 1);
                }
            }
            function n(e, t) {
                for (var i = 0; i < t.length; i++) {
                O(t[i][0], t[i][1], e, t[i][2]);
                }
            }
            function a(e) {
                for (var t = 0; t < 3; t++) {
                d(e, "s", t, 15);
                }
                for (t = 0; t < 3; t++) {
                d(e, "a", t, 1);
                }
                for (t = 0; t < 3; t++) {
                d(e, "d", t, 1);
                }
                h(e);
            }
            function I(e, t) {
                for (var i = 0; i < 3; i++) {
                d(e, "s", i, window.Math.floor(t * 18));
                }
                for (i = 0; i < 3; i++) {
                d(e, "f", i, window.Math.floor(t * 24));
                }
                for (i = 0; i < 3; i++) {
                d(e, "d", i, window.Math.max(1, window.Math.floor(t * 2)), 0.3);
                }
                for (i = 0; i < 3; i++) {
                d(e, "g", i, window.Math.floor(t * 6));
                }
                h(e);
            }
            function E(e, t) {
                for (var i = 0; i < 3; i++) {
                d(e, "s", i, window.Math.floor(t * 12));
                }
                for (i = 0; i < 3; i++) {
                d(e, "m", i, window.Math.max(1, window.Math.floor(t * 1)), 0.2);
                }
                d(e, "c", 0, window.Math.floor(t * 36));
                var o = [];
                (function (e, t) {
                var i = Wn.biomes[e];
                var o = window.Math.floor(i.y1 / 100);
                var T = window.Math.floor(i.x1 / 100);
                var r = window.Math.floor(i.h / 100);
                var n = window.Math.floor(i.w / 100);
                var a = o + window.Math.floor(r / 2);
                var I = T + window.Math.floor(n / 2);
                for (var E = 0; E < 3; E++) {
                    l(_ = window.Math.floor(a - 3 + Wn.RNG.get() * 6), s = window.Math.floor(I - 3 + Wn.RNG.get() * 6), "plm", E, 1);
                }
                for (E = 0; E < 80; E++) {
                    var _;
                    var s;
                    if (l(_ = window.Math.floor(a - 3 + Wn.RNG.get() * 6), s = window.Math.floor(I - 3 + Wn.RNG.get() * 6), "wtb", 0, 1) === 1) {
                    t.push([_, s, 0]);
                    }
                }
                })(e, o);
                n(e, o);
                o = [];
            }
            function _(e, t) {
                (function (e, t) {
                var i = Wn.biomes[t];
                for (var o = 0, T = 0; o < e && T < 10000; T++) {
                    var r = i.y1 + Wn.RNG.get() * i.h;
                    var n = i.x1 + Wn.RNG.get() * i.w;
                    var a = window.Math.floor(r / 100);
                    var I = window.Math.floor(n / 100);
                    if (Wn.dist_from_biome(t, I * 100 + 50, a * 100 + 50) >= 600) {
                    for (var E = 1, _ = a - 4; E === 1 && _ <= a + 4; _++) {
                        for (var s = I - 4; E === 1 && s <= I + 4; s++) {
                        if (zn.tiles[_][s] !== undefined) {
                            E = 0;
                        }
                        }
                    }
                    if (E !== 0) {
                        l(a, I, "la", o % 6, 0);
                        o++;
                    }
                    }
                }
                })(t * 80, e);
                for (var i = 0; i < 3; i++) {
                d(e, "s", i, window.Math.floor(t * 12));
                }
                for (i = 0; i < 3; i++) {
                d(e, "g", i, window.Math.floor(t * 6));
                }
                for (i = 0; i < 3; i++) {
                d(e, "re", i, window.Math.max(1, window.Math.floor(t * 1)), 0.2);
                }
                for (i = 0; i < 3; i++) {
                d(e, "a", i, window.Math.max(1, window.Math.floor(t * 2)));
                }
                h(e);
            }
            function s(e, t) {
                for (var i = 0; i < 6; i++) {
                d(e, "t", i, window.Math.floor(t * 80));
                }
                for (i = 0; i < 4; i++) {
                d(e, "b", i, window.Math.floor(t * 80));
                }
                for (i = 0; i < 3; i++) {
                d(e, "s", i, window.Math.floor(t * 50));
                }
                var o = [];
                for (i = 0; i < 6; i++) {
                r(e, o);
                }
                n(e, o);
                d(e, "p", 0, window.Math.floor(t * 28));
                for (i = 0; i < 3; i++) {
                d(e, "g", i, window.Math.floor(t * 7));
                }
                for (i = 0; i < 3; i++) {
                d(e, "d", i, window.Math.floor(t * 2));
                }
                for (i = 0; i < 3; i++) {
                d(e, "a", i, window.Math.floor(t * 1));
                }
                for (i = 0; i < 3; i++) {
                d(e, "m", i, window.Math.floor(t * 1));
                }
                d(e, "a", 0, window.Math.floor(t * 1));
                h(e);
            }
            function R(e, t) {
                for (var i = 0; i < 6; i++) {
                d(e, "t", i, window.Math.floor(t * 20));
                }
                for (i = 0; i < 4; i++) {
                d(e, "b", i, window.Math.floor(t * 20));
                }
                for (i = 0; i < 3; i++) {
                d(e, "s", i, window.Math.floor(t * 20));
                }
                var o = [];
                r(e, o);
                n(e, o);
                o = [];
                d(e, "p", 0, window.Math.floor(t * 24));
                for (i = 0; i < 3; i++) {
                d(e, "g", i, window.Math.floor(t * 5));
                }
                if (Wn.mode === WORLD.MODE_ZOMBIES) {
                for (i = 0; i < 3; i++) {
                    d(e, "d", i, window.Math.floor(t * 3));
                }
                for (i = 0; i < 3; i++) {
                    d(e, "a", i, window.Math.floor(t * 2));
                }
                }
                h(e);
            }
            function h(e) {
                var t = Wn.biomes[e];
                l(-3 + window.Math.floor(t.y2 / 100), -1 + window.Math.floor(t.x2 / 100), "s", 0, 0);
                l(3 + window.Math.floor(t.y1 / 100), -1 + window.Math.floor(t.x2 / 100), "s", 0, 0);
                l(-3 + window.Math.floor(t.y2 / 100), 1 + window.Math.floor(t.x1 / 100), "s", 0, 0);
                l(3 + window.Math.floor(t.y1 / 100), 1 + window.Math.floor(t.x1 / 100), "s", 0, 0);
            }
            function d(e, t, i, o, T) {
                var r = Wn.biomes[e];
                var n = window.Math.floor(r.x1 / 100);
                var a = window.Math.floor(r.y1 / 100);
                var I = window.Math.floor(r.w / 100);
                var E = window.Math.floor(r.h / 100);
                if (T !== undefined) {
                T = 1 - T;
                n += window.Math.floor(I * T / 2);
                a += window.Math.floor(E * T / 2);
                I -= window.Math.floor(I * T);
                E -= window.Math.floor(E * T);
                }
                var _ = zn.tiles;
                for (var s = 0, R = 0; s < o && R <= 50000; R++) {
                var h;
                var d = a + window.Math.floor(Wn.RNG.get() * E);
                var u = n + window.Math.floor(Wn.RNG.get() * I);
                if (Wn.dist_from_biome(e, u * 100 + 50, d * 100 + 50) >= 400 && ((h = _[d][u + 1]) === undefined || h[t] === undefined || h[t][i] === undefined) && ((h = _[d][u - 1]) === undefined || h[t] === undefined || h[t][i] === undefined) && ((h = _[d + 1][u]) === undefined || h[t] === undefined || h[t][i] === undefined) && ((h = _[d - 1][u]) === undefined || h[t] === undefined || h[t][i] === undefined) && ((h = _[d + 1][u - 1]) === undefined || h[t] === undefined || h[t][i] === undefined) && ((h = _[d - 1][u + 1]) === undefined || h[t] === undefined || h[t][i] === undefined) && ((h = _[d + 1][u + 1]) === undefined || h[t] === undefined || h[t][i] === undefined) && ((h = _[d - 1][u - 1]) === undefined || h[t] === undefined || h[t][i] === undefined)) {
                    if (_[d][u] === undefined) {
                    l(d, u, t, i, 1);
                    s++;
                    }
                }
                }
            }
            function u(e, t) {
                return e >= 0 && t >= 0 && e < Wn.nh && t < Wn.nw;
            }
            function O(e, t, i, o) {
                if (u(e, t)) {
                var T = zn.tiles;
                if (T[e][t] === undefined) {
                    T[e][t] = {};
                }
                if (T[e][t].r === undefined) {
                    var r = 0;
                    if (u(e - 1, t) && T[e - 1][t] !== undefined && T[e - 1][t].wtb !== undefined) {
                    r += 2;
                    }
                    if (u(e, t - 1) && T[e][t - 1] !== undefined && T[e][t - 1].wtb !== undefined) {
                    r += 8;
                    }
                    if (u(e, t + 1) && T[e][t + 1] !== undefined && T[e][t + 1].wtb !== undefined) {
                    r += 16;
                    }
                    if (u(e + 1, t) && T[e + 1][t] !== undefined && T[e + 1][t].wtb !== undefined) {
                    r += 64;
                    }
                    if (u(e - 1, t - 1) && (r & 10) == 10 && T[e - 1][t - 1] !== undefined && T[e - 1][t - 1].wtb !== undefined) {
                    r += 1;
                    }
                    if (u(e - 1, t + 1) && (r & 18) == 18 && T[e - 1][t + 1] !== undefined && T[e - 1][t + 1].wtb !== undefined) {
                    r += 4;
                    }
                    if (u(e + 1, t - 1) && (r & 72) == 72 && T[e + 1][t - 1] !== undefined && T[e + 1][t - 1].wtb !== undefined) {
                    r += 32;
                    }
                    if (u(e + 1, t + 1) && (r & 80) == 80 && T[e + 1][t + 1] !== undefined && T[e + 1][t + 1].wtb !== undefined) {
                    r += 128;
                    }
                    T[e][t].r = {};
                    T[e][t].r.river = r;
                    T[e][t].r.current = o;
                    T[e][t].r.dist = Wn.dist_from_biome(i, t * 100 + 50, e * 100 + 50) - 400;
                    T[e][t].r.x = t * 100 + 50;
                    T[e][t].r.y = e * 100 + 50;
                }
                }
            }
            function l(e, t, i, o, T) {
                if (e >= 0 && t >= 0 && e < Wn.nh && t < Wn.nw) {
                var r = zn.tiles;
                if (r[e][t] === undefined) {
                    r[e][t] = {};
                }
                if (r[e][t][i] !== undefined) {
                    return 0;
                } else {
                    r[e][t][i] = [];
                    r[e][t][i][o] = [{
                    x: t * 100 + 50,
                    y: e * 100 + 50
                    }];
                    if (T === 1) {
                    (function (e, t, i, o) {
                        Ie.push([e, t, i, o]);
                    })(i, o, e, t);
                    }
                    return 1;
                }
                }
            }
            function S(e, t, i) {
                if (e[t]) {
                for (let o = 0; o < e[t].length; o++) {
                    if (e[t][o]) {
                    for (let T = 0; T < e[t][o].length; T++) {
                        e[t][o][T].hit = i;
                        e[t][o][T].update = false;
                        e[t][o][T].time = 0;
                        e[t][o][T].angle = 0;
                    }
                    }
                }
                }
            }
            this.mode = WORLD.MODE_PVP;
            this.custom_map = 0;
            this.islands = 6;
            this.ghost_delay = 60;
            this.players = [];
            this.units = [];
            this.units[ITEMS.PLAYERS] = [];
            this.units[ITEMS.FRUIT] = [];
            this.units[ITEMS.RABBIT] = [];
            this.units[ITEMS.WOLF] = [];
            this.units[ITEMS.CRAB] = [];
            this.units[ITEMS.BOAR] = [];
            this.units[ITEMS.BABY_MAMMOTH] = [];
            this.units[ITEMS.CRAB_BOSS] = [];
            this.units[ITEMS.BABY_DRAGON] = [];
            this.units[ITEMS.BABY_LAVA] = [];
            this.units[ITEMS.HAWK] = [];
            this.units[ITEMS.PIRANHA] = [];
            this.units[ITEMS.KRAKEN] = [];
            this.units[ITEMS.FOX] = [];
            this.units[ITEMS.PENGUIN] = [];
            this.units[ITEMS.SPELL] = [];
            this.units[ITEMS.FIREFLY] = [];
            this.units[ITEMS.BEAR] = [];
            this.units[ITEMS.MAMMOTH] = [];
            this.units[ITEMS.DRAGON] = [];
            this.units[ITEMS.LAVA_DRAGON] = [];
            this.units[ITEMS.FLAME] = [];
            this.units[ITEMS.WHEAT_MOB] = [];
            this.units[ITEMS.ALOE_VERA_MOB] = [];
            this.units[ITEMS.PUMPKIN_MOB] = [];
            this.units[ITEMS.GARLIC_MOB] = [];
            this.units[ITEMS.THORNBUSH_MOB] = [];
            this.units[ITEMS.TREASURE_CHEST] = [];
            this.units[ITEMS.DEAD_BOX] = [];
            this.units[ITEMS.CRATE] = [];
            this.units[ITEMS.BREAD_OVEN] = [];
            this.units[ITEMS.SPIDER] = [];
            this.units[ITEMS.WORKBENCH] = [];
            this.units[ITEMS.FIRE] = [];
            this.units[ITEMS.BIG_FIRE] = [];
            this.units[ITEMS.SEED] = [];
            this.units[ITEMS.SPIKE] = [];
            this.units[ITEMS.STONE_SPIKE] = [];
            this.units[ITEMS.GOLD_SPIKE] = [];
            this.units[ITEMS.DIAMOND_SPIKE] = [];
            this.units[ITEMS.AMETHYST_SPIKE] = [];
            this.units[ITEMS.REIDITE_SPIKE] = [];
            this.units[ITEMS.WALL] = [];
            this.units[ITEMS.STONE_WALL] = [];
            this.units[ITEMS.GOLD_WALL] = [];
            this.units[ITEMS.DIAMOND_WALL] = [];
            this.units[ITEMS.AMETHYST_WALL] = [];
            this.units[ITEMS.REIDITE_WALL] = [];
            this.units[ITEMS.BED] = [];
            this.units[ITEMS.WOOD_DOOR] = [];
            this.units[ITEMS.STONE_DOOR] = [];
            this.units[ITEMS.GOLD_DOOR] = [];
            this.units[ITEMS.DIAMOND_DOOR] = [];
            this.units[ITEMS.AMETHYST_DOOR] = [];
            this.units[ITEMS.REIDITE_DOOR] = [];
            this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
            this.units[ITEMS.STONE_DOOR_SPIKE] = [];
            this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
            this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
            this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
            this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
            this.units[ITEMS.FURNACE] = [];
            this.units[ITEMS.TOTEM] = [];
            this.units[ITEMS.WOOD_TOWER] = [];
            this.units[ITEMS.CHEST] = [];
            this.units[ITEMS.RESURRECTION] = [];
            this.units[ITEMS.EMERALD_MACHINE] = [];
            this.units[ITEMS.BRIDGE] = [];
            this.units[ITEMS.ROOF] = [];
            this.units[ITEMS.PLOT] = [];
            this.units[ITEMS.WHEAT_SEED] = [];
            this.units[ITEMS.ALOE_VERA_SEED] = [];
            this.units[ITEMS.PUMPKIN_SEED] = [];
            this.units[ITEMS.TOMATO_SEED] = [];
            this.units[ITEMS.CARROT_SEED] = [];
            this.units[ITEMS.WATERMELON_SEED] = [];
            this.units[ITEMS.GARLIC_SEED] = [];
            this.units[ITEMS.THORNBUSH_SEED] = [];
            this.units[ITEMS.WINDMILL] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
            this.units[ITEMS.DIAMOND_EXTRACTOR] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
            this.units[ITEMS.WELL] = [];
            this.units[ITEMS.GIFT] = [];
            this.units[ITEMS.GARLAND] = [];
            this.fast_units = [];
            this.nw = 260;
            this.nh = 260;
            this.dw = 100;
            this.dh = 100;
            this.w = this.nw * this.dw;
            this.h = this.nh * this.dh;
            this.RNG = new C();
            this.biomes = [];
            this.shade = new P(false, 0, 1, 0, 1, 1);
            this.transition = false;
            this.BIOME = [];
            this.BIOME_FOREST = 0;
            this.BIOME_WINTER = 1;
            this.BIOME_LAVA = 2;
            this.BIOME_DRAGON = 3;
            this.BIOME_SEA = 4;
            this.BIOME_DESERT = 10;
            this.BIOME[this.BIOME_FOREST] = {
                isSand: 1,
                day: [19, 58, 43],
                night: [4, 43, 48],
                _color: ["#133a2b", "#042b30"]
            };
            this.BIOME[this.BIOME_SEA] = {
                isSand: 0,
                day: [11, 106, 132],
                night: [9, 55, 63],
                _color: ["#0B6A84", "#09373F"]
            };
            this.BIOME[this.BIOME_WINTER] = {
                isSand: 0,
                day: [235, 242, 240],
                night: [19, 97, 103],
                _color: ["#EBF2F0", "#136167"]
            };
            this.BIOME[this.BIOME_LAVA] = {
                isSand: 0,
                day: [45, 32, 23],
                night: [3, 28, 30],
                _color: ["#2D2017", "#031C1E"]
            };
            this.BIOME[this.BIOME_DRAGON] = {
                isSand: 0,
                day: [74, 74, 74],
                night: [24, 61, 60],
                _color: ["#4A4A4A", "#183D3C"]
            };
            this.BIOME[this.BIOME_DESERT] = {
                isSand: 0,
                day: [235, 216, 166],
                night: [9, 61, 56],
                _color: ["#EBD8A6", "#093D38"]
            };
            this.MAX_DIST = -1000000;
            this.dist_winter = this.MAX_DIST;
            this.dist_desert = this.MAX_DIST;
            this.dist_lava = this.MAX_DIST;
            this.dist_forest = this.MAX_DIST;
            this.dist_water = this.MAX_DIST;
            this.dist_dragon = this.MAX_DIST;
            this.dist_from_biomes = function (e) {
                var t = e.r.x;
                var i = e.r.y;
                var o = window.Math.floor(i / 100);
                var T = window.Math.floor(t / 100);
                e.dist_winter = Wn.MAX_DIST;
                e.dist_desert = Wn.MAX_DIST;
                e.dist_lava = Wn.MAX_DIST;
                e.dist_forest = Wn.MAX_DIST;
                e.dist_dragon = Wn.MAX_DIST;
                e.dist_sand = Wn.MAX_DIST;
                for (var r = 0; Wn.biomes[r].t !== Wn.BIOME_SEA; r++) {
                if (Wn.biomes[r].t === Wn.BIOME_FOREST) {
                    var n = Wn.dist_from_biome(r, t, i);
                    e.dist_forest = window.Math.max(e.dist_forest, n);
                    if (n > 0 && Wn.dist_from_sand(r, t, i) === 1) {
                    e.dist_sand = 1;
                    }
                } else if (Wn.biomes[r].t === Wn.BIOME_WINTER) {
                    e.dist_winter = window.Math.max(e.dist_winter, Wn.dist_from_biome(r, t, i));
                } else if (Wn.biomes[r].t === Wn.BIOME_DESERT) {
                    e.dist_desert = window.Math.max(e.dist_desert, Wn.dist_from_biome(r, t, i));
                } else if (Wn.biomes[r].t === Wn.BIOME_LAVA) {
                    e.dist_lava = window.Math.max(e.dist_lava, Wn.dist_from_biome(r, t, i));
                } else if (Wn.biomes[r].t === Wn.BIOME_DRAGON) {
                    e.dist_dragon = window.Math.max(e.dist_dragon, Wn.dist_from_biome(r, t, i));
                }
                }
                if (zn.tiles[o][T].iblk) {
                e.dist_sand = 1;
                }
                if (Wn.find_bridge(T, o)) {
                e.dist_water = e.MAX_DIST;
                } else if (zn.tiles[o][T].wtb || e.dist_winter < 0 && e.dist_lava < 0 && e.dist_forest < 0 && e.dist_sand < 0 && e.dist_dragon < 0 && e.dist_desert < 0) {
                e.dist_water = 1;
                } else {
                e.dist_water = e.MAX_DIST;
                }
            };
            this.update_dist_from_biomes = function (e, t) {
                Wn.dist_winter = Wn.MAX_DIST;
                Wn.dist_desert = Wn.MAX_DIST;
                Wn.dist_lava = Wn.MAX_DIST;
                Wn.dist_dragon = Wn.MAX_DIST;
                Wn.dist_forest = Wn.MAX_DIST;
                for (var i = 0; Wn.biomes[i].t !== Wn.BIOME_SEA; i++) {
                if (Wn.biomes[i].t === Wn.BIOME_FOREST) {
                    Wn.dist_forest = window.Math.max(Wn.dist_forest, Wn.dist_from_biome(i, e, t));
                } else if (Wn.biomes[i].t === Wn.BIOME_WINTER) {
                    Wn.dist_winter = window.Math.max(Wn.dist_winter, Wn.dist_from_biome(i, e, t));
                } else if (Wn.biomes[i].t === Wn.BIOME_DESERT) {
                    Wn.dist_desert = window.Math.max(Wn.dist_desert, Wn.dist_from_biome(i, e, t));
                } else if (Wn.biomes[i].t === Wn.BIOME_LAVA) {
                    Wn.dist_lava = window.Math.max(Wn.dist_lava, Wn.dist_from_biome(i, e, t));
                } else if (Wn.biomes[i].t === Wn.BIOME_DRAGON) {
                    Wn.dist_dragon = window.Math.max(Wn.dist_dragon, Wn.dist_from_biome(i, e, t));
                }
                }
                if (Wn.dist_winter < 0 && Wn.dist_dragon < 0 && Wn.dist_forest < 0 && Wn.dist_dragon < 0 && Wn.dist_desert < 0) {
                Wn.dist_water = 1;
                } else {
                Wn.dist_water = Wn.MAX_DIST;
                }
            };
            this.dist_from_sand = function (e, t, i) {
                var o = Wn.biomes[e];
                var T = 0;
                let r = o.x1 + 30 + ((o.v & WORLD.LEFT) == 0 ? 150 : 0);
                var n = t - r;
                if ((o.v & WORLD.LEFT) > 0 && n > 0 && n < 320) {
                T = 1;
                }
                let a = o.y1 + 250 + ((o.v & WORLD.TOP) == 0 ? 150 : 0);
                n = i - a;
                if ((o.v & WORLD.TOP) > 0 && n > 0 && n < 320) {
                T = 1;
                }
                let I = o.x2 + 80 + ((o.v & WORLD.RIGHT) == 0 ? -200 : 0);
                n = I - t;
                if ((o.v & WORLD.RIGHT) > 0 && n > 0 && n < 320) {
                T = 1;
                }
                let E = o.y2 - 200 + ((o.v & WORLD.BOTTOM) == 0 ? -200 : 0);
                n = E - i;
                if ((o.v & WORLD.BOTTOM) > 0 && n > 0 && n < 320) {
                T = 1;
                }
                if (t >= r && t <= I && i >= a && i <= E) {
                return T;
                } else {
                return 0;
                }
            };
            this.dist_from_biome = function (e, t, i) {
                var o = Wn.biomes[e];
                let T = o.x1 + 30;
                let r = o.y1 + 250;
                let n = o.x2 + 80;
                let a = o.y2 - 200;
                if (o.x1 === 0) {
                T = 0;
                }
                if (o.y1 === 0) {
                r = 0;
                }
                if (t >= T && t <= n && i >= r && i <= a) {
                return window.Math.min(t - T, n - t, i - r, a - i);
                }
                var I = -1000000;
                if (t - T < 0) {
                I = window.Math.max(I, t - T);
                } else if (n - t < 0) {
                I = window.Math.max(I, n - t);
                }
                let E = -1000000;
                if (i < r || i > a) {
                E = i - r < 0 ? window.Math.max(E, i - r) : window.Math.max(E, a - i);
                I = I !== -1000000 && E !== -1000000 ? window.Math.min(I, E) : E;
                }
                return I;
            };
            this.add_island = function (e, t, i) {
                var o = i;
                var T = t;
                l(o, T, "isl", e, 1);
                for (var r = 0; r < 4; r++) {
                for (var n = 0; n < 3; n++) {
                    l(o - n, T - r, "iblk", 0);
                    l(o + n, T - r, "iblk", 0);
                    l(o + n, T + r, "iblk", 0);
                    l(o - n, T + r, "iblk", 0);
                }
                }
                if (e === 0) {
                for (r = 0; r < 2; r++) {
                    l(o - r, T - 4, "iblk", 0);
                    l(o + r, T - 4, "iblk", 0);
                    l(o - r, T + 4, "iblk", 0);
                    l(o + r, T + 4, "iblk", 0);
                }
                for (r = 0; r < 3; r++) {
                    l(o - 3, T + r, "iblk", 0);
                    l(o + 3, T + r, "iblk", 0);
                    l(o - 3, T - r, "iblk", 0);
                    l(o + 3, T - r, "iblk", 0);
                }
                l(o - 2, T - 4, "iblk", 0);
                l(o - 3, T - 3, "iblk", 0);
                l(o + 2, T + 4, "iblk", 0);
                l(o + 3, T + 3, "iblk", 0);
                } else if (e === 1) {
                for (r = 0; r < 3; r++) {
                    l(o - r, T - 4, "iblk", 0);
                    l(o + r, T - 4, "iblk", 0);
                    l(o - r, T + 4, "iblk", 0);
                    l(o + r, T + 4, "iblk", 0);
                }
                for (r = 0; r < 4; r++) {
                    l(o - 3, T + r, "iblk", 0);
                    l(o + 3, T + r, "iblk", 0);
                    l(o - 3, T - r, "iblk", 0);
                    l(o + 3, T - r, "iblk", 0);
                }
                } else if (e === 2) {
                for (r = 0; r < 3; r++) {
                    l(o - r, T - 4, "iblk", 0);
                    l(o + r, T - 4, "iblk", 0);
                    l(o - r, T + 4, "iblk", 0);
                    l(o + r, T + 4, "iblk", 0);
                }
                for (r = 0; r < 3; r++) {
                    l(o - 3, T + r, "iblk", 0);
                    l(o + 3, T + r, "iblk", 0);
                    l(o - 3, T - r, "iblk", 0);
                    l(o + 3, T - r, "iblk", 0);
                }
                }
            };
            this.add_islands = function (e) {
                for (var t = 0; t < Wn.biomes.length && e > 0; t++) {
                var i = Wn.biomes[t];
                if (i.t === Wn.BIOME_SEA && i.w > 1800 && i.h > 1000) {
                    var o = window.Math.floor((i.x1 + i.w / 2) / 100);
                    var T = window.Math.floor((i.y1 + i.h / 2) / 100);
                    Wn.add_island(e % 3, o, T);
                    for (var r = 0; r < 3; r++) {
                    var n = T - 2 + window.Math.floor(Wn.RNG.get() * 4);
                    var a = o - 3 + window.Math.floor(Wn.RNG.get() * 6);
                    if (zn.tiles[n][a].s === undefined) {
                        l(n, a, "plm", r);
                    }
                    n = T - 2 + window.Math.floor(Wn.RNG.get() * 4);
                    a = o - 3 + window.Math.floor(Wn.RNG.get() * 6);
                    if (zn.tiles[n][a].plm === undefined) {
                        l(n, a, "s", r);
                    }
                    }
                    n = T - 2 + window.Math.floor(Wn.RNG.get() * 4);
                    a = o - 3 + window.Math.floor(Wn.RNG.get() * 6);
                    if (zn.tiles[n][a].plm === undefined && zn.tiles[n][a].s === undefined) {
                    l(n, a, "p", 0, 1);
                    }
                    e--;
                }
                }
            };
            this.generate_world = function (e) {
                Wn.RNG.init(e);
                var o = 0;
                while (true) {
                if (++o > 10000) {
                    return;
                }
                Wn.biomes = [];
                if (Wn.custom_map === 0 && (Wn.mode === WORLD.MODE_VAMPIRES || Wn.mode === WORLD.MODE_EXPERIMENTAL || Wn.mode === WORLD.MODE_PVP)) {
                    Wn.custom_map = A;
                }
                if (Wn.mode === WORLD.MODE_ZOMBIES) {
                    Wn.biomes.push(new m(Wn.BIOME_FOREST, 2, 2, 80, 80, 15));
                } else if (Wn.mode === WORLD.MODE_LEGACY) {
                    Wn.biomes.push(new m(Wn.BIOME_FOREST, 2, 2, 150, 150, 15));
                } else if (Wn.custom_map !== 0 && Wn.custom_map.length > 0 && Wn.custom_map[0].length > 3) {
                    for (var T = 0; T < Wn.custom_map.length; T++) {
                    if ((c = Wn.custom_map[T])[0] !== 0) {
                        break;
                    }
                    var r = Wn.BIOME_FOREST;
                    switch (c[1]) {
                        case "FOREST":
                        r = Wn.BIOME_FOREST;
                        break;
                        case "WINTER":
                        r = Wn.BIOME_WINTER;
                        break;
                        case "DESERT":
                        r = Wn.BIOME_DESERT;
                        break;
                        case "LAVA":
                        r = Wn.BIOME_LAVA;
                        break;
                        case "DRAGON":
                        r = Wn.BIOME_DRAGON;
                    }
                    Wn.biomes.push(new m(r, c[2], c[3], c[4], c[5], c[6], c[7]));
                    }
                } else if (Wn.custom_map !== 0) {
                    for (T = 0; T < Wn.custom_map.length; T++) {
                    var h = Wn.custom_map[T];
                    r = Wn.BIOME_FOREST;
                    switch (h[0]) {
                        case "FOREST":
                        r = Wn.BIOME_FOREST;
                        break;
                        case "WINTER":
                        r = Wn.BIOME_WINTER;
                        break;
                        case "DESERT":
                        r = Wn.BIOME_DESERT;
                        break;
                        case "LAVA":
                        r = Wn.BIOME_LAVA;
                        break;
                        case "DRAGON":
                        r = Wn.BIOME_DRAGON;
                    }
                    if (i(r, h[1], h[2], 0, (T + 1) * 10) === 0) {
                        break;
                    }
                    }
                    if (T !== Wn.custom_map.length) {
                    continue;
                    }
                }
                break;
                }
                render_minimap();
                var d = [];
                for (var u = 0; u < Wn.nh; u++) {
                d[u] = new Array(Wn.nw);
                for (var O = 0; O < Wn.nw; O++) {
                    d[u][O] = 0;
                }
                }
                for (u = 0; u < Wn.biomes.length; u++) {
                for (var S = (h = Wn.biomes[u]).x2 / 100, C = h.y2 / 100, b = h.x1 / 100; b <= S; b++) {
                    for (var N = h.y1 / 100; N <= C; N++) {
                    try {
                        d[N][b] = 1;
                    } catch (e) {}
                    }
                }
                }
                for (N = 0; N < Wn.nh; N++) {
                for (b = 0; b < Wn.nw; b++) {
                    if (d[N][b] === 0) {
                    t(d, b, N);
                    }
                }
                }
                zn = {
                w: Wn.nw,
                h: Wn.nh,
                tiles: []
                };
                for (u = 0; u < Wn.nh; u++) {
                zn.tiles[u] = [];
                }
                if (Wn.custom_map !== 0 && Wn.custom_map.length > 0 && Wn.custom_map[0].length > 3) {
                for (T = 0; T < Wn.custom_map.length; T++) {
                    if ((c = Wn.custom_map[T])[1] === "isl") {
                    Wn.add_island(c[2], c[3], c[4]);
                    }
                }
                } else {
                Wn.add_islands(Wn.islands);
                }
                if (Wn.custom_map !== 0 && Wn.custom_map.length > 0 && Wn.custom_map[0].length > 3) {
                var D = [];
                for (T = 0; T < Wn.custom_map.length; T++) {
                    var c;
                    if ((c = Wn.custom_map[T])[0] === 1) {
                    if (c[1] === "r") {
                        l(c[3], c[2], "wtb", 0, 1);
                        D.push([c[3], c[2], c[4]]);
                    } else {
                        l(c[4], c[3], c[1], c[2], c[5]);
                    }
                    }
                }
                n(0, D);
                D = [];
                } else {
                for (u = 0; u < Wn.biomes.length; u++) {
                    h = Wn.biomes[u];
                    if (Wn.mode === WORLD.MODE_LEGACY) {
                    if (h.t === Wn.BIOME_FOREST) {
                        s(u, 1.5);
                    }
                    } else {
                    if (h.t === Wn.BIOME_FOREST) {
                        R(u, h.w / 10000);
                    }
                    if (h.t === Wn.BIOME_LAVA) {
                        _(u, h.w / 10000);
                    }
                    if (h.t === Wn.BIOME_WINTER) {
                        I(u, h.w / 10000);
                    }
                    if (h.t === Wn.BIOME_DESERT) {
                        E(u, h.w / 10000);
                    }
                    if (h.t === Wn.BIOME_DRAGON) {
                        a(u);
                    }
                    }
                }
                }
                Ee("isl", 1);
                Ee("wtb", 20);
                Ee("la", 1);
                Ee("c", 1);
                Ee("s", 1);
                Ee("f", 1);
                Ee("p", 1);
                Ee("g", 1);
                Ee("d", 1);
                Ee("a", 1);
                Ee("re", 1);
                Ee("m", 1);
                Ie = [];
                Wn.map_wrapper(zn);
            };
            this.render_single_resource = l;
            this.map_wrapper = function (e) {
                for (var t = 0; t < this.nh; t++) {
                for (var i = 0; i < this.nw; i++) {
                    e.tiles[t] ||= [];
                    if (e.tiles[t][i]) {
                    var o = e.tiles[t][i];
                    if (o.de && o.de.length > 0) {
                        for (var r = 0; r < o.de.length; r++) {
                        if (o.de[r] && o.de[r].length > 0) {
                            o.de = o.de[r][0];
                            if (r >= 41 && r <= 49) {
                            o.de.scale = 3;
                            var n = window.Math.floor(window.Math.random() * 3 + 1);
                            o.de.p = [];
                            for (var a = 0; a < n; a++) {
                                o.de.p.push({
                                x: window.Math.random() * 120 - 60,
                                y: window.Math.random() * 120 - 60,
                                angle: window.Math.random() * T,
                                _id: 41 + window.Math.floor(window.Math.random() * 9)
                                });
                            }
                            } else if (r >= 19 && r <= 26) {
                            o.de.scale = 3;
                            n = window.Math.floor(window.Math.random() * 3 + 1);
                            o.de.p = [];
                            for (a = 0; a < n; a++) {
                                o.de.p.push({
                                x: window.Math.random() * 120 - 60,
                                y: window.Math.random() * 120 - 60,
                                angle: window.Math.random() * T,
                                _id: 19 + window.Math.floor(window.Math.random() * 8)
                                });
                            }
                            } else if (r <= 15 || r >= 27 && r <= 40) {
                            o.de.angle = 0;
                            o.de.scale = 2;
                            o.de._id = r;
                            } else {
                            o.de.angle = window.Math.random() * T;
                            o.de.scale = 1;
                            o.de._id = r;
                            }
                        }
                        }
                    }
                    S(o, "p", new P(false, 1, 1, 0, 10, 10));
                    S(o, "t", new P(false, 1, 1, 0, 10, 10));
                    S(o, "s", new P(false, 1, 1, 0, 10, 10));
                    S(o, "g", new P(false, 1, 1, 0, 10, 10));
                    S(o, "d", new P(false, 1, 1, 0, 10, 10));
                    S(o, "b", new P(false, 1, 1, 0, 10, 10));
                    S(o, "f", new P(false, 1, 1, 0, 10, 10));
                    S(o, "a", new P(false, 1, 1, 0, 10, 10));
                    S(o, "cs", new P(false, 1, 1, 0, 10, 10));
                    S(o, "plm", new P(false, 1, 1, 0, 10, 10));
                    S(o, "re", new P(false, 1, 1, 0, 10, 10));
                    S(o, "c", new P(false, 1, 1, 0, 10, 10));
                    S(o, "m", new P(false, 1, 1, 0, 10, 10));
                    } else {
                    e.tiles[t][i] = [];
                    }
                }
                }
            };
            this.time = SPRITE.DAY;
            this.clock = {
                translate: {
                x: 0,
                y: 0
                },
                init: 0,
                hour: 0,
                now: 0
            };
            this.delete_all_units = function () {
                this.fast_units = [];
                this.units[ITEMS.PLAYERS] = [];
                this.units[ITEMS.WORKBENCH] = [];
                this.units[ITEMS.FIRE] = [];
                this.units[ITEMS.BIG_FIRE] = [];
                this.units[ITEMS.SEED] = [];
                this.units[ITEMS.SPIKE] = [];
                this.units[ITEMS.STONE_SPIKE] = [];
                this.units[ITEMS.GOLD_SPIKE] = [];
                this.units[ITEMS.DIAMOND_SPIKE] = [];
                this.units[ITEMS.AMETHYST_SPIKE] = [];
                this.units[ITEMS.REIDITE_SPIKE] = [];
                this.units[ITEMS.BRIDGE] = [];
                this.units[ITEMS.WOOD_TOWER] = [];
                this.units[ITEMS.ROOF] = [];
                this.units[ITEMS.PLOT] = [];
                this.units[ITEMS.WHEAT_SEED] = [];
                this.units[ITEMS.ALOE_VERA_SEED] = [];
                this.units[ITEMS.PUMPKIN_SEED] = [];
                this.units[ITEMS.TOMATO_SEED] = [];
                this.units[ITEMS.CARROT_SEED] = [];
                this.units[ITEMS.WATERMELON_SEED] = [];
                this.units[ITEMS.GARLIC_SEED] = [];
                this.units[ITEMS.THORNBUSH_SEED] = [];
                this.units[ITEMS.WINDMILL] = [];
                this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
                this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
                this.units[ITEMS.DIAMOND_EXTRACTOR] = [];
                this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
                this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
                this.units[ITEMS.WELL] = [];
                this.units[ITEMS.WALL] = [];
                this.units[ITEMS.STONE_WALL] = [];
                this.units[ITEMS.GOLD_WALL] = [];
                this.units[ITEMS.DIAMOND_WALL] = [];
                this.units[ITEMS.AMETHYST_WALL] = [];
                this.units[ITEMS.REIDITE_WALL] = [];
                this.units[ITEMS.BED] = [];
                this.units[ITEMS.WOOD_DOOR] = [];
                this.units[ITEMS.STONE_DOOR] = [];
                this.units[ITEMS.GOLD_DOOR] = [];
                this.units[ITEMS.DIAMOND_DOOR] = [];
                this.units[ITEMS.AMETHYST_DOOR] = [];
                this.units[ITEMS.REIDITE_DOOR] = [];
                this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
                this.units[ITEMS.STONE_DOOR_SPIKE] = [];
                this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
                this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
                this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
                this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
                this.units[ITEMS.FURNACE] = [];
                this.units[ITEMS.TOTEM] = [];
                this.units[ITEMS.WOOD_TOWER] = [];
                this.units[ITEMS.CHEST] = [];
                this.units[ITEMS.RESURRECTION] = [];
                this.units[ITEMS.EMERALD_MACHINE] = [];
                this.units[ITEMS.FRUIT] = [];
                this.units[ITEMS.RABBIT] = [];
                this.units[ITEMS.WOLF] = [];
                this.units[ITEMS.CRAB] = [];
                this.units[ITEMS.BOAR] = [];
                this.units[ITEMS.BABY_MAMMOTH] = [];
                this.units[ITEMS.CRAB_BOSS] = [];
                this.units[ITEMS.BABY_DRAGON] = [];
                this.units[ITEMS.BABY_LAVA] = [];
                this.units[ITEMS.HAWK] = [];
                this.units[ITEMS.PIRANHA] = [];
                this.units[ITEMS.KRAKEN] = [];
                this.units[ITEMS.FOX] = [];
                this.units[ITEMS.PENGUIN] = [];
                this.units[ITEMS.SPELL] = [];
                this.units[ITEMS.FIREFLY] = [];
                this.units[ITEMS.BEAR] = [];
                this.units[ITEMS.MAMMOTH] = [];
                this.units[ITEMS.VULTURE] = [];
                this.units[ITEMS.SAND_WORM] = [];
                this.units[ITEMS.DRAGON] = [];
                this.units[ITEMS.LAVA_DRAGON] = [];
                this.units[ITEMS.FLAME] = [];
                this.units[ITEMS.WHEAT_MOB] = [];
                this.units[ITEMS.ALOE_VERA_MOB] = [];
                this.units[ITEMS.PUMPKIN_MOB] = [];
                this.units[ITEMS.GARLIC_MOB] = [];
                this.units[ITEMS.THORNBUSH_MOB] = [];
                this.units[ITEMS.TREASURE_CHEST] = [];
                this.units[ITEMS.DEAD_BOX] = [];
                this.units[ITEMS.CRATE] = [];
                this.units[ITEMS.BREAD_OVEN] = [];
                this.units[ITEMS.SPIDER] = [];
                this.units[ITEMS.GIFT] = [];
                this.units[ITEMS.GARLAND] = [];
            };
            this.delete_units = function (e) {
                if (!this.fast_units[e]) {
                return;
                }
                let t = this.fast_units[e].type;
                this.fast_units[e] = null;
                for (var i = this.units[t], o = 0; o < i.length; o++) {
                if (i[o].id == e) {
                    i.splice(o, 1);
                    return;
                }
                if (t === ITEMS.PLAYERS && i[o].pid == e) {
                    i.splice(o, 1);
                    return;
                }
                }
            };
            this.find_tower = function (e, t) {
                for (var i = 0; i < this.units[ITEMS.WOOD_TOWER].length; i++) {
                var o = this.units[ITEMS.WOOD_TOWER][i];
                if (window.Math.floor(o.x / 100) === t && window.Math.floor(o.y / 100) === e) {
                    return 1;
                }
                }
                return 0;
            };
            this.find_bridge = function (e, t) {
                for (var i = 0; i < this.units[ITEMS.BRIDGE].length; i++) {
                var o = this.units[ITEMS.BRIDGE][i];
                if (window.Math.floor(o.x / 100) == e && window.Math.floor(o.y / 100) == t) {
                    return true;
                }
                }
                return false;
            };
            this.move_units = function (e) {
                for (var t = 0; t < e.length; t++) {
                let p = e[t];
                if (p.angle != p.nangle && (p.angle = (p.angle + T) % T, p.nangle = (p.nangle + T) % T, p.angle != p.nangle)) {
                    var i = p.nangle - p.angle;
                    var o = window.Math.abs(i);
                    if (o > window.Math.PI) {
                    o = T - o;
                    }
                    var r = o / window.Math.PI * 3 * WORLD.ROTATE * Xn;
                    if (i > window.Math.PI) {
                    p.angle -= r;
                    } else if (i < -window.Math.PI) {
                    p.angle += r;
                    } else if (i < 0) {
                    p.angle -= r;
                    } else {
                    p.angle += r;
                    }
                    p.angle = (p.angle + T) % T;
                    if (window.Math.abs(p.angle - p.nangle) < r) {
                    p.angle = p.nangle;
                    }
                }
                if (p.x != p.r.x || p.y != p.r.y) {
                    if (p.action & STATE.IDLE) {
                    p.action -= STATE.IDLE;
                    }
                    p.action |= STATE.WALK;
                    var n = v.get_std_angle(p, p.r) + window.Math.PI;
                    var a = Xn * p.speed;
                    var I = v.build_vector(a, n);
                    if (v.norm(I) < v.norm(v.get_vector(p, p.r))) {
                    v.add_vector(p, I);
                    } else {
                    if (p.action & STATE.WALK) {
                        p.action -= STATE.WALK;
                    }
                    p.action |= STATE.IDLE;
                    v.copy_vector(p.r, p);
                    }
                }
                if (p.ghost) {
                    var E = p.bubbles;
                    if ((h = E.length) === 0 || h < SPRITE.GHOST_BUBBLES && E[h - 1].life < 0.95) {
                    E.push({
                        id: window.Math.floor(window.Math.random() * re[SPRITE.BUBBLES][0].length),
                        x: window.Math.floor(p.x + window.Math.random() * 80 - 40),
                        y: window.Math.floor(p.y + window.Math.random() * 80 - 40),
                        life: 1
                    });
                    }
                    for (var _ = 0; _ < h; _++) {
                    E[_].life = window.Math.max(0, E[_].life - Xn);
                    }
                    for (_ = 0; _ < h; _++) {
                    if (E[_].life === 0) {
                        E.splice(_, 1);
                        break;
                    }
                    }
                }
                var s = 0;
                if (p.move_effect && Gn.quality) {
                    var R = p.swim;
                    var h = R.length;
                    if (p.dist_water > 0 && p.vehicle !== ItemType.BABY_DRAGON && p.vehicle !== ItemType.BABY_LAVA && p.vehicle !== ItemType.PLANE && p.vehicle !== ItemType.HAWK && p.vehicle !== ItemType.NIMBUS && !p.ghost && (s = 1, h === 0 || v.dist(R[h - 1], p) > SPRITE.SWIM_SPACE)) {
                    var d = -p.angle;
                    var u = window.Math.sin(d) * 45 * W;
                    var A = window.Math.cos(d) * 45 * W;
                    R.push({
                        x: p.x + u,
                        y: p.y + A,
                        r: 8,
                        alpha: 0.8
                    });
                    R.push({
                        x: p.x - u,
                        y: p.y - A,
                        r: 8,
                        alpha: 0.8
                    });
                    R.push({
                        x: p.x,
                        y: p.y,
                        r: 24,
                        alpha: 1
                    });
                    }
                    for (_ = 0; _ < h; _++) {
                    R[_].alpha = window.Math.max(0, R[_].alpha - Xn / 2.2);
                    R[_].r += Xn * 20;
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                    R.splice(0, 1);
                    }
                    var O = p.foot;
                    h = O.length;
                    var l = -1;
                    var S = window.Math.max(0, v.sign_(p.dist_sand));
                    var C = window.Math.max(0, v.sign_(p.dist_winter));
                    window.Math.max(0, v.sign_(p.dist_desert));
                    var b = window.Math.max(0, v.sign_(p.dist_lava));
                    var N = window.Math.max(0, v.sign_(p.dist_dragon));
                    if (p.dist_sand > 0 || p.dist_desert > 0) {
                    l = SPRITE.SAND_STEP;
                    } else if (p.dist_dragon > 0) {
                    l = SPRITE.CAVE_STEP;
                    } else if (p.dist_winter > 0) {
                    l = SPRITE.SNOW_STEP;
                    } else if (p.dist_lava > 0) {
                    l = SPRITE.LAVA_STEP;
                    }
                    if (p.vehicle === ItemType.BOAR && (S | C | b | N) == 1) {
                    l = SPRITE.BOAR_STEP;
                    var D = p.vehicle_fx2 - window.Math.PI / 2;
                    var m = 15;
                    var c = 11;
                    var P = SPRITE.STEP_SPACE;
                    } else if (p.vehicle === ItemType.BABY_MAMMOTH && (S | C | b | N) == 1) {
                    l = SPRITE.BABY_MAMMOTH_STEP;
                    D = p.vehicle_fx2 - window.Math.PI / 2;
                    m = 21;
                    c = 16;
                    P = SPRITE.STEP_SPACE;
                    } else if (p.vehicle === ItemType.CRAB_BOSS && (S | C | b | N) == 1) {
                    l = SPRITE.CRAB_STEP;
                    D = p.vehicle_fx2 - window.Math.PI / 2;
                    var y = window.Math.random() * 50;
                    m = 10 + y;
                    c = 0 + y;
                    P = SPRITE.STEP_SPACE * 0.9;
                    } else {
                    D = p.angle;
                    m = 15;
                    c = 11;
                    P = SPRITE.STEP_SPACE;
                    }
                    if (p.vehicle === ItemType.BABY_DRAGON || p.vehicle === ItemType.BABY_LAVA || p.vehicle === ItemType.NIMBUS || p.vehicle === ItemType.HAWK || p.vehicle === ItemType.PLANE || p.ghost) {
                    ;
                    } else if (p.vehicle === ItemType.SLED) {
                    if (h === 0 || v.dist(O[h - 1], p) > SPRITE.TRAIL_SPACE) {
                        O.push({
                        x: p.x,
                        y: p.y,
                        angle: p.vehicle_fx2,
                        alpha: 1,
                        id: SPRITE.SLED_WAVE
                        });
                    }
                    } else if (l != -1 && s === 0 && (h === 0 || v.dist(O[h - 1], p) > P)) {
                    p.id_foot++;
                    if (window.Math.abs(p.x - p.r.x) > 1 && window.Math.abs(p.y - p.r.y) > 1) {
                        if (p.r.x > p.x && p.r.y < p.y || p.r.x < p.x && p.r.y > p.y) {
                        if (p.id_foot % 2) {
                            u = -c * W;
                            A = -c * W;
                        } else {
                            A = c * W;
                            u = c * W;
                        }
                        } else if (p.id_foot % 2) {
                        u = c * W;
                        A = -c * W;
                        } else {
                        A = c * W;
                        u = -c * W;
                        }
                    } else if (p.id_foot % 2) {
                        u = window.Math.sin(D) * m * W;
                        A = window.Math.cos(D) * m * W;
                    } else {
                        u = -window.Math.sin(D) * m * W;
                        A = -window.Math.cos(D) * m * W;
                    }
                    O.push({
                        x: p.x + u,
                        y: p.y + A,
                        angle: D + window.Math.PI / 2,
                        alpha: 1,
                        id: l
                    });
                    }
                    for (_ = 0; _ < h; _++) {
                    if (O[_].id === SPRITE.SLED_WAVE) {
                        O[_].alpha = window.Math.max(0, O[_].alpha - Xn * 1.5);
                    } else {
                        O[_].alpha = window.Math.max(0, O[_].alpha - Xn / 2.85);
                    }
                    }
                    if (O.length > 0 && O[0].alpha === 0) {
                    O.splice(0, 1);
                    }
                }
                }
            };
            this.update = function () {
                this.move_units(this.units[ITEMS.PLAYERS]);
                this.move_units(this.units[ITEMS.RABBIT]);
                this.move_units(this.units[ITEMS.WOLF]);
                this.move_units(this.units[ITEMS.CRAB]);
                this.move_units(this.units[ITEMS.BOAR]);
                this.move_units(this.units[ITEMS.BABY_MAMMOTH]);
                this.move_units(this.units[ITEMS.CRAB_BOSS]);
                this.move_units(this.units[ITEMS.BABY_DRAGON]);
                this.move_units(this.units[ITEMS.BABY_LAVA]);
                this.move_units(this.units[ITEMS.HAWK]);
                this.move_units(this.units[ITEMS.SPIDER]);
                this.move_units(this.units[ITEMS.FOX]);
                this.move_units(this.units[ITEMS.PENGUIN]);
                this.move_units(this.units[ITEMS.SPELL]);
                this.move_units(this.units[ITEMS.FIREFLY]);
                this.move_units(this.units[ITEMS.BEAR]);
                this.move_units(this.units[ITEMS.MAMMOTH]);
                this.move_units(this.units[ITEMS.VULTURE]);
                this.move_units(this.units[ITEMS.SAND_WORM]);
                this.move_units(this.units[ITEMS.DRAGON]);
                this.move_units(this.units[ITEMS.FLAME]);
                this.move_units(this.units[ITEMS.PIRANHA]);
                this.move_units(this.units[ITEMS.KRAKEN]);
                this.move_units(this.units[ITEMS.LAVA_DRAGON]);
            };
            this.breath = [];
            this.breath[SPRITE.WAVE_ONE] = new P(false, 1, 1.02, 1, 0.008, 0.008);
            this.breath[SPRITE.WAVE_TWO] = new P(false, 1, 1.08, 1, 0.006, 0.006);
            this.lava = [];
            this.lava[0] = new P(false, 0.1, 1, 0, 0.6, 0.6);
            this.lava[1] = new P(false, 0.4, 1, 0, 0.6, 0.6);
            this.lava[2] = new P(false, 0.3, 1, 0, 0.6, 0.6);
            this.lava[3] = new P(false, 0.8, 1, 0, 0.6, 0.6);
            this.lava[4] = new P(false, 0.3, 1, 0, 0.6, 0.6);
            this.lava[5] = new P(false, 0.8, 1, 0, 0.6, 0.6);
            this.lava[6] = new P(false, 0.5, 1, 0, 0.6, 0.6);
            this.lava[7] = new P(false, 0.9, 1, 0, 0.6, 0.6);
            this.lava[8] = new P(false, 0.6, 1, 0, 0.6, 0.6);
            this.lava[9] = new P(false, 0.2, 1, 0, 0.6, 0.6);
            this.lava[10] = new P(false, 0.6, 1, 0, 0.6, 0.6);
            this.lava[11] = new P(false, 0.4, 1, 0, 0.6, 0.6);
            this.lava[12] = new P(false, 0.8, 1, 0, 0.6, 0.6);
            this.lava[13] = new P(false, 0.2, 1, 0, 0.6, 0.6);
            this.lava[14] = new P(false, 0.7, 1, 0, 0.6, 0.6);
            }
        }
        class Mn {
            constructor(e, t, i, o, T) {
            this.id = e;
            this.speed = (e + 5) * 8;
            this.life = H / 1366;
            this.size = T;
            this.x = t;
            this.y = i;
            this.c = window.Math.cos(o);
            this.s = window.Math.sin(o);
            this.alpha = 0;
            }
        }
        class Ln {
            constructor() {
            this.login = Jn.get("starve_login") ?? "";
            this.password = Jn.get("starve_password") ?? "";
            if (this.login) {
                fetch("/login", {
                method: "POST",
                headers: {
                    "Content-type": "application/json"
                },
                body: window.JSON.stringify({
                    login: this.login,
                    password: this.password
                })
                }).then(e => e.text()).then(e => {
                if (e[0] !== "{") {
                    return Yn.new_alert(e, "#a60f1b");
                }
                Gn.login_restore_data(window.JSON.parse(e));
                Yn.new_alert("Log in account", "#27ba36");
                });
            }
            this.resurrection = {
                pid: 1,
                open: false
            };
            this.well = {
                pid: 1,
                open: false
            };
            this.windmill = {
                amount_wheat: 0,
                amount_flour: 0,
                pid: 1,
                open: false
            };
            this.extractor = {
                amount_wood: 0,
                amount_mineral: 0,
                type: 0,
                mineral: 0,
                pid: 1,
                open: false
            };
            this.bread_oven = {
                amount_wood: 0,
                amount_bread: 0,
                amount_flour: 0,
                pid: 1,
                open: false
            };
            this.furnace = {
                amount: 0,
                pid: 1,
                open: false
            };
            this.ghost = {
                enabled: false,
                delay: -1,
                label: false,
                now: -1,
                draw: Br
            };
            this.chest = {
                id: -1,
                amount: 0,
                pid: 1,
                open: false,
                lock: false,
                locked: false,
                lockpick: false,
                padlock: false
            };
            this.alive = true;
            this.reconnect = {
                enabled: false,
                rotate: 0
            };
            this.key = v.gup("key", window.location.href);
            var e = v.gup("egg", window.location.href);
            function t() {
                this.seed = 1;
                this.seed2 = 2;
                this.seed3 = 3;
                this.seedv = 1;
                this.seedv2 = 2;
                this.seedv3 = 3;
                this.new_seed = function (e) {
                this.seed = 2 + window.Math.floor(window.Math.random() * WORLD.SEED);
                };
                this.new_seed2 = function (e) {
                this.seed2 = 2 + window.Math.floor(window.Math.random() * WORLD.SEED);
                };
                this.new_seed3 = function (e) {
                this.seed3 = 2 + window.Math.floor(window.Math.random() * WORLD.SEED);
                };
                this.new_seedv = function (e) {
                this.seedv = 2 + window.Math.floor(window.Math.random() * WORLD.SEED);
                };
                this.new_seedv2 = function (e) {
                this.seedv2 = 2 + window.Math.floor(window.Math.random() * WORLD.SEED);
                };
                this.new_seedv3 = function (e) {
                this.seedv3 = 2 + window.Math.floor(window.Math.random() * WORLD.SEED);
                };
                this.draw_foam_vert = function (e, t, i, o, r, n, a) {
                for (var I = 1; I < a;) {
                    var E = I * i % b;
                    var _ = N[E];
                    if (_ < 0.1) {
                    s += 50;
                    I += 50;
                    } else {
                    var s = window.Math.floor(_ * o + r);
                    if (I > n && I < a) {
                        var R = window.Math.random() > 0.5 ? Xn * -10 : Xn * 10;
                        var h = s * t;
                        this.bxv[E] = window.Math.max(-WORLD.FLOAM_X, window.Math.min(WORLD.FLOAM_X, this.bxv[E] + R));
                        this.byv[E] = window.Math.max(-WORLD.FLOAM_Y, window.Math.min(WORLD.FLOAM_Y, this.byv[E] + R));
                        if (h > 0) {
                        L.beginPath();
                        L.arc(I + Vn.cam.x + this.byv[E], e + this.bxv[E] - WORLD.FLOAM_X * 0.8, h, 0, T);
                        if (Wn.transition) {
                            var d = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                            L.fillStyle = _n(83, 156, 160, 236, 247, 249, d);
                        } else {
                            L.fillStyle = SPRITE.FLOAM_COLOR[Wn.time];
                        }
                        L.fill();
                        }
                    }
                    I += s * 2;
                    }
                }
                };
                this.draw_foam = function (e, t, i, o, r, n, a) {
                for (var I = 1; I < a;) {
                    var E = I * i % b;
                    var _ = N[E];
                    if (_ < 0.1) {
                    s += 50;
                    I += 50;
                    } else {
                    var s = window.Math.floor(_ * o + r);
                    if (I > n && I < a) {
                        var R = window.Math.random() > 0.5 ? Xn * -10 : Xn * 10;
                        var h = s * t;
                        this.bx[E] = window.Math.max(-WORLD.FLOAM_X, window.Math.min(WORLD.FLOAM_X, this.bx[E] + R));
                        this.by[E] = window.Math.max(-WORLD.FLOAM_Y, window.Math.min(WORLD.FLOAM_Y, this.by[E] + R));
                        if (h > 0) {
                        L.beginPath();
                        L.arc(e + this.bx[E] - WORLD.FLOAM_X * 0.8, I + Vn.cam.y + this.by[E], h, 0, T);
                        if (Wn.transition) {
                            var d = Wn.time ? 1 - Wn.shade.v : Wn.shade.v;
                            L.fillStyle = _n(83, 156, 160, 236, 247, 249, d);
                        } else {
                            L.fillStyle = SPRITE.FLOAM_COLOR[Wn.time];
                        }
                        L.fill();
                        }
                    }
                    I += s * 2;
                    }
                }
                };
                this.draw_foams_bottom = function (e, t, i, o, T, r) {
                var n;
                T -= 30;
                r += 30;
                if ((n = -(i - WORLD.LW1SX - o - 2) / WORLD.W1EX) === 0) {
                    this.new_seed3();
                }
                L.globalAlpha = v.ease_in_out_quad(n);
                this.draw_foam_vert(i, n, this.seed3, 18, 16, T, r);
                L.globalAlpha = 1;
                if ((n = -(e - WORLD.LW2SX - o + 500) / WORLD.W2EX) === 0) {
                    this.new_seed();
                }
                L.globalAlpha = v.ease_in_out_quad(n);
                this.draw_foam_vert(e, n, this.seed, 12, 10, T, r);
                L.globalAlpha = 1;
                if (t !== -1) {
                    if ((n = -(t - WORLD.LW3SX - o + 698) / WORLD.W3EX) <= 0.01) {
                    this.new_seed2();
                    }
                    L.globalAlpha = v.ease_in_out_quad(n);
                    this.draw_foam_vert(t, n, this.seed2, 6, 6, T, r);
                    L.globalAlpha = 1;
                }
                };
                this.draw_foams_top = function (e, t, i, o, T, r) {
                var n;
                T -= 30;
                r += 30;
                if ((n = -(-i + WORLD.LW1SX + o + 2) / WORLD.W1EX) === 0) {
                    this.new_seed3();
                }
                L.globalAlpha = v.ease_in_out_quad(n);
                this.draw_foam_vert(i, n, this.seed3, 18, 16, T, r);
                L.globalAlpha = 1;
                if ((n = -(-e + WORLD.LW2SX + o) / WORLD.W2EX) === 0) {
                    this.new_seed();
                }
                L.globalAlpha = v.ease_in_out_quad(n);
                this.draw_foam_vert(e, n, this.seed, 12, 10, T, r);
                L.globalAlpha = 1;
                if (t !== -1) {
                    if ((n = -(-t + WORLD.LW3SX + o) / WORLD.W3EX) <= 0.01) {
                    this.new_seed2();
                    }
                    L.globalAlpha = v.ease_in_out_quad(n);
                    this.draw_foam_vert(t, n, this.seed2, 6, 6, T, r);
                    L.globalAlpha = 1;
                }
                };
                this.draw_foams_left = function (e, t, i, o, T, r) {
                var n;
                T -= 30;
                r += 30;
                if ((n = -(-i + WORLD.LW1SX + o + 2) / WORLD.W1EX) === 0) {
                    this.new_seed3();
                }
                L.globalAlpha = v.ease_in_out_quad(n);
                this.draw_foam(i, n, this.seed3, 18, 16, T, r);
                L.globalAlpha = 1;
                if ((n = -(-e + WORLD.LW2SX + o) / WORLD.W2EX) === 0) {
                    this.new_seed();
                }
                L.globalAlpha = v.ease_in_out_quad(n);
                this.draw_foam(e, n, this.seed, 12, 10, T, r);
                L.globalAlpha = 1;
                if (t !== -1) {
                    if ((n = -(-t + WORLD.LW3SX + o) / WORLD.W3EX) <= 0.01) {
                    this.new_seed2();
                    }
                    L.globalAlpha = v.ease_in_out_quad(n);
                    this.draw_foam(t, n, this.seed2, 6, 6, T, r);
                    L.globalAlpha = 1;
                }
                };
                this.draw_foams_right = function (e, t, i, o, T, r) {
                var n;
                T -= 30;
                r += 30;
                if ((n = -(i - WORLD.LW1SX - o - 2) / WORLD.W1EX) === 0) {
                    this.new_seed3();
                }
                L.globalAlpha = v.ease_in_out_quad(n);
                this.draw_foam(i, n, this.seed3, 18, 16, T, r);
                L.globalAlpha = 1;
                if ((n = -(e - WORLD.LW2SX - o + 500) / WORLD.W2EX) === 0) {
                    this.new_seed();
                }
                L.globalAlpha = v.ease_in_out_quad(n);
                this.draw_foam(e, n, this.seed, 12, 10, T, r);
                L.globalAlpha = 1;
                if (t !== -1) {
                    if ((n = -(t - WORLD.LW3SX - o + 698) / WORLD.W3EX) <= 0.01) {
                    this.new_seed2();
                    }
                    L.globalAlpha = v.ease_in_out_quad(n);
                    this.draw_foam(t, n, this.seed2, 6, 6, T, r);
                    L.globalAlpha = 1;
                }
                };
                this.w1 = {
                r: new p(v.ease_out_cubic, 0, 10, WORLD.W1SX, WORLD.W1SX, WORLD.W1EX),
                l: new p(v.ease_in_out_cubic, 0, 10, WORLD.W1EX, WORLD.W1EX, WORLD.W1SX)
                };
                this.w2 = {
                r: new p(v.ease_out_quart, 0, 10, WORLD.W2SX, WORLD.W2SX, WORLD.W2EX),
                l: new p(v.ease_in_out_quad, 0, 10, WORLD.W2EX, WORLD.W2EX, WORLD.W2SX)
                };
                this.w3 = {
                r: new p(v.ease_out_quint, 0, 10, WORLD.W3SX, WORLD.W3SX, WORLD.W3EX),
                l: new p(v.ease_in_out_quad, 0, 10, WORLD.W3EX, WORLD.W3EX, WORLD.W3SX)
                };
                this.t_ = function (e) {
                if (e.r.x === e.r.ex) {
                    if (e.l.x === e.l.ex) {
                    return e.r;
                    } else {
                    return e.l;
                    }
                } else {
                    return e.r;
                }
                };
                this.t = function (e) {
                var t;
                if (e.r.x === e.r.ex) {
                    if (e.l.x === e.l.ex) {
                    e.r.restart();
                    e.l.restart();
                    t = e.r;
                    } else {
                    t = e.l;
                    }
                } else {
                    t = e.r;
                }
                t.ease(t.ex);
                return t;
                };
                this.bx = [];
                this.by = [];
                this.bxv = [];
                this.byv = [];
                this.init = function () {
                for (var e = 0; e < b; e++) {
                    this.bx[e] = window.Math.floor(N[e] * WORLD.FLOAM_X);
                    this.by[e] = window.Math.floor(N[e] * WORLD.FLOAM_Y);
                    this.bxv[e] = window.Math.floor(N[e] * WORLD.FLOAM_X);
                    this.byv[e] = window.Math.floor(N[e] * WORLD.FLOAM_Y);
                }
                this.w1.r.x = this.w1.r.ex;
                this.w2.r.ed = 3.5;
                this.w3.r.ed = 2;
                };
                this.init();
            }
            if (e) {
                Gn.skin = parseInt(e);
            }
            this.beta = window.location.href.indexOf("http://starver.io/beta") === 0 ? 1 : 0;
            if (this.key && this.beta) {
                Jn.set("starve_beta", this.key);
            } else if (this.beta) {
                this.key = Jn.get("starve_beta");
            }
            this.token = Jn.get("starve_token") ? Jn.get("starve_token") : v.generate_token(CLIENT.TOKEN_LEN);
            this.token_id = Jn.get("starve_token_id") ? Jn.get("starve_token_id") : v.generate_token(CLIENT.TOKEN_LEN);
            this.id = 0;
            this.day = 0;
            this.die = {
                howdie: "",
                score: 0,
                bank: 0,
                kill: 0
            };
            this.account = {
                connected: 0,
                last: new window.Date().getTime()
            };
            this.team = [];
            this.in_team = function (e) {
                for (var t = 0; t < this.team.length; t++) {
                if (this.team[t] == e) {
                    return true;
                }
                }
                return false;
            };
            this.shop = {
                delay: 0,
                time: 0,
                value: 0,
                open: false,
                draw: function () {
                if (this.open) {
                    var e = new window.Date().getTime();
                    this.time = window.Math.floor((e - this.delay) / 1000);
                    if (this.time < 60) {
                    Un.shop.button.draw(L);
                    } else {
                    window.document.getElementById("shop_starterkit").style.display = "none";
                    this.open = false;
                    }
                }
                }
            };
            this.totem = {
                id: -1,
                pid: -1,
                lock: 0,
                timeout: new P(false, 0, 1, 0, 1 / 30, 1),
                wait: false
            };
            this.helmet = {
                timeout: new P(false, 0, 1, 0, 0.2, 1),
                wait: false
            };
            this.build = {
                timeout: new P(false, 0, 1, 0, 1, 1),
                wait: false
            };
            this.weapon = {
                timeout: new P(false, 0, 1, 0, 0.1, 1),
                wait: false
            };
            this.cam = new g(v.ease_out_quad, 0, 0.4, 0, 0, z, B, z, B);
            this.cam.delay = 0;
            this.cam.forcedDelay = 0;
            this.cam.update = function () {
                if (this.forcedDelay > 0) {
                this.forcedDelay -= Xn;
                } else {
                var e = Wn.fast_units[Vn.id];
                if (e) {
                    this.delay = 0;
                    var t = window.Math.max(window.Math.min(z - e.x, -2), 2 - Wn.w + H);
                    var i = window.Math.max(window.Math.min(B - e.y, -2), 2 - Wn.h + f);
                    this.ease({
                    x: t,
                    y: i
                    });
                } else {
                    this.delay += Xn;
                    if (this.delay > 3) {
                    this.delay = 0;
                    if (!Vn.reconnect.enabled) {
                        Yn.get_focus();
                    }
                    }
                }
                }
            };
            this.cam.change = function (e, t) {
                this.x = -window.Math.min(window.Math.max(-Wn.dw * 2, e - Wn.dw - this.rw / 2), Wn.w - this.rw);
                this.y = -window.Math.min(window.Math.max(-Wn.dh * 2, t - (Wn.dh + this.rh) / 2), Wn.h - this.rh + Wn.dh);
                this.ex = this.x;
                this.ey = this.y;
            };
            this.control = {
                angle: 0,
                timeout: 0,
                previous: 0,
                mouse: 0,
                attack: 0,
                update: function () {
                var e = Wn.fast_units[Vn.id];
                if (e) {
                    var t = {
                    x: Vn.cam.x + e.x,
                    y: Vn.cam.y + e.y
                    };
                } else {
                    t = G;
                }
                var i = settings.aimbot.enabled && settings.aimbot.angle != null ? settings.aimbot.angle : v.get_std_angle(Fn.pos, t);
                var o = false;
                if (!Fn.state && !!e && !(e.action & STATE.ATTACK)) {
                    this.attack = 1;
                    o = true;
                    Yn.send_attack(i);
                }
                if (e) {
                    e.angle = i;
                    e.nangle = i;
                }
                if (!o) {
                    this.timeout += Xn;
                    if (this.timeout > CLIENT.ROTATE) {
                    this.timeout = 0;
                    if (window.Math.abs(this.angle - i) > 0.005) {
                        Yn.send_angle(i);
                        this.angle = i;
                    }
                    }
                }
                if (!Vn.chat.open && !Vn.terminal.open) {
                    var T = 0;
                    if (kn.is_left()) {
                    T |= 1;
                    }
                    if (kn.is_right()) {
                    T |= 2;
                    }
                    if (kn.is_bottom()) {
                    T |= 4;
                    }
                    if (kn.is_top()) {
                    T |= 8;
                    }
                    if (this.previous != T) {
                    Yn.send_move(T);
                    }
                    this.previous = T;
                }
                }
            };
            this.gauges = {
                c: 1,
                l: 1,
                h: 1,
                t: 1,
                o: 1,
                wa: 1,
                warn_cold: new P(true, 0, 1, 0, 3, 3),
                warn_life: new P(true, 0, 1, 0, 2, 2),
                warn_hunger: new P(true, 0, 1, 0, 3, 3),
                warn_thirst: new P(true, 0, 1, 0, 3, 3),
                warn_oxygen: new P(true, 0, 1, 0, 3, 3),
                warn_warm: new P(true, 0, 1, 0, 3, 3),
                cold: new p(v.ease_out_quad, 0, 1, 0, 0, 1),
                life: new p(v.ease_out_quad, 0, 1, 0, 0, 1),
                hunger: new p(v.ease_out_quad, 0, 1, 0, 0, 1),
                thirst: new p(v.ease_out_quad, 0, 1, 0, 0, 1),
                oxygen: new p(v.ease_out_quad, 0, 1, 0, 0, 1),
                warm: new p(v.ease_out_quad, 0, 1, 0, 0, 1),
                update: function () {
                this.warn_cold.update();
                this.warn_life.update();
                this.warn_hunger.update();
                this.warn_thirst.update();
                this.warn_oxygen.update();
                this.warn_warm.update();
                this.cold.ease(this.c);
                this.life.ease(this.l);
                this.hunger.ease(this.h);
                this.thirst.ease(this.t);
                this.oxygen.ease(this.o);
                this.warm.ease(this.wa);
                }
            };
            this.bigmap = false;
            this.zombie = false;
            this.vampire = false;
            this.inv = {
                max: WORLD.WITHOUT_BAG,
                bonus: 0,
                bag: 0,
                n: [],
                can_select: [],
                update_bag_size: function (e, t) {
                if (e === 1) {
                    this.bag = WORLD.BAG_SIZE;
                }
                this.bonus += t;
                this.max = WORLD.WITHOUT_BAG + this.bonus + this.bag;
                },
                drag: {
                item: -1,
                img: null,
                _start: 0,
                _move: 0,
                _x: -1,
                _y: -1,
                move: function (e) {
                    if (!!this._start && (e.x !== this._x || e.y !== this._y)) {
                    this._move = 1;
                    }
                },
                start: function (e, t) {
                    this._x = t.x;
                    this._y = t.y;
                    this.item = e;
                    this.img = Vn.inv.can_select[e].info.img[2];
                    this._start = 1;
                },
                stop: function () {
                    this._start = 0;
                    this._move = 0;
                    this._x = -1;
                    this._y = -1;
                },
                release: function () {
                    var e = -1;
                    var t = Vn.inv.can_select;
                    var i = 0;
                    if (this._start && this._move) {
                    for (var o = 0; o < t.length; o++) {
                        if (t[o].info.state === 1) {
                        e = o;
                        break;
                        }
                    }
                    if (e !== -1 && e !== this.item && t[this.item]) {
                        i = 1;
                        var T = t[e];
                        t[e] = t[this.item];
                        t[this.item] = T;
                        Un.update_inv_buttons();
                    }
                    }
                    this.stop();
                    return i;
                },
                draw: function (e, t) {
                    if (this._start && this._move) {
                    Xo(L, this.img, window.Math.floor(e - this.img.width / 2), window.Math.floor(t - this.img.height / 2));
                    }
                }
                },
                free_place: function (e) {
                for (let t = 0; t < e.length; t++) {
                    if (this.n[e[t][0]] == e[t][1]) {
                    return true;
                    }
                }
                return false;
                },
                find_item: function (e) {
                for (var t = 0; t < this.can_select.length; t++) {
                    if (this.can_select[t].id == e) {
                    return t;
                    }
                }
                return -1;
                },
                delete_item: function (e, t) {
                this.n[e] = 0;
                this.can_select.splice(t, 1);
                Un.update_inv_buttons();
                },
                decrease: function (e, t, i) {
                this.n[e] = window.Math.max(0, this.n[e] - t);
                if (!this.n[e] && i >= 0) {
                    this.delete_item(e, i);
                }
                }
            };
            this.auto_feed = {
                enabled: false,
                translate: {
                x: 0,
                y: 0
                },
                delay: 0,
                invert: __p_5863156023(() => {
                Vn.auto_feed.enabled = !Vn.auto_feed.enabled;
                if (Vn.auto_feed.enabled) {
                    Un.options.feed_agree.display = "inline-block";
                } else {
                    Un.options.feed_agree.display = "none";
                }
                }, 0),
                update: function () {
                if (!!this.enabled && Vn.craft.id < 0 && !Un.safe_delete.open) {
                    this.delay += Xn;
                    if (this.delay > 2) {
                    this.delay = 0;
                    if (Vn.gauges.h < 0.35) {
                        if (Vn.inv.n[ItemType.BERRY]) {
                        Yn.select_inv(ItemType.BERRY, Vn.inv.find_item(ItemType.BERRY));
                        } else if (Vn.inv.n[ItemType.GARLIC]) {
                        Yn.select_inv(ItemType.GARLIC, Vn.inv.find_item(ItemType.GARLIC));
                        } else if (Vn.inv.n[ItemType.CRAB_STICK]) {
                        Yn.select_inv(ItemType.CRAB_STICK, Vn.inv.find_item(ItemType.CRAB_STICK));
                        } else if (Vn.inv.n[ItemType.PUMPKIN]) {
                        Yn.select_inv(ItemType.PUMPKIN, Vn.inv.find_item(ItemType.PUMPKIN));
                        } else if (Vn.inv.n[ItemType.TOMATO]) {
                        Yn.select_inv(ItemType.TOMATO, Vn.inv.find_item(ItemType.TOMATO));
                        } else if (Vn.inv.n[ItemType.CARROT]) {
                        Yn.select_inv(ItemType.CARROT, Vn.inv.find_item(ItemType.CARROT));
                        } else if (Vn.inv.n[ItemType.WATERMELON]) {
                        Yn.select_inv(ItemType.WATERMELON, Vn.inv.find_item(ItemType.WATERMELON));
                        } else if (Vn.inv.n[ItemType.BREAD]) {
                        Yn.select_inv(ItemType.BREAD, Vn.inv.find_item(ItemType.BREAD));
                        } else if (Vn.inv.n[ItemType.COOKED_MEAT]) {
                        Yn.select_inv(ItemType.COOKED_MEAT, Vn.inv.find_item(ItemType.COOKED_MEAT));
                        } else if (Vn.inv.n[ItemType.FISH_COOKED]) {
                        Yn.select_inv(ItemType.FISH_COOKED, Vn.inv.find_item(ItemType.FISH_COOKED));
                        } else if (Vn.inv.n[ItemType.COOKIE]) {
                        Yn.select_inv(ItemType.COOKIE, Vn.inv.find_item(ItemType.COOKIE));
                        } else if (Vn.inv.n[ItemType.SANDWICH]) {
                        Yn.select_inv(ItemType.SANDWICH, Vn.inv.find_item(ItemType.SANDWICH));
                        } else if (Vn.inv.n[ItemType.CAKE]) {
                        Yn.select_inv(ItemType.CAKE, Vn.inv.find_item(ItemType.CAKE));
                        } else if (Vn.inv.n[ItemType.CRAB_LOOT]) {
                        Yn.select_inv(ItemType.CRAB_LOOT, Vn.inv.find_item(ItemType.CRAB_LOOT));
                        }
                    } else if (Vn.gauges.t < 0.35 && Vn.inv.n[ItemType.BOTTLE_FULL]) {
                        Yn.select_inv(ItemType.BOTTLE_FULL, Vn.inv.find_item(ItemType.BOTTLE_FULL));
                    }
                    }
                }
                }
            };
            Un.options.feed_agree.display = "none";
            this.craft = {
                id: -1,
                timeout: new P(false, 0, 1, 0, 1, 1),
                crafting: false,
                preview: -1,
                mode: 0,
                label: [],
                can_craft: [],
                workbench: false,
                fire: false,
                water: false,
                well: false,
                change_mode: function () {
                this.mode = this.mode === 0 ? 1 : 0;
                },
                set_workbench: function (e) {
                this.workbench = e;
                var t = Un.safe_delete;
                if (t.open) {
                    t.del(t.button);
                }
                this.update();
                },
                do_recycle: function (e) {
                var t = l[e];
                if (t) {
                    this.id = e;
                    this.crafting = true;
                    var i = Wn.fast_units[Vn.id];
                    this.timeout.max_speed = 1 / t.time * 8;
                    if (i && i.right == ItemType.BOOK) {
                    this.timeout.max_speed = 1 / t.time * 12;
                    }
                }
                },
                do_craft: function (e) {
                var t = l[e];
                if (t) {
                    this.id = e;
                    this.crafting = true;
                    var i = Wn.fast_units[Vn.id];
                    if (i && i.right == ItemType.BOOK) {
                    this.timeout.max_speed = 1 / t.time * 3;
                    } else {
                    this.timeout.max_speed = 1 / t.time;
                    }
                    for (var o = 0; o < t.r.length; o++) {
                    var T = t.r[o];
                    Vn.inv.decrease(T[0], T[1], Vn.inv.find_item(T[0]));
                    }
                    Un.update_inv_buttons();
                }
                },
                update: function () {
                this.can_craft = [];
                if (Un.info_box.craft === 1) {
                    Un.info_box.display = 0;
                }
                for (let T = 0; T < l.length; T++) {
                    var e = l[T];
                    var t = true;
                    if (e) {
                    for (var i = 0; i < e.r.length; i++) {
                        if (Vn.inv.max >= WORLD.WITH_BAG && T === ItemType.BAG) {
                        t = false;
                        break;
                        }
                        if (e.w > this.workbench || e.f > this.fire || e.o > this.water || e.e > this.well) {
                        t = false;
                        break;
                        }
                        var o = e.r[i];
                        if (!Vn.inv.n[o[0]] || Vn.inv.n[o[0]] < o[1]) {
                        t = false;
                        break;
                        }
                    }
                    if (t) {
                        this.can_craft.push(Un.craft_buttons[T]);
                    }
                    }
                }
                Un.update_craft_buttons();
                Un.update_chest_buttons();
                Un.update_furnace_button();
                Un.update_windmill_button();
                Un.update_extractor_button();
                Un.update_bread_oven_button();
                },
                restart: function () {
                this.id = -1;
                this.crafting = false;
                this.timeout.v = 0;
                this.timeout.o = false;
                this.update();
                }
            };
            this.welcome = {
                message: undefined,
                draw: Gr
            };
            this.alert = {
                timeout: new P(false, 1, 1, 0, 4, 0.3),
                text: "",
                label: null,
                draw: Wr,
                list: []
            };
            this.ldb = {
                can: window.document.createElement("canvas"),
                ids: [],
                update: true,
                translate: {
                x: 0,
                y: 0
                },
                sort: function () {
                var e = [];
                for (var t = Wn.players, i = 0; i < t.length; i++) {
                    if (t[i].alive) {
                    e.push({
                        id: i,
                        s: t[i].score
                    });
                    }
                }
                e.sort(__p_5863156023((e, t) => {
                    return t.s - e.s;
                }, 2));
                this.ids = [];
                for (i = 0; i < e.length && i < 10; i++) {
                    this.ids.push(e[i].id);
                }
                this.update = true;
                },
                init: function (e) {
                for (var t = 0; t < Wn.players.length; t++) {
                    Wn.players[t].score = 0;
                }
                Wn.players[Vn.id].score = v.restore_number(e[1]);
                this.ids = [];
                for (t = 2; t < e.length; t += 2) {
                    this.ids.push(e[t]);
                    Wn.players[e[t]].score = v.restore_number(e[t + 1]);
                }
                this.update = true;
                }
            };
            this.ldb.can.width = W * 180;
            this.ldb.can.height = W * 300;
            this.ldb.ctx = this.ldb.can.getContext("2d");
            this.terminal = {
                open: false,
                input: window.document.getElementById("commandInput"),
                contentBox: window.document.getElementById("commandsBox"),
                style: window.document.getElementById("commandMainBox").style,
                lastCommands: [],
                commandIndex: 0,
                _print: function (e) {
                this.contentBox.innerHTML += e;
                },
                update: function () {
                this.style.left = window.Math.floor(H / 2 - 300) + "px";
                this.style.top = window.Math.floor(f / 2 - 250) + "px";
                },
                _clean: function () {
                this.contentBox.innerHTML = "";
                },
                quit: function () {
                this.open = false;
                this.style.display = "none";
                },
                create_array: __p_5863156023(e => {
                var t = "<table class=\"tableList\">";
                for (var i = 0; i < e.length; i++) {
                    if (i % 3 == 0) {
                    t += "<tr>";
                    }
                    t += "<td class=\"tableList\">" + e[i] + "</td>";
                    if ((i + 1) % 3 == 0 || i + 1 === e.length) {
                    t += "</tr>";
                    }
                }
                return t += "</table>";
                }, 1),
                write_command: function (e, t, i, o) {
                var T = "<div class=commandWritten>" + (e = e || "");
                T += (t = t || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                T += (i = i || "") + "</div>" + (o = o || "") + "</div>";
                this._print(T);
                this.scroll_down();
                },
                scroll_down: function () {
                this.contentBox.scrollTop = this.contentBox.scrollHeight;
                },
                commands: function (e) {
                switch (e) {
                    case "clean":
                    this._clean();
                    return true;
                    case "list":
                    let e = "";
                    for (var t = Wn.players, i = 0; i < t.length; i++) {
                        var o = t[i];
                        if (o.alive) {
                        e += o.nickname.replaceAll("<", "< ") + " <span style=\"color:green\">#" + i + "</span>\n";
                        }
                    }
                    this.write_command("list", 1, "List all connected players", e);
                    return true;
                    case "weapon-list":
                    this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "cursed_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                    return true;
                    case "tool-list":
                    this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "shovel_reidite", "pitchfork", "pitchfork2", "spanner", "book"]));
                    return true;
                    case "survival-list":
                    this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                    return true;
                    case "resource-list":
                    this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                    return true;
                    case "food-list":
                    this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                    return true;
                    case "hat-list":
                    this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                    return true;
                    case "building-list":
                    this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                    return true;
                    case "biome-list":
                    this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                    return true;
                    case "help-config":
                    this.write_command("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                    return true;
                    case "pos":
                    let T = Wn.fast_units[Vn.id];
                    this.write_command("pos", 1, "Your position is " + window.Math.floor(T.x / 100) + ":" + window.Math.floor(T.y / 100));
                    return true;
                    case "help-admin":
                    this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                    return true;
                    case "help":
                    this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                    return true;
                }
                return false;
                },
                _open: function () {
                if (!this.open) {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                    this.commandIndex = 0;
                }
                },
                _send: function () {
                var e = this.input.value;
                const t = this.lastCommands[this.lastCommands.length - 1];
                if (e && e.length > 0) {
                    if (this.lastCommands.length < 100 && e !== t) {
                    this.lastCommands.push(e);
                    } else if (e !== t) {
                    this.lastCommands.push(e);
                    this.lastCommands.splice(0, 1);
                    }
                    if (!this.commands(e)) {
                    Yn.send_command(this.input.value);
                    }
                    this.input.value = "";
                }
                }
            };
            this.chat = {
                open: false,
                input: window.document.getElementById("chat_input"),
                style: window.document.getElementById("chat_block").style,
                update: function () {
                this.style.left = window.Math.floor(H / 2 - 150) + "px";
                this.style.top = window.Math.floor(f / 2 + 80) + "px";
                },
                quit: function () {
                this.open = false;
                this.style.display = "none";
                this.input.value = "";
                },
                prefix: "!",
                cmd: {
                hud: __p_5863156023(e => {
                    if (e === "off") {
                    var t = "Enter \"!hud\" without the quotes to restore the HUD";
                    if (Vn.alert.text) {
                        Vn.alert.list.push(t);
                    } else {
                        Vn.alert.text = t;
                    }
                    Un.show_ui = 0;
                    } else {
                    Un.show_ui = 1;
                    }
                }, 1)
                },
                commands: function (e) {
                if (e.startsWith(this.prefix)) {
                    var t = "";
                    var i = "";
                    for (var o = 1; o < e.length && e.charAt(o) != " "; o++) {
                    t += e.charAt(o);
                    }
                    for (o++; o < e.length; o++) {
                    i += e.charAt(o);
                    }
                    var T = this.cmd[t];
                    if (T) {
                    T(i);
                    }
                    return true;
                }
                return false;
                },
                run: function () {
                if (this.open) {
                    this.open = false;
                    this.style.display = "none";
                    var e = this.input.value;
                    if (e) {
                    if (!this.commands(e)) {
                        Yn.send_chat(this.input.value);
                    }
                    this.input.value = "";
                    }
                } else {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
                }
            };
            this.ash = {
                flakes: [],
                update: __p_5863156023(e => {
                e.y += Xn * 80 * e.s;
                e.x += Xn * 80 * e.c;
                e.life -= Xn / 6;
                if (e.life > 0.2) {
                    e.alpha = window.Math.min(e.alpha + Xn * 3, 1);
                } else {
                    e.alpha = window.Math.max(e.alpha - Xn * 1, 0);
                }
                }, 1),
                add: function () {
                var e = window.Math.floor(window.Math.min(SPRITE.ASHES_NUMBER * (H / 1366), SPRITE.ASHES_NUMBER + 10) * window.Math.max(window.Math.min(Wn.dist_lava + 1000, 3000) / 3000, 0));
                if (this.flakes.length < e) {
                    var t = window.Math.floor(window.Math.random() * SPRITE.ASHES_SIZES);
                    var i = -Vn.cam.x + window.Math.floor(window.Math.random() * H);
                    var o = -Vn.cam.y + window.Math.floor(window.Math.random() * f);
                    var T = window.Math.random(window.Math.PI);
                    this.flakes.push(new Mn(t, i, o, T));
                }
                }
            };
            this.blizzard = 0;
            this.bandage = 0;
            this.captcha = "";
            this.desert = {
                flakes: [],
                tempest: 0,
                tempest_speed: 0,
                update: function (e) {
                e.y += Xn * (200 + this.tempest_speed * 800) * e.s;
                e.x += Xn * (200 + this.tempest_speed * 800) * e.c;
                e.life -= Xn / 6;
                if (e.life > 0.2) {
                    e.alpha = window.Math.min(e.alpha + Xn * 3, 1);
                } else {
                    e.alpha = window.Math.max(e.alpha - Xn * 1, 0);
                }
                },
                add: function (e) {
                var t = window.Math.floor(window.Math.min((this.tempest_speed + 0.1) * SPRITE.SAND_NUMBER * (H / 1366), (this.tempest_speed + 0.1) * SPRITE.SAND_NUMBER + 10) * window.Math.max(window.Math.min(Wn.dist_desert + 1000, 3000) / 3000, 0));
                if (this.flakes.length < t) {
                    var i = window.Math.floor(window.Math.random() * SPRITE.ASHES_SIZES);
                    var o = -Vn.cam.x + window.Math.floor(window.Math.random() * H);
                    var T = -Vn.cam.y + window.Math.floor(window.Math.random() * f);
                    var r = window.Math.random(window.Math.PI);
                    if (Vn.desert.tempest !== 0) {
                    o -= H / 2;
                    }
                    this.flakes.push(new Mn(i, o, T, r));
                }
                }
            };
            this.winter = {
                flakes: [],
                tempest: 0,
                tempest_speed: 0,
                update: function (e) {
                if (kn.is_bottom()) {
                    e.y += Xn * e.speed * (5.5 + this.tempest_speed * 10);
                } else {
                    e.y += Xn * e.speed * (5 + this.tempest_speed * 10);
                }
                e.life -= Xn / 2;
                if (kn.is_left()) {
                    e.x += Xn * (100 + this.tempest_speed * 400);
                } else if (kn.is_right()) {
                    e.x -= Xn * (130 - this.tempest_speed * 400);
                } else {
                    e.x -= Xn * (30 - this.tempest_speed * 400);
                }
                if (e.life > 0.2) {
                    e.alpha = window.Math.min(e.alpha + Xn * 3, 1);
                } else {
                    e.alpha = window.Math.max(e.alpha - Xn * 5, 0);
                }
                },
                add: function () {
                var e = window.Math.floor(window.Math.min((this.tempest_speed * 1.5 + 0.5) * SPRITE.FLAKES_NUMBER * (H / 1366), (this.tempest_speed * 1.5 + 0.5) * SPRITE.FLAKES_NUMBER + 10) * window.Math.max(window.Math.min(Wn.dist_winter + 1000, 3000) / 3000, 0));
                if (this.flakes.length < e) {
                    var t = window.Math.floor(window.Math.random() * SPRITE.FLAKES_SIZES);
                    var i = -Vn.cam.x + window.Math.floor(window.Math.random() * H);
                    var o = -Vn.cam.y + window.Math.floor(window.Math.random() * 400 * W - W * 200);
                    this.flakes.push(new Mn(t, i, o, 0));
                }
                }
            };
            this.beach = [];
            for (var i = 0; i < 4; i++) {
                this.beach.push(new t());
            }
            }
        }
        class Hn {
            constructor(e, i) {
            this.can = e;
            this.ctx = i;
            if (window.navigator.userAgent.indexOf("Edge") > -1) {
                this.cursor0 = "default";
                this.cursor1 = "pointer";
            } else {
                this.cursor0 = "url('img/cursor0.png'), default";
                this.cursor1 = "url('img/cursor1.png'), pointer";
            }
            var o = this;
            function T(e, t, i, T, r) {
                var n = this;
                for (var a = t + 9, I = 0, E = T, _ = t; _ < a; _++) {
                o.buttons[_].info.callback = R;
                o.buttons[_].info.cosmeticType = e;
                }
                function s() {
                var t = e[E];
                Gn.cosmetic_name = Nn(t.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
                if (t.level !== undefined) {
                    Gn.cosmetic_author = Nn("Level " + t.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                } else {
                    Gn.cosmetic_author = Nn("by " + t.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                }
                }
                function R() {
                if (E !== this.cosmeticId && this.cosmeticId !== -1) {
                    if (this.unlocked > 0) {
                    te(t === we ? y : p, Re, "none");
                    } else {
                    te(t === we ? y : p, he, "inline-block");
                    }
                    E = this.cosmeticId;
                    i(this.cosmeticId);
                    s();
                }
                }
                this.initSelector = function () {
                for (var i = t, T = I * 3; i < a && T < e.length; i++, T++) {
                    if (e[T].rarity !== RARITY.SPECIAL || r[T] !== 0) {
                    o.buttons[i].info.cosmeticId = T;
                    for (var n = 0; n < 3; n++) {
                        o.buttons[i].info.img[n] = He[e[T].rarity][n];
                        o.buttons[i].info.active = he;
                        o.buttons[i].info.unlocked = r[T];
                    }
                    } else {
                    o.buttons[i].info.cosmeticId = -1;
                    o.buttons[i].info.active = Re;
                    }
                }
                for (; i < a; i++) {
                    o.buttons[i].info.cosmeticId = -1;
                    o.buttons[i].info.active = Re;
                }
                s();
                };
                o.buttons[a].info.callback = function () {
                if (I > 0) {
                    I--;
                }
                n.initSelector();
                };
                o.buttons[a + 1].info.callback = function () {
                if (I * 3 + 9 < e.length) {
                    I++;
                }
                n.initSelector();
                };
            }
            function r() {
                var e = window.Number(Jn.get("starve_crate"));
                var t = window.Number(Jn.get("starve_dead"));
                var i = window.Number(Jn.get("starve_book"));
                var T = window.Number(Jn.get("starve_bag"));
                var r = window.Number(Jn.get("starve_skin"));
                var n = window.Number(Jn.get("starve_accessory"));
                o.skin = r || 0;
                o.book = i || 0;
                o.crate = e || 1;
                o.accessory = n || 0;
                o.bag = T || 0;
                o.dead = t || 0;
            }
            function n() {
                for (var e = ne.SKIN, t = 0; t < e.length; t++) {
                if (e[t].rarity === RARITY.FREE) {
                    o.unlock.skin[t] = 1;
                } else {
                    o.unlock.skin[t] = 0;
                }
                }
                e = ne.ACCESSORY;
                t = 0;
                for (; t < e.length; t++) {
                if (e[t].rarity === RARITY.FREE) {
                    o.unlock.accessory[t] = 1;
                } else {
                    o.unlock.accessory[t] = 0;
                }
                }
                e = ne.BAG;
                t = 0;
                for (; t < e.length; t++) {
                if (e[t].rarity === RARITY.FREE) {
                    o.unlock.bag[t] = 1;
                } else {
                    o.unlock.bag[t] = 0;
                }
                }
                e = ne.BOOK;
                t = 0;
                for (; t < e.length; t++) {
                if (e[t].rarity === RARITY.FREE) {
                    o.unlock.book[t] = 1;
                } else {
                    o.unlock.book[t] = 0;
                }
                }
                e = ne.CRATE;
                t = 0;
                for (; t < e.length; t++) {
                if (e[t].rarity === RARITY.FREE) {
                    o.unlock.crate[t] = 1;
                    o.unlock.dead[t] = 1;
                } else {
                    o.unlock.crate[t] = 0;
                    o.unlock.dead[t] = 0;
                }
                }
            }
            this.waiting = false;
            this.in_this_view = 0;
            this.current_mode_score = -1;
            this.loading = {
                translate: {
                x: 0,
                y: 0
                },
                angle: 0,
                img: re[SPRITE.GEAR2],
                draw: function () {
                this.angle += Xn * 2;
                i.save();
                i.translate(this.translate.x + this.img.width / 2, this.translate.y + this.img.height / 2);
                i.rotate(this.angle);
                Xo(i, this.img, -this.img.width / 2, -this.img.height / 2);
                i.restore();
                }
            };
            this.bread = 0;
            this.previous_bread = -1;
            this.bread_img = undefined;
            this.new_nickname = "";
            this.previous_new_nickname = "";
            this.new_nickname_img = undefined;
            this.lvl = 0;
            this.previous_lvl = -1;
            this.lvl_img = undefined;
            this.xp = 0;
            this.xp_dest = 0;
            this.firstName = 0;
            this.kill = 0;
            this.death = 0;
            this.time = 0;
            this.score = 0;
            this.scoreTotal = 0;
            this.bestKill = 0;
            this.bestTime = 0;
            this.bestScore = 0;
            this.seasons = [];
            this.kit = -1;
            this.previous_kit_hour = -1;
            this.previous_kit_min = -1;
            this.kit_img_min = undefined;
            this.kit_img_hour = undefined;
            this.privateServerTime = -1;
            this.previous_privateServerTime_day = -1;
            this.previous_privateServerTime_hour = -1;
            this.previous_privateServerTime_min = -1;
            this.privateServerTime_img_min = undefined;
            this.privateServerTime_img_hour = undefined;
            this.privateServerTime_img_day = undefined;
            this.cosmetic_name = undefined;
            this.cosmetic_author = undefined;
            this.leaderboard_range = undefined;
            this.leaderboard_mode = undefined;
            this.leaderboard_sorted = undefined;
            this.leaderboard_season = 0;
            this.profile_season = 0;
            this.breath = 0;
            this.settings = false;
            this.quality = Jn.get("starve_quality") ? Jn.get("starve_quality") : "high";
            if (this.quality === "high") {
                window.document.getElementById("high_ing").style.backgroundColor = "#B56D18";
                window.document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
                this.quality = 1;
            } else {
                window.document.getElementById("low_ing").style.backgroundColor = "#B56D18";
                window.document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
                this.quality = 0;
            }
            this.high_quality = function () {
                window.document.getElementById("high_ing").style.backgroundColor = "#B56D18";
                window.document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
                Jn.set("starve_quality", "high", 30);
                window.document.getElementById("input_ratio").value = 1;
                Un.change_ratio();
                Gn.quality = 1;
            };
            this.low_quality = function () {
                window.document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
                window.document.getElementById("low_ing").style.backgroundColor = "#B56D18";
                Jn.set("starve_quality", "low", 30);
                window.document.getElementById("input_ratio").value = 0.5 / (U / k);
                Un.change_ratio();
                Gn.quality = 0;
            };
            if (Jn.get("starve_mapping") === undefined && J === "FR") {
                kn.set_azerty();
                this.mapping = "azerty";
            } else {
                this.mapping = Jn.get("starve_mapping") ? Jn.get("starve_mapping") : "qwerty";
            }
            if (this.mapping == "azerty") {
                kn.set_azerty();
                window.document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
                window.document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            } else {
                window.document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
                window.document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            }
            this.set_azerty = function () {
                kn.set_azerty();
                window.document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
                window.document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
                Jn.set("starve_mapping", "azerty", 30);
            };
            this.set_qwerty = function () {
                kn.set_qwerty();
                window.document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
                window.document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
                Jn.set("starve_mapping", "qwerty", 30);
            };
            r();
            this.unlock = {};
            this.unlock.skin = [];
            this.unlock.bag = [];
            this.unlock.book = [];
            this.unlock.crate = [];
            this.unlock.dead = [];
            this.unlock.accessory = [];
            this.day_mode = 0;
            this.unlock_cosmetics = n;
            n();
            var I;
            var E = 0;
            function h() {
                o.update();
                if (++E == 60) {
                o.add_event_listener();
                o.in_this_view = true;
                o.update();
                return;
                }
                window.setTimeout(h, a);
            }
            this.quit = function (e) {
                I = e;
                o.remove_event_listener();
                o.in_this_view = 0;
                A = -1;
                O();
            };
            var A = -1;
            function O() {
                o.update();
                if (++A == 60) {
                Jn.set("starve_nickname", o.nickname.input.value, 30);
                o.nickname.style.display = "none";
                o.server_list.style.display = "none";
                o.stop();
                I();
                return;
                }
                window.setTimeout(O, a);
            }
            this.is_run = false;
            this.stop = function () {
                this.is_run = false;
            };
            this.run = function () {
                window.document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[Bn.time];
                o.nickname.style.display = "inline-block";
                o.server_list.style.display = "inline-block";
                o.waiting = false;
                o.is_run = true;
                A = -1;
                E = 0;
                h();
            };
            this.update_component = function (e, t) {
                t = t < 0 ? -t : t;
                if ((e.position & _e) === _e) {
                if ((e.position & Te) === Te) {
                    e.translate.x = z + e.translate._x - t;
                } else if ((e.position & ae) === ae) {
                    e.translate.x = z + e.translate._x + t;
                } else {
                    e.translate.x = z + e.translate._x;
                }
                } else if ((e.position & Te) === Te) {
                e.translate.x = e.translate._x - t;
                } else if ((e.position & ae) === ae) {
                e.translate.x = H - e.translate._x + t;
                } else {
                e.translate.x = e.translate._x;
                }
                if ((e.position & se) === se) {
                if ((e.position & Ie) === Ie) {
                    e.translate.y = B + e.translate._y - t;
                } else if ((e.position & Ee) === Ee) {
                    e.translate.y = B + e.translate._y + t;
                } else {
                    e.translate.y = B + e.translate._y;
                }
                } else if ((e.position & Ie) === Ie) {
                e.translate.y = e.translate._y - t;
                } else if ((e.position & Ee) === Ee) {
                e.translate.y = f + e.translate._y + t;
                } else {
                e.translate.y = e.translate._y;
                }
                if (e.style !== undefined) {
                e.style.left = window.Math.floor(e.translate.x) + "px";
                e.style.top = window.Math.floor(e.translate.y) + "px";
                }
            };
            this.update = function () {
                var e = 0;
                if (E != 60 || A != -1) {
                if (E != 60) {
                    e = 1500 / (E + 1) - 25;
                }
                if (A != -1) {
                    e = -(1750 / (60 - A + 1) - 24);
                }
                }
                for (var t = 0; t < this.bkgd.length; t++) {
                this.update_component(this.bkgd[t], e);
                }
                for (t = 0; t < this.buttons.length; t++) {
                this.update_component(this.buttons[t].info, e);
                }
                for (t = 0; t < this.css.length; t++) {
                this.update_component(this.css[t], e);
                }
                this.loading.translate.x = (H - this.loading.img.width) / 2;
                this.loading.translate.y = 0;
                if (E != 60 || A != -1) {
                var i = 0;
                if (E != 60) {
                    i = 1500 / (E + 1) - 24;
                }
                if (A != -1) {
                    i = -(1750 / (60 - A + 1) - 24);
                }
                this.loading.translate.y -= i > 0 ? i : -i;
                }
            };
            this.create_spin = function (e) {
                var t = window.document.createElement("canvas");
                var i = t.getContext("2d");
                t.width = 342;
                t.height = 342;
                var o = -window.Math.PI / 2;
                for (var T = 0; T < e.length; T++) {
                var r = e[T][0];
                var n = e[T][1] * window.Math.PI / 180;
                i.beginPath();
                i.arc(171, 171, 170, o, o + n, false);
                i.lineTo(171, 171);
                i.fillStyle = r;
                i.fill();
                o += n;
                }
                return t;
            };
            this.generate_new_nickname = function () {
                this.new_nickname = window.document.getElementById("account_nickname_input").value;
                if (this.new_nickname !== this.previous_new_nickname) {
                this.previous_new_nickname = this.new_nickname;
                this.new_nickname_img = Nn(this.new_nickname, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
                }
            };
            this.draw = function () {
                Fo();
                Gn.xp = v.lerp(Gn.xp, Gn.xp_dest, 0.03);
                this.bkgd[Se].translate.x = this.bkgd[0].translate.x - 72 + Gn.xp * 165;
                this.bkgd[Se].translate._x = this.bkgd[Se].translate.x;
                this.bkgd[Se].translate.y = this.bkgd[0].translate.y + 30;
                this.bkgd[Se].translate._y = this.bkgd[Se].translate.y;
                for (let e = 2; e < this.bkgd.length; e++) {
                if (this.bkgd[e].active === he) {
                    this.bkgd[e].draw(i);
                }
                }
                var e;
                if ((e = this.kit - Date.now()) > 0) {
                var t = window.Math.floor(e / 60000);
                var T = window.Math.floor(t / 60);
                if ((t %= 60) !== this.previous_kit_min) {
                    this.previous_kit_min = t;
                    t = t < 10 ? "0" + t : "" + t;
                    o.kit_img_min = Nn(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (T !== this.previous_kit_hour) {
                    this.previous_kit_hour = T;
                    T = T < 10 ? "0" + T : "" + T;
                    o.kit_img_hour = Nn(T, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (n = this.bkgd[Oe]).draw(i);
                var r = this.kit_img_hour;
                Xo(i, r, n.translate.x - r.width / 4 + 182, n.translate.y - r.height / 4 + 40, r.width / 2, r.height / 2);
                r = this.kit_img_min;
                Xo(i, r, n.translate.x - r.width / 4 + 251, n.translate.y - r.height / 4 + 40, r.width / 2, r.height / 2);
                }
                if ((e = this.privateServerTime - Date.now()) > 0) {
                t = window.Math.floor(e / 60000);
                T = window.Math.floor(t / 60);
                var n;
                var a = window.Math.floor(T / 24);
                T %= 24;
                if ((t %= 60) !== this.previous_privateServerTime_min) {
                    this.previous_privateServerTime_min = t;
                    t = t < 10 ? "0" + t : "" + t;
                    o.privateServerTime_img_min = Nn(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (T !== this.previous_privateServerTime_hour) {
                    this.previous_privateServerTime_hour = T;
                    T = T < 10 ? "0" + T : "" + T;
                    o.privateServerTime_img_hour = Nn(T, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (a !== this.previous_privateServerTime_day) {
                    this.previous_privateServerTime_day = a;
                    a = a < 10 ? "0" + a : "" + a;
                    o.privateServerTime_img_day = Nn(a, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (n = this.bkgd[le]).draw(i);
                r = this.privateServerTime_img_day;
                Xo(i, r, n.translate.x - r.width / 4 + 113, n.translate.y - r.height / 4 + 40, r.width / 2, r.height / 2);
                r = this.privateServerTime_img_hour;
                Xo(i, r, n.translate.x - r.width / 4 + 182, n.translate.y - r.height / 4 + 40, r.width / 2, r.height / 2);
                r = this.privateServerTime_img_min;
                Xo(i, r, n.translate.x - r.width / 4 + 251, n.translate.y - r.height / 4 + 40, r.width / 2, r.height / 2);
                }
                if ((this.current_view & C) === C) {
                this.buttons[me].info.state = Cn;
                } else if ((this.current_view & c) === c) {
                this.buttons[Ce].info.state = Cn;
                } else if ((this.current_view & D) === D) {
                this.buttons[De].info.state = Cn;
                } else if ((this.current_view & b) === b) {
                this.buttons[ve].info.state = Cn;
                } else if ((this.current_view & N) === N) {
                this.buttons[ce].info.state = Cn;
                } else if ((this.current_view & m) === m || (this.current_view & g) === g || (this.current_view & M) === M || (this.current_view & L) === L || (this.current_view & w) === w || (this.current_view & G) === G || (this.current_view & W) === W) {
                this.buttons[Ne].info.state = Cn;
                } else if ((this.current_view & V) === V || (this.current_view & Y) === Y || (this.current_view & K) === K || (this.current_view & F) === F || (this.current_view & x) === x || (this.current_view & X) === X) {
                this.buttons[De].info.state = Cn;
                } else if ((this.current_view & Z) === Z || (this.current_view & $) === $ || (this.current_view & Q) === Q) {
                this.buttons[be].info.state = Cn;
                } else if ((this.current_view & ee) === ee) {
                this.buttons[ve].info.state = Cn;
                }
                if ((this.current_view & c) === c) {
                if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
                    this.leaderboard_range = this.LEADERBOARD_ALL;
                    this.buttons[this.LEADERBOARD_ALL].info.active = Re;
                    this.buttons[this.LEADERBOARD_WEEK].info.active = Re;
                    this.buttons[this.LEADERBOARD_TODAY].info.active = Re;
                } else {
                    this.buttons[this.LEADERBOARD_ALL].info.active = he;
                    this.buttons[this.LEADERBOARD_WEEK].info.active = he;
                    this.buttons[this.LEADERBOARD_TODAY].info.active = he;
                }
                if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
                    this.buttons[this.LEADERBOARD_TOTAL].info.state = Cn;
                } else if (this.leaderboard_mode === this.LEADERBOARD_NORMAL) {
                    this.buttons[this.LEADERBOARD_NORMAL].info.state = Cn;
                }
                if (this.leaderboard_range === this.LEADERBOARD_ALL) {
                    this.buttons[this.LEADERBOARD_ALL].info.state = Cn;
                } else if (this.leaderboard_range === this.LEADERBOARD_WEEK) {
                    this.buttons[this.LEADERBOARD_WEEK].info.state = Cn;
                } else if (this.leaderboard_range === this.LEADERBOARD_TODAY) {
                    this.buttons[this.LEADERBOARD_TODAY].info.state = Cn;
                }
                if (this.leaderboard_sorted === this.LEADERBOARD_KILL) {
                    this.buttons[this.LEADERBOARD_KILL].info.state = Cn;
                } else if (this.leaderboard_sorted === this.LEADERBOARD_SCORE) {
                    this.buttons[this.LEADERBOARD_SCORE].info.state = Cn;
                } else if (this.leaderboard_sorted === this.LEADERBOARD_TIME) {
                    this.buttons[this.LEADERBOARD_TIME].info.state = Cn;
                }
                if (this.leaderboard_season === 0) {
                    this.buttons[this.LEADERBOARD_SEASON1].info.state = Cn;
                }
                }
                if ((this.current_view & b) === b && this.profile_season === 0) {
                this.buttons[Ve].info.state = Cn;
                }
                if ((this.current_view & C) === C && Yn.privateServer === 0) {
                if (this.buttons[ye].in_button(Fn.pos)) {
                    this.buttons[ye].hint = window.Math.min(1, this.buttons[ye].hint + Xn * 1.5);
                } else {
                    this.buttons[ye].hint = window.Math.max(0, this.buttons[ye].hint - Xn * 1.5);
                }
                if (this.buttons[pe].in_button(Fn.pos)) {
                    this.buttons[pe].hint = window.Math.min(1, this.buttons[pe].hint + Xn * 1.5);
                } else {
                    this.buttons[pe].hint = window.Math.max(0, this.buttons[pe].hint - Xn * 1.5);
                }
                if (this.buttons[ge].in_button(Fn.pos)) {
                    this.buttons[ge].hint = window.Math.min(1, this.buttons[ge].hint + Xn * 1.5);
                } else {
                    this.buttons[ge].hint = window.Math.max(0, this.buttons[ge].hint - Xn * 1.5);
                }
                }
                var I = 1;
                if ((this.current_view & (g | M | L | w | G | W)) > 1) {
                r = S.ARROW_SPIN;
                i.save();
                i.translate(z, Ae + r.height / 4);
                if (this.spin === 1) {
                    this.spin_effect += Xn / 3;
                    I = this.spin_target - 100 / window.Math.pow(1 + this.spin_effect, 1 + this.spin_effect);
                    i.rotate(I);
                }
                Xo(i, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                i.restore();
                }
                if (Yn.privateServer === 0) {
                if (Yn.current_mode === WORLD.MODE_PVP) {
                    this.buttons[ye].info.state = Cn;
                } else if (Yn.current_mode === WORLD.MODE_COMMUNITY) {
                    this.buttons[pe].info.state = Cn;
                } else if (Yn.current_mode === WORLD.MODE_EXPERIMENTAL) {
                    this.buttons[ge].info.state = Cn;
                }
                }
                for (var E = 1; E < this.buttons.length; E++) {
                if (this.buttons[E].info.active === he) {
                    this.buttons[E].draw(i);
                }
                }
                this.bkgd[0].draw(i);
                if ((this.current_view & (j | q)) > 0) {
                r = this.new_nickname_img;
                Xo(i, r, z - r.width / 4, 138, r.width / 2, r.height / 2);
                }
                var _ = window.Math.max(1, window.Math.min(18, window.Math.floor((Gn.lvl + 3) / 2)));
                this.bkgd[_].active = he;
                this.bkgd[_].draw(i);
                this.bkgd[_].active = Re;
                this.buttons[0].draw(i);
                if ((this.current_view & (D | Y | F | V | x)) > 1) {
                var s = (this.current_view & (Y | F | V | x)) > 1 ? -190 : 0;
                r = re[ItemType.BAG][this.bag][this.day_mode];
                Xo(i, r, z - r.width / 4 + s, 183, r.width / 2, r.height / 2);
                this.breath = (this.breath + Xn * 1000) % 2000;
                var R = (this.breath < 1000) * 4.5 ? this.breath / 1000 : (2000 - this.breath) / 1000;
                r = re[ItemType.BOOK][this.book][this.day_mode];
                Xo(i, r, z - r.width / 4 - 62 + R + s, 240, r.width / 2, r.height / 2);
                r = re[ItemType.HAND][this.skin][this.day_mode];
                Xo(i, r, z - r.width / 4 - 54 + R + s, 272, r.width / 2, r.height / 2);
                Xo(i, r, z - r.width / 4 + 54 - R + s, 272, r.width / 2, r.height / 2);
                r = re[SPRITE.BODY][this.skin][this.day_mode];
                Xo(i, r, z - r.width / 4 + s, 222, r.width / 2, r.height / 2);
                r = re[SPRITE.ACCESSORY][this.accessory][this.day_mode];
                Xo(i, r, z - r.width / 4 + s, 222, r.width / 2, r.height / 2);
                }
                if ((this.current_view & D) === D) {
                r = re[SPRITE.CRATE][this.crate][this.day_mode];
                Xo(i, r, z - r.width / 4 - 61, 406 - r.height / 4, r.width / 2, r.height / 2);
                r = re[SPRITE.CRATE][this.dead][this.day_mode];
                Xo(i, r, z - r.width / 4 + 53, 406 - r.height / 4, r.width / 2, r.height / 2);
                }
                if ((this.current_view & K) === K) {
                r = re[SPRITE.CRATE][this.dead][this.day_mode];
                Xo(i, r, z - r.width / 4 - 200, 268 - r.height / 4, r.width / 2, r.height / 2);
                }
                if ((this.current_view & X) === X) {
                r = re[SPRITE.CRATE][this.crate][this.day_mode];
                Xo(i, r, z - r.width / 4 - 200, 268 - r.height / 4, r.width / 2, r.height / 2);
                }
                if ((this.current_view & (Y | F | V | x | K | X)) > 1) {
                for (E = 1; E < this.buttons.length; E++) {
                    if ((this.buttons[E].view & this.current_view) != 0) {
                    var h = this.buttons[E].info;
                    if (h.cosmeticId >= 0) {
                        r = h.cosmeticType[h.cosmeticId].day;
                        Xo(i, r, h.translate.x - r.width / 8 + 44.5, h.translate.y - r.height / 8 + 45.5, r.width / 4, r.height / 4);
                        if (h.unlocked !== 1) {
                        r = S.RED_LOCKED;
                        Xo(i, r, h.translate.x - r.width / 4 + 44.5, h.translate.y - r.height / 4 + 44.5, r.width / 2, r.height / 2);
                        }
                    }
                    }
                }
                r = this.cosmetic_name;
                Xo(i, r, z - 312, 375, r.width / 2, r.height / 2);
                r = this.cosmetic_author;
                Xo(i, r, z - 312, 395, r.width / 2, r.height / 2);
                }
                if (this.bread !== this.previous_bread) {
                this.previous_bread = this.bread;
                this.bread_img = Nn("" + this.bread, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
                }
                Xo(i, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2);
                if (this.lvl !== this.previous_lvl) {
                this.previous_lvl = this.lvl;
                this.lvl_img = Nn("LVL " + (this.lvl + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, undefined, undefined, "#3F3019", 20);
                }
                Xo(i, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2);
                if (Yn.privateServer === 0) {
                var d;
                if ((d = this.buttons[ye].hint) > 0) {
                    r = S.NORMAL_MODE_HOVER;
                    Xo(i, r, z - r.width / 4, -36 - r.height * v.ease_in_out_quad(1 - d) / 2, r.width / 2, r.height / 2);
                }
                if ((d = this.buttons[pe].hint) > 0) {
                    r = S.MODE_COMMUNITY_HOVER;
                    Xo(i, r, z - r.width / 4, -36 - r.height * v.ease_in_out_quad(1 - d) / 2, r.width / 2, r.height / 2);
                }
                if ((d = this.buttons[ge].hint) > 0) {
                    r = S.MODE_EXPERIMENTAL_HOVER;
                    Xo(i, r, z - r.width / 4, -36 - r.height * v.ease_in_out_quad(1 - d) / 2, r.width / 2, r.height / 2);
                }
                }
                if (this.spin === 1 && window.Math.abs(I - this.spin_target) < 0.006) {
                i.globalAlpha = window.Math.min(1, this.spin_win_effect * 3);
                r = S.SPIN_LIGHT;
                i.save();
                i.translate(z, 260);
                this.spin_win_effect += Xn;
                i.rotate(this.spin_win_effect);
                Xo(i, r, -r.width / 2, -r.height / 2, r.width, r.height);
                i.restore();
                R = 1.05 + window.Math.sin(this.spin_win_effect * 5) * 0.05;
                if (this.spin_type === 0) {
                    var u = R * (r = ne.SKIN[this.spin_win].day).width;
                    var A = R * r.height;
                    Xo(i, r, z - u / 2, 260 - A / 2, u, A);
                } else if (this.spin_type === 1) {
                    u = R * (r = ne.SKIN[0].day).width;
                    A = R * r.height;
                    Xo(i, r, z - u / 2, 260 - A / 2, u, A);
                    u = R * (r = ne.ACCESSORY[this.spin_win].day).width;
                    A = R * r.height;
                    Xo(i, r, z - u / 2, 260 - A / 2, u, A);
                } else if (this.spin_type === 2) {
                    u = R * (r = ne.BAG[this.spin_win].day).width;
                    A = R * r.height;
                    Xo(i, r, z - u / 2, 180 - A / 2, u, A);
                    u = R * (r = ne.SKIN[0].day).width;
                    A = R * r.height;
                    Xo(i, r, z - u / 2, 260 - A / 2, u, A);
                } else if (this.spin_type === 3) {
                    u = R * (r = ne.BOOK[this.spin_win].day).width;
                    A = R * r.height;
                    i.save();
                    i.translate(z, 260);
                    i.rotate(window.Math.PI);
                    Xo(i, r, -u / 2, -A / 2, u, A);
                    i.restore();
                } else if (this.spin_type === 4) {
                    u = R * (r = ne.CRATE[this.spin_win].day).width;
                    A = R * r.height;
                    Xo(i, r, z - u / 2, 260 - A / 2, u, A);
                }
                r = this.spin_name;
                Xo(i, r, z - r.width / 4, 340, r.width / 2, r.height / 2);
                r = this.spin_author;
                Xo(i, r, z - r.width / 4, 365, r.width / 2, r.height / 2);
                if (this.spin_win_effect > 6) {
                    this.spin = 0;
                    oe(m);
                }
                i.globalAlpha = 1;
                }
                Vn.alert.draw();
                if (o.waiting) {
                this.loading.draw();
                }
            };
            var l = 0;
            var C = window.Math.pow(2, l++);
            var b = window.Math.pow(2, l++);
            this.__PROFILE__ = b;
            var N = window.Math.pow(2, l++);
            var D = window.Math.pow(2, l++);
            var m = window.Math.pow(2, l++);
            var c = window.Math.pow(2, l++);
            var P = window.Math.pow(2, l++);
            this.__BUY__ = P;
            var y = window.Math.pow(2, l++);
            var p = window.Math.pow(2, l++);
            var g = window.Math.pow(2, l++);
            var M = window.Math.pow(2, l++);
            var L = window.Math.pow(2, l++);
            var w = window.Math.pow(2, l++);
            var G = window.Math.pow(2, l++);
            var W = window.Math.pow(2, l++);
            var V = window.Math.pow(2, l++);
            var K = window.Math.pow(2, l++);
            var Y = window.Math.pow(2, l++);
            var F = window.Math.pow(2, l++);
            var x = window.Math.pow(2, l++);
            var X = window.Math.pow(2, l++);
            var q = window.Math.pow(2, l++);
            var j = window.Math.pow(2, l++);
            var Z = window.Math.pow(2, l++);
            this.__SERVER_LOCATION__ = Z;
            var $ = window.Math.pow(2, l++);
            this.__SERVER_DURATION__ = $;
            var Q = window.Math.pow(2, l++);
            this.__SERVER_ACCESS__ = Q;
            var ee = window.Math.pow(2, l++);
            function te(e, t, i) {
                for (var T = 0; T < o.bkgd.length; T++) {
                if ((o.bkgd[T].view & e) != 0) {
                    o.bkgd[T].active = t;
                }
                }
                for (T = 0; T < o.buttons.length; T++) {
                if ((o.buttons[T].view & e) != 0) {
                    o.buttons[T].info.active = t;
                }
                }
                for (T = 0; T < o.css.length; T++) {
                if ((o.css[T].view & e) != 0) {
                    o.css[T].style.display = i;
                }
                }
            }
            function ie() {
                var e = window.Number(Jn.get("starve_crate"));
                var t = window.Number(Jn.get("starve_dead"));
                var i = window.Number(Jn.get("starve_book"));
                var o = window.Number(Jn.get("starve_bag"));
                var T = window.Number(Jn.get("starve_skin"));
                var r = window.Number(Jn.get("starve_accessory"));
                if (Gn.unlock.skin[Gn.skin] <= 0) {
                Gn.skin = Gn.unlock.skin[T] > 0 ? T : 0;
                }
                if (Gn.unlock.book[Gn.book] <= 0) {
                Gn.book = Gn.unlock.book[i] > 0 ? i : 0;
                }
                if (Gn.unlock.dead[Gn.dead] <= 0) {
                Gn.dead = Gn.unlock.dead[t] > 0 ? t : 0;
                }
                if (Gn.unlock.crate[Gn.crate] <= 0) {
                Gn.crate = Gn.unlock.crate[e] > 0 ? e : 0;
                }
                if (Gn.unlock.accessory[Gn.accessory] <= 0) {
                Gn.accessory = Gn.unlock.accessory[r] > 0 ? r : 0;
                }
                if (Gn.unlock.bag[Gn.bag] <= 0) {
                Gn.bag = Gn.unlock.bag[o] > 0 ? o : 0;
                }
            }
            function oe(e) {
                if (o.in_this_view !== false) {
                te(y, Re, "none");
                te(p, Re, "none");
                ie();
                if (e !== o.current_view && o.spin < 1) {
                    te(o.current_view, Re, "none");
                    o.current_view = e;
                    te(o.current_view, he, "inline-block");
                }
                }
            }
            this.current_view = C;
            this.select_subview = oe;
            this.play_game = function () {
                if (o.waiting === false) {
                Vn.reconnect.enabled = false;
                o.waiting = true;
                ie();
                Yn.connect();
                }
            };
            var Te = 1;
            var ae = 2;
            var Ie = 4;
            var Ee = 8;
            var _e = 16;
            var se = 32;
            var Re = 0;
            var he = 1;
            this.login = {
                id: window.document.getElementById("login_block"),
                style: window.document.getElementById("login_block").style,
                input: window.document.getElementById("login_input"),
                input_: window.document.getElementById("password_input"),
                up: window.document.getElementById("signup"),
                in: window.document.getElementById("login"),
                active: he,
                position: Ie | _e,
                view: N,
                translate: {
                x: 0,
                y: 0,
                _x: -200,
                _y: 100
                }
            };
            if (window.innerWidth < 1300) {
                this.nickname = {
                id: window.document.getElementById("nickname_block"),
                style: window.document.getElementById("nickname_block").style,
                input: window.document.getElementById("nickname_input"),
                active: he,
                position: Ie | Te,
                view: C,
                translate: {
                    x: 0,
                    y: 0,
                    _x: 200,
                    _y: 184
                }
                };
            } else {
                this.nickname = {
                id: window.document.getElementById("nickname_block"),
                style: window.document.getElementById("nickname_block").style,
                input: window.document.getElementById("nickname_input"),
                active: he,
                position: Ie | _e,
                view: C,
                translate: {
                    x: 0,
                    y: 0,
                    _x: -180,
                    _y: 184
                }
                };
            }
            this.nickname.id.addEventListener("keyup", function (e) {
                e.preventDefault();
                if (e.keyCode == 13 && !o.waiting && !o.settings) {
                o.play_game();
                }
            });
            this.login.in.addEventListener("click", async () => {
                if (o.login.input.value.length < 3) {
                return Yn.new_alert("Login must have more than 2 characters", "#a60f1b");
                }
                if (o.login.input_.value.length < 6) {
                return Yn.new_alert("Password must have more than 5 characters", "#a60f1b");
                }
                if (o.login.input.value.length > 16) {
                return Yn.new_alert("Login must have less than 16 characters", "#a60f1b");
                }
                if (o.login.input_.value.length > 16) {
                return Yn.new_alert("Password must have less than 16 characters", "#a60f1b");
                }
                const e = await fetch("/login", {
                method: "POST",
                headers: {
                    "Content-type": "application/json"
                },
                body: window.JSON.stringify({
                    login: o.login.input.value,
                    password: o.login.input_.value
                })
                });
                let t = await e.text();
                if (t[0] !== "{") {
                return Yn.new_alert(t, "#a60f1b");
                }
                oe(C);
                o.login_restore_data(window.JSON.parse(t));
                Vn.login = o.login.input.value;
                Vn.password = o.login.input_.value;
                Yn.new_alert("Log in account", "#27ba36");
                if (remember_checkbox.checked) {
                Jn.set("starve_login", Vn.login);
                Jn.set("starve_password", Vn.password);
                }
            });
            this.login.up.addEventListener("click", async () => {
                if (o.login.input.value.length < 3) {
                return Yn.new_alert("Login must have more than 2 characters", "#a60f1b");
                }
                if (o.login.input_.value.length < 6) {
                return Yn.new_alert("Password must have more than 5 characters", "#a60f1b");
                }
                if (o.login.input.value.length > 16) {
                return Yn.new_alert("Login must have less than 16 characters", "#a60f1b");
                }
                if (o.login.input_.value.length > 16) {
                return Yn.new_alert("Password must have less than 16 characters", "#a60f1b");
                }
                const e = await fetch("/register", {
                method: "POST",
                headers: {
                    "Content-type": "application/json"
                },
                body: window.JSON.stringify({
                    login: o.login.input.value,
                    password: o.login.input_.value
                })
                });
                let t = await e.text();
                if (t[0] !== "{") {
                return Yn.new_alert(t, "#a60f1b");
                }
                oe(C);
                o.login_restore_data(window.JSON.parse(t));
                Vn.login = o.login.input.value;
                Vn.password = o.login.input_.value;
                Yn.new_alert("Account successfully registered", "#27ba36");
            });
            this.nickname.input.value = Jn.get("starve_nickname") ? Jn.get("starve_nickname") : "";
            this.account_nickname = {
                id: window.document.getElementById("account_nickname_block"),
                style: window.document.getElementById("account_nickname_block").style,
                input: window.document.getElementById("account_nickname_input"),
                active: Re,
                position: Ie | _e,
                view: b,
                translate: {
                x: 0,
                y: 0,
                _x: -122,
                _y: 110
                }
            };
            if (window.innerWidth < 1300) {
                this.server_list = {
                id: window.document.getElementById("servselect"),
                style: window.document.getElementById("servselect").style,
                active: he,
                position: Ie | Te,
                view: C,
                translate: {
                    x: 0,
                    y: 0,
                    _x: 208,
                    _y: 225
                }
                };
            } else {
                this.server_list = {
                id: window.document.getElementById("servselect"),
                style: window.document.getElementById("servselect").style,
                active: he,
                position: Ie | _e,
                view: C,
                translate: {
                    x: 0,
                    y: 0,
                    _x: -180,
                    _y: 225
                }
                };
            }
            this.leaderboard = {
                id: window.document.getElementById("leaderboard"),
                style: window.document.getElementById("leaderboard").style,
                active: Re,
                position: Ie | _e,
                view: c,
                translate: {
                x: 0,
                y: 0,
                _x: -294.5,
                _y: 190
                }
            };
            this.stats_box = {
                id: window.document.getElementById("stats_box"),
                style: window.document.getElementById("stats_box").style,
                active: Re,
                position: Ie | _e,
                view: b,
                translate: {
                x: 0,
                y: 0,
                _x: 125,
                _y: 187
                }
            };
            this.serverAddressBlock = {
                id: window.document.getElementById("serverAddressBlock"),
                style: window.document.getElementById("serverAddressBlock").style,
                input: window.document.getElementById("serverAddressInput"),
                active: Re,
                position: Ie | _e,
                view: Q,
                translate: {
                x: 0,
                y: 0,
                _x: -220,
                _y: 350
                }
            };
            l = 0;
            this.css = [];
            this.css[l++] = this.nickname;
            this.css[l++] = this.login;
            this.css[l++] = this.server_list;
            this.css[l++] = this.leaderboard;
            this.css[l++] = this.account_nickname;
            this.css[l++] = this.stats_box;
            this.css[l++] = this.serverAddressBlock;
            l = 0;
            this.bkgd = [];
            this.bkgd[l++] = mn(S.AVATAR_RESUME, he, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL1, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL2, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL3, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL4, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL5, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL6, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL7, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL8, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL9, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL10, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL11, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL12, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL13, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL14, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL15, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL16, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL17, Re, 0, 0, Te);
            this.bkgd[l++] = mn(S.AVATAR_LVL18, Re, 0, 0, Te);
            if (window.innerWidth < 1300) {
                this.bkgd[l] = mn(S.LOGO_INTERFACE, he, 200, 100, Ie | Te);
            } else {
                this.bkgd[l] = mn(S.LOGO_INTERFACE, he, -753 / 4, 100, Ie | _e);
            }
            this.bkgd[l++].view = C;
            this.bkgd[l++] = mn(S.LINKS_BG, he, 403, -10, ae);
            if (window.innerWidth > 1300) {
                this.bkgd[l] = mn(S.CHANGELOG_BOX, he, -885 / 4, -159.5, Ee | _e);
                this.bkgd[l++].view = C;
            }
            this.bkgd[l] = mn(S.PROFILE_BOX, Re, -323.25, 100, Ie | _e);
            this.bkgd[l++].view = b;
            this.bkgd[l] = mn(S.SKINS_BOX, Re, -356.25, 100, Ie | _e);
            this.bkgd[l++].view = D;
            this.bkgd[l] = mn(S.SHOP_BOX, Re, -402, 130, Ie | _e);
            this.bkgd[l++].view = m;
            this.bkgd[l] = mn(S.SERVER_LOCATION_BOX, Re, -279.25, 130, Ie | _e);
            this.bkgd[l++].view = Z;
            this.bkgd[l] = mn(S.SERVER_DURATION_BOX, Re, -305.5, 130, Ie | _e);
            this.bkgd[l++].view = $;
            this.bkgd[l] = mn(S.SERVER_ACCESS_BOX, Re, -305.5, 100, Ie | _e);
            this.bkgd[l++].view = Q;
            this.bkgd[l] = mn(S.SEASON5_BOX, Re, -S.SEASON5_BOX.width / 4 - 350, -15, Ie | _e);
            this.bkgd[l++].view = ee;
            this.bkgd[l] = mn(S.LEADERBOARD_BOX, Re, -306.5, 100, Ie | _e);
            this.bkgd[l++].view = c;
            this.bkgd[l] = mn(S.BUY_BREAD_BOX, Re, -345.25, 80, Ie | _e);
            this.bkgd[l++].view = P;
            this.bkgd[l] = mn(S.SPIN1, Re, -385.5, 150, Ie | _e);
            this.bkgd[l++].view = g;
            var de = 3.6;
            var ue = this.create_spin([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", de * 57]]);
            this.bkgd[l] = mn(ue, Re, -ue.width / 4, 178, Ie | _e);
            this.bkgd[l++].view = g;
            this.play_spin = function (e, t, i) {
                var T;
                o.spin = 1;
                o.spin_effect = 0;
                o.spin_win_effect = 0;
                o.spin_target = e;
                o.spin_type = t;
                var r = 0;
                if (t === 0) {
                for (let e = 0; e < ne.SKIN.length && (r = e, i !== ne.SKIN[e].id); e++);
                T = ne.SKIN[r];
                o.unlock.skin[r] = 1;
                } else if (t === 1) {
                for (let e = 0; e < ne.ACCESSORY.length && (r = e, i !== ne.ACCESSORY[e].id); e++);
                T = ne.ACCESSORY[r];
                o.unlock.accessory[r] = 1;
                } else if (t === 2) {
                for (let e = 0; e < ne.BAG.length && (r = e, i !== ne.BAG[e].id); e++);
                T = ne.BAG[r];
                o.unlock.bag[r] = 1;
                } else if (t === 3) {
                for (let e = 0; e < ne.BOOK.length && (r = e, i !== ne.BOOK[e].id); e++);
                T = ne.BOOK[r];
                o.unlock.book[r] = 1;
                } else if (t === 4) {
                for (let e = 0; e < ne.CRATE.length && (r = e, i !== ne.CRATE[e].id); e++);
                T = ne.CRATE[r];
                o.unlock.crate[r] = 1;
                o.unlock.dead[r] = 1;
                }
                o.spin_win = r;
                o.spin_author = Nn("by " + T.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 24);
                o.spin_name = Nn(T.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 20);
            };
            this.spin = 0;
            this.spin_effect = 0;
            this.spin_target = 0;
            this.spin_type = 0;
            this.spin_win_effect = 0;
            this.spin_author = undefined;
            this.spin_name = undefined;
            var Ae = 197;
            this.bkgd[l] = mn(S.SPIN2, Re, -385.5, 150, Ie | _e);
            this.bkgd[l++].view = G;
            ue = this.create_spin([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", de * 57]]);
            this.bkgd[l] = mn(ue, Re, -ue.width / 4, 178, Ie | _e);
            this.bkgd[l++].view = G;
            this.bkgd[l] = mn(S.SPIN3, Re, -385.5, 150, Ie | _e);
            this.bkgd[l++].view = L;
            ue = this.create_spin([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", de * 57]]);
            this.bkgd[l] = mn(ue, Re, -ue.width / 4, 178, Ie | _e);
            this.bkgd[l++].view = L;
            this.bkgd[l] = mn(S.SPIN4, Re, -385.5, 150, Ie | _e);
            this.bkgd[l++].view = w;
            ue = this.create_spin([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", de * 57]]);
            this.bkgd[l] = mn(ue, Re, -ue.width / 4, 178, Ie | _e);
            this.bkgd[l++].view = w;
            this.bkgd[l] = mn(S.SPIN5, Re, -385.5, 150, Ie | _e);
            this.bkgd[l++].view = M;
            ue = this.create_spin([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", de * 57]]);
            this.bkgd[l] = mn(ue, Re, -ue.width / 4, 178, Ie | _e);
            this.bkgd[l++].view = M;
            this.bkgd[l] = mn(S.SPIN6, Re, -385.5, 150, Ie | _e);
            this.bkgd[l++].view = W;
            ue = this.create_spin([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", de * 57]]);
            this.bkgd[l] = mn(ue, Re, -ue.width / 4, 178, Ie | _e);
            this.bkgd[l++].view = W;
            this.bkgd[l] = mn(S.CUSTOM_SKIN_BOX, Re, -341.5, 100, Ie | _e);
            this.bkgd[l++].view = V;
            this.bkgd[l] = mn(S.ACCESSORIES_BOX, Re, -341.5, 100, Ie | _e);
            this.bkgd[l++].view = x;
            this.bkgd[l] = mn(S.BAG_BOX, Re, -341.5, 100, Ie | _e);
            this.bkgd[l++].view = Y;
            this.bkgd[l] = mn(S.BOOK_BOX, Re, -341.5, 100, Ie | _e);
            this.bkgd[l++].view = F;
            this.bkgd[l] = mn(S.CRATE_BOX, Re, -341.5, 100, Ie | _e);
            this.bkgd[l++].view = K;
            this.bkgd[l] = mn(S.LOOT_BOX, Re, -341.5, 100, Ie | _e);
            this.bkgd[l++].view = X;
            var Oe = l++;
            this.bkgd[Oe] = mn(S.BAG_REMAIN_BOX, Re, 484, 0, Ie);
            var le = l++;
            this.bkgd[le] = mn(S.SERVER_REMAIN_BOX, Re, 812.5, 0, Ie);
            this.bkgd[l] = mn(S.LOCKED_CUSTOM_ALERT, Re, -189.5, -5, Ie | _e);
            this.bkgd[l++].view = p;
            this.bkgd[l] = mn(S.LOCKED_SKIN_ALERT, Re, -189.5, -5, Ie | _e);
            this.bkgd[l++].view = y;
            var Se = l++;
            this.bkgd[Se] = mn(S.GAUGE, he, 93, 30, Ie);
            this.bkgd[l] = mn(S.CHANGE_NICKNAME1_BOX, Re, -173, 110, Ie | _e);
            this.bkgd[l++].view = q;
            this.bkgd[l] = mn(S.CHANGE_NICKNAME0_BOX, Re, -173, 110, Ie | _e);
            this.bkgd[l++].view = j;
            l = 0;
            this.buttons = [];
            this.buttons[l] = Dn(50, 57, 0, [S.BUY_BREAD_OUT, S.BUY_BREAD_IN, S.BUY_BREAD_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                oe(P);
                } else {
                oe(N);
                }
            }, 320, 0, Te, he);
            l++;
            if (window.innerWidth < 1300) {
                this.buttons[l] = Dn(202, 97, 0, [S.PLAY_BUTTON_OUT, S.PLAY_BUTTON_IN, S.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 462, 235, Ie | Te, he);
            } else {
                this.buttons[l] = Dn(202, 97, 0, [S.PLAY_BUTTON_OUT, S.PLAY_BUTTON_IN, S.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 74, 235, Ie | _e, he);
            }
            this.buttons[l].view = C;
            l++;
            if (window.innerWidth > 1300) {
                this.buttons[l] = Dn(355, 168, 0, [S.CHANGELOG_BUTTON_OUT, S.CHANGELOG_BUTTON_OUT, S.CHANGELOG_BUTTON_OUT], 1, 0, function () {
                window.open("./changelog.html", "_blank");
                }, -195, -115, Ee | _e, he);
                this.buttons[l++].view = C;
            }
            this.buttons[l++] = Dn(80, 80, 0, [S.DISCORD_BUTTON_OUT, S.DISCORD_BUTTON_IN, S.DISCORD_BUTTON_CLICK], 1, 0, function () {
                window.open("https://discord.gg/KqQaZYUrp8", "_blank");
            }, 60, 10, ae, he);
            var Ce = l++;
            this.buttons[Ce] = Dn(232, 142, 0, [S.ICONS_BOTTOM_BG_BUTTON_OUT, S.ICONS_BOTTOM_BG_BUTTON_IN, S.ICONS_BOTTOM_BG_BUTTON_CLICK], 1, 0, function () {
                oe(c);
                u(Gn.LEADERBOARD_ALL, Gn.LEADERBOARD_TOTAL, Gn.LEADERBOARD_SCORE, Gn.LEADERBOARD_SEASON5);
            }, -5, 494, Te, he);
            this.buttons[l++] = Dn(236, 165, 0, [S.LEADERBOARD_ICON, S.LEADERBOARD_ICON, S.LEADERBOARD_ICON], 1, 1, function () {
                oe(c);
            }, -5, 494, Te, he);
            var be = l++;
            this.buttons[be] = Dn(236, 165, 0, [S.ICONS_BG_BUTTON_OUT, S.ICONS_BG_BUTTON_IN, S.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                oe(Z);
            }, -5, 415, Te, he);
            this.buttons[l++] = Dn(236, 165, 0, [S.SERVER_ACCESS_ICON, S.SERVER_ACCESS_ICON, S.SERVER_ACCESS_ICON], 1, 1, function () {
                oe(Z);
            }, -5, 415, Te, he);
            var Ne = l++;
            this.buttons[Ne] = Dn(236, 165, 0, [S.ICONS_BG_BUTTON_OUT, S.ICONS_BG_BUTTON_IN, S.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, -5, 336, Te, he);
            this.buttons[l++] = Dn(236, 165, 0, [S.SHOP_ICON, S.SHOP_ICON, S.SHOP_ICON], 1, 1, function () {
                oe(m);
            }, -5, 336, Te, he);
            var De = l++;
            this.buttons[De] = Dn(236, 165, 0, [S.ICONS_BG_BUTTON_OUT, S.ICONS_BG_BUTTON_IN, S.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                oe(D);
            }, -5, 257, Te, he);
            this.buttons[l++] = Dn(236, 165, 0, [S.SKINS_ICON, S.SKINS_ICON, S.SKINS_ICON], 1, 1, function () {
                oe(D);
            }, -5, 257, Te, he);
            var me = l++;
            this.buttons[me] = Dn(236, 165, 0, [S.ICONS_BG_BUTTON_OUT, S.ICONS_BG_BUTTON_IN, S.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                oe(C);
            }, -5, 178, Te, he);
            this.buttons[l++] = Dn(236, 165, 0, [S.START_ICON, S.START_ICON, S.START_ICON], 1, 1, function () {
                oe(C);
            }, -5, 178, Te, he);
            var ce = l++;
            this.LOGIN_BUTTON = ce;
            this.buttons[ce] = Dn(324, 222, 0, [S.LOGIN_BUTTON_OUT, S.LOGIN_BUTTON_IN, S.LOGIN_BUTTON_CLICK], 1, 0, function () {
                oe(N);
            }, 0, 70, Te, he);
            var ve = l++;
            var Pe = l++;
            this.PROFILE_BUTTON = ve;
            this.PROFILE_BUTTON_2 = Pe;
            this.buttons[ve] = Dn(324, 222, 0, [S.PROFILE_BUTTON_OUT, S.PROFILE_BUTTON_IN, S.PROFILE_BUTTON_CLICK], 1, 0, function () {
                oe(b);
                Le(-1);
            }, 0, 70, Te, Re);
            this.buttons[Pe] = Dn(324, 222, 0, [S.PROFILE_ICON, S.PROFILE_ICON, S.PROFILE_ICON], 1, 1, function () {
                oe(b);
                Le(-1);
            }, 0, 70, Te, Re);
            if (Yn.privateServer === 0) {
                var ye = l++;
                if (window.innerWidth < 1300) {
                this.buttons[ye] = Dn(266, 176, 0, [S.NORMAL_MODE_OUT, S.NORMAL_MODE_IN, S.NORMAL_MODE_CLICK], 1, 0, function () {
                    Yn.select_gamemode(WORLD.MODE_PVP);
                }, 150, 300, Te | Ie, he);
                } else {
                this.buttons[ye] = Dn(266, 176, 0, [S.NORMAL_MODE_OUT, S.NORMAL_MODE_IN, S.NORMAL_MODE_CLICK], 1, 0, function () {
                    Yn.select_gamemode(WORLD.MODE_PVP);
                }, -200, 300, _e | Ie, he);
                }
                this.buttons[ye].view = C;
                this.buttons[ye].hint = 0;
                var pe = l++;
                if (window.innerWidth < 1300) {
                this.buttons[pe] = Dn(266, 176, 0, [S.MODE_COMMUNITY_OUT, S.MODE_COMMUNITY_IN, S.MODE_COMMUNITY_CLICK], 1, 0, function () {
                    Yn.select_gamemode(WORLD.MODE_COMMUNITY);
                }, 450, 300, Te | Ie, he);
                } else {
                this.buttons[pe] = Dn(266, 176, 0, [S.MODE_COMMUNITY_OUT, S.MODE_COMMUNITY_IN, S.MODE_COMMUNITY_CLICK], 1, 0, function () {
                    Yn.select_gamemode(WORLD.MODE_COMMUNITY);
                }, -60, 300, _e | Ie, he);
                }
                this.buttons[pe].view = C;
                this.buttons[pe].hint = 0;
                var ge = l++;
                this.buttons[ge] = Dn(266, 176, 0, [S.MODE_EXPERIMENTAL_OUT, S.MODE_EXPERIMENTAL_IN, S.MODE_EXPERIMENTAL_CLICK], 1, 0, function () {
                Yn.select_gamemode(WORLD.MODE_EXPERIMENTAL);
                }, window.innerWidth < 1300 ? 450 : 80, window.innerWidth < 1300 ? 400 : 300, (window.innerWidth < 1300 ? Te : _e) | Ie, he);
                this.buttons[ge].view = C;
                this.buttons[ge].hint = 0;
            }
            this.buttons[l] = Dn(87, 78, 0, [S.MODIFY_NAME_OUT, S.MODIFY_NAME_IN, S.MODIFY_NAME_CLICK], 1, 0, function () {
                Gn.generate_new_nickname();
                if (Gn.firstName === 0) {
                oe(j);
                } else {
                oe(q);
                }
            }, 127, 110, _e | Ie, Re);
            this.buttons[l++].view = b;
            this.buttons[l] = Dn(87, 78, 0, [S.LOGOUT_OUT, S.LOGOUT_IN, S.LOGOUT_CLICK], 1, 0, function () {
                Gn.kit = 0;
                Gn.bread = 0;
                Gn.score = 0;
                Vn.login = "";
                Vn.password = "";
                Gn.unlock_cosmetics();
                onUserLogout();
            }, 255, 110, _e | Ie, Re);
            this.buttons[l++].view = b;
            var Me = 20000;
            function Le(e, t) {
                if (t !== undefined) {
                Gn.profile_season = t;
                var i = Gn.seasons[t];
                Gn.score = i.score;
                Gn.kill = i.kill;
                Gn.death = i.death;
                Gn.time = i.time;
                Gn.bestScore = i.bestScore;
                Gn.bestKill = i.bestKill;
                Gn.bestTime = i.bestTime;
                Gn.scoreTotal = i.scoreTotal;
                }
                if (e === undefined) {
                e = Gn.current_mode_score;
                }
                if (e === undefined || e === -1) {
                e = 0;
                }
                Gn.current_mode_score = e;
                if (e <= 0) {
                window.document.getElementById("stats_box_time").innerHTML = Gn.time;
                window.document.getElementById("stats_box_kill").innerHTML = Gn.kill;
                window.document.getElementById("stats_box_score").innerHTML = Gn.score;
                }
            }
            this.xp_formula = function (e) {
                var t = Gn.level_formula(e);
                var i = t * t * Me;
                return (e -= i) / ((t + 1) * (t + 1) * Me - i);
            };
            this.level_formula = function (e) {
                return window.Math.floor(window.Math.sqrt(e / Me));
            };
            this.update_score = function (e) {
                Gn.lvl = Gn.level_formula(e);
                Gn.xp_dest = Gn.xp_formula(e);
                Gn.xp = 0;
                Gn.score = e;
            };
            this.login_restore_data = function (e) {
                Gn.buttons[Gn.LOGIN_BUTTON].info.active = 0;
                Gn.buttons[Gn.PROFILE_BUTTON].info.active = 1;
                Gn.buttons[Gn.PROFILE_BUTTON_2].info.active = 1;
                r();
                e.name.indexOf("Starver#");
                window.document.getElementById("account_nickname_input").value = e.name;
                Gn.bread = e.bread;
                var i = e.seasons;
                var T = i[i.length - 1];
                Gn.seasons = i;
                o.update_score(T.score);
                Gn.score = T.score;
                Gn.kill = T.kill;
                Gn.death = T.death;
                Gn.time = T.time;
                Gn.bestScore = T.bestScore;
                Gn.bestKill = T.bestKill;
                Gn.bestTime = T.bestTime;
                Gn.scoreTotal = T.scoreTotal;
                Gn.firstName = e.firstName;
                window.document.getElementById("serverAddressInput").value = t + "?server=" + e.privateServer;
                if (Gn.firstName === undefined) {
                Gn.firstName = 0;
                }
                Gn.privateServerTime = Date.now() + e.privateServerTime;
                if (window.Number(e.privateServerTime) > 0) {
                Gn.privateServerTime = Date.now() + window.Number(e.privateServerTime);
                }
                Gn.kit = Date.now() + e.kit;
                if (window.Number(e.kit) > 0) {
                Gn.kit = Date.now() + window.Number(e.kit);
                }
                var n = ne.SKIN;
                for (var a = 0; a < e.skins.length; a++) {
                if (e.skins[a] > 0) {
                    for (var I = 0; I < n.length; I++) {
                    if (n[I].id === a) {
                        o.unlock.skin[I] = 1;
                    }
                    }
                }
                }
                n = ne.ACCESSORY;
                a = 0;
                for (; a < e.accessories.length; a++) {
                if (e.accessories[a] > 0) {
                    for (I = 0; I < n.length; I++) {
                    if (n[I].id === a) {
                        o.unlock.accessory[I] = 1;
                    }
                    }
                }
                }
                n = ne.BOOK;
                a = 0;
                for (; a < e.books.length; a++) {
                if (e.books[a] > 0) {
                    for (I = 0; I < n.length; I++) {
                    if (n[I].id === a) {
                        o.unlock.book[I] = 1;
                    }
                    }
                }
                }
                n = ne.BAG;
                a = 0;
                for (; a < e.bags.length; a++) {
                if (e.bags[a] > 0) {
                    for (I = 0; I < n.length; I++) {
                    if (n[I].id === a) {
                        o.unlock.bag[I] = 1;
                    }
                    }
                }
                }
                n = ne.CRATE;
                a = 0;
                for (; a < e.crates.length; a++) {
                if (e.crates[a] > 0) {
                    for (I = 0; I < n.length; I++) {
                    if (n[I].id === a) {
                        o.unlock.crate[I] = 1;
                        o.unlock.dead[I] = 1;
                    }
                    }
                }
                }
            };
            this.login_after = function () {
                window.onUserLogin = function () {
                oe(C);
                (async e => {
                    const i = await fetch(t + "login?login=" + Vn.login);
                    await i.json();
                })(o.login_restore_data);
                };
                if ($n === 1) {
                window.onUserLogin();
                }
            };
            window.onUserLogout = function () {
                Gn.buttons[Gn.LOGIN_BUTTON].info.active = 1;
                Gn.buttons[Gn.PROFILE_BUTTON].info.active = 0;
                Gn.buttons[Gn.PROFILE_BUTTON_2].info.active = 0;
                oe(C);
            };
            this.isUserLogged = function () {
                return Gn.buttons[Gn.PROFILE_BUTTON].info.active;
            };
            this.buttons[l] = Dn(461, 105, 0, [S.GET_MORE_BUTTON_OUT, S.GET_MORE_BUTTON_IN, S.GET_MORE_BUTTON_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                oe(P);
                } else {
                oe(N);
                }
            }, -100, 80, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.LEADERBOARD_LEVEL = l;
            this.buttons[l] = Dn(97, 66, 0, [S.LVL_LEADERBOARD_OUT, S.LVL_LEADERBOARD_IN, S.LVL_LEADERBOARD_CLICK], 1, 0, function () {}, -14, 151, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.LEADERBOARD_KILL = l;
            this.buttons[l] = Dn(135, 66, 0, [S.KILL_LEADERBOARD_OUT, S.KILL_LEADERBOARD_IN, S.KILL_LEADERBOARD_CLICK], 1, 0, function () {
                u(undefined, undefined, Gn.LEADERBOARD_KILL);
            }, 37.5, 151, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.LEADERBOARD_TIME = l;
            this.buttons[l] = Dn(160, 66, 0, [S.TIME_LEADERBOARD_OUT, S.TIME_LEADERBOARD_IN, S.TIME_LEADERBOARD_CLICK], 1, 0, function () {
                u(undefined, undefined, Gn.LEADERBOARD_TIME);
            }, 107.5, 151, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.LEADERBOARD_SCORE = l;
            this.buttons[l] = Dn(207, 66, 0, [S.SCORE_LEADERBOARD_OUT, S.SCORE_LEADERBOARD_IN, S.SCORE_LEADERBOARD_CLICK], 1, 0, function () {
                u(undefined, undefined, Gn.LEADERBOARD_SCORE);
            }, 190.5, 151, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.LEADERBOARD_TODAY = l;
            this.buttons[l] = Dn(144, 66, 0, [S.TODAY_LEADERBOARD_OUT, S.TODAY_LEADERBOARD_IN, S.TODAY_LEADERBOARD_CLICK], 1, 0, function () {
                u(Gn.LEADERBOARD_TODAY);
            }, 103.5, 110, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.LEADERBOARD_WEEK = l;
            this.buttons[l] = Dn(124, 66, 0, [S.WEEK_LEADERBOARD_OUT, S.WEEK_LEADERBOARD_IN, S.WEEK_LEADERBOARD_CLICK], 1, 0, function () {
                u(Gn.LEADERBOARD_WEEK);
            }, 177.5, 110, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.LEADERBOARD_ALL = l;
            this.buttons[l] = Dn(104, 66, 0, [S.ALL_LEADERBOARD_OUT, S.ALL_LEADERBOARD_IN, S.ALL_LEADERBOARD_CLICK], 1, 0, function () {
                u(Gn.LEADERBOARD_ALL);
            }, 242, 110, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.LEADERBOARD_SEASON1 = l;
            this.buttons[l] = Dn(183, 66, 0, [S.SEASON1_LEADERBOARD_OUT, S.SEASON1_LEADERBOARD_IN, S.SEASON1_LEADERBOARD_CLICK], 1, 0, function () {
                u(undefined, undefined, undefined, Gn.LEADERBOARD_SEASON1);
            }, -290, 521, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.buttons[l] = Dn(232, 352, 0, [S.CURRENCY1_OUT, S.CURRENCY1_IN, S.CURRENCY1_CLICK], 1, 0, function () {}, -330, 135, _e | Ie, Re);
            this.buttons[l++].view = P;
            this.buttons[l] = Dn(232, 352, 0, [S.CURRENCY2_OUT, S.CURRENCY2_IN, S.CURRENCY2_CLICK], 1, 0, function () {}, -195, 135, _e | Ie, Re);
            this.buttons[l++].view = P;
            this.buttons[l] = Dn(243, 374, 0, [S.CURRENCY3_OUT, S.CURRENCY3_IN, S.CURRENCY3_CLICK], 1, 0, function () {}, -60, 130, _e | Ie, Re);
            this.buttons[l++].view = P;
            this.buttons[l] = Dn(232, 352, 0, [S.CURRENCY4_OUT, S.CURRENCY4_IN, S.CURRENCY4_CLICK], 1, 0, function () {}, 78, 135, _e | Ie, Re);
            this.buttons[l++].view = P;
            this.buttons[l] = Dn(243, 374, 0, [S.CURRENCY5_OUT, S.CURRENCY5_IN, S.CURRENCY5_CLICK], 1, 0, function () {}, 213, 130, _e | Ie, Re);
            this.buttons[l++].view = P;
            this.buttons[l] = Dn(58, 64, 0, [S.CLOSE_BUTTON_OUT, S.CLOSE_BUTTON_IN, S.CLOSE_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, 300, 88, _e | Ie, Re);
            this.buttons[l++].view = P;
            this.buttons[l] = Dn(323, 112, 0, [S.SKIN_BUTTON_OUT, S.SKIN_BUTTON_IN, S.SKIN_BUTTON_CLICK], 1, 0, function () {
                oe(V);
                Ke.initSelector();
            }, -315, 185, _e | Ie, Re);
            this.buttons[l++].view = D;
            this.buttons[l] = Dn(323, 112, 0, [S.ACCESSORY_BUTTON_OUT, S.ACCESSORY_BUTTON_IN, S.ACCESSORY_BUTTON_CLICK], 1, 0, function () {
                oe(x);
                xe.initSelector();
            }, -315, 321, _e | Ie, Re);
            this.buttons[l++].view = D;
            this.buttons[l] = Dn(323, 112, 0, [S.BAG_BUTTON_OUT, S.BAG_BUTTON_IN, S.BAG_BUTTON_CLICK], 1, 0, function () {
                oe(Y);
                Ye.initSelector();
            }, 153, 185, _e | Ie, Re);
            this.buttons[l++].view = D;
            this.buttons[l] = Dn(323, 112, 0, [S.BOOK_BUTTON_OUT, S.BOOK_BUTTON_IN, S.BOOK_BUTTON_CLICK], 1, 0, function () {
                oe(F);
                Ue.initSelector();
            }, 153, 321, _e | Ie, Re);
            this.buttons[l++].view = D;
            this.buttons[l] = Dn(323, 112, 0, [S.CRATE_BUTTON_OUT, S.CRATE_BUTTON_IN, S.CRATE_BUTTON_CLICK], 1, 0, function () {
                oe(K);
                ke.initSelector();
            }, 153, 463, _e | Ie, Re);
            this.buttons[l++].view = D;
            this.buttons[l] = Dn(323, 112, 0, [S.LOOT_BUTTON_OUT, S.LOOT_BUTTON_IN, S.LOOT_BUTTON_CLICK], 1, 0, function () {
                oe(X);
                Fe.initSelector();
            }, -315, 463, _e | Ie, Re);
            this.buttons[l++].view = D;
            this.buttons[l] = Dn(130, 129, 0, [S.SHOP_BUTTON_OUT, S.SHOP_BUTTON_IN, S.SHOP_BUTTON_CLICK], 1, 0, function () {
                te(y, Re, "none");
                oe(m);
            }, 10, 40, _e | Ie, Re);
            this.buttons[l++].view = y;
            this.buttons[l] = Dn(130, 129, 0, [S.SHOP_BUTTON_OUT, S.SHOP_BUTTON_IN, S.SHOP_BUTTON_CLICK], 1, 0, function () {
                te(p, Re, "none");
                oe(m);
            }, 10, 40, _e | Ie, Re);
            this.buttons[l++].view = p;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, 200, 140, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.ATLANTA_OUT, S.ATLANTA_IN, S.ATLANTA_CLICK], 1, 0, function () {
                _("Atlanta");
            }, -265, 300, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.DALLAS_OUT, S.DALLAS_IN, S.DALLAS_CLICK], 1, 0, function () {
                _("Dallas");
            }, -130, 300, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.FREMONT_OUT, S.FREMONT_IN, S.FREMONT_CLICK], 1, 0, function () {
                _("Fremont");
            }, 5, 300, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.NEWARK_OUT, S.NEWARK_IN, S.NEWARK_CLICK], 1, 0, function () {
                _("Newark");
            }, 140, 300, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.LONDON_OUT, S.LONDON_IN, S.LONDON_CLICK], 1, 0, function () {
                _("London");
            }, -265, 365, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.FRANKFURT_OUT, S.FRANKFURT_IN, S.FRANKFURT_CLICK], 1, 0, function () {
                _("Frankfurt");
            }, -130, 365, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.SINGAPORE_OUT, S.SINGAPORE_IN, S.SINGAPORE_CLICK], 1, 0, function () {
                _("Singapore");
            }, 5, 365, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.TOKYO_OUT, S.TOKYO_IN, S.TOKYO_CLICK], 1, 0, function () {
                _("Tokyo");
            }, 140, 365, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.TORONTO_OUT, S.TORONTO_IN, S.TORONTO_CLICK], 1, 0, function () {
                _("Toronto");
            }, -265, 430, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(253, 110, 0, [S.MUMBAI_OUT, S.MUMBAI_IN, S.MUMBAI_CLICK], 1, 0, function () {
                _("Mumbai");
            }, -130, 430, _e | Ie, Re);
            this.buttons[l++].view = Z;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(Z);
            }, 230, 140, _e | Ie, Re);
            this.buttons[l++].view = $;
            this.buttons[l] = Dn(230, 352, 0, [S.DAYS3_OUT, S.DAYS3_IN, S.DAYS3_CLICK], 1, 0, function () {}, -280, 240, _e | Ie, Re);
            this.buttons[l++].view = $;
            this.buttons[l] = Dn(230, 352, 0, [S.DAYS7_OUT, S.DAYS7_IN, S.DAYS7_CLICK], 1, 0, function () {}, -130, 240, _e | Ie, Re);
            this.buttons[l++].view = $;
            this.buttons[l] = Dn(230, 352, 0, [S.DAYS30_OUT, S.DAYS30_IN, S.DAYS30_CLICK], 1, 0, function () {}, 20, 240, _e | Ie, Re);
            this.buttons[l++].view = $;
            this.buttons[l] = Dn(230, 352, 0, [S.DAYS90_OUT, S.DAYS90_IN, S.DAYS90_CLICK], 1, 0, function () {}, 170, 240, _e | Ie, Re);
            this.buttons[l++].view = $;
            this.buttons[l] = Dn(105, 119, 0, [S.COPY_PASTE_OUT, S.COPY_PASTE_IN, S.COPY_PASTE_CLICK], 1, 0, function () {
                window.document.getElementById("serverAddressInput").select();
                window.document.execCommand("copy");
            }, 170, 310, _e | Ie, Re);
            this.buttons[l++].view = Q;
            this.buttons[l] = Dn(105, 119, 0, [S.RESTART_OUT, S.RESTART_IN, S.RESTART_CLICK], 1, 0, function () {
                (async () => {
                const e = await fetch(t + "rebootServer?login=" + Vn.login + "&password=" + Vn.password);
                if (e.status !== 200) {
                    return Yn.new_alert(e.status + " error");
                }
                location.href = window.document.getElementById("serverAddressInput").value;
                })();
            }, 235, 310, _e | Ie, Re);
            this.buttons[l++].view = Q;
            this.buttons[l] = Dn(204, 115, 0, [S.GUIDE_OUT, S.GUIDE_IN, S.GUIDE_CLICK], 1, 0, function () {
                window.open("./commands.html", "_blank");
            }, -265, 490, _e | Ie, Re);
            this.buttons[l++].view = Q;
            this.buttons[l] = Dn(145, 69, 0, [S.PRICE5_OUT, S.PRICE5_IN, S.PRICE5_CLICK], 1, 0, function () {
                oe(g);
            }, -210, 170, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.buttons[l] = Dn(145, 69, 0, [S.PRICE1_OUT, S.PRICE1_IN, S.PRICE1_CLICK], 1, 0, function () {
                oe(w);
            }, 70, 170, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.buttons[l] = Dn(145, 69, 0, [S.PRICE2_OUT, S.PRICE2_IN, S.PRICE2_CLICK], 1, 0, function () {
                oe(M);
            }, 70, 204, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.buttons[l] = Dn(145, 69, 0, [S.PRICE3_OUT, S.PRICE3_IN, S.PRICE3_CLICK], 1, 0, function () {
                oe(G);
            }, -210, 204, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.buttons[l] = Dn(145, 69, 0, [S.PRICE3_OUT, S.PRICE3_IN, S.PRICE3_CLICK], 1, 0, function () {
                oe(W);
            }, 70, 238, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.buttons[l] = Dn(145, 69, 0, [S.PRICE3_OUT, S.PRICE3_IN, S.PRICE3_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                d(0, 300);
                } else {
                oe(N);
                }
            }, 307, 205, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.buttons[l] = Dn(145, 69, 0, [S.PRICE4_OUT, S.PRICE4_IN, S.PRICE4_CLICK], 1, 0, function () {
                oe(L);
            }, -210, 238, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.buttons[l] = Dn(145, 69, 0, [S.PRICE4_OUT, S.PRICE4_IN, S.PRICE4_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                d(1, 600);
                } else {
                oe(N);
                }
            }, 307, 239, _e | Ie, Re);
            this.buttons[l++].view = m;
            this.buttons[l] = Dn(192, 101, 0, [S.YES_BUTTON_OUT, S.YES_BUTTON_IN, S.YES_BUTTON_CLICK], 1, 0, function () {
                R();
            }, -100, 250, _e | Ie, Re);
            this.buttons[l++].view = j;
            this.buttons[l] = Dn(192, 104, 0, [S.YES_300_BUTTON_OUT, S.YES_300_BUTTON_IN, S.YES_300_BUTTON_CLICK], 1, 0, function () {
                R();
            }, -100, 239, _e | Ie, Re);
            this.buttons[l++].view = q;
            this.buttons[l] = Dn(192, 101, 0, [S.NO_BUTTON_OUT, S.NO_BUTTON_IN, S.NO_BUTTON_CLICK], 1, 0, function () {
                oe(b);
            }, 10, 250, _e | Ie, Re);
            this.buttons[l++].view = j;
            this.buttons[l] = Dn(192, 104, 0, [S.NO_THANKS_BUTTON_OUT, S.NO_THANKS_BUTTON_IN, S.NO_THANKS_BUTTON_CLICK], 1, 0, function () {
                oe(b);
            }, 10, 239, _e | Ie, Re);
            this.buttons[l++].view = q;
            var He = [];
            He[RARITY.FREE] = [S.FREE_ITEM_OUT, S.FREE_ITEM_IN, S.FREE_ITEM_CLICK];
            He[RARITY.WOOD] = [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK];
            He[RARITY.STONE] = [S.STONE_ITEM_OUT, S.STONE_ITEM_IN, S.STONE_ITEM_CLICK];
            He[RARITY.GOLD] = [S.GOLD_ITEM_OUT, S.GOLD_ITEM_IN, S.GOLD_ITEM_CLICK];
            He[RARITY.DIAMOND] = [S.DIAMOND_ITEM_OUT, S.DIAMOND_ITEM_IN, S.DIAMOND_ITEM_CLICK];
            He[RARITY.AMETHYST] = [S.AMETHYST_ITEM_OUT, S.AMETHYST_ITEM_IN, S.AMETHYST_ITEM_CLICK];
            He[RARITY.REIDITE] = [S.REIDITE_ITEM_OUT, S.REIDITE_ITEM_IN, S.REIDITE_ITEM_CLICK];
            He[RARITY.LEVEL] = [S.LEVEL_ITEM_OUT, S.LEVEL_ITEM_IN, S.LEVEL_ITEM_CLICK];
            He[RARITY.SPECIAL] = [S.SPECIAL_ITEM_OUT, S.SPECIAL_ITEM_IN, S.SPECIAL_ITEM_CLICK];
            let we = l;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_PREVIOUS_OUT, S.SKIN_PREVIOUS_IN, S.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_NEXT_OUT, S.SKIN_NEXT_IN, S.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, _e | Ie, Re);
            this.buttons[l++].view = V;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(D);
            }, -320, 470, _e | Ie, Re);
            this.buttons[l++].view = V;
            let fe = l;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_PREVIOUS_OUT, S.SKIN_PREVIOUS_IN, S.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_NEXT_OUT, S.SKIN_NEXT_IN, S.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, _e | Ie, Re);
            this.buttons[l++].view = x;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(D);
            }, -320, 470, _e | Ie, Re);
            this.buttons[l++].view = x;
            let ze = l;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_PREVIOUS_OUT, S.SKIN_PREVIOUS_IN, S.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_NEXT_OUT, S.SKIN_NEXT_IN, S.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, _e | Ie, Re);
            this.buttons[l++].view = X;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(D);
            }, -320, 470, _e | Ie, Re);
            this.buttons[l++].view = X;
            let Be = l;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_PREVIOUS_OUT, S.SKIN_PREVIOUS_IN, S.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_NEXT_OUT, S.SKIN_NEXT_IN, S.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, _e | Ie, Re);
            this.buttons[l++].view = Y;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(D);
            }, -320, 470, _e | Ie, Re);
            this.buttons[l++].view = Y;
            let Ge = l;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_PREVIOUS_OUT, S.SKIN_PREVIOUS_IN, S.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_NEXT_OUT, S.SKIN_NEXT_IN, S.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, _e | Ie, Re);
            this.buttons[l++].view = F;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(D);
            }, -320, 470, _e | Ie, Re);
            this.buttons[l++].view = F;
            let We = l;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(178, 182, 0, [S.WOOD_ITEM_OUT, S.WOOD_ITEM_IN, S.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_PREVIOUS_OUT, S.SKIN_PREVIOUS_IN, S.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(39, 122, 0, [S.SKIN_NEXT_OUT, S.SKIN_NEXT_IN, S.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(D);
            }, -320, 470, _e | Ie, Re);
            this.buttons[l++].view = K;
            this.buttons[l] = Dn(260, 260, 0, [S.SPIN_BUTTON_1_OUT, S.SPIN_BUTTON_1_IN, S.SPIN_BUTTON_1_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                s(3, 50);
                } else {
                oe(N);
                }
            }, -65, 197, _e | Ie, Re);
            this.buttons[l++].view = w;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, 309, 180, _e | Ie, Re);
            this.buttons[l++].view = w;
            this.buttons[l] = Dn(260, 260, 0, [S.SPIN_BUTTON_2_OUT, S.SPIN_BUTTON_2_IN, S.SPIN_BUTTON_2_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                s(0, 100);
                } else {
                oe(N);
                }
            }, -65, 197, _e | Ie, Re);
            this.buttons[l++].view = g;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, 309, 180, _e | Ie, Re);
            this.buttons[l++].view = g;
            this.buttons[l] = Dn(260, 260, 0, [S.SPIN_BUTTON_3_OUT, S.SPIN_BUTTON_3_IN, S.SPIN_BUTTON_3_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                s(4, 150);
                } else {
                oe(N);
                }
            }, -65, 197, _e | Ie, Re);
            this.buttons[l++].view = M;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, 309, 180, _e | Ie, Re);
            this.buttons[l++].view = M;
            this.buttons[l] = Dn(260, 260, 0, [S.SPIN_BUTTON_4_OUT, S.SPIN_BUTTON_4_IN, S.SPIN_BUTTON_4_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                s(1, 300);
                } else {
                oe(N);
                }
            }, -65, 197, _e | Ie, Re);
            this.buttons[l++].view = G;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, 309, 180, _e | Ie, Re);
            this.buttons[l++].view = G;
            this.buttons[l] = Dn(260, 260, 0, [S.SPIN_BUTTON_5_OUT, S.SPIN_BUTTON_5_IN, S.SPIN_BUTTON_5_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                s(2, 600);
                } else {
                oe(N);
                }
            }, -65, 197, _e | Ie, Re);
            this.buttons[l++].view = L;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, 309, 180, _e | Ie, Re);
            this.buttons[l++].view = L;
            this.buttons[l] = Dn(260, 260, 0, [S.SPIN_BUTTON_4_OUT, S.SPIN_BUTTON_4_IN, S.SPIN_BUTTON_4_CLICK], 1, 0, function () {
                if (o.isUserLogged()) {
                s(5, 300);
                } else {
                oe(N);
                }
            }, -65, 197, _e | Ie, Re);
            this.buttons[l++].view = W;
            this.buttons[l] = Dn(115, 73, 0, [S.BACK_BUTTON_OUT, S.BACK_BUTTON_IN, S.BACK_BUTTON_CLICK], 1, 0, function () {
                oe(m);
            }, 309, 180, _e | Ie, Re);
            this.buttons[l++].view = W;
            var Ve = l;
            this.buttons[l] = Dn(205, 67, 0, [S.SEASON1_PROFILE_OUT, S.SEASON1_PROFILE_IN, S.SEASON1_PROFILE_CLICK], 1, 0, function () {
                Le(undefined, 0);
            }, -305, 125, _e | Ie, Re);
            this.buttons[l++].view = b;
            this.LEADERBOARD_TOTAL = l;
            this.buttons[l] = Dn(143, 66, 0, [S.TOTAL_LEAD_OUT, S.TOTAL_LEAD_IN, S.TOTAL_LEAD_CLICK], 1, 0, function () {
                u(undefined, Gn.LEADERBOARD_TOTAL);
            }, -298, 110, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.LEADERBOARD_NORMAL = l;
            this.buttons[l] = Dn(104, 66, 0, [S.NORMAL_LEAD_OUT, S.NORMAL_LEAD_IN, S.NORMAL_LEAD_CLICK], 1, 0, function () {
                u(undefined, Gn.LEADERBOARD_NORMAL);
            }, -223, 110, _e | Ie, Re);
            this.buttons[l++].view = c;
            this.buttons[l] = Dn(86, 44, 0, [S.TERMS_BUTTON_OUT, S.TERMS_BUTTON_IN, S.TERMS_BUTTON_CLICK], 1, 0, function () {
                window.open("./terms.html", "_blank");
            }, 349, 290, _e | Ie, Re);
            this.buttons[l++].view = m;
            var Ke = new T(ne.SKIN, we, function (e) {
                Gn.skin = e;
                if (Gn.unlock.skin[e] === 1) {
                Jn.set("starve_skin", "" + e, 30);
                }
            }, this.skin, this.unlock.skin);
            var Ye = new T(ne.BAG, Be, function (e) {
                Gn.bag = e;
                if (Gn.unlock.bag[e] === 1) {
                Jn.set("starve_bag", "" + e, 30);
                }
            }, this.bag, this.unlock.bag);
            var Ue = new T(ne.BOOK, Ge, function (e) {
                Gn.book = e;
                if (Gn.unlock.book[e] === 1) {
                Jn.set("starve_book", "" + e, 30);
                }
            }, this.book, this.unlock.book);
            var ke = new T(ne.CRATE, We, function (e) {
                Gn.dead = e;
                if (Gn.unlock.dead[e] === 1) {
                Jn.set("starve_dead", "" + e, 30);
                }
            }, this.dead, this.unlock.dead);
            var Fe = new T(ne.CRATE, ze, function (e) {
                Gn.crate = e;
                if (Gn.unlock.crate[e] === 1) {
                Jn.set("starve_crate", "" + e, 30);
                }
            }, this.crate, this.unlock.crate);
            var xe = new T(ne.ACCESSORY, fe, function (e) {
                Gn.accessory = e;
                if (Gn.unlock.accessory[e] === 1) {
                Jn.set("starve_accessory", "" + e, 30);
                }
            }, this.accessory, this.unlock.accessory);
            this.trigger_mousedown = function (e) {
                if (e.isTrusted) {
                Fn.pos = bn(e);
                for (var t = 0; t < o.buttons.length; t++) {
                    if (o.buttons[t].info.active === he) {
                    o.buttons[t].trigger(o.can, Fn.pos, 1);
                    }
                }
                }
            };
            this.trigger_mouseup = function (e) {
                if (e.isTrusted) {
                Fn.pos = bn(e);
                for (var t = 0; t < o.buttons.length; t++) {
                    var i = o.buttons[t];
                    if (i.info.active === he && i.trigger(o.can, Fn.pos, 2)) {
                    i.info.callback();
                    return;
                    }
                }
                }
            };
            this.current_cursor = false;
            this.trigger_mousemove = function (t) {
                if (t.isTrusted) {
                Fn.pos = bn(t);
                var i = false;
                for (var T = 0; T < o.buttons.length; T++) {
                    if (o.buttons[T].info.active === he) {
                    i |= o.buttons[T].trigger(o.can, Fn.pos, 0);
                    }
                }
                if (o.current_cursor !== i) {
                    o.current_cursor = i;
                    e.style.cursor = i ? o.cursor1 : o.cursor0;
                }
                }
            };
            this.add_event_listener = function () {
                window.addEventListener("mousedown", this.trigger_mousedown, false);
                window.addEventListener("mouseup", this.trigger_mouseup, false);
                window.addEventListener("mousemove", this.trigger_mousemove, false);
            };
            this.remove_event_listener = function () {
                window.removeEventListener("mousedown", this.trigger_mousedown, false);
                window.removeEventListener("mouseup", this.trigger_mouseup, false);
                window.removeEventListener("mousemove", this.trigger_mousemove, false);
            };
            }
        }
        class wn {
            constructor(e, t) {
            var i = this;
            this.can = e;
            this.ctx = t;
            if (window.navigator.userAgent.indexOf("Edge") > -1) {
                this.cursor0 = "default";
                this.cursor1 = "pointer";
            } else {
                this.cursor0 = "url('img/cursor0.png'), default";
                this.cursor1 = "url('img/cursor1.png'), pointer";
            }
            this.show_ui = 1;
            this.show_clock = 1;
            this.show_recipe_book = 1;
            this.show_quest = 1;
            this.team_box = {
                id: window.document.getElementById("team_box"),
                style: window.document.getElementById("team_box").style,
                update: function () {
                this.style.left = window.Math.floor(z - 125) + "px";
                this.style.top = "110px";
                }
            };
            this.market = {
                open: false,
                id: window.document.getElementById("shop_market"),
                style: window.document.getElementById("shop_market").style,
                items: [[1, 3, Q[ItemType.WOOD].img, Q[ItemType.BERRY].img], [1, 4, Q[ItemType.STONE].img, Q[ItemType.PUMPKIN].img], [1, 6, Q[ItemType.GOLD].img, Q[ItemType.BREAD].img], [4, 1, Q[ItemType.DIAMOND].img, Q[ItemType.CARROT].img], [8, 1, Q[ItemType.AMETHYST].img, Q[ItemType.TOMATO].img], [16, 1, Q[ItemType.REIDITE].img, Q[ItemType.THORNBUSH].img], [10, 1, Q[ItemType.PUMPKIN_SEED].img, Q[ItemType.BREAD].img], [16, 1, Q[ItemType.CARROT_SEED].img, Q[ItemType.PUMPKIN].img], [20, 1, Q[ItemType.TOMATO_SEED].img, Q[ItemType.CARROT].img], [30, 1, Q[ItemType.THORNBUSH_SEED].img, Q[ItemType.TOMATO].img], [40, 1, Q[ItemType.GARLIC_SEED].img, Q[ItemType.THORNBUSH].img], [60, 1, Q[ItemType.WATERMELON_SEED].img, Q[ItemType.GARLIC].img]],
                button: Dn(60, 60, 0, re[SPRITE.MARKET_BUTTON]),
                update: function () {
                this.style.left = window.Math.floor(z - 450) + "px";
                this.style.top = window.Math.floor(B - 270) + "px";
                },
                select: __p_5863156023(() => {
                Un.market.open = !Un.market.open;
                if (Un.market.open) {
                    Un.market.style.display = "flex";
                } else {
                    Un.market.style.display = "none";
                }
                }, 0),
                quit: __p_5863156023(() => {
                Un.market.style.display = "none";
                Un.market.open = false;
                }, 0)
            };
            this.market.id.innerHTML = "";
            for (let e = 0; e < this.market.items.length; e++) {
                const [t, i, o, T] = this.market.items[e];
                const r = re[o][0];
                const n = re[T][0];
                this.market.id.innerHTML += `<div class="ore_to_buy">\n                        <img src="${r._src ? r._src : r.src}">\n                        <input class="ore_number" id="ore_number${e}" type="number" step="${i}" value="${i}" min="${i}" max="250"/>\n                        <div class="buy_market">\n                            <div class="buy_market_number" id="buy_market_number${e}">BUY</div>\n                            <div class="price_market">\n                                <span class="amount_price_market" id="amount_price_market${e}" >${t}</span>\n                                <img class="img_bread" src="${n._src ? n._src : n.src}"/>\n                            </div>\n                        </div>\n                    </div>`;
                setTimeout(() => {
                document.getElementById("ore_number" + e).onchange = function () {
                    document.getElementById("amount_price_market" + e).textContent = i === 1 ? document.getElementById("ore_number" + e).value * t : document.getElementById("ore_number" + e).value / i;
                };
                document.getElementById("buy_market_number" + e).onclick = function () {
                    Yn.buy_market(document.getElementById("amount_price_market" + e).textContent, e);
                };
                return undefined;
                }, 16);
            }
            this.market.id.innerHTML += "<div id=\"quit_market\"> QUIT</div>";
            window.document.querySelector("[type='number']").addEventListener("keypress", e => {
                e.preventDefault();
                return undefined;
            });
            this.options = {
                open: false,
                id: window.document.getElementById("option_in_game"),
                style: window.document.getElementById("option_in_game").style,
                agree: window.document.getElementById("agree_ing").style,
                cancel_agree: window.document.getElementById("cancel_agree_ing").style,
                quests_agree: window.document.getElementById("quest_agree_ing").style,
                feed_agree: window.document.getElementById("auto_feed_agree_ing").style,
                info_box_agree: window.document.getElementById("info_agree_ing").style,
                aliasing_agree: window.document.getElementById("pixelated_agree_ing").style,
                button: Dn(60, 60, 0, re[SPRITE.OPTION_BUTTON]),
                select_options: __p_5863156023(() => {
                Un.options.open = !Un.options.open;
                if (Un.options.open) {
                    Un.options.style.display = "inline-block";
                } else {
                    Un.options.style.display = "none";
                }
                }, 0),
                azerty: __p_5863156023(() => {
                Gn.set_azerty();
                }, 0),
                qwerty: __p_5863156023(() => {
                Gn.set_qwerty();
                }, 0),
                high: __p_5863156023(() => {
                Gn.high_quality();
                }, 0),
                low: __p_5863156023(() => {
                Gn.low_quality();
                }, 0),
                checkbox: __p_5863156023(() => {
                Un.safe_delete.checkbox();
                }, 0),
                cancel_checkbox: __p_5863156023(() => {
                Un.safe_cancel.checkbox();
                }, 0),
                quest_checkbox: __p_5863156023(() => {
                Un.quests.checkbox();
                }, 0),
                feed_checkbox: __p_5863156023(() => {
                Vn.auto_feed.invert();
                }, 0),
                quit: __p_5863156023(() => {
                Un.options.style.display = "none";
                Un.options.open = false;
                }, 0),
                update: function () {
                this.style.left = window.Math.floor(z - 235) + "px";
                this.style.top = window.Math.floor(B - 170) + "px";
                }
            };
            this.safe_cancel = {
                open: false,
                activated: Jn.get("starve_cancel") && Jn.get("starve_cancel") === "0" ? 0 : 1,
                id: window.document.getElementById("cancel_sure_delete"),
                style: window.document.getElementById("cancel_sure_delete").style,
                agree: window.document.getElementById("cancel_agree").style,
                button: 0,
                i: 0,
                quit: __p_5863156023(() => {
                Un.safe_cancel.style.display = "none";
                Un.safe_cancel.open = false;
                }, 0),
                yes: __p_5863156023(() => {
                if (Vn.craft.crafting) {
                    Yn.cancel_crafting();
                }
                Un.safe_cancel.quit();
                }, 0),
                checkbox: __p_5863156023(() => {
                if (Un.safe_cancel.activated) {
                    Jn.set("starve_cancel", "0");
                    Un.safe_cancel.agree.display = "inline-block";
                    Un.options.cancel_agree.display = "none";
                } else {
                    Jn.set("starve_cancel", "1");
                    Un.safe_cancel.agree.display = "none";
                    Un.options.cancel_agree.display = "inline-block";
                }
                Un.safe_cancel.activated = !Un.safe_cancel.activated;
                }, 0),
                del: function () {
                if (this.activated) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.yes();
                }
                },
                update: function () {
                this.style.left = window.Math.floor(z - 235) + "px";
                this.style.top = window.Math.floor(B - 130) + "px";
                }
            };
            this.safe_cancel.agree.display = "none";
            if (this.safe_cancel.activated) {
                this.options.cancel_agree.display = "inline-block";
            } else {
                this.options.cancel_agree.display = "none";
            }
            window.document.addEventListener("cancel_sure_delete", function (e) {
                e.preventDefault();
            }, false);
            this.aliasing = {
                activated: Jn.get("starve_aliasing") && Jn.get("starve_aliasing") === "0" ? 0 : 1,
                set_aliasing: __p_5863156023(e => {
                window.document.getElementById("game_canvas").style.imageRendering = e ? "pixelated" : "auto";
                }, 1),
                checkbox: __p_5863156023(() => {
                if (Un.aliasing.activated === 0) {
                    Jn.set("starve_aliasing", "1");
                    Un.aliasing.set_aliasing(1);
                    Un.options.aliasing_agree.display = "inline-block";
                } else {
                    Jn.set("starve_aliasing", "0");
                    Un.aliasing.set_aliasing(0);
                    Un.options.aliasing_agree.display = "none";
                }
                Un.aliasing.activated = (Un.aliasing.activated + 1) % 2;
                }, 0)
            };
            if (this.aliasing.activated === 1) {
                this.options.aliasing_agree.display = "inline-block";
            } else {
                this.aliasing.set_aliasing(0);
                this.options.aliasing_agree.display = "none";
            }
            window.document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.aliasing.checkbox, false);
            this.info_box = {
                activated: Jn.get("starve_info_box") && Jn.get("starve_info_box") === "0" ? 0 : 1,
                display: 0,
                x: 0,
                y: 0,
                id: 0,
                craft: 0,
                checkbox: __p_5863156023(() => {
                if (Un.info_box.activated === 0) {
                    Jn.set("starve_info_box", "1");
                    Un.options.info_box_agree.display = "inline-block";
                } else {
                    Jn.set("starve_info_box", "0");
                    Un.options.info_box_agree.display = "none";
                }
                Un.info_box.activated = (Un.info_box.activated + 1) % 2;
                }, 0),
                trigger: function (e, t, i) {
                if (e && this.activated) {
                    this.display = 1;
                    this.id = t.id;
                    this.x = t.info.translate.x + 80;
                    this.y = t.info.translate.y;
                    this.craft = i;
                }
                return e;
                }
            };
            if (this.info_box.activated === 1) {
                this.options.info_box_agree.display = "inline-block";
            } else {
                this.options.info_box_agree.display = "none";
            }
            window.document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.info_box.checkbox, false);
            if (Jn.get("starve_scale")) {
                K = window.Number(Jn.get("starve_scale"));
                window.document.getElementById("input_ratio").value = K;
                xn.onResize();
            }
            this.change_ratio = function () {
                Jn.set("starve_scale", "" + window.document.getElementById("input_ratio").value);
                K = window.document.getElementById("input_ratio").value;
                xn.onResize();
            };
            window.document.getElementById("input_ratio").addEventListener("input", this.change_ratio, false);
            this.safe_delete = {
                open: false,
                activated: Jn.get("starve_safe") && Jn.get("starve_safe") === "0" ? 0 : 1,
                id: window.document.getElementById("sure_delete"),
                style: window.document.getElementById("sure_delete").style,
                agree: window.document.getElementById("agree").style,
                button: 0,
                i: 0,
                quit: __p_5863156023(() => {
                Un.safe_delete.style.display = "none";
                Un.safe_delete.open = false;
                }, 0),
                all: __p_5863156023(() => {
                if (!Vn.build.wait) {
                    if (Vn.craft.preview < 0 && Vn.craft.id < 0 && !Vn.ghost.enabled) {
                    Yn.delete_inv(Un.safe_delete.button);
                    }
                    Un.safe_delete.quit();
                }
                }, 0),
                recycle: __p_5863156023(() => {
                if (Vn.craft.workbench && !Vn.build.wait) {
                    if (Vn.craft.preview < 0 && Vn.craft.id < 0 && !Vn.ghost.enabled) {
                    Yn.recycle_inv(Un.safe_delete.button);
                    }
                    Un.safe_delete.quit();
                }
                }, 0),
                one: __p_5863156023(() => {
                if (!Vn.build.wait) {
                    if (Vn.craft.preview < 0 && Vn.craft.id < 0 && !Vn.ghost.enabled) {
                    Yn.delete_one_inv(Un.safe_delete.button);
                    }
                    Un.safe_delete.quit();
                }
                }, 0),
                checkbox: __p_5863156023(() => {
                if (Un.safe_delete.activated) {
                    Jn.set("starve_safe", "0");
                    Un.safe_delete.agree.display = "inline-block";
                    Un.options.agree.display = "none";
                } else {
                    Jn.set("starve_safe", "1");
                    Un.safe_delete.agree.display = "none";
                    Un.options.agree.display = "inline-block";
                }
                Un.safe_delete.activated = !Un.safe_delete.activated;
                }, 0),
                del: function (e) {
                this.button = e;
                window.document.getElementById("item_to_del").src = re[Q[e].img][0]._src === undefined ? re[Q[e].img][0].src : re[Q[e].img][0]._src;
                if (Q[e].recycle && !Vn.zombie && Vn.craft.workbench) {
                    window.document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    window.document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.activated) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.all();
                }
                },
                update: function () {
                this.style.left = window.Math.floor(z - 235) + "px";
                this.style.top = window.Math.floor(B - 175) + "px";
                }
            };
            this.safe_delete.agree.display = "none";
            if (this.safe_delete.activated) {
                this.options.agree.display = "inline-block";
            } else {
                this.options.agree.display = "none";
            }
            window.document.getElementById("one_delete").addEventListener("mouseup", this.safe_delete.one, false);
            window.document.getElementById("yes_delete").addEventListener("mouseup", this.safe_delete.all, false);
            window.document.getElementById("recycle_delete").addEventListener("mouseup", this.safe_delete.recycle, false);
            window.document.getElementById("no_delete").addEventListener("mouseup", this.safe_delete.quit, false);
            window.document.getElementById("case_agree").addEventListener("mouseup", this.safe_delete.checkbox, false);
            this.shop = {
                open: false,
                kit: -1,
                button: Dn(60, 60, 0, re[SPRITE.SHOP]),
                id: window.document.getElementById("shop_starterkit"),
                style: window.document.getElementById("shop_starterkit").style,
                update: function () {
                this.style.left = window.Math.floor(z - 300) + "px";
                this.style.top = window.Math.floor(B - 215) + "px";
                },
                quit: __p_5863156023(() => {
                Un.shop.open = false;
                Un.shop.style.display = "none";
                }, 0),
                select: __p_5863156023(() => {
                Un.shop.open = !Un.shop.open;
                if (Un.shop.open) {
                    Un.shop.style.display = "inline-block";
                } else {
                    Un.shop.style.display = "none";
                }
                }, 0),
                buy: __p_5863156023(() => {
                if (Un.shop.kit >= 0) {
                    Yn.choose_kit(Un.shop.kit);
                    Un.shop.quit();
                }
                }, 0),
                init: __p_5863156023(() => {
                var e = Vn.shop.value;
                window.document.getElementById("points_bank").innerHTML = v.simplify_number(e) + " points";
                for (var t = 0; t < O.length; t++) {
                    if (O[t].price > e) {
                    window.document.getElementById("starter" + (t + 1)).style.opacity = "0.4";
                    } else {
                    window.document.getElementById("starter" + (t + 1)).style.opacity = "1";
                    }
                }
                for (t = 1; t < 13; t++) {
                    window.document.getElementById("inv_shop" + t).src = "./img/empty-shop.png";
                    window.document.getElementById("amount_shop" + t).innerHTML = "";
                }
                window.document.getElementById("buy_kit").style.opacity = "0.2";
                }, 0),
                get_starter: function () {
                if (this.id.length > 8) {
                    var e = window.Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    e = window.Number(this.id.charAt(7));
                }
                var t = O[e - 1];
                if (Vn.shop.value >= t.price) {
                    Un.shop.kit = e;
                    window.document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    Un.shop.kit = -1;
                    window.document.getElementById("buy_kit").style.opacity = "0.2";
                }
                t = t.items;
                for (var i = 1, o = 1; i < t.length + 1; i++) {
                    if (t[i - 1][1] !== ItemType.BAG) {
                    window.document.getElementById("inv_shop" + o).style.display = "inline-block";
                    window.document.getElementById("inv_shop" + o).src = re[Q[t[i - 1][1]].img][0]._src === undefined ? re[Q[t[i - 1][1]].img][0].src : re[Q[t[i - 1][1]].img][0]._src;
                    window.document.getElementById("amount_shop" + o).innerHTML = "" + t[i - 1][0];
                    o++;
                    }
                }
                for (; o < 13; o++) {
                    window.document.getElementById("inv_shop" + o).src = "./img/empty-shop.png";
                    window.document.getElementById("amount_shop" + o).innerHTML = "";
                }
                }
            };
            window.document.getElementById("quit3").addEventListener("mouseup", this.shop.quit, false);
            window.document.getElementById("buy_kit").addEventListener("mouseup", this.shop.buy, false);
            for (var o = 1; o < 11; o++) {
                window.document.getElementById("starter" + o).addEventListener("mouseup", this.shop.get_starter, false);
            }
            this.quests = {
                open: false,
                activated: Jn.get("starve_quests") && Jn.get("starve_quests") === "1" ? 1 : 0,
                button: Dn(60, 60, 0, re[SPRITE.QUEST_BUTTON]),
                id: window.document.getElementById("chronoquest"),
                style: window.document.getElementById("chronoquest").style,
                update: function () {
                this.style.left = window.Math.floor(z - 420) + "px";
                this.style.top = window.Math.floor(B - 270) + "px";
                },
                quit: __p_5863156023(() => {
                Un.quests.style.display = "none";
                Un.quests.open = false;
                }, 0),
                select: __p_5863156023(() => {
                Un.quests.open = !Un.quests.open;
                if (Un.quests.open) {
                    Un.quests.style.display = "inline-block";
                } else {
                    Un.quests.style.display = "none";
                }
                }, 0),
                list: [],
                reset: function () {
                for (var e = 0; e < vn.length; e++) {
                    this.list[e] = 1;
                    window.document.getElementById("timeremain_" + e).style.display = "inline-block";
                    window.document.getElementById("time_finished_" + e).style.display = "none";
                    window.document.getElementById("claim_reward_" + e).style.display = "none";
                }
                },
                timer: 0,
                born: 0,
                update_chrono: function () {
                if (Un.quests.open) {
                    var e = new window.Date().getTime();
                    if (e - this.timer >= 1000) {
                    this.timer = e;
                    for (var t = 0; t < vn.length; t++) {
                        if (Un.quests.list[t]) {
                        var i = vn[t] - (e - Wn.clock.init + Un.quests.born);
                        window.document.getElementById("timeremain_" + t).innerHTML = i > 960000 ? window.Math.floor(i / 480000) + " days" : i > 480000 ? window.Math.floor(i / 480000) + " day" : i > 60000 ? window.Math.floor(i / 60000) + " min" : window.Math.floor(i / 1000) + " sec";
                        }
                    }
                    }
                }
                },
                restore: __p_5863156023(e => {
                for (var t = 0; t < e.length; t++) {
                    if (e[t] != 1) {
                    Un.quests.modify_simple(t, e[t]);
                    }
                }
                }, 1),
                modify_simple: __p_5863156023((e, t) => {
                if (t === 3 && (e === 11 || e === 12)) {
                    Vn.inv.update_bag_size(0, 1);
                    Un.update_inv_buttons();
                }
                window.document.getElementById("timeremain_" + e).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (t > 1) {
                    window.document.getElementById("time_finished_" + e).innerHTML = "SUCCEED";
                    window.document.getElementById("timeremain_" + e).style.display = "none";
                } else if (t === 0) {
                    window.document.getElementById("time_finished_" + e).innerHTML = "FAILED";
                    window.document.getElementById("timeremain_" + e).style.display = "none";
                }
                window.document.getElementById("claim_reward_" + e).style.display = t === 2 ? "inline-block" : "none";
                window.document.getElementById("time_finished_" + e).style.display = "inline";
                Un.quests.list[e] = 0;
                }, 2),
                modify: __p_5863156023((e, t) => {
                Un.quests.modify_simple(e, t);
                if (Un.quests.activated) {
                    Un.quests.open = true;
                    Un.quests.style.display = "inline-block";
                }
                }, 2),
                checkbox: __p_5863156023(() => {
                if (Un.quests.activated) {
                    Jn.set("starve_quests", "0");
                    Un.options.quests_agree.display = "none";
                } else {
                    Jn.set("starve_quests", "1");
                    Un.options.quests_agree.display = "inline-block";
                }
                Un.quests.activated = !Un.quests.activated;
                }, 0),
                claim: function () {
                var e = window.Number(this.id.charAt(13));
                var t = window.Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && t >= 0 && t <= 9) {
                    e = e * 10 + t;
                }
                Yn.claim_quest_reward(e);
                }
            };
            if (this.quests.activated) {
                this.options.quests_agree.display = "inline-block";
            } else {
                this.options.quests_agree.display = "none";
            }
            window.document.getElementById("quit_chronoquest").addEventListener("mouseup", this.quests.quit, false);
            for (o = 0; o < vn.length; o++) {
                window.document.getElementById("claim_reward_" + o).addEventListener("mouseup", this.quests.claim, false);
            }
            this.craft_list = {
                open: false,
                button: Dn(60, 60, 0, re[SPRITE.RECIPE_BUTTON]),
                list: {
                id: window.document.getElementById("recipe_craft"),
                style: window.document.getElementById("recipe_craft").style,
                recipes: [],
                category: 0,
                update: function () {
                    this.style.left = window.Math.floor(z - 335) + "px";
                    this.style.top = window.Math.floor(B - 215) + "px";
                },
                quit: __p_5863156023(() => {
                    window.document.getElementById("recipe_craft").style.display = "none";
                    Un.craft_list.open = false;
                }, 0),
                previous: __p_5863156023(() => {
                    window.document.getElementById("recipe_craft").style.display = "none";
                    window.document.getElementById("home_craft").style.display = "inline-block";
                }, 0),
                get_recipe: function (e) {
                    if ((t = this.recipes[e]).o) {
                    window.document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                    window.document.getElementById("watercraft").style.display = "none";
                    }
                    if (t.f) {
                    window.document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                    window.document.getElementById("firecraft").style.display = "none";
                    }
                    if (t.w) {
                    window.document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                    window.document.getElementById("workcraft").style.display = "none";
                    }
                    if (t.e) {
                    window.document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                    window.document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var t = t.r, i = (e = 0, 1); e < t.length; e++) {
                    window.document.getElementById("inv" + i).style.display = "inline-block";
                    window.document.getElementById("inv" + i).src = re[Q[t[e][0]].img][0]._src === undefined ? re[Q[t[e][0]].img][0].src : re[Q[t[e][0]].img][0]._src;
                    window.document.getElementById("numb" + i).innerHTML = "" + t[e][1];
                    i++;
                    }
                    for (; i < 6; i++) {
                    window.document.getElementById("inv" + i).style.display = "none";
                    window.document.getElementById("numb" + i).innerHTML = "";
                    }
                },
                select: function (e) {
                    this.category = e;
                    window.document.getElementById("home_craft").style.display = "none";
                    window.document.getElementById("workcraft").style.display = "none";
                    window.document.getElementById("firecraft").style.display = "none";
                    window.document.getElementById("watercraft").style.display = "none";
                    window.document.getElementById("wellcraft").style.display = "none";
                    window.document.getElementById("recipe_craft").style.display = "inline-block";
                    window.document.getElementById("inv1").style.display = "none";
                    window.document.getElementById("inv2").style.display = "none";
                    window.document.getElementById("inv3").style.display = "none";
                    window.document.getElementById("inv4").style.display = "none";
                    window.document.getElementById("inv5").style.display = "none";
                    window.document.getElementById("numb1").innerHTML = "";
                    window.document.getElementById("numb2").innerHTML = "";
                    window.document.getElementById("numb3").innerHTML = "";
                    window.document.getElementById("numb4").innerHTML = "";
                    window.document.getElementById("numb5").innerHTML = "";
                    for (var t = 0, i = 0; t < l.length; t++) {
                    var o = l[t];
                    if (o && o.r) {
                        if (e === o.t) {
                        this.recipes[i] = o;
                        i++;
                        window.document.getElementById("img_" + i).item = t;
                        window.document.getElementById("img_" + i).style.display = "inline-block";
                        window.document.getElementById("img_" + i).src = re[Q[t].img][0]._src === undefined ? re[Q[t].img][0].src : re[Q[t].img][0]._src;
                        }
                    }
                    }
                    for (i++; i < 49; i++) {
                    window.document.getElementById("img_" + i).style.display = "none";
                    }
                }
                },
                home: {
                id: window.document.getElementById("home_craft"),
                style: window.document.getElementById("home_craft").style,
                update: function () {
                    this.style.left = window.Math.floor(z - 285) + "px";
                    this.style.top = window.Math.floor(B - 170) + "px";
                },
                quit: __p_5863156023(() => {
                    window.document.getElementById("home_craft").style.display = "none";
                    Un.craft_list.open = false;
                }, 0)
                },
                select_book: function () {
                this.open = !this.open;
                if (this.open) {
                    window.document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    window.document.getElementById("home_craft").style.display = "none";
                    window.document.getElementById("recipe_craft").style.display = "none";
                }
                }
            };
            for (let e = 1; e < 49; e++) {
                window.document.getElementById("img_" + e).addEventListener("mousedown", function () {
                Un.craft_list.list.get_recipe(e - 1);
                if (kn.keys[16]) {
                    Yn.send_command("g $id " + window.document.getElementById("img_" + e).item + (kn.keys[17] ? " 255" : ""));
                }
                }, false);
            }
            this.minimap = {
                translate: {
                x: 0,
                y: 0
                },
                marker: {
                x: -1,
                y: -1
                },
                players: [],
                focus: function (e) {
                var t = this.translate.y + (Vn.inv.can_select.length > 0 ? -120 : -50);
                if (e.x > this.translate.x && e.x < this.translate.x + 193 && e.y > t && e.y < t + 193) {
                    this.marker.x = e.x - this.translate.x;
                    this.marker.y = e.y - t;
                }
                }
            };
            this.leaderboard = {
                translate: {
                x: 0,
                y: 0
                },
                img: re[SPRITE.LEADERBOARD],
                can: window.document.createElement("canvas")
            };
            this.leaderboard.can.width = this.leaderboard.img.width;
            this.leaderboard.can.height = this.leaderboard.img.height;
            this.leaderboard.ctx = this.leaderboard.can.getContext("2d");
            this.gauges = {
                translate: {
                x: 0,
                y: 0
                },
                img: re[SPRITE.GAUGES],
                draw: ST,
                y: 0
            };
            this.leave_team = function () {
                var e = window.document.getElementById("team_box");
                e.innerHTML = "";
                e.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Wn.players[Vn.team[0]].nickname.replaceAll("<", "< ");
                for (var t = 1; t < Vn.team.length; t++) {
                e.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Wn.players[Vn.team[t]].nickname.replaceAll("<", "< ");
                }
                e.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
                e.style.display = "inline-block";
            };
            this.show_team = function () {
                let e = window.document.getElementById("team_box");
                e.innerHTML = "";
                e.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Wn.players[Vn.team[0]].nickname.replaceAll("<", "< ");
                for (var t = 1; t < Vn.team.length; t++) {
                e.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Wn.players[Vn.team[t]].nickname.replaceAll("<", "< ");
                }
                e.innerHTML += "</div>";
                e.style.display = "inline-block";
            };
            this.manage_team = function () {
                let e = window.document.getElementById("team_box");
                e.innerHTML = "";
                e.style.display = "inline-block";
                e.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Wn.players[Vn.team[0]].nickname.replaceAll("<", "< ");
                for (let t = 1; t < Vn.team.length; t++) {
                e.innerHTML += `<div class="nicknames">\n                        <div style="display:inline-block;padding-top:7px;">\n                            ${Wn.players[Vn.team[t]].nickname.replaceAll("<", "< ")}\n                        </div>\n                    <div class="eject_member" id="eject_member${t}">\n                        <img src="./img/close-team.png" style="width:20px;padding:5px;">\n                    </div>`;
                setTimeout(() => {
                    window.document.getElementById("eject_member" + t).onclick = function () {
                    Yn.kick_team(t);
                    };
                    return undefined;
                }, 100);
                }
                if (Vn.totem.lock === 0) {
                e.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
                } else {
                e.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
                }
            };
            this.team_buttons = [];
            this.team_buttons[CLIENT.TEAM_LEAVE] = {
                button: Dn(60, 60, 0, re[SPRITE.TEAM_BUTTON]),
                action: this.leave_team
            };
            this.team_buttons[CLIENT.TEAM_JOIN] = {
                button: Dn(60, 60, 0, re[SPRITE.TEAM_BUTTON]),
                action: Yn.join_team
            };
            this.team_buttons[CLIENT.TEAM_MANAGE] = {
                button: Dn(60, 60, 0, re[SPRITE.MANAGE_TEAM_BUTTON]),
                action: this.manage_team
            };
            this.team_buttons[CLIENT.TEAM_SHOW] = {
                button: Dn(60, 60, 0, re[SPRITE.SHOW_TEAM_BUTTON]),
                action: this.show_team
            };
            this.team_buttons[CLIENT.TEAM_FULL] = {
                button: Dn(60, 60, 0, re[SPRITE.FULL_TEAM_BUTTON]),
                action: __p_5863156023(() => {}, 0)
            };
            this.team_buttons_id = -1;
            this.bread_oven_wood_button = Dn(60, 60, 0, re[SPRITE.BREAD_OVEN_WOOD]);
            this.bread_oven_bread_button = Dn(60, 60, 0, re[SPRITE.BREAD_OVEN_BREAD]);
            this.bread_oven_flour_button = Dn(60, 60, 0, re[SPRITE.WINDMILL_FLOUR]);
            this.windmill_wheat_button = Dn(60, 60, 0, re[SPRITE.WINDMILL_WHEAT_SEED]);
            this.windmill_flour_button = Dn(60, 60, 0, re[SPRITE.WINDMILL_FLOUR]);
            this.extractor_wood_button = Dn(60, 60, 0, re[SPRITE.INV_WOOD]);
            this.extractor_stone_button = Dn(60, 60, 0, re[SPRITE.INV_STONE]);
            this.extractor_gold_button = Dn(60, 60, 0, re[SPRITE.INV_GOLD]);
            this.extractor_diamond_button = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND]);
            this.extractor_amethyst_button = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST]);
            this.extractor_reidite_button = Dn(60, 60, 0, re[SPRITE.INV_REIDITE]);
            this.furnace_button = Dn(60, 60, 0, re[SPRITE.FURNACE_BUTTON]);
            this.chest_padlock = Dn(60, 60, 0, re[SPRITE.PADLOCK]);
            this.chest_lockpick = Dn(60, 60, 0, re[SPRITE.KEY]);
            this.chest_locked = Dn(60, 60, 0, re[SPRITE.LOCKED]);
            this.resurrection = Dn(120, 120, 0, re[ItemType.DRAGON_HEART]);
            this.resurrection.info.translate.x = 10;
            this.resurrection.info.translate.y = 10;
            this.chest_buttons = [];
            this.chest_buttons[ItemType.STONE_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_SWORD], 3);
            this.chest_buttons[ItemType.STONE_SWORD].id = ItemType.STONE_SWORD;
            this.chest_buttons[ItemType.STONE_PICK] = Dn(68, 68, 0, re[SPRITE.CHEST_PICK], 3);
            this.chest_buttons[ItemType.STONE_PICK].id = ItemType.STONE_PICK;
            this.chest_buttons[ItemType.STONE] = Dn(68, 68, 0, re[SPRITE.CHEST_STONE], 3);
            this.chest_buttons[ItemType.STONE].id = ItemType.STONE;
            this.chest_buttons[ItemType.WOOD] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD], 3);
            this.chest_buttons[ItemType.WOOD].id = ItemType.WOOD;
            this.chest_buttons[ItemType.BERRY] = Dn(68, 68, 0, re[SPRITE.CHEST_PLANT], 3);
            this.chest_buttons[ItemType.BERRY].id = ItemType.BERRY;
            this.chest_buttons[ItemType.CACTUS] = Dn(68, 68, 0, re[SPRITE.CHEST_CACTUS], 3);
            this.chest_buttons[ItemType.CACTUS].id = ItemType.CACTUS;
            this.chest_buttons[ItemType.GOLD] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD], 3);
            this.chest_buttons[ItemType.GOLD].id = ItemType.GOLD;
            this.chest_buttons[ItemType.DIAMOND] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND], 3);
            this.chest_buttons[ItemType.DIAMOND].id = ItemType.DIAMOND;
            this.chest_buttons[ItemType.GOLD_PICK] = Dn(68, 68, 0, re[SPRITE.CHEST_PICK_GOLD], 3);
            this.chest_buttons[ItemType.GOLD_PICK].id = ItemType.GOLD_PICK;
            this.chest_buttons[ItemType.DIAMOND_PICK] = Dn(68, 68, 0, re[SPRITE.CHEST_PICK_DIAMOND], 3);
            this.chest_buttons[ItemType.DIAMOND_PICK].id = ItemType.DIAMOND_PICK;
            this.chest_buttons[ItemType.GOLD_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_SWORD_GOLD], 3);
            this.chest_buttons[ItemType.GOLD_SWORD].id = ItemType.GOLD_SWORD;
            this.chest_buttons[ItemType.WOOD_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_SWORD_WOOD], 3);
            this.chest_buttons[ItemType.WOOD_SWORD].id = ItemType.WOOD_SWORD;
            this.chest_buttons[ItemType.DIAMOND_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_SWORD_DIAMOND], 3);
            this.chest_buttons[ItemType.DIAMOND_SWORD].id = ItemType.DIAMOND_SWORD;
            this.chest_buttons[ItemType.FIRE] = Dn(68, 68, 0, re[SPRITE.CHEST_FIRE], 3);
            this.chest_buttons[ItemType.FIRE].id = ItemType.FIRE;
            this.chest_buttons[ItemType.WORKBENCH] = Dn(68, 68, 0, re[SPRITE.CHEST_WORKBENCH], 3);
            this.chest_buttons[ItemType.WORKBENCH].id = ItemType.WORKBENCH;
            this.chest_buttons[ItemType.BERRY_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_SEED], 3);
            this.chest_buttons[ItemType.BERRY_SEED].id = ItemType.BERRY_SEED;
            this.chest_buttons[ItemType.WOOD_WALL] = Dn(68, 68, 0, re[SPRITE.CHEST_WALL], 3);
            this.chest_buttons[ItemType.WOOD_WALL].id = ItemType.WOOD_WALL;
            this.chest_buttons[ItemType.WOOD_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_SPIKE], 3);
            this.chest_buttons[ItemType.WOOD_SPIKE].id = ItemType.WOOD_SPIKE;
            this.chest_buttons[ItemType.WOOD_PICK] = Dn(68, 68, 0, re[SPRITE.CHEST_PICK_WOOD], 3);
            this.chest_buttons[ItemType.WOOD_PICK].id = ItemType.WOOD_PICK;
            this.chest_buttons[ItemType.COOKED_MEAT] = Dn(68, 68, 0, re[SPRITE.CHEST_COOKED_MEAT], 3);
            this.chest_buttons[ItemType.COOKED_MEAT].id = ItemType.COOKED_MEAT;
            this.chest_buttons[ItemType.MEAT] = Dn(68, 68, 0, re[SPRITE.CHEST_MEAT], 3);
            this.chest_buttons[ItemType.MEAT].id = ItemType.MEAT;
            this.chest_buttons[ItemType.BIG_FIRE] = Dn(68, 68, 0, re[SPRITE.CHEST_BIG_FIRE], 3);
            this.chest_buttons[ItemType.BIG_FIRE].id = ItemType.BIG_FIRE;
            this.chest_buttons[ItemType.BANDAGE] = Dn(68, 68, 0, re[SPRITE.CHEST_BANDAGE], 3);
            this.chest_buttons[ItemType.BANDAGE].id = ItemType.BANDAGE;
            this.chest_buttons[ItemType.CORD] = Dn(68, 68, 0, re[SPRITE.CHEST_CORD], 3);
            this.chest_buttons[ItemType.CORD].id = ItemType.CORD;
            this.chest_buttons[ItemType.STONE_WALL] = Dn(68, 68, 0, re[SPRITE.CHEST_STONE_WALL], 3);
            this.chest_buttons[ItemType.STONE_WALL].id = ItemType.STONE_WALL;
            this.chest_buttons[ItemType.GOLD_WALL] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD_WALL], 3);
            this.chest_buttons[ItemType.GOLD_WALL].id = ItemType.GOLD_WALL;
            this.chest_buttons[ItemType.DIAMOND_WALL] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_WALL], 3);
            this.chest_buttons[ItemType.DIAMOND_WALL].id = ItemType.DIAMOND_WALL;
            this.chest_buttons[ItemType.WOOD_DOOR] = Dn(68, 68, 0, re[SPRITE.CHEST_DOOR_WOOD_CLOSE], 3);
            this.chest_buttons[ItemType.WOOD_DOOR].id = ItemType.WOOD_DOOR;
            this.chest_buttons[ItemType.CHEST] = Dn(68, 68, 0, re[SPRITE.CHEST_CHEST], 3);
            this.chest_buttons[ItemType.CHEST].id = ItemType.CHEST;
            this.chest_buttons[ItemType.STONE_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_STONE_SPIKE], 3);
            this.chest_buttons[ItemType.STONE_SPIKE].id = ItemType.STONE_SPIKE;
            this.chest_buttons[ItemType.GOLD_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD_SPIKE], 3);
            this.chest_buttons[ItemType.GOLD_SPIKE].id = ItemType.GOLD_SPIKE;
            this.chest_buttons[ItemType.DIAMOND_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_SPIKE], 3);
            this.chest_buttons[ItemType.DIAMOND_SPIKE].id = ItemType.DIAMOND_SPIKE;
            this.chest_buttons[ItemType.RABBIT_FUR] = Dn(68, 68, 0, re[SPRITE.CHEST_FUR], 3);
            this.chest_buttons[ItemType.RABBIT_FUR].id = ItemType.RABBIT_FUR;
            this.chest_buttons[ItemType.BOAR_FUR] = Dn(68, 68, 0, re[SPRITE.CHEST_FUR_BOAR], 3);
            this.chest_buttons[ItemType.BOAR_FUR].id = ItemType.BOAR_FUR;
            this.chest_buttons[ItemType.WOLF_FUR] = Dn(68, 68, 0, re[SPRITE.CHEST_FUR_WOLF], 3);
            this.chest_buttons[ItemType.WOLF_FUR].id = ItemType.WOLF_FUR;
            this.chest_buttons[ItemType.PENGUIN_FEATHER] = Dn(68, 68, 0, re[SPRITE.CHEST_PENGUIN_FEATHER], 3);
            this.chest_buttons[ItemType.PENGUIN_FEATHER].id = ItemType.PENGUIN_FEATHER;
            this.chest_buttons[ItemType.HAWK_FEATHER] = Dn(68, 68, 0, re[SPRITE.CHEST_HAWK_FEATHER], 3);
            this.chest_buttons[ItemType.HAWK_FEATHER].id = ItemType.HAWK_FEATHER;
            this.chest_buttons[ItemType.VULTURE_FEATHER] = Dn(68, 68, 0, re[SPRITE.CHEST_VULTURE_FEATHER], 3);
            this.chest_buttons[ItemType.VULTURE_FEATHER].id = ItemType.VULTURE_FEATHER;
            this.chest_buttons[ItemType.EMERALD] = Dn(68, 68, 0, re[SPRITE.CHEST_EMERALD], 3);
            this.chest_buttons[ItemType.EMERALD].id = ItemType.EMERALD;
            this.chest_buttons[ItemType.EARMUFFS] = Dn(68, 68, 0, re[SPRITE.CHEST_EARMUFFS], 3);
            this.chest_buttons[ItemType.EARMUFFS].id = ItemType.EARMUFFS;
            this.chest_buttons[ItemType.STONE_DOOR] = Dn(68, 68, 0, re[SPRITE.CHEST_DOOR_STONE_CLOSE], 3);
            this.chest_buttons[ItemType.STONE_DOOR].id = ItemType.STONE_DOOR;
            this.chest_buttons[ItemType.GOLD_DOOR] = Dn(68, 68, 0, re[SPRITE.CHEST_DOOR_GOLD_CLOSE], 3);
            this.chest_buttons[ItemType.GOLD_DOOR].id = ItemType.GOLD_DOOR;
            this.chest_buttons[ItemType.DIAMOND_DOOR] = Dn(68, 68, 0, re[SPRITE.CHEST_DOOR_DIAMOND_CLOSE], 3);
            this.chest_buttons[ItemType.DIAMOND_DOOR].id = ItemType.DIAMOND_DOOR;
            this.chest_buttons[ItemType.COAT] = Dn(68, 68, 0, re[SPRITE.CHEST_COAT], 3);
            this.chest_buttons[ItemType.COAT].id = ItemType.COAT;
            this.chest_buttons[ItemType.WOOD_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD_SPEAR], 3);
            this.chest_buttons[ItemType.WOOD_SPEAR].id = ItemType.WOOD_SPEAR;
            this.chest_buttons[ItemType.STONE_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_SPEAR], 3);
            this.chest_buttons[ItemType.STONE_SPEAR].id = ItemType.STONE_SPEAR;
            this.chest_buttons[ItemType.GOLD_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD_SPEAR], 3);
            this.chest_buttons[ItemType.GOLD_SPEAR].id = ItemType.GOLD_SPEAR;
            this.chest_buttons[ItemType.DIAMOND_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_SPEAR], 3);
            this.chest_buttons[ItemType.DIAMOND_SPEAR].id = ItemType.DIAMOND_SPEAR;
            this.chest_buttons[ItemType.DRAGON_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_SPEAR], 3);
            this.chest_buttons[ItemType.DRAGON_SPEAR].id = ItemType.DRAGON_SPEAR;
            this.chest_buttons[ItemType.FURNACE] = Dn(68, 68, 0, re[SPRITE.CHEST_FURNACE], 3);
            this.chest_buttons[ItemType.FURNACE].id = ItemType.FURNACE;
            this.chest_buttons[ItemType.EXPLORER_HAT] = Dn(68, 68, 0, re[SPRITE.CHEST_EXPLORER_HAT], 3);
            this.chest_buttons[ItemType.EXPLORER_HAT].id = ItemType.EXPLORER_HAT;
            this.chest_buttons[ItemType.PIRATE_HAT] = Dn(68, 68, 0, re[SPRITE.CHEST_PIRATE_HAT], 3);
            this.chest_buttons[ItemType.PIRATE_HAT].id = ItemType.PIRATE_HAT;
            this.chest_buttons[ItemType.FLOWER_HAT] = Dn(68, 68, 0, re[SPRITE.CHEST_FLOWER_HAT], 3);
            this.chest_buttons[ItemType.FLOWER_HAT].id = ItemType.FLOWER_HAT;
            this.chest_buttons[ItemType.FUR_HAT] = Dn(68, 68, 0, re[SPRITE.CHEST_FUR_HAT], 3);
            this.chest_buttons[ItemType.FUR_HAT].id = ItemType.FUR_HAT;
            this.chest_buttons[ItemType.TURBAN1] = Dn(68, 68, 0, re[SPRITE.CHEST_TURBAN1], 3);
            this.chest_buttons[ItemType.TURBAN1].id = ItemType.TURBAN1;
            this.chest_buttons[ItemType.TURBAN2] = Dn(68, 68, 0, re[SPRITE.CHEST_TURBAN2], 3);
            this.chest_buttons[ItemType.TURBAN2].id = ItemType.TURBAN2;
            this.chest_buttons[ItemType.WOOD_ARROW] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD_ARROW], 3);
            this.chest_buttons[ItemType.WOOD_ARROW].id = ItemType.WOOD_ARROW;
            this.chest_buttons[ItemType.WOOD_BOW] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD_BOW], 3);
            this.chest_buttons[ItemType.WOOD_BOW].id = ItemType.WOOD_BOW;
            this.chest_buttons[ItemType.WOOD_SHIELD] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD_SHIELD], 3);
            this.chest_buttons[ItemType.WOOD_SHIELD].id = ItemType.WOOD_SHIELD;
            this.chest_buttons[ItemType.STONE_ARROW] = Dn(68, 68, 0, re[SPRITE.CHEST_STONE_ARROW], 3);
            this.chest_buttons[ItemType.STONE_ARROW].id = ItemType.STONE_ARROW;
            this.chest_buttons[ItemType.STONE_BOW] = Dn(68, 68, 0, re[SPRITE.CHEST_STONE_BOW], 3);
            this.chest_buttons[ItemType.STONE_BOW].id = ItemType.STONE_BOW;
            this.chest_buttons[ItemType.STONE_SHIELD] = Dn(68, 68, 0, re[SPRITE.CHEST_STONE_SHIELD], 3);
            this.chest_buttons[ItemType.STONE_SHIELD].id = ItemType.STONE_SHIELD;
            this.chest_buttons[ItemType.GOLD_ARROW] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD_ARROW], 3);
            this.chest_buttons[ItemType.GOLD_ARROW].id = ItemType.GOLD_ARROW;
            this.chest_buttons[ItemType.GOLD_BOW] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD_BOW], 3);
            this.chest_buttons[ItemType.GOLD_BOW].id = ItemType.GOLD_BOW;
            this.chest_buttons[ItemType.GOLD_SHIELD] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD_SHIELD], 3);
            this.chest_buttons[ItemType.GOLD_SHIELD].id = ItemType.GOLD_SHIELD;
            this.chest_buttons[ItemType.DIAMOND_ARROW] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_ARROW], 3);
            this.chest_buttons[ItemType.DIAMOND_ARROW].id = ItemType.DIAMOND_ARROW;
            this.chest_buttons[ItemType.DIAMOND_BOW] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_BOW], 3);
            this.chest_buttons[ItemType.DIAMOND_BOW].id = ItemType.DIAMOND_BOW;
            this.chest_buttons[ItemType.DIAMOND_SHIELD] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_SHIELD], 3);
            this.chest_buttons[ItemType.DIAMOND_SHIELD].id = ItemType.DIAMOND_SHIELD;
            this.chest_buttons[ItemType.AMETHYST_ARROW] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_ARROW], 3);
            this.chest_buttons[ItemType.AMETHYST_ARROW].id = ItemType.AMETHYST_ARROW;
            this.chest_buttons[ItemType.AMETHYST_BOW] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_BOW], 3);
            this.chest_buttons[ItemType.AMETHYST_BOW].id = ItemType.AMETHYST_BOW;
            this.chest_buttons[ItemType.AMETHYST_SHIELD] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_SHIELD], 3);
            this.chest_buttons[ItemType.AMETHYST_SHIELD].id = ItemType.AMETHYST_SHIELD;
            this.chest_buttons[ItemType.REIDITE_ARROW] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_ARROW], 3);
            this.chest_buttons[ItemType.REIDITE_ARROW].id = ItemType.REIDITE_ARROW;
            this.chest_buttons[ItemType.REIDITE_BOW] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_BOW], 3);
            this.chest_buttons[ItemType.REIDITE_BOW].id = ItemType.REIDITE_BOW;
            this.chest_buttons[ItemType.REIDITE_SHIELD] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_SHIELD], 3);
            this.chest_buttons[ItemType.REIDITE_SHIELD].id = ItemType.REIDITE_SHIELD;
            this.chest_buttons[ItemType.DRAGON_ARROW] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_ARROW], 3);
            this.chest_buttons[ItemType.DRAGON_ARROW].id = ItemType.DRAGON_ARROW;
            this.chest_buttons[ItemType.DRAGON_BOW] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_BOW], 3);
            this.chest_buttons[ItemType.DRAGON_BOW].id = ItemType.DRAGON_BOW;
            this.chest_buttons[ItemType.WOOD_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD_HELMET], 3);
            this.chest_buttons[ItemType.WOOD_HELMET].id = ItemType.WOOD_HELMET;
            this.chest_buttons[ItemType.STONE_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_STONE_HELMET], 3);
            this.chest_buttons[ItemType.STONE_HELMET].id = ItemType.STONE_HELMET;
            this.chest_buttons[ItemType.GOLD_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD_HELMET], 3);
            this.chest_buttons[ItemType.GOLD_HELMET].id = ItemType.GOLD_HELMET;
            this.chest_buttons[ItemType.DIAMOND_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_HELMET], 3);
            this.chest_buttons[ItemType.DIAMOND_HELMET].id = ItemType.DIAMOND_HELMET;
            this.chest_buttons[ItemType.BOOK] = Dn(68, 68, 0, re[SPRITE.CHEST_BOOK], 3);
            this.chest_buttons[ItemType.BOOK].id = ItemType.BOOK;
            this.chest_buttons[ItemType.PAPER] = Dn(68, 68, 0, re[SPRITE.CHEST_PAPER], 3);
            this.chest_buttons[ItemType.PAPER].id = ItemType.PAPER;
            this.chest_buttons[ItemType.BAG] = Dn(68, 68, 0, re[SPRITE.CHEST_BAG], 3);
            this.chest_buttons[ItemType.BAG].id = ItemType.BAG;
            this.chest_buttons[ItemType.AMETHYST] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST], 3);
            this.chest_buttons[ItemType.AMETHYST].id = ItemType.AMETHYST;
            this.chest_buttons[ItemType.AMETHYST_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_SWORD_AMETHYST], 3);
            this.chest_buttons[ItemType.AMETHYST_SWORD].id = ItemType.AMETHYST_SWORD;
            this.chest_buttons[ItemType.PIRATE_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_PIRATE_SWORD], 3);
            this.chest_buttons[ItemType.PIRATE_SWORD].id = ItemType.PIRATE_SWORD;
            this.chest_buttons[ItemType.AMETHYST_PICK] = Dn(68, 68, 0, re[SPRITE.CHEST_PICK_AMETHYST], 3);
            this.chest_buttons[ItemType.AMETHYST_PICK].id = ItemType.AMETHYST_PICK;
            this.chest_buttons[ItemType.REIDITE_PICK] = Dn(68, 68, 0, re[SPRITE.CHEST_PICK_REIDITE], 3);
            this.chest_buttons[ItemType.REIDITE_PICK].id = ItemType.REIDITE_PICK;
            this.chest_buttons[ItemType.AMETHYST_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_SPEAR], 3);
            this.chest_buttons[ItemType.AMETHYST_SPEAR].id = ItemType.AMETHYST_SPEAR;
            this.chest_buttons[ItemType.STONE_HAMMER] = Dn(68, 68, 0, re[SPRITE.CHEST_HAMMER], 3);
            this.chest_buttons[ItemType.STONE_HAMMER].id = ItemType.STONE_HAMMER;
            this.chest_buttons[ItemType.GOLD_HAMMER] = Dn(68, 68, 0, re[SPRITE.CHEST_HAMMER_GOLD], 3);
            this.chest_buttons[ItemType.GOLD_HAMMER].id = ItemType.GOLD_HAMMER;
            this.chest_buttons[ItemType.DIAMOND_HAMMER] = Dn(68, 68, 0, re[SPRITE.CHEST_HAMMER_DIAMOND], 3);
            this.chest_buttons[ItemType.DIAMOND_HAMMER].id = ItemType.DIAMOND_HAMMER;
            this.chest_buttons[ItemType.AMETHYST_HAMMER] = Dn(68, 68, 0, re[SPRITE.CHEST_HAMMER_AMETHYST], 3);
            this.chest_buttons[ItemType.AMETHYST_HAMMER].id = ItemType.AMETHYST_HAMMER;
            this.chest_buttons[ItemType.REIDITE_HAMMER] = Dn(68, 68, 0, re[SPRITE.CHEST_HAMMER_REIDITE], 3);
            this.chest_buttons[ItemType.REIDITE_HAMMER].id = ItemType.REIDITE_HAMMER;
            this.chest_buttons[ItemType.AMETHYST_WALL] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_WALL], 3);
            this.chest_buttons[ItemType.AMETHYST_WALL].id = ItemType.AMETHYST_WALL;
            this.chest_buttons[ItemType.AMETHYST_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_SPIKE], 3);
            this.chest_buttons[ItemType.AMETHYST_SPIKE].id = ItemType.AMETHYST_SPIKE;
            this.chest_buttons[ItemType.AMETHYST_DOOR] = Dn(68, 68, 0, re[SPRITE.CHEST_DOOR_AMETHYST_CLOSE], 3);
            this.chest_buttons[ItemType.AMETHYST_DOOR].id = ItemType.AMETHYST_DOOR;
            this.chest_buttons[ItemType.CAP_SCARF] = Dn(68, 68, 0, re[SPRITE.CHEST_CAP_SCARF], 3);
            this.chest_buttons[ItemType.CAP_SCARF].id = ItemType.CAP_SCARF;
            this.chest_buttons[ItemType.WINTER_FUR] = Dn(68, 68, 0, re[SPRITE.CHEST_FUR_WINTER], 3);
            this.chest_buttons[ItemType.WINTER_FUR].id = ItemType.WINTER_FUR;
            this.chest_buttons[ItemType.MAMMOTH_FUR] = Dn(68, 68, 0, re[SPRITE.CHEST_FUR_MAMMOTH], 3);
            this.chest_buttons[ItemType.MAMMOTH_FUR].id = ItemType.MAMMOTH_FUR;
            this.chest_buttons[ItemType.DIAMOND_CORD] = Dn(68, 68, 0, re[SPRITE.CHEST_BLUE_CORD], 3);
            this.chest_buttons[ItemType.DIAMOND_CORD].id = ItemType.DIAMOND_CORD;
            this.chest_buttons[ItemType.LOCK] = Dn(68, 68, 0, re[SPRITE.CHEST_LOCK], 3);
            this.chest_buttons[ItemType.LOCK].id = ItemType.LOCK;
            this.chest_buttons[ItemType.DRAGON_HEART] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_HEART], 3);
            this.chest_buttons[ItemType.DRAGON_HEART].id = ItemType.DRAGON_HEART;
            this.chest_buttons[ItemType.LAVA_HEART] = Dn(68, 68, 0, re[SPRITE.CHEST_LAVA_HEART], 3);
            this.chest_buttons[ItemType.LAVA_HEART].id = ItemType.LAVA_HEART;
            this.chest_buttons[ItemType.RESURRECTION] = Dn(68, 68, 0, re[SPRITE.CHEST_RESURRECTION], 3);
            this.chest_buttons[ItemType.RESURRECTION].id = ItemType.RESURRECTION;
            this.chest_buttons[ItemType.LOCK_PICK] = Dn(68, 68, 0, re[SPRITE.CHEST_LOCKPICK], 3);
            this.chest_buttons[ItemType.LOCK_PICK].id = ItemType.LOCK_PICK;
            this.chest_buttons[ItemType.TOTEM] = Dn(68, 68, 0, re[SPRITE.CHEST_TOTEM], 3);
            this.chest_buttons[ItemType.TOTEM].id = ItemType.TOTEM;
            this.chest_buttons[ItemType.AMETHYST_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_HELMET], 3);
            this.chest_buttons[ItemType.AMETHYST_HELMET].id = ItemType.AMETHYST_HELMET;
            this.chest_buttons[ItemType.SUPER_HAMMER] = Dn(68, 68, 0, re[SPRITE.CHEST_SUPER_HAMMER], 3);
            this.chest_buttons[ItemType.SUPER_HAMMER].id = ItemType.SUPER_HAMMER;
            this.chest_buttons[ItemType.BRIDGE] = Dn(68, 68, 0, re[SPRITE.CHEST_BRIDGE], 3);
            this.chest_buttons[ItemType.BRIDGE].id = ItemType.BRIDGE;
            this.chest_buttons[ItemType.TOWER] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD_TOWER], 3);
            this.chest_buttons[ItemType.TOWER].id = ItemType.TOWER;
            this.chest_buttons[ItemType.BOAT] = Dn(68, 68, 0, re[SPRITE.CHEST_BOAT], 3);
            this.chest_buttons[ItemType.BOAT].id = ItemType.BOAT;
            this.chest_buttons[ItemType.SLED] = Dn(68, 68, 0, re[SPRITE.CHEST_SLED], 3);
            this.chest_buttons[ItemType.SLED].id = ItemType.SLED;
            this.chest_buttons[ItemType.PLANE] = Dn(68, 68, 0, re[SPRITE.CHEST_PLANE], 3);
            this.chest_buttons[ItemType.PLANE].id = ItemType.PLANE;
            this.chest_buttons[ItemType.SADDLE] = Dn(68, 68, 0, re[SPRITE.CHEST_SADDLE], 3);
            this.chest_buttons[ItemType.SADDLE].id = ItemType.SADDLE;
            this.chest_buttons[ItemType.BOAR] = Dn(68, 68, 0, re[SPRITE.CHEST_MOUNT_BOAR], 3);
            this.chest_buttons[ItemType.BOAR].id = ItemType.BOAR;
            this.chest_buttons[ItemType.BABY_DRAGON] = Dn(68, 68, 0, re[SPRITE.CHEST_BABY_DRAGON], 3);
            this.chest_buttons[ItemType.BABY_DRAGON].id = ItemType.BABY_DRAGON;
            this.chest_buttons[ItemType.BABY_MAMMOTH] = Dn(68, 68, 0, re[SPRITE.CHEST_BABY_MAMMOTH], 3);
            this.chest_buttons[ItemType.BABY_MAMMOTH].id = ItemType.BABY_MAMMOTH;
            this.chest_buttons[ItemType.BABY_LAVA] = Dn(68, 68, 0, re[SPRITE.CHEST_BABY_LAVA], 3);
            this.chest_buttons[ItemType.BABY_LAVA].id = ItemType.BABY_LAVA;
            this.chest_buttons[ItemType.HAWK] = Dn(68, 68, 0, re[SPRITE.CHEST_HAWK], 3);
            this.chest_buttons[ItemType.HAWK].id = ItemType.HAWK;
            this.chest_buttons[ItemType.CRAB_BOSS] = Dn(68, 68, 0, re[SPRITE.CHEST_CRAB_BOSS], 3);
            this.chest_buttons[ItemType.CRAB_BOSS].id = ItemType.CRAB_BOSS;
            this.chest_buttons[ItemType.SAND] = Dn(68, 68, 0, re[SPRITE.CHEST_SAND], 3);
            this.chest_buttons[ItemType.SAND].id = ItemType.SAND;
            this.chest_buttons[ItemType.BOTTLE_FULL] = Dn(68, 68, 0, re[SPRITE.CHEST_BOTTLE_FULL], 3);
            this.chest_buttons[ItemType.BOTTLE_FULL].id = ItemType.BOTTLE_FULL;
            this.chest_buttons[ItemType.BOTTLE_EMPTY] = Dn(68, 68, 0, re[SPRITE.CHEST_BOTTLE_EMPTY], 3);
            this.chest_buttons[ItemType.BOTTLE_EMPTY].id = ItemType.BOTTLE_EMPTY;
            this.chest_buttons[ItemType.STONE_SHOVEL] = Dn(68, 68, 0, re[SPRITE.CHEST_SHOVEL], 3);
            this.chest_buttons[ItemType.STONE_SHOVEL].id = ItemType.STONE_SHOVEL;
            this.chest_buttons[ItemType.GOLD_SHOVEL] = Dn(68, 68, 0, re[SPRITE.CHEST_SHOVEL_GOLD], 3);
            this.chest_buttons[ItemType.GOLD_SHOVEL].id = ItemType.GOLD_SHOVEL;
            this.chest_buttons[ItemType.DIAMOND_SHOVEL] = Dn(68, 68, 0, re[SPRITE.CHEST_SHOVEL_DIAMOND], 3);
            this.chest_buttons[ItemType.DIAMOND_SHOVEL].id = ItemType.DIAMOND_SHOVEL;
            this.chest_buttons[ItemType.AMETHYST_SHOVEL] = Dn(68, 68, 0, re[SPRITE.CHEST_SHOVEL_AMETHYST], 3);
            this.chest_buttons[ItemType.AMETHYST_SHOVEL].id = ItemType.AMETHYST_SHOVEL;
            this.chest_buttons[ItemType.REIDITE_SHOVEL] = Dn(68, 68, 0, re[SPRITE.CHEST_SHOVEL_REIDITE], 3);
            this.chest_buttons[ItemType.REIDITE_SHOVEL].id = ItemType.REIDITE_SHOVEL;
            this.chest_buttons[ItemType.WRENCH] = Dn(68, 68, 0, re[SPRITE.CHEST_SPANNER], 3);
            this.chest_buttons[ItemType.WRENCH].id = ItemType.WRENCH;
            this.chest_buttons[ItemType.GOLD_WRENCH] = Dn(68, 68, 0, re[SPRITE.INV_GOLD_WRENCH], 3);
            this.chest_buttons[ItemType.GOLD_WRENCH].id = ItemType.GOLD_WRENCH;
            this.chest_buttons[ItemType.KRAKEN_FUR] = Dn(68, 68, 0, re[SPRITE.CHEST_KRAKEN_SKIN], 3);
            this.chest_buttons[ItemType.KRAKEN_FUR].id = ItemType.KRAKEN_FUR;
            this.chest_buttons[ItemType.WATERING_CAN_EMPTY] = Dn(68, 68, 0, re[SPRITE.CHEST_WATERING_CAN], 3);
            this.chest_buttons[ItemType.WATERING_CAN_EMPTY].id = ItemType.WATERING_CAN_EMPTY;
            this.chest_buttons[ItemType.FLOUR] = Dn(68, 68, 0, re[SPRITE.CHEST_FLOUR], 3);
            this.chest_buttons[ItemType.FLOUR].id = ItemType.FLOUR;
            this.chest_buttons[ItemType.WHEAT_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_WHEAT_SEED], 3);
            this.chest_buttons[ItemType.WHEAT_SEED].id = ItemType.WHEAT_SEED;
            this.chest_buttons[ItemType.COOKIE] = Dn(68, 68, 0, re[SPRITE.CHEST_COOKIE], 3);
            this.chest_buttons[ItemType.COOKIE].id = ItemType.COOKIE;
            this.chest_buttons[ItemType.WHEAT] = Dn(68, 68, 0, re[SPRITE.CHEST_WILD_WHEAT], 3);
            this.chest_buttons[ItemType.WHEAT].id = ItemType.WHEAT;
            this.chest_buttons[ItemType.WINDMILL] = Dn(68, 68, 0, re[SPRITE.CHEST_WINDMILL], 3);
            this.chest_buttons[ItemType.WINDMILL].id = ItemType.WINDMILL;
            this.chest_buttons[ItemType.SUPER_DIVING_SUIT] = Dn(68, 68, 0, re[SPRITE.CHEST_SUPER_DIVING_SUIT], 3);
            this.chest_buttons[ItemType.SUPER_DIVING_SUIT].id = ItemType.SUPER_DIVING_SUIT;
            this.chest_buttons[ItemType.DIVING_MASK] = Dn(68, 68, 0, re[SPRITE.CHEST_DIVING_MASK], 3);
            this.chest_buttons[ItemType.DIVING_MASK].id = ItemType.DIVING_MASK;
            this.chest_buttons[ItemType.WATERING_CAN_FULL] = Dn(68, 68, 0, re[SPRITE.CHEST_WATERING_CAN_FULL], 3);
            this.chest_buttons[ItemType.WATERING_CAN_FULL].id = ItemType.WATERING_CAN_FULL;
            this.chest_buttons[ItemType.CAKE] = Dn(68, 68, 0, re[SPRITE.CHEST_CAKE], 3);
            this.chest_buttons[ItemType.CAKE].id = ItemType.CAKE;
            this.chest_buttons[ItemType.BREAD] = Dn(68, 68, 0, re[SPRITE.CHEST_BREAD], 3);
            this.chest_buttons[ItemType.BREAD].id = ItemType.BREAD;
            this.chest_buttons[ItemType.FISH] = Dn(68, 68, 0, re[SPRITE.CHEST_FOODFISH], 3);
            this.chest_buttons[ItemType.FISH].id = ItemType.FISH;
            this.chest_buttons[ItemType.FISH_COOKED] = Dn(68, 68, 0, re[SPRITE.CHEST_FOODFISH_COOKED], 3);
            this.chest_buttons[ItemType.FISH_COOKED].id = ItemType.FISH_COOKED;
            this.chest_buttons[ItemType.PIRANHA_SCALES] = Dn(68, 68, 0, re[SPRITE.CHEST_SCALES], 3);
            this.chest_buttons[ItemType.PIRANHA_SCALES].id = ItemType.PIRANHA_SCALES;
            this.chest_buttons[ItemType.GROUND] = Dn(68, 68, 0, re[SPRITE.CHEST_GROUND], 3);
            this.chest_buttons[ItemType.GROUND].id = ItemType.GROUND;
            this.chest_buttons[ItemType.PLOT] = Dn(68, 68, 0, re[SPRITE.CHEST_PLOT], 3);
            this.chest_buttons[ItemType.PLOT].id = ItemType.PLOT;
            this.chest_buttons[ItemType.ICE] = Dn(68, 68, 0, re[SPRITE.CHEST_ICE], 3);
            this.chest_buttons[ItemType.ICE].id = ItemType.ICE;
            this.chest_buttons[ItemType.BREAD_OVEN] = Dn(68, 68, 0, re[SPRITE.CHEST_BREAD_OVEN], 3);
            this.chest_buttons[ItemType.BREAD_OVEN].id = ItemType.BREAD_OVEN;
            this.chest_buttons[ItemType.SANDWICH] = Dn(68, 68, 0, re[SPRITE.CHEST_SANDWICH], 3);
            this.chest_buttons[ItemType.SANDWICH].id = ItemType.SANDWICH;
            this.chest_buttons[ItemType.DRAGON_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_HELMET], 3);
            this.chest_buttons[ItemType.DRAGON_HELMET].id = ItemType.DRAGON_HELMET;
            this.chest_buttons[ItemType.DRAGON_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_SWORD], 3);
            this.chest_buttons[ItemType.DRAGON_SWORD].id = ItemType.DRAGON_SWORD;
            this.chest_buttons[ItemType.DRAGON_ORB] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_ORB], 3);
            this.chest_buttons[ItemType.DRAGON_ORB].id = ItemType.DRAGON_ORB;
            this.chest_buttons[ItemType.DRAGON_CUBE] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_CUBE], 3);
            this.chest_buttons[ItemType.DRAGON_CUBE].id = ItemType.DRAGON_CUBE;
            this.chest_buttons[ItemType.LAVA_ORB] = Dn(68, 68, 0, re[SPRITE.CHEST_LAVA_ORB], 3);
            this.chest_buttons[ItemType.LAVA_ORB].id = ItemType.LAVA_ORB;
            this.chest_buttons[ItemType.LAVA_CUBE] = Dn(68, 68, 0, re[SPRITE.CHEST_LAVA_CUBE], 3);
            this.chest_buttons[ItemType.LAVA_CUBE].id = ItemType.LAVA_CUBE;
            this.chest_buttons[ItemType.CROWN_GREEN] = Dn(68, 68, 0, re[SPRITE.CHEST_CROWN_GREEN], 3);
            this.chest_buttons[ItemType.CROWN_GREEN].id = ItemType.CROWN_GREEN;
            this.chest_buttons[ItemType.GEM_GREEN] = Dn(68, 68, 0, re[SPRITE.CHEST_GEMME_GREEN], 3);
            this.chest_buttons[ItemType.GEM_GREEN].id = ItemType.GEM_GREEN;
            this.chest_buttons[ItemType.GEM_ORANGE] = Dn(68, 68, 0, re[SPRITE.CHEST_GEMME_ORANGE], 3);
            this.chest_buttons[ItemType.GEM_ORANGE].id = ItemType.GEM_ORANGE;
            this.chest_buttons[ItemType.CROWN_ORANGE] = Dn(68, 68, 0, re[SPRITE.CHEST_CROWN_ORANGE], 3);
            this.chest_buttons[ItemType.CROWN_ORANGE].id = ItemType.CROWN_ORANGE;
            this.chest_buttons[ItemType.GEM_BLUE] = Dn(68, 68, 0, re[SPRITE.CHEST_GEMME_BLUE], 3);
            this.chest_buttons[ItemType.GEM_BLUE].id = ItemType.GEM_BLUE;
            this.chest_buttons[ItemType.CROWN_BLUE] = Dn(68, 68, 0, re[SPRITE.CHEST_CROWN_BLUE], 3);
            this.chest_buttons[ItemType.CROWN_BLUE].id = ItemType.CROWN_BLUE;
            this.chest_buttons[ItemType.HOOD] = Dn(68, 68, 0, re[SPRITE.CHEST_HOOD], 3);
            this.chest_buttons[ItemType.HOOD].id = ItemType.HOOD;
            this.chest_buttons[ItemType.PEASANT] = Dn(68, 68, 0, re[SPRITE.CHEST_PEASANT], 3);
            this.chest_buttons[ItemType.PEASANT].id = ItemType.PEASANT;
            this.chest_buttons[ItemType.WINTER_PEASANT_FUR] = Dn(68, 68, 0, re[SPRITE.CHEST_SPECIAL_FUR], 3);
            this.chest_buttons[ItemType.WINTER_PEASANT_FUR].id = ItemType.WINTER_PEASANT_FUR;
            this.chest_buttons[ItemType.WINTER_HOOD_FUR] = Dn(68, 68, 0, re[SPRITE.CHEST_SPECIAL_FUR_2], 3);
            this.chest_buttons[ItemType.WINTER_HOOD_FUR].id = ItemType.WINTER_HOOD_FUR;
            this.chest_buttons[ItemType.WINTER_PEASANT] = Dn(68, 68, 0, re[SPRITE.CHEST_WINTER_PEASANT], 3);
            this.chest_buttons[ItemType.WINTER_PEASANT].id = ItemType.WINTER_PEASANT;
            this.chest_buttons[ItemType.WINTER_HOOD] = Dn(68, 68, 0, re[SPRITE.CHEST_WINTER_HOOD], 3);
            this.chest_buttons[ItemType.WINTER_HOOD].id = ItemType.WINTER_HOOD;
            this.chest_buttons[ItemType.BUCKET_FULL] = Dn(68, 68, 0, re[SPRITE.CHEST_BUCKET_FULL], 3);
            this.chest_buttons[ItemType.BUCKET_FULL].id = ItemType.BUCKET_FULL;
            this.chest_buttons[ItemType.BUCKET_EMPTY] = Dn(68, 68, 0, re[SPRITE.CHEST_BUCKET_EMPTY], 3);
            this.chest_buttons[ItemType.BUCKET_EMPTY].id = ItemType.BUCKET_EMPTY;
            this.chest_buttons[ItemType.WELL] = Dn(68, 68, 0, re[SPRITE.CHEST_WELL], 3);
            this.chest_buttons[ItemType.WELL].id = ItemType.WELL;
            this.chest_buttons[ItemType.PUMPKIN_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_PUMPKIN_SEED], 3);
            this.chest_buttons[ItemType.PUMPKIN_SEED].id = ItemType.PUMPKIN_SEED;
            this.chest_buttons[ItemType.PUMPKIN] = Dn(68, 68, 0, re[SPRITE.CHEST_PUMPKIN], 3);
            this.chest_buttons[ItemType.PUMPKIN].id = ItemType.PUMPKIN;
            this.chest_buttons[ItemType.ROOF] = Dn(68, 68, 0, re[SPRITE.CHEST_ROOF], 3);
            this.chest_buttons[ItemType.ROOF].id = ItemType.ROOF;
            this.chest_buttons[ItemType.GARLIC_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_GARLIC_SEED], 3);
            this.chest_buttons[ItemType.GARLIC_SEED].id = ItemType.GARLIC_SEED;
            this.chest_buttons[ItemType.GARLIC] = Dn(68, 68, 0, re[SPRITE.CHEST_GARLIC], 3);
            this.chest_buttons[ItemType.GARLIC].id = ItemType.GARLIC;
            this.chest_buttons[ItemType.THORNBUSH_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_THORNBUSH_SEED], 3);
            this.chest_buttons[ItemType.THORNBUSH_SEED].id = ItemType.THORNBUSH_SEED;
            this.chest_buttons[ItemType.THORNBUSH] = Dn(68, 68, 0, re[SPRITE.CHEST_THORNBUSH], 3);
            this.chest_buttons[ItemType.THORNBUSH].id = ItemType.THORNBUSH;
            this.chest_buttons[ItemType.TOMATO_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_TOMATO_SEED], 3);
            this.chest_buttons[ItemType.TOMATO_SEED].id = ItemType.TOMATO_SEED;
            this.chest_buttons[ItemType.TOMATO] = Dn(68, 68, 0, re[SPRITE.CHEST_TOMATO], 3);
            this.chest_buttons[ItemType.TOMATO].id = ItemType.TOMATO;
            this.chest_buttons[ItemType.CARROT_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_CARROT_SEED], 3);
            this.chest_buttons[ItemType.CARROT_SEED].id = ItemType.CARROT_SEED;
            this.chest_buttons[ItemType.CARROT] = Dn(68, 68, 0, re[SPRITE.CHEST_CARROT], 3);
            this.chest_buttons[ItemType.CARROT].id = ItemType.CARROT;
            this.chest_buttons[ItemType.WATERMELON_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_WATERMELON_SEED], 3);
            this.chest_buttons[ItemType.WATERMELON_SEED].id = ItemType.WATERMELON_SEED;
            this.chest_buttons[ItemType.WATERMELON] = Dn(68, 68, 0, re[SPRITE.CHEST_WATERMELON], 3);
            this.chest_buttons[ItemType.WATERMELON].id = ItemType.WATERMELON;
            this.chest_buttons[ItemType.ALOE_VERA_SEED] = Dn(68, 68, 0, re[SPRITE.CHEST_ALOE_VERA_SEED], 3);
            this.chest_buttons[ItemType.ALOE_VERA_SEED].id = ItemType.ALOE_VERA_SEED;
            this.chest_buttons[ItemType.ALOE_VERA] = Dn(68, 68, 0, re[SPRITE.CHEST_ALOE_VERA], 3);
            this.chest_buttons[ItemType.ALOE_VERA].id = ItemType.ALOE_VERA;
            this.chest_buttons[ItemType.CHRISTMAS_HAT] = Dn(68, 68, 0, re[SPRITE.CHEST_CHRISTMAS_HAT], 3);
            this.chest_buttons[ItemType.CHRISTMAS_HAT].id = ItemType.CHRISTMAS_HAT;
            this.chest_buttons[ItemType.ELF_HAT] = Dn(68, 68, 0, re[SPRITE.CHEST_ELF_HAT], 3);
            this.chest_buttons[ItemType.ELF_HAT].id = ItemType.ELF_HAT;
            this.chest_buttons[ItemType.WOOD_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD_SPEAR], 3);
            this.chest_buttons[ItemType.WOOD_SPEAR].id = ItemType.WOOD_SPEAR;
            this.chest_buttons[ItemType.DRAGON_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_DRAGON_SPEAR], 3);
            this.chest_buttons[ItemType.DRAGON_SPEAR].id = ItemType.DRAGON_SPEAR;
            this.chest_buttons[ItemType.CRAB_STICK] = Dn(68, 68, 0, re[SPRITE.CHEST_CRAB_STICK], 3);
            this.chest_buttons[ItemType.CRAB_STICK].id = ItemType.CRAB_STICK;
            this.chest_buttons[ItemType.CRAB_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_CRAB_SPEAR], 3);
            this.chest_buttons[ItemType.CRAB_SPEAR].id = ItemType.CRAB_SPEAR;
            this.chest_buttons[ItemType.CRAB_LOOT] = Dn(68, 68, 0, re[SPRITE.CHEST_CRAB_LOOT], 3);
            this.chest_buttons[ItemType.CRAB_LOOT].id = ItemType.CRAB_LOOT;
            this.chest_buttons[ItemType.BED] = Dn(68, 68, 0, re[SPRITE.CHEST_BED], 3);
            this.chest_buttons[ItemType.BED].id = ItemType.BED;
            this.chest_buttons[ItemType.CRAB_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_CROWN_CRAB], 3);
            this.chest_buttons[ItemType.CRAB_HELMET].id = ItemType.CRAB_HELMET;
            this.chest_buttons[ItemType.GARLAND] = Dn(68, 68, 0, re[SPRITE.CHEST_GARLAND], 3);
            this.chest_buttons[ItemType.GARLAND].id = ItemType.GARLAND;
            this.chest_buttons[ItemType.SUGAR_CAN] = Dn(68, 68, 0, re[SPRITE.CHEST_SUGAR_CAN], 3);
            this.chest_buttons[ItemType.SUGAR_CAN].id = ItemType.SUGAR_CAN;
            this.chest_buttons[ItemType.CANDY] = Dn(68, 68, 0, re[SPRITE.CHEST_CANDY], 3);
            this.chest_buttons[ItemType.CANDY].id = ItemType.CANDY;
            this.plus_buttons = [];
            for (o = 0; o < 250; o++) {
                this.plus_buttons[o] = Dn(0, 0, 0, re[SPRITE.CHEST_PLUS]);
            }
            this.inv_buttons = [];
            this.inv_buttons[ItemType.STONE_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_SWORD], 3);
            this.inv_buttons[ItemType.STONE_SWORD].id = ItemType.STONE_SWORD;
            this.inv_buttons[ItemType.STONE_PICK] = Dn(60, 60, 0, re[SPRITE.INV_PICK], 3);
            this.inv_buttons[ItemType.STONE_PICK].id = ItemType.STONE_PICK;
            this.inv_buttons[ItemType.STONE] = Dn(60, 60, 0, re[SPRITE.INV_STONE], 3);
            this.inv_buttons[ItemType.STONE].id = ItemType.STONE;
            this.inv_buttons[ItemType.STONE].info.img[2] = this.inv_buttons[ItemType.STONE].info.img[0];
            this.inv_buttons[ItemType.WOOD] = Dn(60, 60, 0, re[SPRITE.INV_WOOD], 3);
            this.inv_buttons[ItemType.WOOD].id = ItemType.WOOD;
            this.inv_buttons[ItemType.WOOD].info.img[2] = this.inv_buttons[ItemType.WOOD].info.img[0];
            this.inv_buttons[ItemType.BERRY] = Dn(60, 60, 0, re[SPRITE.INV_PLANT], 3);
            this.inv_buttons[ItemType.BERRY].id = ItemType.BERRY;
            this.inv_buttons[ItemType.CACTUS] = Dn(60, 60, 0, re[SPRITE.INV_CACTUS], 3);
            this.inv_buttons[ItemType.CACTUS].id = ItemType.CACTUS;
            this.inv_buttons[ItemType.GOLD] = Dn(60, 60, 0, re[SPRITE.INV_GOLD], 3);
            this.inv_buttons[ItemType.GOLD].id = ItemType.GOLD;
            this.inv_buttons[ItemType.GOLD].info.img[2] = this.inv_buttons[ItemType.GOLD].info.img[0];
            this.inv_buttons[ItemType.DIAMOND] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND], 3);
            this.inv_buttons[ItemType.DIAMOND].id = ItemType.DIAMOND;
            this.inv_buttons[ItemType.DIAMOND].info.img[2] = this.inv_buttons[ItemType.DIAMOND].info.img[0];
            this.inv_buttons[ItemType.GOLD_PICK] = Dn(60, 60, 0, re[SPRITE.INV_PICK_GOLD], 3);
            this.inv_buttons[ItemType.GOLD_PICK].id = ItemType.GOLD_PICK;
            this.inv_buttons[ItemType.DIAMOND_PICK] = Dn(60, 60, 0, re[SPRITE.INV_PICK_DIAMOND], 3);
            this.inv_buttons[ItemType.DIAMOND_PICK].id = ItemType.DIAMOND_PICK;
            this.inv_buttons[ItemType.GOLD_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_SWORD_GOLD], 3);
            this.inv_buttons[ItemType.GOLD_SWORD].id = ItemType.GOLD_SWORD;
            this.inv_buttons[ItemType.WOOD_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_SWORD_WOOD], 3);
            this.inv_buttons[ItemType.WOOD_SWORD].id = ItemType.WOOD_SWORD;
            this.inv_buttons[ItemType.DIAMOND_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_SWORD_DIAMOND], 3);
            this.inv_buttons[ItemType.DIAMOND_SWORD].id = ItemType.DIAMOND_SWORD;
            this.inv_buttons[ItemType.FIRE] = Dn(60, 60, 0, re[SPRITE.INV_FIRE], 3);
            this.inv_buttons[ItemType.FIRE].id = ItemType.FIRE;
            this.inv_buttons[ItemType.WORKBENCH] = Dn(60, 60, 0, re[SPRITE.INV_WORK], 3);
            this.inv_buttons[ItemType.WORKBENCH].id = ItemType.WORKBENCH;
            this.inv_buttons[ItemType.BERRY_SEED] = Dn(60, 60, 0, re[SPRITE.INV_SEED], 3);
            this.inv_buttons[ItemType.BERRY_SEED].id = ItemType.BERRY_SEED;
            this.inv_buttons[ItemType.WOOD_WALL] = Dn(60, 60, 0, re[SPRITE.INV_WALL], 3);
            this.inv_buttons[ItemType.WOOD_WALL].id = ItemType.WOOD_WALL;
            this.inv_buttons[ItemType.WOOD_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_SPIKE], 3);
            this.inv_buttons[ItemType.WOOD_SPIKE].id = ItemType.WOOD_SPIKE;
            this.inv_buttons[ItemType.WOOD_PICK] = Dn(60, 60, 0, re[SPRITE.INV_PICK_WOOD], 3);
            this.inv_buttons[ItemType.WOOD_PICK].id = ItemType.WOOD_PICK;
            this.inv_buttons[ItemType.COOKED_MEAT] = Dn(60, 60, 0, re[SPRITE.INV_COOKED_MEAT], 3);
            this.inv_buttons[ItemType.COOKED_MEAT].id = ItemType.COOKED_MEAT;
            this.inv_buttons[ItemType.MEAT] = Dn(60, 60, 0, re[SPRITE.INV_MEAT], 3);
            this.inv_buttons[ItemType.MEAT].id = ItemType.MEAT;
            this.inv_buttons[ItemType.BIG_FIRE] = Dn(60, 60, 0, re[SPRITE.INV_BIG_FIRE], 3);
            this.inv_buttons[ItemType.BIG_FIRE].id = ItemType.BIG_FIRE;
            this.inv_buttons[ItemType.BANDAGE] = Dn(60, 60, 0, re[SPRITE.INV_BANDAGE], 3);
            this.inv_buttons[ItemType.BANDAGE].id = ItemType.BANDAGE;
            this.inv_buttons[ItemType.CORD] = Dn(60, 60, 0, re[SPRITE.INV_CORD], 3);
            this.inv_buttons[ItemType.CORD].id = ItemType.CORD;
            this.inv_buttons[ItemType.CORD].info.img[2] = this.inv_buttons[ItemType.CORD].info.img[0];
            this.inv_buttons[ItemType.STONE_WALL] = Dn(60, 60, 0, re[SPRITE.INV_STONE_WALL], 3);
            this.inv_buttons[ItemType.STONE_WALL].id = ItemType.STONE_WALL;
            this.inv_buttons[ItemType.GOLD_WALL] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_WALL], 3);
            this.inv_buttons[ItemType.GOLD_WALL].id = ItemType.GOLD_WALL;
            this.inv_buttons[ItemType.DIAMOND_WALL] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_WALL], 3);
            this.inv_buttons[ItemType.DIAMOND_WALL].id = ItemType.DIAMOND_WALL;
            this.inv_buttons[ItemType.WOOD_DOOR] = Dn(60, 60, 0, re[SPRITE.INV_DOOR_WOOD_CLOSE], 3);
            this.inv_buttons[ItemType.WOOD_DOOR].id = ItemType.WOOD_DOOR;
            this.inv_buttons[ItemType.CHEST] = Dn(60, 60, 0, re[SPRITE.INV_CHEST], 3);
            this.inv_buttons[ItemType.CHEST].id = ItemType.CHEST;
            this.inv_buttons[ItemType.STONE_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_STONE_SPIKE], 3);
            this.inv_buttons[ItemType.STONE_SPIKE].id = ItemType.STONE_SPIKE;
            this.inv_buttons[ItemType.GOLD_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_SPIKE], 3);
            this.inv_buttons[ItemType.GOLD_SPIKE].id = ItemType.GOLD_SPIKE;
            this.inv_buttons[ItemType.DIAMOND_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_SPIKE], 3);
            this.inv_buttons[ItemType.DIAMOND_SPIKE].id = ItemType.DIAMOND_SPIKE;
            this.inv_buttons[ItemType.BAG] = Dn(60, 60, 0, re[SPRITE.INV_BAG], 3);
            this.inv_buttons[ItemType.BAG].id = ItemType.BAG;
            this.inv_buttons[ItemType.EARMUFFS] = Dn(60, 60, 0, re[SPRITE.INV_EARMUFFS], 3);
            this.inv_buttons[ItemType.EARMUFFS].id = ItemType.EARMUFFS;
            this.inv_buttons[ItemType.STONE_DOOR] = Dn(60, 60, 0, re[SPRITE.INV_DOOR_STONE_CLOSE], 3);
            this.inv_buttons[ItemType.STONE_DOOR].id = ItemType.STONE_DOOR;
            this.inv_buttons[ItemType.GOLD_DOOR] = Dn(60, 60, 0, re[SPRITE.INV_DOOR_GOLD_CLOSE], 3);
            this.inv_buttons[ItemType.GOLD_DOOR].id = ItemType.GOLD_DOOR;
            this.inv_buttons[ItemType.DIAMOND_DOOR] = Dn(60, 60, 0, re[SPRITE.INV_DOOR_DIAMOND_CLOSE], 3);
            this.inv_buttons[ItemType.DIAMOND_DOOR].id = ItemType.DIAMOND_DOOR;
            this.inv_buttons[ItemType.RABBIT_FUR] = Dn(60, 60, 0, re[SPRITE.INV_FUR], 3);
            this.inv_buttons[ItemType.RABBIT_FUR].id = ItemType.RABBIT_FUR;
            this.inv_buttons[ItemType.RABBIT_FUR].info.img[2] = this.inv_buttons[ItemType.RABBIT_FUR].info.img[0];
            this.inv_buttons[ItemType.BOAR_FUR] = Dn(60, 60, 0, re[SPRITE.INV_FUR_BOAR], 3);
            this.inv_buttons[ItemType.BOAR_FUR].id = ItemType.BOAR_FUR;
            this.inv_buttons[ItemType.BOAR_FUR].info.img[2] = this.inv_buttons[ItemType.BOAR_FUR].info.img[0];
            this.inv_buttons[ItemType.WOLF_FUR] = Dn(60, 60, 0, re[SPRITE.INV_FUR_WOLF], 3);
            this.inv_buttons[ItemType.WOLF_FUR].id = ItemType.WOLF_FUR;
            this.inv_buttons[ItemType.WOLF_FUR].info.img[2] = this.inv_buttons[ItemType.WOLF_FUR].info.img[0];
            this.inv_buttons[ItemType.PENGUIN_FEATHER] = Dn(60, 60, 0, re[SPRITE.INV_PENGUIN_FEATHER], 3);
            this.inv_buttons[ItemType.PENGUIN_FEATHER].id = ItemType.PENGUIN_FEATHER;
            this.inv_buttons[ItemType.HAWK_FEATHER] = Dn(60, 60, 0, re[SPRITE.INV_HAWK_FEATHER], 3);
            this.inv_buttons[ItemType.HAWK_FEATHER].id = ItemType.HAWK_FEATHER;
            this.inv_buttons[ItemType.VULTURE_FEATHER] = Dn(60, 60, 0, re[SPRITE.INV_VULTURE_FEATHER], 3);
            this.inv_buttons[ItemType.VULTURE_FEATHER].id = ItemType.VULTURE_FEATHER;
            this.inv_buttons[ItemType.EMERALD] = Dn(60, 60, 0, re[SPRITE.INV_EMERALD], 3);
            this.inv_buttons[ItemType.EMERALD].id = ItemType.EMERALD;
            this.inv_buttons[ItemType.EARMUFFS] = Dn(60, 60, 0, re[SPRITE.INV_EARMUFFS], 3);
            this.inv_buttons[ItemType.EARMUFFS].id = ItemType.EARMUFFS;
            this.inv_buttons[ItemType.COAT] = Dn(60, 60, 0, re[SPRITE.INV_COAT], 3);
            this.inv_buttons[ItemType.COAT].id = ItemType.COAT;
            this.inv_buttons[ItemType.WOOD_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_WOOD_SPEAR], 3);
            this.inv_buttons[ItemType.WOOD_SPEAR].id = ItemType.WOOD_SPEAR;
            this.inv_buttons[ItemType.STONE_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_SPEAR], 3);
            this.inv_buttons[ItemType.STONE_SPEAR].id = ItemType.STONE_SPEAR;
            this.inv_buttons[ItemType.GOLD_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_SPEAR], 3);
            this.inv_buttons[ItemType.GOLD_SPEAR].id = ItemType.GOLD_SPEAR;
            this.inv_buttons[ItemType.DIAMOND_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_SPEAR], 3);
            this.inv_buttons[ItemType.DIAMOND_SPEAR].id = ItemType.DIAMOND_SPEAR;
            this.inv_buttons[ItemType.DRAGON_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_SPEAR], 3);
            this.inv_buttons[ItemType.DRAGON_SPEAR].id = ItemType.DRAGON_SPEAR;
            this.inv_buttons[ItemType.FURNACE] = Dn(60, 60, 0, re[SPRITE.INV_FURNACE], 3);
            this.inv_buttons[ItemType.FURNACE].id = ItemType.FURNACE;
            this.inv_buttons[ItemType.EXPLORER_HAT] = Dn(60, 60, 0, re[SPRITE.INV_EXPLORER_HAT], 3);
            this.inv_buttons[ItemType.EXPLORER_HAT].id = ItemType.EXPLORER_HAT;
            this.inv_buttons[ItemType.PIRATE_HAT] = Dn(60, 60, 0, re[SPRITE.INV_PIRATE_HAT], 3);
            this.inv_buttons[ItemType.PIRATE_HAT].id = ItemType.PIRATE_HAT;
            this.inv_buttons[ItemType.FLOWER_HAT] = Dn(60, 60, 0, re[SPRITE.INV_FLOWER_HAT], 3);
            this.inv_buttons[ItemType.FLOWER_HAT].id = ItemType.FLOWER_HAT;
            this.inv_buttons[ItemType.FUR_HAT] = Dn(60, 60, 0, re[SPRITE.INV_FUR_HAT], 3);
            this.inv_buttons[ItemType.FUR_HAT].id = ItemType.FUR_HAT;
            this.inv_buttons[ItemType.TURBAN1] = Dn(60, 60, 0, re[SPRITE.INV_TURBAN1], 3);
            this.inv_buttons[ItemType.TURBAN1].id = ItemType.TURBAN1;
            this.inv_buttons[ItemType.TURBAN2] = Dn(60, 60, 0, re[SPRITE.INV_TURBAN2], 3);
            this.inv_buttons[ItemType.TURBAN2].id = ItemType.TURBAN2;
            this.inv_buttons[ItemType.WOOD_BOW] = Dn(60, 60, 0, re[SPRITE.INV_WOOD_BOW], 3);
            this.inv_buttons[ItemType.WOOD_BOW].id = ItemType.WOOD_BOW;
            this.inv_buttons[ItemType.WOOD_ARROW] = Dn(60, 60, 0, re[SPRITE.INV_WOOD_ARROW], 3);
            this.inv_buttons[ItemType.WOOD_ARROW].id = ItemType.WOOD_ARROW;
            this.inv_buttons[ItemType.WOOD_SHIELD] = Dn(60, 60, 0, re[SPRITE.INV_WOOD_SHIELD], 3);
            this.inv_buttons[ItemType.WOOD_SHIELD].id = ItemType.WOOD_SHIELD;
            this.inv_buttons[ItemType.STONE_BOW] = Dn(60, 60, 0, re[SPRITE.INV_STONE_BOW], 3);
            this.inv_buttons[ItemType.STONE_BOW].id = ItemType.STONE_BOW;
            this.inv_buttons[ItemType.STONE_ARROW] = Dn(60, 60, 0, re[SPRITE.INV_STONE_ARROW], 3);
            this.inv_buttons[ItemType.STONE_ARROW].id = ItemType.STONE_ARROW;
            this.inv_buttons[ItemType.STONE_SHIELD] = Dn(60, 60, 0, re[SPRITE.INV_STONE_SHIELD], 3);
            this.inv_buttons[ItemType.STONE_SHIELD].id = ItemType.STONE_SHIELD;
            this.inv_buttons[ItemType.GOLD_BOW] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_BOW], 3);
            this.inv_buttons[ItemType.GOLD_BOW].id = ItemType.GOLD_BOW;
            this.inv_buttons[ItemType.GOLD_ARROW] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_ARROW], 3);
            this.inv_buttons[ItemType.GOLD_ARROW].id = ItemType.GOLD_ARROW;
            this.inv_buttons[ItemType.GOLD_SHIELD] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_SHIELD], 3);
            this.inv_buttons[ItemType.GOLD_SHIELD].id = ItemType.GOLD_SHIELD;
            this.inv_buttons[ItemType.DIAMOND_BOW] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_BOW], 3);
            this.inv_buttons[ItemType.DIAMOND_BOW].id = ItemType.DIAMOND_BOW;
            this.inv_buttons[ItemType.DIAMOND_ARROW] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_ARROW], 3);
            this.inv_buttons[ItemType.DIAMOND_ARROW].id = ItemType.DIAMOND_ARROW;
            this.inv_buttons[ItemType.DIAMOND_SHIELD] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_SHIELD], 3);
            this.inv_buttons[ItemType.DIAMOND_SHIELD].id = ItemType.DIAMOND_SHIELD;
            this.inv_buttons[ItemType.AMETHYST_BOW] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_BOW], 3);
            this.inv_buttons[ItemType.AMETHYST_BOW].id = ItemType.AMETHYST_BOW;
            this.inv_buttons[ItemType.AMETHYST_ARROW] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_ARROW], 3);
            this.inv_buttons[ItemType.AMETHYST_ARROW].id = ItemType.AMETHYST_ARROW;
            this.inv_buttons[ItemType.AMETHYST_SHIELD] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_SHIELD], 3);
            this.inv_buttons[ItemType.AMETHYST_SHIELD].id = ItemType.AMETHYST_SHIELD;
            this.inv_buttons[ItemType.REIDITE_BOW] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_BOW], 3);
            this.inv_buttons[ItemType.REIDITE_BOW].id = ItemType.REIDITE_BOW;
            this.inv_buttons[ItemType.REIDITE_ARROW] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_ARROW], 3);
            this.inv_buttons[ItemType.REIDITE_ARROW].id = ItemType.REIDITE_ARROW;
            this.inv_buttons[ItemType.REIDITE_SHIELD] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_SHIELD], 3);
            this.inv_buttons[ItemType.REIDITE_SHIELD].id = ItemType.REIDITE_SHIELD;
            this.inv_buttons[ItemType.DRAGON_BOW] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_BOW], 3);
            this.inv_buttons[ItemType.DRAGON_BOW].id = ItemType.DRAGON_BOW;
            this.inv_buttons[ItemType.DRAGON_ARROW] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_ARROW], 3);
            this.inv_buttons[ItemType.DRAGON_ARROW].id = ItemType.DRAGON_ARROW;
            this.inv_buttons[ItemType.WOOD_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_WOOD_HELMET], 3);
            this.inv_buttons[ItemType.WOOD_HELMET].id = ItemType.WOOD_HELMET;
            this.inv_buttons[ItemType.STONE_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_STONE_HELMET], 3);
            this.inv_buttons[ItemType.STONE_HELMET].id = ItemType.STONE_HELMET;
            this.inv_buttons[ItemType.GOLD_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_HELMET], 3);
            this.inv_buttons[ItemType.GOLD_HELMET].id = ItemType.GOLD_HELMET;
            this.inv_buttons[ItemType.DIAMOND_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_HELMET], 3);
            this.inv_buttons[ItemType.DIAMOND_HELMET].id = ItemType.DIAMOND_HELMET;
            this.inv_buttons[ItemType.BOOK] = Dn(60, 60, 0, re[SPRITE.INV_BOOK], 3);
            this.inv_buttons[ItemType.BOOK].id = ItemType.BOOK;
            this.inv_buttons[ItemType.PAPER] = Dn(60, 60, 0, re[SPRITE.INV_PAPER], 3);
            this.inv_buttons[ItemType.PAPER].id = ItemType.PAPER;
            this.inv_buttons[ItemType.PAPER].info.img[2] = this.inv_buttons[ItemType.PAPER].info.img[0];
            this.inv_buttons[ItemType.BAG] = Dn(60, 60, 0, re[SPRITE.INV_BAG], 3);
            this.inv_buttons[ItemType.BAG].id = ItemType.BAG;
            this.inv_buttons[ItemType.AMETHYST] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST], 3);
            this.inv_buttons[ItemType.AMETHYST].id = ItemType.AMETHYST;
            this.inv_buttons[ItemType.AMETHYST].info.img[2] = this.inv_buttons[ItemType.AMETHYST].info.img[0];
            this.inv_buttons[ItemType.AMETHYST_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_SWORD_AMETHYST], 3);
            this.inv_buttons[ItemType.AMETHYST_SWORD].id = ItemType.AMETHYST_SWORD;
            this.inv_buttons[ItemType.PIRATE_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_PIRATE_SWORD], 3);
            this.inv_buttons[ItemType.PIRATE_SWORD].id = ItemType.PIRATE_SWORD;
            this.inv_buttons[ItemType.AMETHYST_PICK] = Dn(60, 60, 0, re[SPRITE.INV_PICK_AMETHYST], 3);
            this.inv_buttons[ItemType.AMETHYST_PICK].id = ItemType.AMETHYST_PICK;
            this.inv_buttons[ItemType.REIDITE_PICK] = Dn(60, 60, 0, re[SPRITE.INV_PICK_REIDITE], 3);
            this.inv_buttons[ItemType.REIDITE_PICK].id = ItemType.REIDITE_PICK;
            this.inv_buttons[ItemType.AMETHYST_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_SPEAR], 3);
            this.inv_buttons[ItemType.AMETHYST_SPEAR].id = ItemType.AMETHYST_SPEAR;
            this.inv_buttons[ItemType.STONE_HAMMER] = Dn(60, 60, 0, re[SPRITE.INV_HAMMER], 3);
            this.inv_buttons[ItemType.STONE_HAMMER].id = ItemType.STONE_HAMMER;
            this.inv_buttons[ItemType.GOLD_HAMMER] = Dn(60, 60, 0, re[SPRITE.INV_HAMMER_GOLD], 3);
            this.inv_buttons[ItemType.GOLD_HAMMER].id = ItemType.GOLD_HAMMER;
            this.inv_buttons[ItemType.DIAMOND_HAMMER] = Dn(60, 60, 0, re[SPRITE.INV_HAMMER_DIAMOND], 3);
            this.inv_buttons[ItemType.DIAMOND_HAMMER].id = ItemType.DIAMOND_HAMMER;
            this.inv_buttons[ItemType.AMETHYST_HAMMER] = Dn(60, 60, 0, re[SPRITE.INV_HAMMER_AMETHYST], 3);
            this.inv_buttons[ItemType.AMETHYST_HAMMER].id = ItemType.AMETHYST_HAMMER;
            this.inv_buttons[ItemType.REIDITE_HAMMER] = Dn(60, 60, 0, re[SPRITE.INV_HAMMER_REIDITE], 3);
            this.inv_buttons[ItemType.REIDITE_HAMMER].id = ItemType.REIDITE_HAMMER;
            this.inv_buttons[ItemType.AMETHYST_WALL] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_WALL], 3);
            this.inv_buttons[ItemType.AMETHYST_WALL].id = ItemType.AMETHYST_WALL;
            this.inv_buttons[ItemType.AMETHYST_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_SPIKE], 3);
            this.inv_buttons[ItemType.AMETHYST_SPIKE].id = ItemType.AMETHYST_SPIKE;
            this.inv_buttons[ItemType.AMETHYST_DOOR] = Dn(60, 60, 0, re[SPRITE.INV_DOOR_AMETHYST_CLOSE], 3);
            this.inv_buttons[ItemType.AMETHYST_DOOR].id = ItemType.AMETHYST_DOOR;
            this.inv_buttons[ItemType.CAP_SCARF] = Dn(60, 60, 0, re[SPRITE.INV_CAP_SCARF], 3);
            this.inv_buttons[ItemType.CAP_SCARF].id = ItemType.CAP_SCARF;
            this.inv_buttons[ItemType.WINTER_FUR] = Dn(60, 60, 0, re[SPRITE.INV_FUR_WINTER], 3);
            this.inv_buttons[ItemType.WINTER_FUR].id = ItemType.WINTER_FUR;
            this.inv_buttons[ItemType.WINTER_FUR].info.img[2] = this.inv_buttons[ItemType.WINTER_FUR].info.img[0];
            this.inv_buttons[ItemType.MAMMOTH_FUR] = Dn(60, 60, 0, re[SPRITE.INV_FUR_MAMMOTH], 3);
            this.inv_buttons[ItemType.MAMMOTH_FUR].id = ItemType.MAMMOTH_FUR;
            this.inv_buttons[ItemType.MAMMOTH_FUR].info.img[2] = this.inv_buttons[ItemType.MAMMOTH_FUR].info.img[0];
            this.inv_buttons[ItemType.DIAMOND_CORD] = Dn(60, 60, 0, re[SPRITE.INV_BLUE_CORD], 3);
            this.inv_buttons[ItemType.DIAMOND_CORD].id = ItemType.DIAMOND_CORD;
            this.inv_buttons[ItemType.DIAMOND_CORD].info.img[2] = this.inv_buttons[ItemType.DIAMOND_CORD].info.img[0];
            this.inv_buttons[ItemType.LOCK] = Dn(60, 60, 0, re[SPRITE.INV_LOCK], 3);
            this.inv_buttons[ItemType.LOCK].id = ItemType.LOCK;
            this.inv_buttons[ItemType.LOCK].info.img[2] = this.inv_buttons[ItemType.LOCK].info.img[0];
            this.inv_buttons[ItemType.DRAGON_HEART] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_HEART], 3);
            this.inv_buttons[ItemType.DRAGON_HEART].id = ItemType.DRAGON_HEART;
            this.inv_buttons[ItemType.LAVA_HEART] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_HEART], 3);
            this.inv_buttons[ItemType.LAVA_HEART].id = ItemType.LAVA_HEART;
            this.inv_buttons[ItemType.RESURRECTION] = Dn(60, 60, 0, re[SPRITE.INV_RESURRECTION], 3);
            this.inv_buttons[ItemType.RESURRECTION].id = ItemType.RESURRECTION;
            this.inv_buttons[ItemType.LOCK_PICK] = Dn(60, 60, 0, re[SPRITE.INV_LOCKPICK], 3);
            this.inv_buttons[ItemType.LOCK_PICK].id = ItemType.LOCK_PICK;
            this.inv_buttons[ItemType.TOTEM] = Dn(60, 60, 0, re[SPRITE.INV_TOTEM], 3);
            this.inv_buttons[ItemType.TOTEM].id = ItemType.TOTEM;
            this.inv_buttons[ItemType.AMETHYST_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_HELMET], 3);
            this.inv_buttons[ItemType.AMETHYST_HELMET].id = ItemType.AMETHYST_HELMET;
            this.inv_buttons[ItemType.SUPER_HAMMER] = Dn(60, 60, 0, re[SPRITE.INV_SUPER_HAMMER], 3);
            this.inv_buttons[ItemType.SUPER_HAMMER].id = ItemType.SUPER_HAMMER;
            this.inv_buttons[ItemType.BRIDGE] = Dn(60, 60, 0, re[SPRITE.INV_BRIDGE], 3);
            this.inv_buttons[ItemType.BRIDGE].id = ItemType.BRIDGE;
            this.inv_buttons[ItemType.TOWER] = Dn(60, 60, 0, re[SPRITE.INV_WOOD_TOWER], 3);
            this.inv_buttons[ItemType.TOWER].id = ItemType.TOWER;
            this.inv_buttons[ItemType.BOAT] = Dn(60, 60, 0, re[SPRITE.INV_BOAT], 3);
            this.inv_buttons[ItemType.BOAT].id = ItemType.BOAT;
            this.inv_buttons[ItemType.SLED] = Dn(60, 60, 0, re[SPRITE.INV_SLED], 3);
            this.inv_buttons[ItemType.SLED].id = ItemType.SLED;
            this.inv_buttons[ItemType.PLANE] = Dn(60, 60, 0, re[SPRITE.INV_PLANE], 3);
            this.inv_buttons[ItemType.PLANE].id = ItemType.PLANE;
            this.inv_buttons[ItemType.SADDLE] = Dn(60, 60, 0, re[SPRITE.INV_SADDLE], 3);
            this.inv_buttons[ItemType.SADDLE].id = ItemType.SADDLE;
            this.inv_buttons[ItemType.BOAR] = Dn(60, 60, 0, re[SPRITE.INV_MOUNT_BOAR], 3);
            this.inv_buttons[ItemType.BOAR].id = ItemType.BOAR;
            this.inv_buttons[ItemType.CRAB_BOSS] = Dn(60, 60, 0, re[SPRITE.INV_CRAB_BOSS], 3);
            this.inv_buttons[ItemType.CRAB_BOSS].id = ItemType.CRAB_BOSS;
            this.inv_buttons[ItemType.BABY_DRAGON] = Dn(60, 60, 0, re[SPRITE.INV_BABY_DRAGON], 3);
            this.inv_buttons[ItemType.BABY_DRAGON].id = ItemType.BABY_DRAGON;
            this.inv_buttons[ItemType.BABY_MAMMOTH] = Dn(60, 60, 0, re[SPRITE.INV_BABY_MAMMOTH], 3);
            this.inv_buttons[ItemType.BABY_MAMMOTH].id = ItemType.BABY_MAMMOTH;
            this.inv_buttons[ItemType.BABY_LAVA] = Dn(60, 60, 0, re[SPRITE.INV_BABY_LAVA], 3);
            this.inv_buttons[ItemType.BABY_LAVA].id = ItemType.BABY_LAVA;
            this.inv_buttons[ItemType.HAWK] = Dn(60, 60, 0, re[SPRITE.INV_HAWK], 3);
            this.inv_buttons[ItemType.HAWK].id = ItemType.HAWK;
            this.inv_buttons[ItemType.SAND] = Dn(60, 60, 0, re[ItemType.SAND], 3);
            this.inv_buttons[ItemType.SAND].id = ItemType.SAND;
            this.inv_buttons[ItemType.SAND].info.img[2] = this.inv_buttons[ItemType.SAND].info.img[0];
            this.inv_buttons[ItemType.BOTTLE_FULL] = Dn(60, 60, 0, re[SPRITE.INV_BOTTLE_FULL], 3);
            this.inv_buttons[ItemType.BOTTLE_FULL].id = ItemType.BOTTLE_FULL;
            this.inv_buttons[ItemType.BOTTLE_EMPTY] = Dn(60, 60, 0, re[SPRITE.INV_BOTTLE_EMPTY], 3);
            this.inv_buttons[ItemType.BOTTLE_EMPTY].id = ItemType.BOTTLE_EMPTY;
            this.inv_buttons[ItemType.STONE_SHOVEL] = Dn(60, 60, 0, re[SPRITE.INV_SHOVEL], 3);
            this.inv_buttons[ItemType.STONE_SHOVEL].id = ItemType.STONE_SHOVEL;
            this.inv_buttons[ItemType.GOLD_SHOVEL] = Dn(60, 60, 0, re[SPRITE.INV_SHOVEL_GOLD], 3);
            this.inv_buttons[ItemType.GOLD_SHOVEL].id = ItemType.GOLD_SHOVEL;
            this.inv_buttons[ItemType.DIAMOND_SHOVEL] = Dn(60, 60, 0, re[SPRITE.INV_SHOVEL_DIAMOND], 3);
            this.inv_buttons[ItemType.DIAMOND_SHOVEL].id = ItemType.DIAMOND_SHOVEL;
            this.inv_buttons[ItemType.AMETHYST_SHOVEL] = Dn(60, 60, 0, re[SPRITE.INV_SHOVEL_AMETHYST], 3);
            this.inv_buttons[ItemType.AMETHYST_SHOVEL].id = ItemType.AMETHYST_SHOVEL;
            this.inv_buttons[ItemType.REIDITE_SHOVEL] = Dn(60, 60, 0, re[SPRITE.INV_SHOVEL_REIDITE], 3);
            this.inv_buttons[ItemType.REIDITE_SHOVEL].id = ItemType.REIDITE_SHOVEL;
            this.inv_buttons[ItemType.WRENCH] = Dn(60, 60, 0, re[SPRITE.INV_SPANNER], 3);
            this.inv_buttons[ItemType.WRENCH].id = ItemType.WRENCH;
            this.inv_buttons[ItemType.GOLD_WRENCH] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_WRENCH], 3);
            this.inv_buttons[ItemType.GOLD_WRENCH].id = ItemType.GOLD_WRENCH;
            this.inv_buttons[ItemType.KRAKEN_FUR] = Dn(60, 60, 0, re[SPRITE.INV_KRAKEN_SKIN], 3);
            this.inv_buttons[ItemType.KRAKEN_FUR].id = ItemType.KRAKEN_FUR;
            this.inv_buttons[ItemType.KRAKEN_FUR].info.img[2] = this.inv_buttons[ItemType.KRAKEN_FUR].info.img[0];
            this.inv_buttons[ItemType.WATERING_CAN_EMPTY] = Dn(60, 60, 0, re[SPRITE.INV_WATERING_CAN], 3);
            this.inv_buttons[ItemType.WATERING_CAN_EMPTY].id = ItemType.WATERING_CAN_EMPTY;
            this.inv_buttons[ItemType.FLOUR] = Dn(60, 60, 0, re[SPRITE.INV_FLOUR], 3);
            this.inv_buttons[ItemType.FLOUR].id = ItemType.FLOUR;
            this.inv_buttons[ItemType.FLOUR].info.img[2] = this.inv_buttons[ItemType.FLOUR].info.img[0];
            this.inv_buttons[ItemType.WHEAT_SEED] = Dn(60, 60, 0, re[SPRITE.INV_WHEAT_SEED], 3);
            this.inv_buttons[ItemType.WHEAT_SEED].id = ItemType.WHEAT_SEED;
            this.inv_buttons[ItemType.COOKIE] = Dn(60, 60, 0, re[SPRITE.INV_COOKIE], 3);
            this.inv_buttons[ItemType.COOKIE].id = ItemType.COOKIE;
            this.inv_buttons[ItemType.WHEAT] = Dn(60, 60, 0, re[SPRITE.INV_WILD_WHEAT], 3);
            this.inv_buttons[ItemType.WHEAT].id = ItemType.WHEAT;
            this.inv_buttons[ItemType.WHEAT].info.img[2] = this.inv_buttons[ItemType.WHEAT].info.img[0];
            this.inv_buttons[ItemType.WINDMILL] = Dn(60, 60, 0, re[SPRITE.INV_WINDMILL], 3);
            this.inv_buttons[ItemType.WINDMILL].id = ItemType.WINDMILL;
            this.inv_buttons[ItemType.SUPER_DIVING_SUIT] = Dn(60, 60, 0, re[SPRITE.INV_SUPER_DIVING_SUIT], 3);
            this.inv_buttons[ItemType.SUPER_DIVING_SUIT].id = ItemType.SUPER_DIVING_SUIT;
            this.inv_buttons[ItemType.DIVING_MASK] = Dn(60, 60, 0, re[SPRITE.INV_DIVING_MASK], 3);
            this.inv_buttons[ItemType.DIVING_MASK].id = ItemType.DIVING_MASK;
            this.inv_buttons[ItemType.WATERING_CAN_FULL] = Dn(60, 60, 0, re[SPRITE.INV_WATERING_CAN_FULL], 3);
            this.inv_buttons[ItemType.WATERING_CAN_FULL].id = ItemType.WATERING_CAN_FULL;
            this.inv_buttons[ItemType.CAKE] = Dn(60, 60, 0, re[SPRITE.INV_CAKE], 3);
            this.inv_buttons[ItemType.CAKE].id = ItemType.CAKE;
            this.inv_buttons[ItemType.BREAD] = Dn(60, 60, 0, re[ItemType.BREAD], 3);
            this.inv_buttons[ItemType.BREAD].id = ItemType.BREAD;
            this.inv_buttons[ItemType.FISH] = Dn(60, 60, 0, re[SPRITE.INV_FOODFISH], 3);
            this.inv_buttons[ItemType.FISH].id = ItemType.FISH;
            this.inv_buttons[ItemType.FISH_COOKED] = Dn(60, 60, 0, re[SPRITE.INV_FOODFISH_COOKED], 3);
            this.inv_buttons[ItemType.FISH_COOKED].id = ItemType.FISH_COOKED;
            this.inv_buttons[ItemType.PIRANHA_SCALES] = Dn(60, 60, 0, re[SPRITE.INV_SCALES], 3);
            this.inv_buttons[ItemType.PIRANHA_SCALES].id = ItemType.PIRANHA_SCALES;
            this.inv_buttons[ItemType.PIRANHA_SCALES].info.img[2] = this.inv_buttons[ItemType.PIRANHA_SCALES].info.img[0];
            this.inv_buttons[ItemType.GROUND] = Dn(60, 60, 0, re[ItemType.GROUND], 3);
            this.inv_buttons[ItemType.GROUND].id = ItemType.GROUND;
            this.inv_buttons[ItemType.GROUND].info.img[2] = this.inv_buttons[ItemType.GROUND].info.img[0];
            this.inv_buttons[ItemType.PLOT] = Dn(60, 60, 0, re[SPRITE.INV_PLOT], 3);
            this.inv_buttons[ItemType.PLOT].id = ItemType.PLOT;
            this.inv_buttons[ItemType.ICE] = Dn(60, 60, 0, re[ItemType.ICE], 3);
            this.inv_buttons[ItemType.ICE].id = ItemType.ICE;
            this.inv_buttons[ItemType.ICE].info.img[2] = this.inv_buttons[ItemType.ICE].info.img[0];
            this.inv_buttons[ItemType.BREAD_OVEN] = Dn(60, 60, 0, re[SPRITE.INV_BREAD_OVEN], 3);
            this.inv_buttons[ItemType.BREAD_OVEN].id = ItemType.BREAD_OVEN;
            this.inv_buttons[ItemType.SANDWICH] = Dn(60, 60, 0, re[ItemType.SANDWICH], 3);
            this.inv_buttons[ItemType.SANDWICH].id = ItemType.SANDWICH;
            this.inv_buttons[ItemType.DRAGON_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_HELMET], 3);
            this.inv_buttons[ItemType.DRAGON_HELMET].id = ItemType.DRAGON_HELMET;
            this.inv_buttons[ItemType.DRAGON_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_SWORD], 3);
            this.inv_buttons[ItemType.DRAGON_SWORD].id = ItemType.DRAGON_SWORD;
            this.inv_buttons[ItemType.DRAGON_ORB] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_ORB], 3);
            this.inv_buttons[ItemType.DRAGON_ORB].id = ItemType.DRAGON_ORB;
            this.inv_buttons[ItemType.DRAGON_ORB].info.img[2] = this.inv_buttons[ItemType.DRAGON_ORB].info.img[0];
            this.inv_buttons[ItemType.DRAGON_CUBE] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_CUBE], 3);
            this.inv_buttons[ItemType.DRAGON_CUBE].id = ItemType.DRAGON_CUBE;
            this.inv_buttons[ItemType.DRAGON_CUBE].info.img[2] = this.inv_buttons[ItemType.DRAGON_CUBE].info.img[0];
            this.inv_buttons[ItemType.LAVA_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_SPEAR], 3);
            this.inv_buttons[ItemType.LAVA_SPEAR].id = ItemType.LAVA_SPEAR;
            this.inv_buttons[ItemType.LAVA_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_SWORD], 3);
            this.inv_buttons[ItemType.LAVA_SWORD].id = ItemType.LAVA_SWORD;
            this.inv_buttons[ItemType.LAVA_ORB] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_ORB], 3);
            this.inv_buttons[ItemType.LAVA_ORB].id = ItemType.LAVA_ORB;
            this.inv_buttons[ItemType.LAVA_ORB].info.img[2] = this.inv_buttons[ItemType.LAVA_ORB].info.img[0];
            this.inv_buttons[ItemType.LAVA_CUBE] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_CUBE], 3);
            this.inv_buttons[ItemType.LAVA_CUBE].id = ItemType.LAVA_CUBE;
            this.inv_buttons[ItemType.LAVA_CUBE].info.img[2] = this.inv_buttons[ItemType.LAVA_CUBE].info.img[0];
            this.inv_buttons[ItemType.CROWN_GREEN] = Dn(60, 60, 0, re[SPRITE.INV_CROWN_GREEN], 3);
            this.inv_buttons[ItemType.CROWN_GREEN].id = ItemType.CROWN_GREEN;
            this.inv_buttons[ItemType.GEM_GREEN] = Dn(60, 60, 0, re[ItemType.GEM_GREEN], 3);
            this.inv_buttons[ItemType.GEM_GREEN].id = ItemType.GEM_GREEN;
            this.inv_buttons[ItemType.GEM_GREEN].info.img[2] = this.inv_buttons[ItemType.GEM_GREEN].info.img[0];
            this.inv_buttons[ItemType.GEM_ORANGE] = Dn(60, 60, 0, re[ItemType.GEM_ORANGE], 3);
            this.inv_buttons[ItemType.GEM_ORANGE].id = ItemType.GEM_ORANGE;
            this.inv_buttons[ItemType.GEM_ORANGE].info.img[2] = this.inv_buttons[ItemType.GEM_ORANGE].info.img[0];
            this.inv_buttons[ItemType.CROWN_ORANGE] = Dn(60, 60, 0, re[SPRITE.INV_CROWN_ORANGE], 3);
            this.inv_buttons[ItemType.CROWN_ORANGE].id = ItemType.CROWN_ORANGE;
            this.inv_buttons[ItemType.GEM_BLUE] = Dn(60, 60, 0, re[ItemType.GEM_BLUE], 3);
            this.inv_buttons[ItemType.GEM_BLUE].id = ItemType.GEM_BLUE;
            this.inv_buttons[ItemType.GEM_BLUE].info.img[2] = this.inv_buttons[ItemType.GEM_BLUE].info.img[0];
            this.inv_buttons[ItemType.CROWN_BLUE] = Dn(60, 60, 0, re[SPRITE.INV_CROWN_BLUE], 3);
            this.inv_buttons[ItemType.CROWN_BLUE].id = ItemType.CROWN_BLUE;
            this.inv_buttons[ItemType.HOOD] = Dn(60, 60, 0, re[SPRITE.INV_HOOD], 3);
            this.inv_buttons[ItemType.HOOD].id = ItemType.HOOD;
            this.inv_buttons[ItemType.PEASANT] = Dn(60, 60, 0, re[SPRITE.INV_PEASANT], 3);
            this.inv_buttons[ItemType.PEASANT].id = ItemType.PEASANT;
            this.inv_buttons[ItemType.WINTER_PEASANT_FUR] = Dn(60, 60, 0, re[ItemType.WINTER_HOOD_FUR], 3);
            this.inv_buttons[ItemType.WINTER_PEASANT_FUR].id = ItemType.WINTER_PEASANT_FUR;
            this.inv_buttons[ItemType.WINTER_HOOD_FUR] = Dn(60, 60, 0, re[ItemType.WINTER_PEASANT_FUR], 3);
            this.inv_buttons[ItemType.WINTER_HOOD_FUR].id = ItemType.WINTER_HOOD_FUR;
            this.inv_buttons[ItemType.WINTER_PEASANT] = Dn(60, 60, 0, re[SPRITE.INV_WINTER_PEASANT], 3);
            this.inv_buttons[ItemType.WINTER_PEASANT].id = ItemType.WINTER_PEASANT;
            this.inv_buttons[ItemType.WINTER_HOOD] = Dn(60, 60, 0, re[SPRITE.INV_WINTER_HOOD], 3);
            this.inv_buttons[ItemType.WINTER_HOOD].id = ItemType.WINTER_HOOD;
            this.inv_buttons[ItemType.BUCKET_FULL] = Dn(60, 60, 0, re[ItemType.BUCKET_FULL], 3);
            this.inv_buttons[ItemType.BUCKET_FULL].id = ItemType.BUCKET_FULL;
            this.inv_buttons[ItemType.BUCKET_EMPTY] = Dn(60, 60, 0, re[ItemType.BUCKET_EMPTY], 3);
            this.inv_buttons[ItemType.BUCKET_EMPTY].id = ItemType.BUCKET_EMPTY;
            this.inv_buttons[ItemType.WELL] = Dn(60, 60, 0, re[SPRITE.INV_WELL], 3);
            this.inv_buttons[ItemType.WELL].id = ItemType.WELL;
            this.inv_buttons[ItemType.PUMPKIN_SEED] = Dn(60, 60, 0, re[SPRITE.INV_PUMPKIN_SEED], 3);
            this.inv_buttons[ItemType.PUMPKIN_SEED].id = ItemType.PUMPKIN_SEED;
            this.inv_buttons[ItemType.PUMPKIN] = Dn(60, 60, 0, re[SPRITE.INV_PUMPKIN], 3);
            this.inv_buttons[ItemType.PUMPKIN].id = ItemType.PUMPKIN;
            this.inv_buttons[ItemType.GARLIC_SEED] = Dn(60, 60, 0, re[SPRITE.INV_GARLIC_SEED], 3);
            this.inv_buttons[ItemType.GARLIC_SEED].id = ItemType.GARLIC_SEED;
            this.inv_buttons[ItemType.GARLIC] = Dn(60, 60, 0, re[SPRITE.INV_GARLIC], 3);
            this.inv_buttons[ItemType.GARLIC].id = ItemType.GARLIC;
            this.inv_buttons[ItemType.ROOF] = Dn(60, 60, 0, re[SPRITE.INV_ROOF], 3);
            this.inv_buttons[ItemType.ROOF].id = ItemType.ROOF;
            this.inv_buttons[ItemType.THORNBUSH_SEED] = Dn(60, 60, 0, re[SPRITE.INV_THORNBUSH_SEED], 3);
            this.inv_buttons[ItemType.THORNBUSH_SEED].id = ItemType.THORNBUSH_SEED;
            this.inv_buttons[ItemType.THORNBUSH] = Dn(60, 60, 0, re[SPRITE.INV_THORNBUSH], 3);
            this.inv_buttons[ItemType.THORNBUSH].id = ItemType.THORNBUSH;
            this.inv_buttons[ItemType.CARROT_SEED] = Dn(60, 60, 0, re[SPRITE.INV_CARROT_SEED], 3);
            this.inv_buttons[ItemType.CARROT_SEED].id = ItemType.CARROT_SEED;
            this.inv_buttons[ItemType.CARROT] = Dn(60, 60, 0, re[SPRITE.INV_CARROT], 3);
            this.inv_buttons[ItemType.CARROT].id = ItemType.CARROT;
            this.inv_buttons[ItemType.TOMATO_SEED] = Dn(60, 60, 0, re[SPRITE.INV_TOMATO_SEED], 3);
            this.inv_buttons[ItemType.TOMATO_SEED].id = ItemType.TOMATO_SEED;
            this.inv_buttons[ItemType.TOMATO] = Dn(60, 60, 0, re[SPRITE.INV_TOMATO], 3);
            this.inv_buttons[ItemType.TOMATO].id = ItemType.TOMATO;
            this.inv_buttons[ItemType.WATERMELON_SEED] = Dn(60, 60, 0, re[SPRITE.INV_WATERMELON_SEED], 3);
            this.inv_buttons[ItemType.WATERMELON_SEED].id = ItemType.WATERMELON_SEED;
            this.inv_buttons[ItemType.WATERMELON] = Dn(60, 60, 0, re[SPRITE.INV_WATERMELON], 3);
            this.inv_buttons[ItemType.WATERMELON].id = ItemType.WATERMELON;
            this.inv_buttons[ItemType.ALOE_VERA_SEED] = Dn(60, 60, 0, re[SPRITE.INV_ALOE_VERA_SEED], 3);
            this.inv_buttons[ItemType.ALOE_VERA_SEED].id = ItemType.ALOE_VERA_SEED;
            this.inv_buttons[ItemType.ALOE_VERA] = Dn(60, 60, 0, re[SPRITE.INV_ALOE_VERA], 3);
            this.inv_buttons[ItemType.ALOE_VERA].id = ItemType.ALOE_VERA;
            this.inv_buttons[ItemType.CHRISTMAS_HAT] = Dn(60, 60, 0, re[SPRITE.INV_CHRISTMAS_HAT], 3);
            this.inv_buttons[ItemType.CHRISTMAS_HAT].id = ItemType.CHRISTMAS_HAT;
            this.inv_buttons[ItemType.ELF_HAT] = Dn(60, 60, 0, re[SPRITE.INV_ELF_HAT], 3);
            this.inv_buttons[ItemType.ELF_HAT].id = ItemType.ELF_HAT;
            this.inv_buttons[ItemType.WOOD_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_WOOD_SPEAR], 3);
            this.inv_buttons[ItemType.WOOD_SPEAR].id = ItemType.WOOD_SPEAR;
            this.inv_buttons[ItemType.DRAGON_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_SPEAR], 3);
            this.inv_buttons[ItemType.DRAGON_SPEAR].id = ItemType.DRAGON_SPEAR;
            this.inv_buttons[ItemType.CRAB_STICK] = Dn(60, 60, 0, re[SPRITE.INV_CRAB_STICK], 3);
            this.inv_buttons[ItemType.CRAB_STICK].id = ItemType.CRAB_STICK;
            this.inv_buttons[ItemType.CRAB_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_CRAB_SPEAR], 3);
            this.inv_buttons[ItemType.CRAB_SPEAR].id = ItemType.CRAB_SPEAR;
            this.inv_buttons[ItemType.CRAB_LOOT] = Dn(60, 60, 0, re[SPRITE.INV_CRAB_LOOT], 3);
            this.inv_buttons[ItemType.CRAB_LOOT].id = ItemType.CRAB_LOOT;
            this.inv_buttons[ItemType.BED] = Dn(60, 60, 0, re[SPRITE.INV_BED], 3);
            this.inv_buttons[ItemType.BED].id = ItemType.BED;
            this.inv_buttons[ItemType.CRAB_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_CROWN_CRAB], 3);
            this.inv_buttons[ItemType.CRAB_HELMET].id = ItemType.CRAB_HELMET;
            this.inv_buttons[ItemType.GARLAND] = Dn(60, 60, 0, re[SPRITE.INV_GARLAND], 3);
            this.inv_buttons[ItemType.GARLAND].id = ItemType.GARLAND;
            this.inv_buttons[ItemType.CANDY] = Dn(60, 60, 0, re[ItemType.CANDY], 3);
            this.inv_buttons[ItemType.CANDY].id = ItemType.CANDY;
            this.inv_buttons[ItemType.SUGAR_CAN] = Dn(60, 60, 0, re[SPRITE.INV_SUGAR_CAN], 3);
            this.inv_buttons[ItemType.SUGAR_CAN].id = ItemType.SUGAR_CAN;
            this.craft_buttons = [];
            this.craft_buttons[ItemType.STONE_SWORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_SWORD], 3);
            this.craft_buttons[ItemType.STONE_SWORD].id = ItemType.STONE_SWORD;
            this.craft_buttons[ItemType.STONE_PICK] = Dn(60, 60, 0, re[SPRITE.CRAFT_PICK], 3);
            this.craft_buttons[ItemType.STONE_PICK].id = ItemType.STONE_PICK;
            this.craft_buttons[ItemType.FIRE] = Dn(60, 60, 0, re[SPRITE.CRAFT_FIRE], 3);
            this.craft_buttons[ItemType.FIRE].id = ItemType.FIRE;
            this.craft_buttons[ItemType.WORKBENCH] = Dn(60, 60, 0, re[SPRITE.CRAFT_WORK], 3);
            this.craft_buttons[ItemType.WORKBENCH].id = ItemType.WORKBENCH;
            this.craft_buttons[ItemType.WOOD_WALL] = Dn(60, 60, 0, re[SPRITE.CRAFT_WALL], 3);
            this.craft_buttons[ItemType.WOOD_WALL].id = ItemType.WOOD_WALL;
            this.craft_buttons[ItemType.WOOD_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_SPIKE], 3);
            this.craft_buttons[ItemType.WOOD_SPIKE].id = ItemType.WOOD_SPIKE;
            this.craft_buttons[ItemType.BERRY_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_SEED], 3);
            this.craft_buttons[ItemType.BERRY_SEED].id = ItemType.BERRY_SEED;
            this.craft_buttons[ItemType.GOLD_PICK] = Dn(60, 60, 0, re[SPRITE.CRAFT_PICK_GOLD], 3);
            this.craft_buttons[ItemType.GOLD_PICK].id = ItemType.GOLD_PICK;
            this.craft_buttons[ItemType.DIAMOND_PICK] = Dn(60, 60, 0, re[SPRITE.CRAFT_PICK_DIAMOND], 3);
            this.craft_buttons[ItemType.DIAMOND_PICK].id = ItemType.DIAMOND_PICK;
            this.craft_buttons[ItemType.GOLD_SWORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_SWORD_GOLD], 3);
            this.craft_buttons[ItemType.GOLD_SWORD].id = ItemType.GOLD_SWORD;
            this.craft_buttons[ItemType.WOOD_SWORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_SWORD_WOOD], 3);
            this.craft_buttons[ItemType.WOOD_SWORD].id = ItemType.WOOD_SWORD;
            this.craft_buttons[ItemType.DIAMOND_SWORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_SWORD_DIAMOND], 3);
            this.craft_buttons[ItemType.DIAMOND_SWORD].id = ItemType.DIAMOND_SWORD;
            this.craft_buttons[ItemType.WOOD_PICK] = Dn(60, 60, 0, re[SPRITE.CRAFT_PICK_WOOD], 3);
            this.craft_buttons[ItemType.WOOD_PICK].id = ItemType.WOOD_PICK;
            this.craft_buttons[ItemType.COOKED_MEAT] = Dn(60, 60, 0, re[SPRITE.CRAFT_COOKED_MEAT], 3);
            this.craft_buttons[ItemType.COOKED_MEAT].id = ItemType.COOKED_MEAT;
            this.craft_buttons[ItemType.BIG_FIRE] = Dn(60, 60, 0, re[SPRITE.CRAFT_BIG_FIRE], 3);
            this.craft_buttons[ItemType.BIG_FIRE].id = ItemType.BIG_FIRE;
            this.craft_buttons[ItemType.BANDAGE] = Dn(60, 60, 0, re[SPRITE.CRAFT_BANDAGE], 3);
            this.craft_buttons[ItemType.BANDAGE].id = ItemType.BANDAGE;
            this.craft_buttons[ItemType.STONE_WALL] = Dn(60, 60, 0, re[SPRITE.CRAFT_STONE_WALL], 3);
            this.craft_buttons[ItemType.STONE_WALL].id = ItemType.STONE_WALL;
            this.craft_buttons[ItemType.GOLD_WALL] = Dn(60, 60, 0, re[SPRITE.CRAFT_GOLD_WALL], 3);
            this.craft_buttons[ItemType.GOLD_WALL].id = ItemType.GOLD_WALL;
            this.craft_buttons[ItemType.DIAMOND_WALL] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_WALL], 3);
            this.craft_buttons[ItemType.DIAMOND_WALL].id = ItemType.DIAMOND_WALL;
            this.craft_buttons[ItemType.WOOD_DOOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DOOR_WOOD_CLOSE], 3);
            this.craft_buttons[ItemType.WOOD_DOOR].id = ItemType.WOOD_DOOR;
            this.craft_buttons[ItemType.CHEST] = Dn(60, 60, 0, re[SPRITE.CRAFT_CHEST], 3);
            this.craft_buttons[ItemType.CHEST].id = ItemType.CHEST;
            this.craft_buttons[ItemType.STONE_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_STONE_SPIKE], 3);
            this.craft_buttons[ItemType.STONE_SPIKE].id = ItemType.STONE_SPIKE;
            this.craft_buttons[ItemType.GOLD_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_GOLD_SPIKE], 3);
            this.craft_buttons[ItemType.GOLD_SPIKE].id = ItemType.GOLD_SPIKE;
            this.craft_buttons[ItemType.DIAMOND_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_SPIKE], 3);
            this.craft_buttons[ItemType.DIAMOND_SPIKE].id = ItemType.DIAMOND_SPIKE;
            this.craft_buttons[ItemType.BAG] = Dn(60, 60, 0, re[SPRITE.CRAFT_BAG], 3);
            this.craft_buttons[ItemType.BAG].id = ItemType.BAG;
            this.craft_buttons[ItemType.EARMUFFS] = Dn(60, 60, 0, re[SPRITE.CRAFT_EARMUFFS], 3);
            this.craft_buttons[ItemType.EARMUFFS].id = ItemType.EARMUFFS;
            this.craft_buttons[ItemType.STONE_DOOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DOOR_STONE_CLOSE], 3);
            this.craft_buttons[ItemType.STONE_DOOR].id = ItemType.STONE_DOOR;
            this.craft_buttons[ItemType.GOLD_DOOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DOOR_GOLD_CLOSE], 3);
            this.craft_buttons[ItemType.GOLD_DOOR].id = ItemType.GOLD_DOOR;
            this.craft_buttons[ItemType.DIAMOND_DOOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE], 3);
            this.craft_buttons[ItemType.DIAMOND_DOOR].id = ItemType.DIAMOND_DOOR;
            this.craft_buttons[ItemType.EARMUFFS] = Dn(60, 60, 0, re[SPRITE.CRAFT_EARMUFFS], 3);
            this.craft_buttons[ItemType.EARMUFFS].id = ItemType.EARMUFFS;
            this.craft_buttons[ItemType.COAT] = Dn(60, 60, 0, re[SPRITE.CRAFT_COAT], 3);
            this.craft_buttons[ItemType.COAT].id = ItemType.COAT;
            this.craft_buttons[ItemType.WOOD_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_WOOD_SPEAR], 3);
            this.craft_buttons[ItemType.WOOD_SPEAR].id = ItemType.WOOD_SPEAR;
            this.craft_buttons[ItemType.STONE_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_SPEAR], 3);
            this.craft_buttons[ItemType.STONE_SPEAR].id = ItemType.STONE_SPEAR;
            this.craft_buttons[ItemType.GOLD_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_GOLD_SPEAR], 3);
            this.craft_buttons[ItemType.GOLD_SPEAR].id = ItemType.GOLD_SPEAR;
            this.craft_buttons[ItemType.DIAMOND_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_SPEAR], 3);
            this.craft_buttons[ItemType.DIAMOND_SPEAR].id = ItemType.DIAMOND_SPEAR;
            this.craft_buttons[ItemType.DRAGON_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DRAGON_SPEAR], 3);
            this.craft_buttons[ItemType.DRAGON_SPEAR].id = ItemType.DRAGON_SPEAR;
            this.craft_buttons[ItemType.FURNACE] = Dn(60, 60, 0, re[SPRITE.CRAFT_FURNACE], 3);
            this.craft_buttons[ItemType.FURNACE].id = ItemType.FURNACE;
            this.craft_buttons[ItemType.EXPLORER_HAT] = Dn(60, 60, 0, re[SPRITE.CRAFT_EXPLORER_HAT], 3);
            this.craft_buttons[ItemType.EXPLORER_HAT].id = ItemType.EXPLORER_HAT;
            this.craft_buttons[ItemType.PIRATE_HAT] = Dn(60, 60, 0, re[SPRITE.CRAFT_PIRATE_HAT], 3);
            this.craft_buttons[ItemType.PIRATE_HAT].id = ItemType.PIRATE_HAT;
            this.craft_buttons[ItemType.FUR_HAT] = Dn(60, 60, 0, re[SPRITE.CRAFT_FUR_HAT], 3);
            this.craft_buttons[ItemType.FUR_HAT].id = ItemType.FUR_HAT;
            this.craft_buttons[ItemType.TURBAN1] = Dn(60, 60, 0, re[SPRITE.CRAFT_TURBAN1], 3);
            this.craft_buttons[ItemType.TURBAN1].id = ItemType.TURBAN1;
            this.craft_buttons[ItemType.TURBAN2] = Dn(60, 60, 0, re[SPRITE.CRAFT_TURBAN2], 3);
            this.craft_buttons[ItemType.TURBAN2].id = ItemType.TURBAN2;
            this.craft_buttons[ItemType.WOOD_BOW] = Dn(60, 60, 0, re[SPRITE.CRAFT_WOOD_BOW], 3);
            this.craft_buttons[ItemType.WOOD_BOW].id = ItemType.WOOD_BOW;
            this.craft_buttons[ItemType.WOOD_ARROW] = Dn(60, 60, 0, re[SPRITE.CRAFT_WOOD_ARROW], 3);
            this.craft_buttons[ItemType.WOOD_ARROW].id = ItemType.WOOD_ARROW;
            this.craft_buttons[ItemType.WOOD_SHIELD] = Dn(60, 60, 0, re[SPRITE.CRAFT_WOOD_SHIELD], 3);
            this.craft_buttons[ItemType.WOOD_SHIELD].id = ItemType.WOOD_SHIELD;
            this.craft_buttons[ItemType.STONE_BOW] = Dn(60, 60, 0, re[SPRITE.CRAFT_STONE_BOW], 3);
            this.craft_buttons[ItemType.STONE_BOW].id = ItemType.STONE_BOW;
            this.craft_buttons[ItemType.STONE_ARROW] = Dn(60, 60, 0, re[SPRITE.CRAFT_STONE_ARROW], 3);
            this.craft_buttons[ItemType.STONE_ARROW].id = ItemType.STONE_ARROW;
            this.craft_buttons[ItemType.STONE_SHIELD] = Dn(60, 60, 0, re[SPRITE.CRAFT_STONE_SHIELD], 3);
            this.craft_buttons[ItemType.STONE_SHIELD].id = ItemType.STONE_SHIELD;
            this.craft_buttons[ItemType.GOLD_BOW] = Dn(60, 60, 0, re[SPRITE.CRAFT_GOLD_BOW], 3);
            this.craft_buttons[ItemType.GOLD_BOW].id = ItemType.GOLD_BOW;
            this.craft_buttons[ItemType.GOLD_ARROW] = Dn(60, 60, 0, re[SPRITE.CRAFT_GOLD_ARROW], 3);
            this.craft_buttons[ItemType.GOLD_ARROW].id = ItemType.GOLD_ARROW;
            this.craft_buttons[ItemType.GOLD_SHIELD] = Dn(60, 60, 0, re[SPRITE.CRAFT_GOLD_SHIELD], 3);
            this.craft_buttons[ItemType.GOLD_SHIELD].id = ItemType.GOLD_SHIELD;
            this.craft_buttons[ItemType.DIAMOND_BOW] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_BOW], 3);
            this.craft_buttons[ItemType.DIAMOND_BOW].id = ItemType.DIAMOND_BOW;
            this.craft_buttons[ItemType.DIAMOND_ARROW] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_ARROW], 3);
            this.craft_buttons[ItemType.DIAMOND_ARROW].id = ItemType.DIAMOND_ARROW;
            this.craft_buttons[ItemType.DIAMOND_SHIELD] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_SHIELD], 3);
            this.craft_buttons[ItemType.DIAMOND_SHIELD].id = ItemType.DIAMOND_SHIELD;
            this.craft_buttons[ItemType.AMETHYST_BOW] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_BOW], 3);
            this.craft_buttons[ItemType.AMETHYST_BOW].id = ItemType.AMETHYST_BOW;
            this.craft_buttons[ItemType.AMETHYST_ARROW] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_ARROW], 3);
            this.craft_buttons[ItemType.AMETHYST_ARROW].id = ItemType.AMETHYST_ARROW;
            this.craft_buttons[ItemType.AMETHYST_SHIELD] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_SHIELD], 3);
            this.craft_buttons[ItemType.AMETHYST_SHIELD].id = ItemType.AMETHYST_SHIELD;
            this.craft_buttons[ItemType.REIDITE_BOW] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_BOW], 3);
            this.craft_buttons[ItemType.REIDITE_BOW].id = ItemType.REIDITE_BOW;
            this.craft_buttons[ItemType.REIDITE_ARROW] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_ARROW], 3);
            this.craft_buttons[ItemType.REIDITE_ARROW].id = ItemType.REIDITE_ARROW;
            this.craft_buttons[ItemType.REIDITE_SHIELD] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_SHIELD], 3);
            this.craft_buttons[ItemType.REIDITE_SHIELD].id = ItemType.REIDITE_SHIELD;
            this.craft_buttons[ItemType.DRAGON_BOW] = Dn(60, 60, 0, re[SPRITE.CRAFT_DRAGON_BOW], 3);
            this.craft_buttons[ItemType.DRAGON_BOW].id = ItemType.DRAGON_BOW;
            this.craft_buttons[ItemType.DRAGON_ARROW] = Dn(60, 60, 0, re[SPRITE.CRAFT_DRAGON_ARROW], 3);
            this.craft_buttons[ItemType.DRAGON_ARROW].id = ItemType.DRAGON_ARROW;
            this.craft_buttons[ItemType.WOOD_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_WOOD_HELMET], 3);
            this.craft_buttons[ItemType.WOOD_HELMET].id = ItemType.WOOD_HELMET;
            this.craft_buttons[ItemType.STONE_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_STONE_HELMET], 3);
            this.craft_buttons[ItemType.STONE_HELMET].id = ItemType.STONE_HELMET;
            this.craft_buttons[ItemType.GOLD_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_GOLD_HELMET], 3);
            this.craft_buttons[ItemType.GOLD_HELMET].id = ItemType.GOLD_HELMET;
            this.craft_buttons[ItemType.DIAMOND_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_HELMET], 3);
            this.craft_buttons[ItemType.DIAMOND_HELMET].id = ItemType.DIAMOND_HELMET;
            this.craft_buttons[ItemType.BOOK] = Dn(60, 60, 0, re[SPRITE.CRAFT_BOOK], 3);
            this.craft_buttons[ItemType.BOOK].id = ItemType.BOOK;
            this.craft_buttons[ItemType.PAPER] = Dn(60, 60, 0, re[SPRITE.CRAFT_PAPER], 3);
            this.craft_buttons[ItemType.PAPER].id = ItemType.PAPER;
            this.craft_buttons[ItemType.BAG] = Dn(60, 60, 0, re[SPRITE.CRAFT_BAG], 3);
            this.craft_buttons[ItemType.BAG].id = ItemType.BAG;
            this.craft_buttons[ItemType.AMETHYST_SWORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_SWORD_AMETHYST], 3);
            this.craft_buttons[ItemType.AMETHYST_SWORD].id = ItemType.AMETHYST_SWORD;
            this.craft_buttons[ItemType.AMETHYST_PICK] = Dn(60, 60, 0, re[SPRITE.CRAFT_PICK_AMETHYST], 3);
            this.craft_buttons[ItemType.AMETHYST_PICK].id = ItemType.AMETHYST_PICK;
            this.craft_buttons[ItemType.REIDITE_PICK] = Dn(60, 60, 0, re[SPRITE.CRAFT_PICK_REIDITE], 3);
            this.craft_buttons[ItemType.REIDITE_PICK].id = ItemType.REIDITE_PICK;
            this.craft_buttons[ItemType.AMETHYST_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_SPEAR], 3);
            this.craft_buttons[ItemType.AMETHYST_SPEAR].id = ItemType.AMETHYST_SPEAR;
            this.craft_buttons[ItemType.STONE_HAMMER] = Dn(60, 60, 0, re[SPRITE.CRAFT_HAMMER], 3);
            this.craft_buttons[ItemType.STONE_HAMMER].id = ItemType.STONE_HAMMER;
            this.craft_buttons[ItemType.GOLD_HAMMER] = Dn(60, 60, 0, re[SPRITE.CRAFT_HAMMER_GOLD], 3);
            this.craft_buttons[ItemType.GOLD_HAMMER].id = ItemType.GOLD_HAMMER;
            this.craft_buttons[ItemType.DIAMOND_HAMMER] = Dn(60, 60, 0, re[SPRITE.CRAFT_HAMMER_DIAMOND], 3);
            this.craft_buttons[ItemType.DIAMOND_HAMMER].id = ItemType.DIAMOND_HAMMER;
            this.craft_buttons[ItemType.AMETHYST_HAMMER] = Dn(60, 60, 0, re[SPRITE.CRAFT_HAMMER_AMETHYST], 3);
            this.craft_buttons[ItemType.AMETHYST_HAMMER].id = ItemType.AMETHYST_HAMMER;
            this.craft_buttons[ItemType.REIDITE_HAMMER] = Dn(60, 60, 0, re[SPRITE.CRAFT_HAMMER_REIDITE], 3);
            this.craft_buttons[ItemType.REIDITE_HAMMER].id = ItemType.REIDITE_HAMMER;
            this.craft_buttons[ItemType.AMETHYST_WALL] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_WALL], 3);
            this.craft_buttons[ItemType.AMETHYST_WALL].id = ItemType.AMETHYST_WALL;
            this.craft_buttons[ItemType.AMETHYST_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_SPIKE], 3);
            this.craft_buttons[ItemType.AMETHYST_SPIKE].id = ItemType.AMETHYST_SPIKE;
            this.craft_buttons[ItemType.AMETHYST_DOOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE], 3);
            this.craft_buttons[ItemType.AMETHYST_DOOR].id = ItemType.AMETHYST_DOOR;
            this.craft_buttons[ItemType.CAP_SCARF] = Dn(60, 60, 0, re[SPRITE.CRAFT_CAP_SCARF], 3);
            this.craft_buttons[ItemType.CAP_SCARF].id = ItemType.CAP_SCARF;
            this.craft_buttons[ItemType.DIAMOND_CORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_BLUE_CORD], 3);
            this.craft_buttons[ItemType.DIAMOND_CORD].id = ItemType.DIAMOND_CORD;
            this.craft_buttons[ItemType.LOCK] = Dn(60, 60, 0, re[SPRITE.CRAFT_LOCK], 3);
            this.craft_buttons[ItemType.LOCK].id = ItemType.LOCK;
            this.craft_buttons[ItemType.RESURRECTION] = Dn(60, 60, 0, re[SPRITE.CRAFT_RESURRECTION], 3);
            this.craft_buttons[ItemType.RESURRECTION].id = ItemType.RESURRECTION;
            this.craft_buttons[ItemType.LOCK_PICK] = Dn(60, 60, 0, re[SPRITE.CRAFT_LOCKPICK], 3);
            this.craft_buttons[ItemType.LOCK_PICK].id = ItemType.LOCK_PICK;
            this.craft_buttons[ItemType.TOTEM] = Dn(60, 60, 0, re[SPRITE.CRAFT_TOTEM], 3);
            this.craft_buttons[ItemType.TOTEM].id = ItemType.TOTEM;
            this.craft_buttons[ItemType.AMETHYST_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_HELMET], 3);
            this.craft_buttons[ItemType.AMETHYST_HELMET].id = ItemType.AMETHYST_HELMET;
            this.craft_buttons[ItemType.SUPER_HAMMER] = Dn(60, 60, 0, re[SPRITE.CRAFT_SUPER_HAMMER], 3);
            this.craft_buttons[ItemType.SUPER_HAMMER].id = ItemType.SUPER_HAMMER;
            this.craft_buttons[ItemType.BRIDGE] = Dn(60, 60, 0, re[SPRITE.CRAFT_BRIDGE], 3);
            this.craft_buttons[ItemType.BRIDGE].id = ItemType.BRIDGE;
            this.craft_buttons[ItemType.TOWER] = Dn(60, 60, 0, re[SPRITE.CRAFT_WOOD_TOWER], 3);
            this.craft_buttons[ItemType.TOWER].id = ItemType.TOWER;
            this.craft_buttons[ItemType.BOAT] = Dn(60, 60, 0, re[SPRITE.CRAFT_BOAT], 3);
            this.craft_buttons[ItemType.BOAT].id = ItemType.BOAT;
            this.craft_buttons[ItemType.SLED] = Dn(60, 60, 0, re[SPRITE.CRAFT_SLED], 3);
            this.craft_buttons[ItemType.SLED].id = ItemType.SLED;
            this.craft_buttons[ItemType.PLANE] = Dn(60, 60, 0, re[SPRITE.CRAFT_PLANE], 3);
            this.craft_buttons[ItemType.PLANE].id = ItemType.PLANE;
            this.craft_buttons[ItemType.SADDLE] = Dn(60, 60, 0, re[SPRITE.CRAFT_SADDLE], 3);
            this.craft_buttons[ItemType.SADDLE].id = ItemType.SADDLE;
            this.craft_buttons[ItemType.BOTTLE_EMPTY] = Dn(60, 60, 0, re[SPRITE.CRAFT_BOTTLE_EMPTY], 3);
            this.craft_buttons[ItemType.BOTTLE_EMPTY].id = ItemType.BOTTLE_EMPTY;
            this.craft_buttons[ItemType.BOTTLE_FULL] = Dn(60, 60, 0, re[SPRITE.CRAFT_BOTTLE_FULL], 3);
            this.craft_buttons[ItemType.BOTTLE_FULL].id = ItemType.BOTTLE_FULL;
            this.craft_buttons[ItemType.BOTTLE_FULL_2] = Dn(60, 60, 0, re[SPRITE.CRAFT_BOTTLE_FULL], 3);
            this.craft_buttons[ItemType.BOTTLE_FULL_2].id = ItemType.BOTTLE_FULL_2;
            this.craft_buttons[ItemType.BOTTLE_FULL_3] = Dn(60, 60, 0, re[SPRITE.CRAFT_BOTTLE_FULL], 3);
            this.craft_buttons[ItemType.BOTTLE_FULL_3].id = ItemType.BOTTLE_FULL_3;
            this.craft_buttons[ItemType.STONE_SHOVEL] = Dn(60, 60, 0, re[SPRITE.CRAFT_SHOVEL], 3);
            this.craft_buttons[ItemType.STONE_SHOVEL].id = ItemType.STONE_SHOVEL;
            this.craft_buttons[ItemType.GOLD_SHOVEL] = Dn(60, 60, 0, re[SPRITE.CRAFT_SHOVEL_GOLD], 3);
            this.craft_buttons[ItemType.GOLD_SHOVEL].id = ItemType.GOLD_SHOVEL;
            this.craft_buttons[ItemType.DIAMOND_SHOVEL] = Dn(60, 60, 0, re[SPRITE.CRAFT_SHOVEL_DIAMOND], 3);
            this.craft_buttons[ItemType.DIAMOND_SHOVEL].id = ItemType.DIAMOND_SHOVEL;
            this.craft_buttons[ItemType.AMETHYST_SHOVEL] = Dn(60, 60, 0, re[SPRITE.CRAFT_SHOVEL_AMETHYST], 3);
            this.craft_buttons[ItemType.AMETHYST_SHOVEL].id = ItemType.AMETHYST_SHOVEL;
            this.craft_buttons[ItemType.REIDITE_SHOVEL] = Dn(60, 60, 0, re[SPRITE.CRAFT_SHOVEL_REIDITE], 3);
            this.craft_buttons[ItemType.REIDITE_SHOVEL].id = ItemType.REIDITE_SHOVEL;
            this.craft_buttons[ItemType.WRENCH] = Dn(60, 60, 0, re[SPRITE.CRAFT_SPANNER], 3);
            this.craft_buttons[ItemType.WRENCH].id = ItemType.WRENCH;
            this.craft_buttons[ItemType.GOLD_WRENCH] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_WRENCH], 3);
            this.craft_buttons[ItemType.GOLD_WRENCH].id = ItemType.GOLD_WRENCH;
            this.craft_buttons[ItemType.WATERING_CAN_EMPTY] = Dn(60, 60, 0, re[SPRITE.CRAFT_WATERING_CAN], 3);
            this.craft_buttons[ItemType.WATERING_CAN_EMPTY].id = ItemType.WATERING_CAN_EMPTY;
            this.craft_buttons[ItemType.WHEAT_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_WHEAT_SEED], 3);
            this.craft_buttons[ItemType.WHEAT_SEED].id = ItemType.WHEAT_SEED;
            this.craft_buttons[ItemType.COOKIE] = Dn(60, 60, 0, re[SPRITE.CRAFT_COOKIE], 3);
            this.craft_buttons[ItemType.COOKIE].id = ItemType.COOKIE;
            this.craft_buttons[ItemType.WINDMILL] = Dn(60, 60, 0, re[SPRITE.CRAFT_WINDMILL], 3);
            this.craft_buttons[ItemType.WINDMILL].id = ItemType.WINDMILL;
            this.craft_buttons[ItemType.SUPER_DIVING_SUIT] = Dn(60, 60, 0, re[SPRITE.CRAFT_SUPER_DIVING_SUIT], 3);
            this.craft_buttons[ItemType.SUPER_DIVING_SUIT].id = ItemType.SUPER_DIVING_SUIT;
            this.craft_buttons[ItemType.DIVING_MASK] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIVING_MASK], 3);
            this.craft_buttons[ItemType.DIVING_MASK].id = ItemType.DIVING_MASK;
            this.craft_buttons[ItemType.WATERING_CAN_FULL] = Dn(60, 60, 0, re[SPRITE.CRAFT_WATERING_CAN_FULL], 3);
            this.craft_buttons[ItemType.WATERING_CAN_FULL].id = ItemType.WATERING_CAN_FULL;
            this.craft_buttons[ItemType.CAKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_CAKE], 3);
            this.craft_buttons[ItemType.CAKE].id = ItemType.CAKE;
            this.craft_buttons[ItemType.BREAD] = Dn(60, 60, 0, re[SPRITE.CRAFT_BREAD], 3);
            this.craft_buttons[ItemType.BREAD].id = ItemType.BREAD;
            this.craft_buttons[ItemType.FISH_COOKED] = Dn(60, 60, 0, re[SPRITE.CRAFT_FOODFISH_COOKED], 3);
            this.craft_buttons[ItemType.FISH_COOKED].id = ItemType.FISH_COOKED;
            this.craft_buttons[ItemType.PLOT] = Dn(60, 60, 0, re[SPRITE.CRAFT_PLOT], 3);
            this.craft_buttons[ItemType.PLOT].id = ItemType.PLOT;
            this.craft_buttons[ItemType.BREAD_OVEN] = Dn(60, 60, 0, re[SPRITE.CRAFT_BREAD_OVEN], 3);
            this.craft_buttons[ItemType.BREAD_OVEN].id = ItemType.BREAD_OVEN;
            this.craft_buttons[ItemType.SANDWICH] = Dn(60, 60, 0, re[SPRITE.CRAFT_SANDWICH], 3);
            this.craft_buttons[ItemType.SANDWICH].id = ItemType.SANDWICH;
            this.craft_buttons[ItemType.DRAGON_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_DRAGON_HELMET], 3);
            this.craft_buttons[ItemType.DRAGON_HELMET].id = ItemType.DRAGON_HELMET;
            this.craft_buttons[ItemType.DRAGON_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_DRAGON_SWORD], 3);
            this.craft_buttons[ItemType.DRAGON_SWORD].id = ItemType.DRAGON_SWORD;
            this.craft_buttons[ItemType.CROWN_GREEN] = Dn(60, 60, 0, re[SPRITE.CRAFT_CROWN_GREEN], 3);
            this.craft_buttons[ItemType.CROWN_GREEN].id = ItemType.CROWN_GREEN;
            this.craft_buttons[ItemType.CROWN_ORANGE] = Dn(60, 60, 0, re[SPRITE.CRAFT_CROWN_ORANGE], 3);
            this.craft_buttons[ItemType.CROWN_ORANGE].id = ItemType.CROWN_ORANGE;
            this.craft_buttons[ItemType.CROWN_BLUE] = Dn(60, 60, 0, re[SPRITE.CRAFT_CROWN_BLUE], 3);
            this.craft_buttons[ItemType.CROWN_BLUE].id = ItemType.CROWN_BLUE;
            this.craft_buttons[ItemType.HOOD] = Dn(60, 60, 0, re[SPRITE.CRAFT_HOOD], 3);
            this.craft_buttons[ItemType.HOOD].id = ItemType.HOOD;
            this.craft_buttons[ItemType.PEASANT] = Dn(60, 60, 0, re[SPRITE.CRAFT_PEASANT], 3);
            this.craft_buttons[ItemType.PEASANT].id = ItemType.PEASANT;
            this.craft_buttons[ItemType.WINTER_PEASANT] = Dn(60, 60, 0, re[SPRITE.CRAFT_WINTER_PEASANT], 3);
            this.craft_buttons[ItemType.WINTER_PEASANT].id = ItemType.WINTER_PEASANT;
            this.craft_buttons[ItemType.WINTER_HOOD] = Dn(60, 60, 0, re[SPRITE.CRAFT_WINTER_HOOD], 3);
            this.craft_buttons[ItemType.WINTER_HOOD].id = ItemType.WINTER_HOOD;
            this.craft_buttons[ItemType.BUCKET_FULL] = Dn(60, 60, 0, re[SPRITE.CRAFT_BUCKET_FULL], 3);
            this.craft_buttons[ItemType.BUCKET_FULL].id = ItemType.BUCKET_FULL;
            this.craft_buttons[ItemType.BUCKET_EMPTY] = Dn(60, 60, 0, re[SPRITE.CRAFT_BUCKET_EMPTY], 3);
            this.craft_buttons[ItemType.BUCKET_EMPTY].id = ItemType.BUCKET_EMPTY;
            this.craft_buttons[ItemType.WELL] = Dn(60, 60, 0, re[SPRITE.CRAFT_WELL], 3);
            this.craft_buttons[ItemType.WELL].id = ItemType.WELL;
            this.craft_buttons[ItemType.PUMPKIN_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_PUMPKIN_SEED], 3);
            this.craft_buttons[ItemType.PUMPKIN_SEED].id = ItemType.PUMPKIN_SEED;
            this.craft_buttons[ItemType.GARLIC_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_GARLIC_SEED], 3);
            this.craft_buttons[ItemType.GARLIC_SEED].id = ItemType.GARLIC_SEED;
            this.craft_buttons[ItemType.ROOF] = Dn(60, 60, 0, re[SPRITE.CRAFT_ROOF], 3);
            this.craft_buttons[ItemType.ROOF].id = ItemType.ROOF;
            this.craft_buttons[ItemType.THORNBUSH_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_THORNBUSH_SEED], 3);
            this.craft_buttons[ItemType.THORNBUSH_SEED].id = ItemType.THORNBUSH_SEED;
            this.craft_buttons[ItemType.TOMATO_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_TOMATO_SEED], 3);
            this.craft_buttons[ItemType.TOMATO_SEED].id = ItemType.TOMATO_SEED;
            this.craft_buttons[ItemType.CARROT_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_CARROT_SEED], 3);
            this.craft_buttons[ItemType.CARROT_SEED].id = ItemType.CARROT_SEED;
            this.craft_buttons[ItemType.WATERMELON_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_WATERMELON_SEED], 3);
            this.craft_buttons[ItemType.WATERMELON_SEED].id = ItemType.WATERMELON_SEED;
            this.craft_buttons[ItemType.ALOE_VERA_SEED] = Dn(60, 60, 0, re[SPRITE.CRAFT_ALOE_VERA_SEED], 3);
            this.craft_buttons[ItemType.ALOE_VERA_SEED].id = ItemType.ALOE_VERA_SEED;
            this.craft_buttons[ItemType.WOOD_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_WOOD_SPEAR], 3);
            this.craft_buttons[ItemType.WOOD_SPEAR].id = ItemType.WOOD_SPEAR;
            this.craft_buttons[ItemType.DRAGON_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DRAGON_SPEAR], 3);
            this.craft_buttons[ItemType.DRAGON_SPEAR].id = ItemType.DRAGON_SPEAR;
            this.craft_buttons[ItemType.CRAB_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_CRAB_SPEAR], 3);
            this.craft_buttons[ItemType.CRAB_SPEAR].id = ItemType.CRAB_SPEAR;
            this.craft_buttons[ItemType.BED] = Dn(60, 60, 0, re[SPRITE.CRAFT_BED], 3);
            this.craft_buttons[ItemType.BED].id = ItemType.BED;
            this.craft_buttons[ItemType.CRAB_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_CROWN_CRAB], 3);
            this.craft_buttons[ItemType.CRAB_HELMET].id = ItemType.CRAB_HELMET;
            this.chest_buttons[ItemType.PITCHFORK] = Dn(68, 68, 0, re[SPRITE.CHEST_PITCHFORK], 3);
            this.chest_buttons[ItemType.PITCHFORK].id = ItemType.PITCHFORK;
            this.inv_buttons[ItemType.PITCHFORK] = Dn(60, 60, 0, re[SPRITE.INV_PITCHFORK], 3);
            this.inv_buttons[ItemType.PITCHFORK].id = ItemType.PITCHFORK;
            this.craft_buttons[ItemType.PITCHFORK] = Dn(60, 60, 0, re[SPRITE.CRAFT_PITCHFORK], 3);
            this.craft_buttons[ItemType.PITCHFORK].id = ItemType.PITCHFORK;
            this.chest_buttons[ItemType.GOLD_PITCHFORK] = Dn(68, 68, 0, re[SPRITE.CHEST_PITCHFORK2], 3);
            this.chest_buttons[ItemType.GOLD_PITCHFORK].id = ItemType.GOLD_PITCHFORK;
            this.inv_buttons[ItemType.GOLD_PITCHFORK] = Dn(60, 60, 0, re[SPRITE.INV_PITCHFORK2], 3);
            this.inv_buttons[ItemType.GOLD_PITCHFORK].id = ItemType.GOLD_PITCHFORK;
            this.craft_buttons[ItemType.GOLD_PITCHFORK] = Dn(60, 60, 0, re[SPRITE.CRAFT_PITCHFORK2], 3);
            this.craft_buttons[ItemType.GOLD_PITCHFORK].id = ItemType.GOLD_PITCHFORK;
            this.chest_buttons[ItemType.YUSUKEDAO_ITEM1] = Dn(68, 68, 0, re[SPRITE.CHEST_YUSUKEDAO_ITEM1], 3);
            this.chest_buttons[ItemType.YUSUKEDAO_ITEM1].id = ItemType.YUSUKEDAO_ITEM1;
            this.inv_buttons[ItemType.YUSUKEDAO_ITEM1] = Dn(60, 60, 0, re[SPRITE.INV_YUSUKEDAO_ITEM1], 3);
            this.inv_buttons[ItemType.YUSUKEDAO_ITEM1].id = ItemType.YUSUKEDAO_ITEM1;
            this.craft_buttons[ItemType.YUSUKEDAO_ITEM1] = Dn(60, 60, 0, re[SPRITE.CRAFT_YUSUKEDAO_ITEM1], 3);
            this.craft_buttons[ItemType.YUSUKEDAO_ITEM1].id = ItemType.YUSUKEDAO_ITEM1;
            this.chest_buttons[ItemType.YUSUKEDAO_ITEM2] = Dn(68, 68, 0, re[SPRITE.CHEST_YUSUKEDAO_ITEM2], 3);
            this.chest_buttons[ItemType.YUSUKEDAO_ITEM2].id = ItemType.YUSUKEDAO_ITEM2;
            this.inv_buttons[ItemType.YUSUKEDAO_ITEM2] = Dn(60, 60, 0, re[SPRITE.INV_YUSUKEDAO_ITEM2], 3);
            this.inv_buttons[ItemType.YUSUKEDAO_ITEM2].id = ItemType.YUSUKEDAO_ITEM2;
            this.craft_buttons[ItemType.YUSUKEDAO_ITEM2] = Dn(60, 60, 0, re[SPRITE.CRAFT_YUSUKEDAO_ITEM2], 3);
            this.craft_buttons[ItemType.YUSUKEDAO_ITEM2].id = ItemType.YUSUKEDAO_ITEM2;
            this.chest_buttons[ItemType.MACHETE] = Dn(68, 68, 0, re[SPRITE.CHEST_MACHETE], 3);
            this.chest_buttons[ItemType.MACHETE].id = ItemType.MACHETE;
            this.inv_buttons[ItemType.MACHETE] = Dn(60, 60, 0, re[SPRITE.INV_MACHETE], 3);
            this.inv_buttons[ItemType.MACHETE].id = ItemType.MACHETE;
            this.craft_buttons[ItemType.MACHETE] = Dn(60, 60, 0, re[SPRITE.CRAFT_MACHETE], 3);
            this.craft_buttons[ItemType.MACHETE].id = ItemType.MACHETE;
            this.chest_buttons[ItemType.PILOT_HAT] = Dn(68, 68, 0, re[SPRITE.CHEST_PILOT_HELMET], 3);
            this.chest_buttons[ItemType.PILOT_HAT].id = ItemType.PILOT_HAT;
            this.inv_buttons[ItemType.PILOT_HAT] = Dn(60, 60, 0, re[SPRITE.INV_PILOT_HELMET], 3);
            this.inv_buttons[ItemType.PILOT_HAT].id = ItemType.PILOT_HAT;
            this.craft_buttons[ItemType.PILOT_HAT] = Dn(60, 60, 0, re[SPRITE.CRAFT_PILOT_HELMET], 3);
            this.craft_buttons[ItemType.PILOT_HAT].id = ItemType.PILOT_HAT;
            this.chest_buttons[ItemType.PITCHFORK_PART] = Dn(68, 68, 0, re[SPRITE.CHEST_PITCHFORK_PART], 3);
            this.chest_buttons[ItemType.PITCHFORK_PART].id = ItemType.PITCHFORK_PART;
            this.inv_buttons[ItemType.PITCHFORK_PART] = Dn(60, 60, 0, re[SPRITE.INV_PITCHFORK_PART], 3);
            this.inv_buttons[ItemType.PITCHFORK_PART].id = ItemType.PITCHFORK_PART;
            this.chest_buttons[ItemType.SANDWORM_JUICE] = Dn(68, 68, 0, re[SPRITE.CHEST_SANDWORM_JUICE], 3);
            this.chest_buttons[ItemType.SANDWORM_JUICE].id = ItemType.SANDWORM_JUICE;
            this.inv_buttons[ItemType.SANDWORM_JUICE] = Dn(60, 60, 0, re[SPRITE.INV_SANDWORM_JUICE], 3);
            this.inv_buttons[ItemType.SANDWORM_JUICE].id = ItemType.SANDWORM_JUICE;
            this.chest_buttons[ItemType.PILOT_GLASSES] = Dn(68, 68, 0, re[SPRITE.CHEST_PILOT_GLASSES], 3);
            this.chest_buttons[ItemType.PILOT_GLASSES].id = ItemType.PILOT_GLASSES;
            this.inv_buttons[ItemType.PILOT_GLASSES] = Dn(60, 60, 0, re[SPRITE.INV_PILOT_GLASSES], 3);
            this.inv_buttons[ItemType.PILOT_GLASSES].id = ItemType.PILOT_GLASSES;
            this.chest_buttons[ItemType.EMERALD_MACHINE] = Dn(68, 68, 0, re[SPRITE.CHEST_EMERALD_MACHINE], 3);
            this.chest_buttons[ItemType.EMERALD_MACHINE].id = ItemType.EMERALD_MACHINE;
            this.inv_buttons[ItemType.EMERALD_MACHINE] = Dn(60, 60, 0, re[SPRITE.INV_EMERALD_MACHINE], 3);
            this.inv_buttons[ItemType.EMERALD_MACHINE].id = ItemType.EMERALD_MACHINE;
            this.craft_buttons[ItemType.EMERALD_MACHINE] = Dn(60, 60, 0, re[SPRITE.CRAFT_EMERALD_MACHINE], 3);
            this.craft_buttons[ItemType.EMERALD_MACHINE].id = ItemType.EMERALD_MACHINE;
            this.chest_buttons[ItemType.WOOD_DOOR_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_WOOD_DOOR_SPIKE], 3);
            this.chest_buttons[ItemType.WOOD_DOOR_SPIKE].id = ItemType.WOOD_DOOR_SPIKE;
            this.inv_buttons[ItemType.WOOD_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_WOOD_DOOR_SPIKE], 3);
            this.inv_buttons[ItemType.WOOD_DOOR_SPIKE].id = ItemType.WOOD_DOOR_SPIKE;
            this.craft_buttons[ItemType.WOOD_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_WOOD_DOOR_SPIKE], 3);
            this.craft_buttons[ItemType.WOOD_DOOR_SPIKE].id = ItemType.WOOD_DOOR_SPIKE;
            this.chest_buttons[ItemType.STONE_DOOR_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_STONE_DOOR_SPIKE], 3);
            this.chest_buttons[ItemType.STONE_DOOR_SPIKE].id = ItemType.STONE_DOOR_SPIKE;
            this.inv_buttons[ItemType.STONE_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_STONE_DOOR_SPIKE], 3);
            this.inv_buttons[ItemType.STONE_DOOR_SPIKE].id = ItemType.STONE_DOOR_SPIKE;
            this.craft_buttons[ItemType.STONE_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_STONE_DOOR_SPIKE], 3);
            this.craft_buttons[ItemType.STONE_DOOR_SPIKE].id = ItemType.STONE_DOOR_SPIKE;
            this.chest_buttons[ItemType.GOLD_DOOR_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_GOLD_DOOR_SPIKE], 3);
            this.chest_buttons[ItemType.GOLD_DOOR_SPIKE].id = ItemType.GOLD_DOOR_SPIKE;
            this.inv_buttons[ItemType.GOLD_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_GOLD_DOOR_SPIKE], 3);
            this.inv_buttons[ItemType.GOLD_DOOR_SPIKE].id = ItemType.GOLD_DOOR_SPIKE;
            this.craft_buttons[ItemType.GOLD_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_GOLD_DOOR_SPIKE], 3);
            this.craft_buttons[ItemType.GOLD_DOOR_SPIKE].id = ItemType.GOLD_DOOR_SPIKE;
            this.chest_buttons[ItemType.DIAMOND_DOOR_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_DOOR_SPIKE], 3);
            this.chest_buttons[ItemType.DIAMOND_DOOR_SPIKE].id = ItemType.DIAMOND_DOOR_SPIKE;
            this.inv_buttons[ItemType.DIAMOND_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_DOOR_SPIKE], 3);
            this.inv_buttons[ItemType.DIAMOND_DOOR_SPIKE].id = ItemType.DIAMOND_DOOR_SPIKE;
            this.craft_buttons[ItemType.DIAMOND_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE], 3);
            this.craft_buttons[ItemType.DIAMOND_DOOR_SPIKE].id = ItemType.DIAMOND_DOOR_SPIKE;
            this.chest_buttons[ItemType.AMETHYST_DOOR_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_DOOR_SPIKE], 3);
            this.chest_buttons[ItemType.AMETHYST_DOOR_SPIKE].id = ItemType.AMETHYST_DOOR_SPIKE;
            this.inv_buttons[ItemType.AMETHYST_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_DOOR_SPIKE], 3);
            this.inv_buttons[ItemType.AMETHYST_DOOR_SPIKE].id = ItemType.AMETHYST_DOOR_SPIKE;
            this.craft_buttons[ItemType.AMETHYST_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE], 3);
            this.craft_buttons[ItemType.AMETHYST_DOOR_SPIKE].id = ItemType.AMETHYST_DOOR_SPIKE;
            this.chest_buttons[ItemType.REIDITE_DOOR_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_DOOR_SPIKE], 3);
            this.chest_buttons[ItemType.REIDITE_DOOR_SPIKE].id = ItemType.REIDITE_DOOR_SPIKE;
            this.inv_buttons[ItemType.REIDITE_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_DOOR_SPIKE], 3);
            this.inv_buttons[ItemType.REIDITE_DOOR_SPIKE].id = ItemType.REIDITE_DOOR_SPIKE;
            this.craft_buttons[ItemType.REIDITE_DOOR_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_DOOR_SPIKE], 3);
            this.craft_buttons[ItemType.REIDITE_DOOR_SPIKE].id = ItemType.REIDITE_DOOR_SPIKE;
            this.chest_buttons[ItemType.REIDITE_WALL] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_WALL], 3);
            this.chest_buttons[ItemType.REIDITE_WALL].id = ItemType.REIDITE_WALL;
            this.inv_buttons[ItemType.REIDITE_WALL] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_WALL], 3);
            this.inv_buttons[ItemType.REIDITE_WALL].id = ItemType.REIDITE_WALL;
            this.craft_buttons[ItemType.REIDITE_WALL] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_WALL], 3);
            this.craft_buttons[ItemType.REIDITE_WALL].id = ItemType.REIDITE_WALL;
            this.chest_buttons[ItemType.REIDITE_SPIKE] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_SPIKE], 3);
            this.chest_buttons[ItemType.REIDITE_SPIKE].id = ItemType.REIDITE_SPIKE;
            this.inv_buttons[ItemType.REIDITE_SPIKE] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_SPIKE], 3);
            this.inv_buttons[ItemType.REIDITE_SPIKE].id = ItemType.REIDITE_SPIKE;
            this.craft_buttons[ItemType.REIDITE_SPIKE] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_SPIKE], 3);
            this.craft_buttons[ItemType.REIDITE_SPIKE].id = ItemType.REIDITE_SPIKE;
            this.chest_buttons[ItemType.REIDITE_DOOR] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_DOOR], 3);
            this.chest_buttons[ItemType.REIDITE_DOOR].id = ItemType.REIDITE_DOOR;
            this.inv_buttons[ItemType.REIDITE_DOOR] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_DOOR], 3);
            this.inv_buttons[ItemType.REIDITE_DOOR].id = ItemType.REIDITE_DOOR;
            this.craft_buttons[ItemType.REIDITE_DOOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_DOOR], 3);
            this.craft_buttons[ItemType.REIDITE_DOOR].id = ItemType.REIDITE_DOOR;
            this.chest_buttons[ItemType.STONE_EXTRACTOR] = Dn(68, 68, 0, re[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE], 3);
            this.chest_buttons[ItemType.STONE_EXTRACTOR].id = ItemType.STONE_EXTRACTOR;
            this.inv_buttons[ItemType.STONE_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.INV_EXTRACTOR_MACHINE_STONE], 3);
            this.inv_buttons[ItemType.STONE_EXTRACTOR].id = ItemType.STONE_EXTRACTOR;
            this.craft_buttons[ItemType.STONE_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE], 3);
            this.craft_buttons[ItemType.STONE_EXTRACTOR].id = ItemType.STONE_EXTRACTOR;
            this.chest_buttons[ItemType.GOLD_EXTRACTOR] = Dn(68, 68, 0, re[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD], 3);
            this.chest_buttons[ItemType.GOLD_EXTRACTOR].id = ItemType.GOLD_EXTRACTOR;
            this.inv_buttons[ItemType.GOLD_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.INV_EXTRACTOR_MACHINE_GOLD], 3);
            this.inv_buttons[ItemType.GOLD_EXTRACTOR].id = ItemType.GOLD_EXTRACTOR;
            this.craft_buttons[ItemType.GOLD_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD], 3);
            this.craft_buttons[ItemType.GOLD_EXTRACTOR].id = ItemType.GOLD_EXTRACTOR;
            this.chest_buttons[ItemType.DIAMOND_EXTRACTOR] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_EXTRACTOR], 3);
            this.chest_buttons[ItemType.DIAMOND_EXTRACTOR].id = ItemType.DIAMOND_EXTRACTOR;
            this.inv_buttons[ItemType.DIAMOND_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_EXTRACTOR], 3);
            this.inv_buttons[ItemType.DIAMOND_EXTRACTOR].id = ItemType.DIAMOND_EXTRACTOR;
            this.craft_buttons[ItemType.DIAMOND_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_EXTRACTOR], 3);
            this.craft_buttons[ItemType.DIAMOND_EXTRACTOR].id = ItemType.DIAMOND_EXTRACTOR;
            this.chest_buttons[ItemType.AMETHYST_EXTRACTOR] = Dn(68, 68, 0, re[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3);
            this.chest_buttons[ItemType.AMETHYST_EXTRACTOR].id = ItemType.AMETHYST_EXTRACTOR;
            this.inv_buttons[ItemType.AMETHYST_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST], 3);
            this.inv_buttons[ItemType.AMETHYST_EXTRACTOR].id = ItemType.AMETHYST_EXTRACTOR;
            this.craft_buttons[ItemType.AMETHYST_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3);
            this.craft_buttons[ItemType.AMETHYST_EXTRACTOR].id = ItemType.AMETHYST_EXTRACTOR;
            this.chest_buttons[ItemType.REIDITE_EXTRACTOR] = Dn(68, 68, 0, re[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE], 3);
            this.chest_buttons[ItemType.REIDITE_EXTRACTOR].id = ItemType.REIDITE_EXTRACTOR;
            this.inv_buttons[ItemType.REIDITE_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE], 3);
            this.inv_buttons[ItemType.REIDITE_EXTRACTOR].id = ItemType.REIDITE_EXTRACTOR;
            this.craft_buttons[ItemType.REIDITE_EXTRACTOR] = Dn(60, 60, 0, re[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3);
            this.craft_buttons[ItemType.REIDITE_EXTRACTOR].id = ItemType.REIDITE_EXTRACTOR;
            this.chest_buttons[ItemType.FLAME] = Dn(68, 68, 0, re[SPRITE.CHEST_FLAME], 3);
            this.chest_buttons[ItemType.FLAME].id = ItemType.FLAME;
            this.inv_buttons[ItemType.FLAME] = Dn(60, 60, 0, re[SPRITE.INV_FLAME], 3);
            this.inv_buttons[ItemType.FLAME].id = ItemType.FLAME;
            this.inv_buttons[ItemType.FLAME].info.img[2] = this.inv_buttons[ItemType.FLAME].info.img[0];
            this.chest_buttons[ItemType.LAVA_HEART] = Dn(68, 68, 0, re[SPRITE.CHEST_LAVA_HEART], 3);
            this.chest_buttons[ItemType.LAVA_HEART].id = ItemType.LAVA_HEART;
            this.inv_buttons[ItemType.LAVA_HEART] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_HEART], 3);
            this.inv_buttons[ItemType.LAVA_HEART].id = ItemType.LAVA_HEART;
            this.inv_buttons[ItemType.LAVA_HEART].info.img[2] = this.inv_buttons[ItemType.LAVA_HEART].info.img[0];
            this.chest_buttons[ItemType.REIDITE] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE], 3);
            this.chest_buttons[ItemType.REIDITE].id = ItemType.REIDITE;
            this.inv_buttons[ItemType.REIDITE] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE], 3);
            this.inv_buttons[ItemType.REIDITE].id = ItemType.REIDITE;
            this.inv_buttons[ItemType.REIDITE].info.img[2] = this.inv_buttons[ItemType.REIDITE].info.img[0];
            this.chest_buttons[ItemType.REIDITE_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_SWORD], 3);
            this.chest_buttons[ItemType.REIDITE_SWORD].id = ItemType.REIDITE_SWORD;
            this.inv_buttons[ItemType.REIDITE_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_SWORD], 3);
            this.inv_buttons[ItemType.REIDITE_SWORD].id = ItemType.REIDITE_SWORD;
            this.craft_buttons[ItemType.REIDITE_SWORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_SWORD], 3);
            this.craft_buttons[ItemType.REIDITE_SWORD].id = ItemType.REIDITE_SWORD;
            this.chest_buttons[ItemType.DIAMOND_PROTECTION] = Dn(68, 68, 0, re[SPRITE.CHEST_DIAMOND_PROTECTION], 3);
            this.chest_buttons[ItemType.DIAMOND_PROTECTION].id = ItemType.DIAMOND_PROTECTION;
            this.inv_buttons[ItemType.DIAMOND_PROTECTION] = Dn(60, 60, 0, re[SPRITE.INV_DIAMOND_PROTECTION], 3);
            this.inv_buttons[ItemType.DIAMOND_PROTECTION].id = ItemType.DIAMOND_PROTECTION;
            this.craft_buttons[ItemType.DIAMOND_PROTECTION] = Dn(60, 60, 0, re[SPRITE.CRAFT_DIAMOND_PROTECTION], 3);
            this.craft_buttons[ItemType.DIAMOND_PROTECTION].id = ItemType.DIAMOND_PROTECTION;
            this.chest_buttons[ItemType.AMETHYST_PROTECTION] = Dn(68, 68, 0, re[SPRITE.CHEST_AMETHYST_PROTECTION], 3);
            this.chest_buttons[ItemType.AMETHYST_PROTECTION].id = ItemType.AMETHYST_PROTECTION;
            this.inv_buttons[ItemType.AMETHYST_PROTECTION] = Dn(60, 60, 0, re[SPRITE.INV_AMETHYST_PROTECTION], 3);
            this.inv_buttons[ItemType.AMETHYST_PROTECTION].id = ItemType.AMETHYST_PROTECTION;
            this.craft_buttons[ItemType.AMETHYST_PROTECTION] = Dn(60, 60, 0, re[SPRITE.CRAFT_AMETHYST_PROTECTION], 3);
            this.craft_buttons[ItemType.AMETHYST_PROTECTION].id = ItemType.AMETHYST_PROTECTION;
            this.chest_buttons[ItemType.REIDITE_PROTECTION] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_PROTECTION], 3);
            this.chest_buttons[ItemType.REIDITE_PROTECTION].id = ItemType.REIDITE_PROTECTION;
            this.inv_buttons[ItemType.REIDITE_PROTECTION] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_PROTECTION], 3);
            this.inv_buttons[ItemType.REIDITE_PROTECTION].id = ItemType.REIDITE_PROTECTION;
            this.craft_buttons[ItemType.REIDITE_PROTECTION] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_PROTECTION], 3);
            this.craft_buttons[ItemType.REIDITE_PROTECTION].id = ItemType.REIDITE_PROTECTION;
            this.chest_buttons[ItemType.LAVA_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_LAVA_HELMET], 3);
            this.chest_buttons[ItemType.LAVA_HELMET].id = ItemType.LAVA_HELMET;
            this.inv_buttons[ItemType.LAVA_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_HELMET], 3);
            this.inv_buttons[ItemType.LAVA_HELMET].id = ItemType.LAVA_HELMET;
            this.craft_buttons[ItemType.LAVA_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_LAVA_HELMET], 3);
            this.craft_buttons[ItemType.LAVA_HELMET].id = ItemType.LAVA_HELMET;
            this.chest_buttons[ItemType.WITCH_HAT] = Dn(68, 68, 0, re[SPRITE.CHEST_WITCH], 3);
            this.chest_buttons[ItemType.WITCH_HAT].id = ItemType.WITCH_HAT;
            this.inv_buttons[ItemType.WITCH_HAT] = Dn(60, 60, 0, re[SPRITE.INV_WITCH], 3);
            this.inv_buttons[ItemType.WITCH_HAT].id = ItemType.WITCH_HAT;
            this.craft_buttons[ItemType.WITCH_HAT] = Dn(60, 60, 0, re[SPRITE.CRAFT_WITCH], 3);
            this.craft_buttons[ItemType.WITCH_HAT].id = ItemType.WITCH_HAT;
            this.chest_buttons[ItemType.WAND1] = Dn(68, 68, 0, re[SPRITE.CHEST_WAND1], 3);
            this.chest_buttons[ItemType.WAND1].id = ItemType.WAND1;
            this.inv_buttons[ItemType.WAND1] = Dn(60, 60, 0, re[SPRITE.INV_WAND1], 3);
            this.inv_buttons[ItemType.WAND1].id = ItemType.WAND1;
            this.craft_buttons[ItemType.WAND1] = Dn(60, 60, 0, re[SPRITE.CRAFT_WAND1], 3);
            this.craft_buttons[ItemType.WAND1].id = ItemType.WAND1;
            this.chest_buttons[ItemType.WAND2] = Dn(68, 68, 0, re[SPRITE.CHEST_WAND2], 3);
            this.chest_buttons[ItemType.WAND2].id = ItemType.WAND2;
            this.inv_buttons[ItemType.WAND2] = Dn(60, 60, 0, re[SPRITE.INV_WAND2], 3);
            this.inv_buttons[ItemType.WAND2].id = ItemType.WAND2;
            this.craft_buttons[ItemType.WAND2] = Dn(60, 60, 0, re[SPRITE.CRAFT_WAND2], 3);
            this.craft_buttons[ItemType.WAND2].id = ItemType.WAND2;
            this.chest_buttons[ItemType.NIMBUS] = Dn(68, 68, 0, re[SPRITE.CHEST_NIMBUS], 3);
            this.chest_buttons[ItemType.NIMBUS].id = ItemType.NIMBUS;
            this.inv_buttons[ItemType.NIMBUS] = Dn(60, 60, 0, re[SPRITE.INV_NIMBUS], 3);
            this.inv_buttons[ItemType.NIMBUS].id = ItemType.NIMBUS;
            this.craft_buttons[ItemType.NIMBUS] = Dn(60, 60, 0, re[SPRITE.CRAFT_NIMBUS], 3);
            this.craft_buttons[ItemType.NIMBUS].id = ItemType.NIMBUS;
            this.chest_buttons[ItemType.FIREFLY] = Dn(68, 68, 0, re[SPRITE.CHEST_FIREFLY], 3);
            this.chest_buttons[ItemType.FIREFLY].id = ItemType.FIREFLY;
            this.inv_buttons[ItemType.FIREFLY] = Dn(60, 60, 0, re[SPRITE.INV_FIREFLY], 3);
            this.inv_buttons[ItemType.FIREFLY].id = ItemType.FIREFLY;
            this.chest_buttons[ItemType.REIDITE_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_SPEAR], 3);
            this.chest_buttons[ItemType.REIDITE_SPEAR].id = ItemType.REIDITE_SPEAR;
            this.inv_buttons[ItemType.REIDITE_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_SPEAR], 3);
            this.inv_buttons[ItemType.REIDITE_SPEAR].id = ItemType.REIDITE_SPEAR;
            this.craft_buttons[ItemType.REIDITE_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_SPEAR], 3);
            this.craft_buttons[ItemType.REIDITE_SPEAR].id = ItemType.REIDITE_SPEAR;
            this.chest_buttons[ItemType.REIDITE_HELMET] = Dn(68, 68, 0, re[SPRITE.CHEST_REIDITE_HELMET], 3);
            this.chest_buttons[ItemType.REIDITE_HELMET].id = ItemType.REIDITE_HELMET;
            this.inv_buttons[ItemType.REIDITE_HELMET] = Dn(60, 60, 0, re[SPRITE.INV_REIDITE_HELMET], 3);
            this.inv_buttons[ItemType.REIDITE_HELMET].id = ItemType.REIDITE_HELMET;
            this.craft_buttons[ItemType.REIDITE_HELMET] = Dn(60, 60, 0, re[SPRITE.CRAFT_REIDITE_HELMET], 3);
            this.craft_buttons[ItemType.REIDITE_HELMET].id = ItemType.REIDITE_HELMET;
            this.chest_buttons[ItemType.LAVA_SPEAR] = Dn(68, 68, 0, re[SPRITE.CHEST_LAVA_SPEAR], 3);
            this.chest_buttons[ItemType.LAVA_SPEAR].id = ItemType.LAVA_SPEAR;
            this.inv_buttons[ItemType.LAVA_SPEAR] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_SPEAR], 3);
            this.inv_buttons[ItemType.LAVA_SPEAR].id = ItemType.LAVA_SPEAR;
            this.craft_buttons[ItemType.LAVA_SPEAR] = Dn(60, 60, 0, re[SPRITE.CRAFT_LAVA_SPEAR], 3);
            this.craft_buttons[ItemType.LAVA_SPEAR].id = ItemType.LAVA_SPEAR;
            this.chest_buttons[ItemType.CURSED_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_CURSED_SWORD], 3);
            this.chest_buttons[ItemType.CURSED_SWORD].id = ItemType.CURSED_SWORD;
            this.inv_buttons[ItemType.CURSED_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_CURSED_SWORD], 3);
            this.inv_buttons[ItemType.CURSED_SWORD].id = ItemType.CURSED_SWORD;
            this.craft_buttons[ItemType.CURSED_SWORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_CURSED_SWORD], 3);
            this.craft_buttons[ItemType.CURSED_SWORD].id = ItemType.CURSED_SWORD;
            this.chest_buttons[ItemType.LAVA_SWORD] = Dn(68, 68, 0, re[SPRITE.CHEST_LAVA_SWORD], 3);
            this.chest_buttons[ItemType.LAVA_SWORD].id = ItemType.LAVA_SWORD;
            this.inv_buttons[ItemType.LAVA_SWORD] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_SWORD], 3);
            this.inv_buttons[ItemType.LAVA_SWORD].id = ItemType.LAVA_SWORD;
            this.craft_buttons[ItemType.LAVA_SWORD] = Dn(60, 60, 0, re[SPRITE.CRAFT_LAVA_SWORD], 3);
            this.craft_buttons[ItemType.LAVA_SWORD].id = ItemType.LAVA_SWORD;
            this.chest_buttons[ItemType.LAVA_ORB] = Dn(68, 68, 0, re[SPRITE.CHEST_LAVA_ORB], 3);
            this.chest_buttons[ItemType.LAVA_ORB].id = ItemType.LAVA_ORB;
            this.inv_buttons[ItemType.LAVA_ORB] = Dn(60, 60, 0, re[SPRITE.INV_LAVA_ORB], 3);
            this.inv_buttons[ItemType.LAVA_ORB].id = ItemType.LAVA_ORB;
            this.update_craft_buttons = function () {
                for (var e = Vn.craft.can_craft, t = 10, i = 10, o = 0; o < e.length; o++) {
                if (o > 0 && !(o % 4)) {
                    t += e[0].info.width + 10;
                    i = 10;
                }
                e[o].info.translate.x = t;
                e[o].info.translate.y = i;
                i += 10 + e[o].info.height;
                }
            };
            this.update_chest_buttons = function () {
                var e = window.Math.floor(window.Math.floor((3 + Vn.craft.can_craft.length) / 4) * (10 + this.chest_buttons[ItemType.STONE_SWORD].info.img[0].width) + 35);
                for (var t = 0; t < this.chest_buttons.length; t++) {
                if (this.chest_buttons[t]) {
                    this.chest_buttons[t].info.translate.x = e;
                    this.chest_buttons[t].info.translate.y = 22;
                }
                }
                this.chest_lockpick.info.translate.x = e + 17;
                this.chest_lockpick.info.translate.y = 22 + re[SPRITE.CHEST_SLOT].height;
                this.chest_locked.info.translate.x = e + 17;
                this.chest_locked.info.translate.y = 30;
                this.chest_padlock.info.translate.x = e + 17;
                this.chest_padlock.info.translate.y = 22 + re[SPRITE.CHEST_SLOT].height;
            };
            this.update_team_buttons = function () {
                var e = window.Math.floor((H - re[SPRITE.TEAM_BUTTON][0].width) / 2);
                for (var t = 0; t < this.team_buttons.length; t++) {
                this.team_buttons[t].button.info.translate.x = e;
                this.team_buttons[t].button.info.translate.y = -13;
                }
            };
            this.update_bread_oven_button = function () {
                var e = 12 + window.Math.floor(window.Math.floor((3 + Vn.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width) + 35);
                this.bread_oven_wood_button.info.translate.x = e;
                this.bread_oven_wood_button.info.translate.y = 33;
                this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
                this.bread_oven_flour_button.info.translate.y = 137;
                this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
                this.bread_oven_bread_button.info.translate.y = 240;
            };
            this.update_extractor_button = function () {
                var e = 12 + window.Math.floor(window.Math.floor((3 + Vn.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width) + 35);
                this.extractor_wood_button.info.translate.x = e;
                this.extractor_wood_button.info.translate.y = 36;
                e += 83;
                this.extractor_stone_button.info.translate.x = e;
                this.extractor_stone_button.info.translate.y = 36;
                this.extractor_gold_button.info.translate.x = e;
                this.extractor_gold_button.info.translate.y = 36;
                this.extractor_diamond_button.info.translate.x = e;
                this.extractor_diamond_button.info.translate.y = 36;
                this.extractor_amethyst_button.info.translate.x = e;
                this.extractor_amethyst_button.info.translate.y = 36;
                this.extractor_reidite_button.info.translate.x = e;
                this.extractor_reidite_button.info.translate.y = 36;
            };
            this.update_windmill_button = function () {
                var e = 12 + window.Math.floor(window.Math.floor((3 + Vn.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width) + 35);
                this.windmill_wheat_button.info.translate.x = e;
                this.windmill_wheat_button.info.translate.y = 36;
                e += 83;
                this.windmill_flour_button.info.translate.x = e;
                this.windmill_flour_button.info.translate.y = 36;
            };
            this.update_furnace_button = function () {
                var e = window.Math.floor(window.Math.floor((3 + Vn.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width) + 35);
                this.furnace_button.info.translate.x = e;
                this.furnace_button.info.translate.y = 22;
            };
            this.update_inv_buttons = function () {
                var e = Vn.inv.can_select;
                if (e.length > 0) {
                var t = window.Math.floor((H - (e[0].info.width + 5) * Vn.inv.max) / 2);
                }
                for (var i = 0; i < e.length; i++) {
                e[i].info.translate.x = t + (e[i].info.width + 5) * i;
                e[i].info.translate.y = f - e[i].info.width - 10;
                this.plus_buttons[e[i].id].info.translate.x = e[i].info.translate.x + 13;
                this.plus_buttons[e[i].id].info.translate.y = e[i].info.translate.y - this.plus_buttons[e[i].id].info.img[0].height - 6;
                }
            };
            var T;
            var r = 0;
            function n() {
                i.update();
                if (++r >= 60) {
                i.add_event_listener();
                i.update();
                return;
                }
                window.setTimeout(n, a);
            }
            this.quit = function (e) {
                if (Vn.chat.open) {
                Vn.chat.quit();
                }
                if (Vn.terminal.open) {
                Vn.terminal.quit();
                }
                window.document.getElementById("team_box").style.display = "none";
                i.market.style.display = "none";
                i.market.open = false;
                window.document.getElementById("shop_starterkit").style.display = "none";
                window.document.getElementById("home_craft").style.display = "none";
                window.document.getElementById("recipe_craft").style.display = "none";
                i.craft_list.open = false;
                window.document.getElementById("option_in_game").style.display = "none";
                i.options.open = false;
                window.document.getElementById("sure_delete").style.display = "none";
                i.safe_delete.open = false;
                window.document.getElementById("cancel_sure_delete").style.display = "none";
                i.safe_cancel.open = false;
                window.document.getElementById("chronoquest").style.display = "none";
                i.quests.open = false;
                T = e;
                i.remove_event_listener();
                i.can.style.cursor = i.cursor0;
                I = -1;
                E();
            };
            var I = -1;
            function E() {
                i.update();
                if (++I == 60) {
                i.stop();
                T();
                return;
                }
                window.setTimeout(E, a);
            }
            this.is_run = false;
            this.stop = function () {
                this.is_run = false;
            };
            this.run = function () {
                Yn.change_ground();
                I = -1;
                r = 0;
                n();
            };
            this.update = function () {
                this.leaderboard.translate.x = H - this.leaderboard.img.width - 10;
                this.leaderboard.translate.y = 5;
                Wn.clock.translate.x = this.leaderboard.translate.x - re[SPRITE.CLOCK][0].width - 85;
                Wn.clock.translate.y = 10;
                this.craft_list.button.info.translate.x = this.leaderboard.translate.x - re[SPRITE.RECIPE_BUTTON][0].width - 10;
                this.craft_list.button.info.translate.y = 10;
                this.quests.button.info.translate.x = this.leaderboard.translate.x - re[SPRITE.QUEST_BUTTON][0].width - 20;
                this.quests.button.info.translate.y = this.craft_list.button.info.translate.y + re[SPRITE.RECIPE_BUTTON][0].height + 5;
                this.options.button.info.translate.x = this.leaderboard.translate.x - re[SPRITE.OPTION_BUTTON][0].width - 20;
                this.options.button.info.translate.y = this.quests.button.info.translate.y + re[SPRITE.OPTION_BUTTON][0].height + 18;
                this.market.button.info.translate.x = this.leaderboard.translate.x - re[SPRITE.MARKET_BUTTON][0].width - 20;
                this.market.button.info.translate.y = this.options.button.info.translate.y + re[SPRITE.MARKET_BUTTON][0].height;
                Vn.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85;
                Vn.auto_feed.translate.y = 100;
                this.minimap.translate.y = f - 3 - 193;
                this.minimap.translate.x = H - 3 - 193;
                this.gauges.translate.x = 5;
                this.gauges.translate.y = f - this.gauges.img.height - 5;
                this.shop.button.info.translate.x = z - 45.5;
                this.shop.button.info.translate.y = 50;
                this.update_craft_buttons();
                this.update_inv_buttons();
                this.update_chest_buttons();
                this.update_furnace_button();
                this.update_windmill_button();
                this.update_extractor_button();
                this.update_bread_oven_button();
                this.update_team_buttons();
                oT();
                Vn.chat.update();
                Vn.terminal.update();
                this.team_box.update();
                this.craft_list.home.update();
                this.craft_list.list.update();
                this.safe_delete.update();
                this.safe_cancel.update();
                this.quests.update();
                this.shop.update();
                this.options.update();
                this.market.update();
                var e = 0;
                if (r != 60) {
                e = 1500 / (r + 1) - 24;
                }
                if (I != -1) {
                e = -(1500 / (60 - I + 1) - 24);
                }
                this.shop.button.info.translate.y -= e > 0 ? e : -e;
                this.leaderboard.translate.y -= e > 0 ? e : -e;
                Vn.auto_feed.translate.y -= e > 0 ? e : -e;
                this.craft_list.button.info.translate.y -= e > 0 ? e : -e;
                this.quests.button.info.translate.y -= e > 0 ? e : -e;
                this.options.button.info.translate.y -= e > 0 ? e : -e;
                this.market.button.info.translate.y -= e > 0 ? e : -e;
                Wn.clock.translate.y -= e > 0 ? e : -e;
                this.gauges.translate.y -= e < 0 ? e : -e;
                this.minimap.translate.y -= e < 0 ? e : -e;
            };
            this.draw_UI = function () {
                if (!Vn.ghost.enabled && !!this.show_ui && !Vn.zombie) {
                OT();
                }
                AT();
                (function () {
                for (var e = Wn.units[ITEMS.PLAYERS], t = 0; t < e.length; t++) {
                    e[t].draw_text();
                }
                })();
                if (this.show_ui) {
                aT();
                if (this.show_recipe_book === 1) {
                    this.craft_list.button.draw(t);
                }
                if (Wn.mode !== WORLD.MODE_ZOMBIES && Wn.mode !== WORLD.MODE_LEGACY && Wn.mode !== WORLD.MODE_BR && this.show_quest === 1) {
                    this.quests.button.draw(t);
                }
                this.options.button.draw(t);
                if (this.show_market === 1) {
                    this.market.button.draw(t);
                }
                _T();
                ET();
                this.gauges.draw();
                uT();
                dT();
                hT();
                sT();
                lT();
                TT();
                tT();
                (function () {
                    if (!Vn.chest.open && !Vn.furnace.open && !Vn.windmill.open && !Vn.bread_oven.open && !Vn.extractor.open) {
                    Vn.well.open = false;
                    var e = Wn.fast_units[Vn.id];
                    var t = WORLD.DIST_WELL;
                    if (e) {
                        for (var i = 0; i < Wn.units[ITEMS.WELL].length; i++) {
                        var o = Wn.units[ITEMS.WELL][i];
                        var T = v.dist(o, e);
                        if (T < t) {
                            t = T;
                            Vn.well.open = true;
                            Vn.well.pid = o.pid;
                        }
                        }
                    }
                    }
                })();
                eT();
                Qo();
                $o();
                oT();
                qo();
                }
                if (Vn.ghost.enabled) {
                iT();
                }
                rT();
                if (this.show_ui && this.show_clock === 1) {
                RT();
                }
                Vn.welcome.draw();
                Vn.alert.draw();
                if (this.show_ui) {
                Vn.ghost.draw();
                Vn.shop.draw();
                Vn.inv.drag.draw(Fn.pos.x, Fn.pos.y);
                }
                nT();
            };
            this.update_scene = function () {
                Vn.cam.update();
                Vn.gauges.update();
                if (!Vn.reconnect.enabled && Vn.alive) {
                Vn.control.update();
                Vn.auto_feed.update();
                }
                Wn.update();
                this.quests.update_chrono();
            };
            this.draw_scene = function () {
                Sn();
            };
            this.update_connection = function () {
                Yn.try_ping();
                Yn.update_cam();
            };
            this.draw = function () {
                if (!Vn.reconnect.enabled && Vn.alive) {
                this.update_connection();
                }
                this.update_scene();
                this.draw_scene();
                this.draw_UI();
            };
            this.trigger_keyup = function (e) {
                if (e.isTrusted) {
                if (Vn.chat.open && e.keyCode === 27) {
                    Vn.chat.quit();
                } else if (Vn.terminal.open && e.keyCode === 27) {
                    Vn.terminal.quit();
                } else if (Vn.chat.open || Vn.terminal.open || e.keyCode != 79 || I != -1) {
                    if (e.keyCode == 13 && I == -1) {
                    if (Vn.terminal.open) {
                        Vn.terminal._send();
                    } else {
                        Vn.chat.run();
                    }
                    } else if (!Vn.chat.open && !Vn.terminal.open) {
                    if (e.keyCode === 82) {
                        Vn.auto_feed.invert();
                    } else if (e.keyCode >= 49 && e.keyCode <= 57) {
                        if (Vn.craft.id < 0) {
                        var t = e.keyCode - 49;
                        var i = Vn.inv.can_select[t];
                        if (i) {
                            Yn.select_inv(i.id, t);
                        }
                        }
                    } else if (e.keyCode == 89) {
                        Vn.bigmap = !Vn.bigmap;
                    } else if (e.keyCode == 71) {
                        Vn.craft.change_mode();
                    }
                    }
                } else {
                    Vn.terminal._open();
                }
                if (Vn.terminal.open && e.target === Vn.terminal.input) {
                    if (e.code === "ArrowUp") {
                    if (Vn.terminal.lastCommands.length - Vn.terminal.commandIndex > 0) {
                        Vn.terminal.commandIndex++;
                    }
                    Vn.terminal.input.value = Vn.terminal.lastCommands[Vn.terminal.lastCommands.length - Vn.terminal.commandIndex] ?? "";
                    } else if (e.code === "ArrowDown") {
                    if (Vn.terminal.commandIndex > 0) {
                        Vn.terminal.commandIndex--;
                    }
                    Vn.terminal.input.value = Vn.terminal.lastCommands[Vn.terminal.lastCommands.length - Vn.terminal.commandIndex] ?? "";
                    } else if (e.code === "Backspace") {
                    Vn.terminal.commandIndex = 0;
                    }
                }
                if (!Vn.chat.open) {
                    Vn.terminal.open;
                }
                kn.up(e);
                }
            };
            this.trigger_keydown = function (e) {
                if (e.isTrusted) {
                kn.down(e);
                if (e.keyCode == 8 && !Vn.chat.open && !Vn.terminal.open) {
                    e.preventDefault();
                }
                }
            };
            this.trigger_mousedown = function (e) {
                if (e.isTrusted) {
                Fn.pos = bn(e);
                var t = false;
                if (Vn.craft.preview < 0) {
                    i.minimap.focus(Fn.pos);
                }
                var o = Vn.chest;
                if (Vn.craft.id < 0 && o.id >= 1) {
                    if (!Vn.chest.lock || Vn.chest.pid === Vn.id) {
                    t |= i.chest_buttons[Vn.chest.id].trigger(i.can, Fn.pos, 1);
                    }
                }
                var T = Vn.windmill;
                if (T.open && T.amount_flour > 0) {
                    t |= i.windmill_flour_button.trigger(i.can, Fn.pos, 1);
                }
                var r = Vn.extractor;
                if (r.open && r.amount_mineral > 0) {
                    t |= i.extractor_stone_button.trigger(i.can, Fn.pos, 1);
                    t |= i.extractor_gold_button.trigger(i.can, Fn.pos, 1);
                    t |= i.extractor_diamond_button.trigger(i.can, Fn.pos, 1);
                    t |= i.extractor_amethyst_button.trigger(i.can, Fn.pos, 1);
                    t |= i.extractor_reidite_button.trigger(i.can, Fn.pos, 1);
                }
                var n = Vn.bread_oven;
                if (n.open && n.amount_bread > 0) {
                    t |= i.bread_oven_bread_button.trigger(i.can, Fn.pos, 1);
                }
                if (!Vn.chest.lock) {
                    if (Vn.chest.padlock) {
                    t |= i.chest_padlock.trigger(i.can, Fn.pos, 1);
                    }
                }
                if (Vn.chest.lockpick) {
                    t |= i.chest_lockpick.trigger(i.can, Fn.pos, 1);
                }
                if (Vn.craft.id < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.options.open && !i.market.open) {
                    for (var a = Vn.inv.can_select, I = 0; I < a.length; I++) {
                    var E = a[I].trigger(i.can, Fn.pos, 1);
                    t |= E;
                    if (E) {
                        Vn.inv.drag.start(I, Fn.pos);
                    }
                    if (o.open && (o.id < 1 || o.id == a[I].id) || Vn.furnace.open && a[I].id === ItemType.WOOD || Vn.well.open && a[I].id === ItemType.BUCKET_FULL || Vn.bread_oven.open && (a[I].id === ItemType.WOOD || a[I].id === ItemType.FLOUR) || Vn.windmill.open && a[I].id === ItemType.WHEAT || Vn.extractor.open && a[I].id === ItemType.WOOD) {
                        t |= i.plus_buttons[a[I].id].trigger(i.can, Fn.pos, 1);
                    }
                    }
                }
                if (Vn.resurrection.open) {
                    t |= i.resurrection.trigger(i.can, Fn.pos, 1);
                }
                if (i.team_buttons_id != -1) {
                    if (t |= i.team_buttons[i.team_buttons_id].button.trigger(i.can, Fn.pos, 1)) {
                    var _ = true;
                    }
                } else {
                    _ = false;
                }
                if (Vn.craft.id < 0 && Vn.craft.preview < 0 && !_ && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.market.open && !Vn.zombie) {
                    a = Vn.craft.can_craft;
                    I = 0;
                    for (; I < a.length; I++) {
                    t |= a[I].trigger(i.can, Fn.pos, 1);
                    }
                }
                if (Vn.craft.id < 0 && Vn.craft.preview < 0 && !!Vn.shop.open && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.quests.open && !i.market.open) {
                    t |= i.shop.button.trigger(i.can, Fn.pos, 1);
                }
                if (Vn.craft.preview < 0 && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.quests.open && !i.market.open) {
                    t |= i.craft_list.button.trigger(i.can, Fn.pos, 1);
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.market.open) {
                    t |= i.options.button.trigger(i.can, Fn.pos, 1);
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.options.open) {
                    t |= i.market.button.trigger(i.can, Fn.pos, 1);
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.market.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && Wn.mode !== WORLD.MODE_ZOMBIES && Wn.mode !== WORLD.MODE_LEGACY && Wn.mode !== WORLD.MODE_BR) {
                    t |= i.quests.button.trigger(i.can, Fn.pos, 1);
                }
                if (!t && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.quests.open && !i.market.open) {
                    if (Vn.craft.preview >= 0) {
                    Yn.send_build();
                    } else if (!_) {
                    Fn.down();
                    }
                }
                }
            };
            this.trigger_mouseup = function (e) {
                if (e.isTrusted && (Fn.pos = bn(e), Fn.up(), !Vn.inv.drag.release())) {
                var t = Vn.chest;
                var o = Vn.furnace;
                var T = Vn.well;
                var r = Vn.windmill;
                var n = Vn.extractor;
                var a = Vn.bread_oven;
                if (Vn.control.attack) {
                    Vn.control.attack = 0;
                    Yn.stop_attack();
                }
                if (i.team_buttons_id != -1) {
                    var I = i.team_buttons[i.team_buttons_id].button.trigger(i.can, Fn.pos, 2);
                    var E = window.document.getElementById("team_box").style;
                    if (I && E.display == "inline-block") {
                    E.display = "none";
                    return;
                    }
                    if (I) {
                    i.team_buttons[i.team_buttons_id].action();
                    }
                }
                if (Vn.craft.id < 0 && t.id >= 1 && !i.safe_delete.open) {
                    if (!Vn.chest.lock || Vn.chest.pid === Vn.id) {
                    if (I = i.chest_buttons[Vn.chest.id].trigger(i.can, Fn.pos, 2)) {
                        Yn.take_chest();
                    }
                    }
                }
                if ((r = Vn.windmill).open && r.amount_flour > 0 && !i.safe_delete.open) {
                    if (I = i.windmill_flour_button.trigger(i.can, Fn.pos, 2)) {
                    Yn.take_flour();
                    }
                }
                if ((n = Vn.extractor).open && n.amount_mineral > 0 && !i.safe_delete.open) {
                    switch (n.type) {
                    case ITEMS.EXTRACTOR_MACHINE_STONE:
                        if (I = i.extractor_stone_button.trigger(i.can, Fn.pos, 2)) {
                        Yn.take_extractor(n);
                        }
                        break;
                    case ITEMS.EXTRACTOR_MACHINE_GOLD:
                        if (I = i.extractor_gold_button.trigger(i.can, Fn.pos, 2)) {
                        Yn.take_extractor(n);
                        }
                        break;
                    case ITEMS.DIAMOND_EXTRACTOR:
                        if (I = i.extractor_diamond_button.trigger(i.can, Fn.pos, 2)) {
                        Yn.take_extractor(n);
                        }
                        break;
                    case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
                        if (I = i.extractor_amethyst_button.trigger(i.can, Fn.pos, 2)) {
                        Yn.take_extractor(n);
                        }
                        break;
                    case ITEMS.EXTRACTOR_MACHINE_REIDITE:
                        if (I = i.extractor_reidite_button.trigger(i.can, Fn.pos, 2)) {
                        Yn.take_extractor(n);
                        }
                    }
                }
                if ((a = Vn.bread_oven).open && a.amount_bread > 0 && !i.safe_delete.open) {
                    if (I = i.bread_oven_bread_button.trigger(i.can, Fn.pos, 2)) {
                    Yn.take_bread();
                    }
                }
                if (!Vn.chest.lock && !i.safe_delete.open) {
                    if (Vn.chest.padlock && (I = i.chest_padlock.trigger(i.can, Fn.pos, 2))) {
                    Yn.lock_chest();
                    }
                }
                if (Vn.chest.lockpick && !i.safe_delete.open && (I = i.chest_lockpick.trigger(i.can, Fn.pos, 2))) {
                    Yn.unlock_chest();
                }
                if (Vn.resurrection.open) {
                    if (I = i.resurrection.trigger(i.can, Fn.pos, 2)) {
                    Yn.resurrection();
                    }
                }
                if (Vn.craft.id < 0 && !Vn.ghost.enabled && !i.safe_delete.open) {
                    for (var _ = Vn.inv.can_select, s = 0; s < _.length; s++) {
                    if (I = _[s].trigger(i.can, Fn.pos, 2)) {
                        if (e.which != 1 || e.shiftKey) {
                        if ((e.which == 1 && e.shiftKey || e.which == 3) && Vn.craft.preview < 0) {
                            i.safe_delete.del(_[s].id);
                        }
                        } else {
                        Yn.select_inv(_[s].id, s);
                        }
                    } else if (t.open && (t.id < 1 || t.id === _[s].id)) {
                        if ((I = i.plus_buttons[_[s].id].trigger(i.can, Fn.pos, 2)) && Vn.craft.preview < 0) {
                        Yn.give_item(_[s].id, e.shiftKey);
                        }
                    } else if (T.open && _[s].id === ItemType.BUCKET_FULL) {
                        if ((I = i.plus_buttons[_[s].id].trigger(i.can, Fn.pos, 2)) && Vn.craft.preview < 0) {
                        Yn.give_well();
                        }
                    } else if (o.open && _[s].id === ItemType.WOOD) {
                        if ((I = i.plus_buttons[_[s].id].trigger(i.can, Fn.pos, 2)) && Vn.craft.preview < 0) {
                        Yn.give_wood(e.shiftKey);
                        }
                    } else if (r.open && _[s].id === ItemType.WHEAT) {
                        if ((I = i.plus_buttons[_[s].id].trigger(i.can, Fn.pos, 2)) && Vn.craft.preview < 0) {
                        Yn.give_wheat(e.shiftKey);
                        }
                    } else if (n.open && _[s].id === ItemType.WOOD) {
                        if ((I = i.plus_buttons[_[s].id].trigger(i.can, Fn.pos, 2)) && Vn.craft.preview < 0) {
                        Yn.give_wood_extractor(e.shiftKey);
                        }
                    } else if (a.open && (_[s].id === ItemType.WOOD || _[s].id === ItemType.FLOUR)) {
                        if ((I = i.plus_buttons[_[s].id].trigger(i.can, Fn.pos, 2)) && Vn.craft.preview < 0) {
                        if (_[s].id === ItemType.WOOD) {
                            Yn.give_wood_oven(e.shiftKey);
                        } else {
                            Yn.give_flour_oven(e.shiftKey);
                        }
                        }
                    }
                    }
                }
                if (Vn.craft.id < 0 && Vn.craft.preview < 0 && !Vn.ghost.enabled && !i.safe_delete.open && !Vn.zombie) {
                    _ = Vn.craft.can_craft;
                    s = 0;
                    for (; s < _.length; s++) {
                    if (I = _[s].trigger(i.can, Fn.pos, 2)) {
                        Yn.select_craft(_[s].id);
                    }
                    }
                }
                if (Vn.craft.id < 0 && Vn.craft.preview < 0 && Vn.shop.open && !i.market.open && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.quests.open) {
                    if (I = i.shop.button.trigger(i.can, Fn.pos, 0)) {
                    Un.shop.select();
                    }
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.market.open) {
                    if (I = i.options.button.trigger(i.can, Fn.pos, 2)) {
                    i.options.select_options();
                    }
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.options.open && i.show_market === 1) {
                    if (I = i.market.button.trigger(i.can, Fn.pos, 2)) {
                    i.market.select();
                    }
                }
                if (Vn.craft.preview < 0 && !i.safe_delete.open && !i.market.open && !i.options.open && !i.safe_cancel.open && !i.quests.open && i.show_recipe_book === 1) {
                    if (I = i.craft_list.button.trigger(i.can, Fn.pos, 2)) {
                    i.craft_list.select_book();
                    }
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.market.open && Wn.mode !== WORLD.MODE_ZOMBIES && Wn.mode !== WORLD.MODE_LEGACY && Wn.mode !== WORLD.MODE_BR && i.show_quest === 1) {
                    if (I = i.quests.button.trigger(i.can, Fn.pos, 2)) {
                    i.quests.select();
                    }
                }
                if (Vn.craft.crafting && e.which == 3) {
                    i.safe_cancel.del();
                }
                }
            };
            this.current_cursor = false;
            this.trigger_mousemove = function (t) {
                if (t.isTrusted) {
                Fn.pos = bn(t);
                var o = false;
                Un.info_box.display = 0;
                Vn.inv.drag.move(Fn.pos);
                if (i.team_buttons_id != -1) {
                    o |= i.team_buttons[i.team_buttons_id].button.trigger(i.can, Fn.pos, 0);
                }
                var T = Vn.windmill;
                if (T.open && T.amount_flour > 0) {
                    o |= i.windmill_flour_button.trigger(i.can, Fn.pos, 0);
                }
                var r = Vn.extractor;
                if (r.open && r.amount_mineral > 0) {
                    o |= i.extractor_stone_button.trigger(i.can, Fn.pos, 0);
                    o |= i.extractor_gold_button.trigger(i.can, Fn.pos, 0);
                    o |= i.extractor_diamond_button.trigger(i.can, Fn.pos, 0);
                    o |= i.extractor_amethyst_button.trigger(i.can, Fn.pos, 0);
                    o |= i.extractor_reidite_button.trigger(i.can, Fn.pos, 0);
                }
                var n = Vn.bread_oven;
                if (n.open && n.amount_bread > 0) {
                    o |= i.bread_oven_bread_button.trigger(i.can, Fn.pos, 0);
                }
                var a = Vn.chest;
                if (Vn.craft.id < 0 && a.id >= 1 && !Vn.ghost.enabled) {
                    if (!Vn.chest.lock || Vn.chest.pid === Vn.id) {
                    o |= i.chest_buttons[a.id].trigger(i.can, Fn.pos, 0);
                    }
                }
                if (Vn.resurrection.open) {
                    o |= i.resurrection.trigger(i.can, Fn.pos, 0);
                }
                if (!Vn.chest.lock && !Vn.ghost.enabled) {
                    if (Vn.chest.padlock) {
                    o |= i.chest_padlock.trigger(i.can, Fn.pos, 0);
                    }
                }
                if (Vn.chest.lockpick && !Vn.ghost.enabled) {
                    o |= i.chest_lockpick.trigger(i.can, Fn.pos, 0);
                }
                if (Vn.craft.id < 0 && !Vn.ghost.enabled) {
                    for (var I = Vn.inv.can_select, E = 0; E < I.length; E++) {
                    var _ = I[E].trigger(i.can, Fn.pos, 0);
                    o |= Un.info_box.trigger(_, I[E], 0);
                    if (a.open && (a.id < 1 || a.id == I[E].id) || Vn.furnace.open && I[E].id == ItemType.WOOD || Vn.well.open && I[E].id === ItemType.BUCKET_FULL || Vn.bread_oven.open && (I[E].id == ItemType.WOOD || I[E].id == ItemType.FLOUR) || Vn.windmill.open && I[E].id == ItemType.WHEAT || Vn.extractor.open && I[E].id == ItemType.WOOD) {
                        o |= i.plus_buttons[I[E].id].trigger(i.can, Fn.pos, 0);
                    }
                    }
                }
                if (Vn.craft.id < 0 && Vn.craft.preview < 0 && !Vn.ghost.enabled && !Vn.zombie) {
                    I = Vn.craft.can_craft;
                    E = 0;
                    for (; E < I.length; E++) {
                    _ = false;
                    _ = I[E].trigger(i.can, Fn.pos, 0);
                    o |= Un.info_box.trigger(_, I[E], 1);
                    }
                }
                if (Vn.craft.id < 0 && Vn.craft.preview < 0 && !!Vn.shop.open && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.quests.open && !i.market.open) {
                    o |= i.shop.button.trigger(i.can, Fn.pos, 0);
                }
                if (Vn.craft.preview < 0 && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.quests.open && !i.market.open && i.show_recipe_book === 1) {
                    o |= i.craft_list.button.trigger(i.can, Fn.pos, 0);
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.market.open) {
                    o |= i.options.button.trigger(i.can, Fn.pos, 0);
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.options.open && i.show_market === 1) {
                    o |= i.market.button.trigger(i.can, Fn.pos, 0);
                }
                if (Vn.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.market.open && Wn.mode !== WORLD.MODE_ZOMBIES && Wn.mode !== WORLD.MODE_LEGACY && Wn.mode !== WORLD.MODE_BR && i.show_quest === 1) {
                    o |= i.quests.button.trigger(i.can, Fn.pos, 0);
                }
                if (i.current_cursor !== o) {
                    i.current_cursor = o;
                    e.style.cursor = o ? i.cursor1 : i.cursor0;
                }
                }
            };
            this.add_event_listener = function () {
                window.addEventListener("mousedown", this.trigger_mousedown, false);
                window.addEventListener("mouseup", this.trigger_mouseup, false);
                window.addEventListener("mousemove", this.trigger_mousemove, false);
                window.addEventListener("keyup", this.trigger_keyup, false);
                window.addEventListener("keydown", this.trigger_keydown, false);
            };
            this.remove_event_listener = function () {
                window.removeEventListener("mousedown", this.trigger_mousedown, false);
                window.removeEventListener("mouseup", this.trigger_mouseup, false);
                window.removeEventListener("mousemove", this.trigger_mousemove, false);
                window.removeEventListener("keyup", this.trigger_keyup, false);
                window.removeEventListener("keydown", this.trigger_keydown, false);
            };
            }
        }
        class fn {
            constructor(e, t) {
            this.can = e;
            this.ctx = t;
            this.element = window.document.getElementById("scoreboard");
            this.style = this.element.style;
            this.translate = {
                x: 0,
                y: 0
            };
            this.height = 0;
            this.frame = 0;
            this.is_run = false;
            }
            init() {
            this.element.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Vn.die.howdie + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + te[TEXT.DAYS_SURVIVED] + " : " + Vn.day + "</div><div class=\"stats\"> " + te[TEXT.KILL] + " : " + Vn.die.kill + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + te[TEXT.SCORE] + " : " + Vn.die.score + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Vn.die.bank + " " + te[TEXT.POINTS] + "</div></div><div id=\"shop_points\">" + te[TEXT.KIT_NEXT] + "</div></div><div id=\"bbback\">" + te[TEXT.BACK_TO_THE_GAME] + "</div>";
            this.style.display = "inline-block";
            this.height = window.Math.floor(this.element.clientHeight / 2);
            (async () => {
                const e = await fetch(t + "getBreadAndScore?login=" + Vn.login);
                if (e.status !== 200) {
                return Yn.new_alert(e.status + " error");
                }
                const i = await e.json();
                const o = i.b - Gn.bread;
                Gn.bread = i.b;
                Gn.score = i.s;
                Gn.lvl = Gn.level_formula(Gn.score);
                Gn.xp_dest = Gn.xp_formula(Gn.score);
                Gn.xp = 0;
                window.document.getElementById("breadWonInner").innerHTML = "" + o;
            })();
            }
            step() {
            this.translate.y = window.Math.floor(B - this.height - 28);
            if (this.frame < 60) {
                this.translate.y -= 1500 / (this.frame + 1) - 25;
            } else {
                this.translate.y += 1750 / (120 - this.frame + 1) - 24;
            }
            }
            update() {
            this.style.left = window.Math.floor(z - 275) + "px";
            this.style.top = this.translate.y + "px";
            }
            appearEffect() {
            for (let e = 0; e < 60; e++) {
                window.setTimeout(() => {
                this.frame++;
                this.step();
                this.update();
                return undefined;
                }, e * a);
            }
            }
            run() {
            window.document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[Bn.time];
            this.is_run = true;
            this.init();
            this.appearEffect();
            }
            quit(e) {
            if (this.frame <= 60) {
                for (let t = 0; t < 60; t++) {
                window.setTimeout(() => {
                    this.frame++;
                    this.step();
                    this.update();
                    if (t === 59) {
                    this.is_run = false;
                    this.frame = 0;
                    this.style.display = "none";
                    e();
                    }
                    return undefined;
                }, t * a);
                }
            }
            }
            draw() {
            Fo();
            Vn.alert.draw();
            }
        }
        mobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
        var zn = [];
        var Bn = {
            time: window.Math.floor(window.Math.random() * 2),
            items: []
        };
        window.document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[Bn.time];
        Bn.items.push(new pn(ITEMS.FIRE, 0, 0, 0, 0, window.Math.random() * T, 2, 1));
        Bn.items.push(new pn(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
        Bn.items.push(new pn(ITEMS.WORKBENCH, 0, 0, 0, 0, n, 0, 0));
        Bn.items.push(new pn(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
        var Gn;
        var Wn;
        var Vn;
        var Kn;
        var Yn = new class {
            constructor() {
            var e = this;
            this.socket = null;
            this._current_id = 0;
            this.last_join = 0;
            this.server_list = [];
            this.mode_list = [[], [], [], [], [], [], [], [], []];
            this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
            this.current_mode = 0;
            this.privateServer = 0;
            this.fetch_server_list = async () => {
                if (!e.privateServer) {
                await fetch(t + "servers").then(e => e.json()).then(e => {
                    for (const t of e) {
                    this.server_list.push(t);
                    }
                });
                }
                return undefined;
            };
            this.geolocate_server = function (e) {
                var t = [];
                for (var i = 0; i < e.length; i++) {
                if (e[i].a.indexOf($) !== -1) {
                    t.push(i);
                }
                }
                if (t.length === 0) {
                return 0;
                } else {
                return t[window.Math.floor(window.Math.random() * t.length)];
                }
            };
            this.set_server_list = function (e) {
                var t = 0;
                for (var i = 0; i < e.length; i++) {
                t += e[i].nu;
                }
                var o = window.document.getElementById("servselect");
                if (Yn.selected_server[Yn.current_mode] === -1) {
                Yn.selected_server[Yn.current_mode] = o.selectedIndex = Yn.geolocate_server(e);
                } else {
                o.selectedIndex = Yn.selected_server[Yn.current_mode];
                }
                var T = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + e[o.selectedIndex].a + (e[o.selectedIndex].nu > 0 ? " [" + e[o.selectedIndex].nu + " " + te[TEXT.PLAYERS] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + te[TEXT.CHOOSE] + " (" + this.total_players + ") " + te[TEXT.TOTAL_PLAYERS] + "</li>";
                for (i = 0; i < e.length; i++) {
                T += "<li role=\"option\">" + e[i].a;
                T += " [" + e[i].nu + " " + te[TEXT.PLAYERS] + "]";
                T += "</li>\n";
                }
                T += "<li role=\"option\" id=\"selectDisabled\">(" + t + ") " + te[TEXT.TOTAL_MODE] + "</li>";
                T += "</div>";
                o.innerHTML = T;
                window.document.querySelectorAll(".md-select").forEach(function (e) {
                e.addEventListener("click", function () {
                    this.classList.toggle("active");
                });
                });
                window.document.querySelectorAll(".md-select ul li").forEach(function (e) {
                e.addEventListener("click", function () {
                    var e = this.textContent;
                    var t = -1;
                    for (var i = Yn.mode_list[Yn.current_mode], o = 0; o < i.length; o++) {
                    if (i[o].a + " [" + i[o].nu + " " + te[TEXT.PLAYERS] + "]" === e) {
                        t = o;
                        break;
                    }
                    }
                    if (t !== -1) {
                    window.document.getElementById("servselect").selectedIndex = t;
                    Yn.selected_server[Yn.current_mode] = t;
                    window.document.querySelectorAll(".md-select ul li").forEach(function (e) {
                        e.classList.remove("active");
                    });
                    this.classList.add("active");
                    window.document.querySelector(".md-select label button").textContent = e;
                    }
                });
                });
            };
            this.total_players = 0;
            this.update_server_list = function () {
                this.total_players = 0;
                for (var e = 0; e < Yn.server_list.length; e++) {
                if (this.server_list[e].gm == "experimental") {
                    this.mode_list[WORLD.MODE_EXPERIMENTAL].push(this.server_list[e]);
                } else if (this.server_list[e].gm == "zombies") {
                    this.mode_list[WORLD.MODE_ZOMBIES].push(this.server_list[e]);
                } else if (this.server_list[e].gm == "forest") {
                    this.mode_list[WORLD.MODE_LEGACY].push(this.server_list[e]);
                } else if (this.server_list[e].gm == "battle-royale") {
                    this.mode_list[WORLD.MODE_BR].push(this.server_list[e]);
                } else if (this.server_list[e].gm == "vampires") {
                    this.mode_list[WORLD.MODE_VAMPIRES].push(this.server_list[e]);
                } else if (this.server_list[e].gm == "community") {
                    this.mode_list[WORLD.MODE_COMMUNITY].push(this.server_list[e]);
                } else {
                    this.mode_list[WORLD.MODE_PVP].push(this.server_list[e]);
                }
                this.total_players += this.server_list[e].nu;
                }
                for (e = 0; e < this.mode_list.length; e++) {
                if (this.mode_list[e].length === 0) {
                    this.mode_list[e].push({
                    a: te[TEXT.COMMING_SOON],
                    nu: 0,
                    i: "127.0.0.1",
                    p: 80
                    });
                }
                }
                this.set_server_list(this.mode_list[0]);
                this.select_gamemode = function (e) {
                Yn.current_mode = e;
                Yn.set_server_list(Yn.mode_list[Yn.current_mode]);
                Yn.set_server_list(Yn.mode_list[Yn.current_mode]);
                window.document.getElementById("servselect").selectedIndex = Yn.current_mode;
                };
            };
            this.timeout_number = 0;
            this.timeout_handler = null;
            this.new_alert = function (e, t = "#ffffff") {
                if (Vn.alert.text) {
                Vn.alert.list.push([e, t]);
                } else {
                Vn.alert.text = [e, t];
                }
            };
            this.no_resources = function () {
                this.new_alert(te[TEXT.NO_MORE_RESOURCES]);
            };
            this.survive = function () {
                var e;
                e = Vn.day == 0 ? te[TEXT.SURVIVED_1DAY] : te[TEXT.SURVIVED] + (Vn.day + 1) + te[TEXT.DAYS];
                this.new_alert(e);
                Vn.day++;
            };
            this.fail_restore = function () {
                window.clearTimeout(e.timeout_handler);
                Vn.reconnect.enabled = false;
                Vn.alive = false;
                this.new_alert(te[TEXT.DEAD_SAD]);
                Un.quit(Gn.run);
                this.socket.close();
            };
            this.blocked = function () {
                window.clearTimeout(this.timeout_handler);
                this.new_alert(te[TEXT.SPAM_ME]);
                Gn.waiting = false;
            };
            this.full = function () {
                window.clearTimeout(this.timeout_handler);
                this.new_alert(te[TEXT.SPAM_ME2]);
                Gn.waiting = false;
            };
            this.new_player = function ([e, t, i, o, T, r, n]) {
                var a = Wn.players;
                a[e].nickname = t;
                a[e].level = i;
                a[e].skin = o;
                a[e].accessory = T;
                a[e].baglook = r;
                a[e].book = n;
                a[e].score = 0;
                a[e].ldb_label = null;
                a[e].label = null;
                a[e].label_winter = null;
                a[e].alive = true;
            };
            this.get_focus = function () {
                Dr([11]);
            };
            this.empty_res = function () {
                this.new_alert(te[TEXT.EMPTY]);
            };
            this.inv_full = function () {
                this.new_alert(te[TEXT.INV_FULL]);
            };
            this.choose_kit = function (e) {
                Dr([21, e]);
                Vn.shop.open = false;
            };
            this.kit_ok = function (e) {
                for (var t = O[e - 1].items, i = 0; i < t.length && Vn.inv.max > Vn.inv.can_select.length; i++) {
                var o = t[i][1];
                var T = t[i][0];
                if (t[i][1] === ItemType.BAG) {
                    Vn.inv.update_bag_size(1, 0);
                } else {
                    this.gather([0, o, T]);
                }
                }
            };
            this.gather = function (e) {
                for (var t = e.length, i = Vn.inv, o = 1; o < t; o += 2) {
                var T = e[o];
                var r = e[o + 1];
                if (T >= 0 && r > 0) {
                    for (var n = 0; n < i.can_select.length; n++) {
                    if (i.can_select[n].id == T) {
                        i.n[T] += r;
                        break;
                    }
                    }
                    if (n == i.can_select.length) {
                    i.n[T] = r;
                    i.can_select.push(Un.inv_buttons[T]);
                    Un.update_inv_buttons();
                    }
                }
                }
                Vn.craft.update();
            };
            this.gauges = function (e, t, i, o, T, r, n) {
                Vn.gauges.l = e / 100;
                Vn.gauges.h = t / 100;
                Vn.gauges.c = i / 100;
                Vn.gauges.t = o / 100;
                Vn.gauges.o = T / 100;
                Vn.gauges.wa = r / 100;
                Vn.bandage = n;
            };
            this.succeed_quest = function (e) {
                Un.quests.modify(e, 2);
            };
            this.fail_quest = function (e) {
                Un.quests.modify(e, 0);
            };
            this.claimed = function (e) {
                Un.quests.modify(e, 3);
            };
            this.gauges_life = function (e, t) {
                Vn.gauges.l = e / 100;
                Vn.bandage = t;
            };
            this.gauges_water = function (e) {
                Vn.gauges.t = e / 100;
            };
            this.gauges_food = function (e) {
                Vn.gauges.h = e / 100;
            };
            this.gauges_warm = function (e) {
                Vn.gauges.wa = e / 100;
            };
            this.gauges_cold = function (e) {
                Vn.gauges.c = e / 100;
            };
            this.get_time = function (e) {
                Wn.time = e;
                Wn.transition = true;
            };
            this.change_ground = function () {
                window.document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[Wn.time];
            };
            this.kill_player = function (e) {
                Wn.players[e].alive = false;
            };
            this.set_cam = function (e) {
                var t = new window.Uint16Array(e);
                Vn.cam.change(t[1], t[2]);
            };
            this.recover_focus = function (e) {
                var t = new window.Uint16Array(e);
                Vn.cam.change(t[1], t[2]);
            };
            this.hitten_other = function (e) {
                for (var t = (e.length - 1) / 3, i = 0; i < t; i++) {
                var o = e[3 + i * 3] << 8 | e[2 + i * 3];
                var r = e[1 + i * 3] / 255 * T;
                var n = Wn.fast_units[o];
                if (n && n.hit) {
                    n.hit.angle = r;
                    n.hit.update = r;
                }
                }
            };
            this.hitten = function (e) {
                var t = new window.Uint16Array(e);
                for (var i = (t.length - 1) / 4, o = 0; o < i; o++) {
                var r;
                var n = o * 4;
                var a = t[1 + n];
                var I = t[2 + n];
                var E = (t[3 + n] >> 1) / 127 * T;
                var _ = t[4 + n];
                var s = zn.tiles[I][a];
                switch (_) {
                    case 0:
                    (r = s.p[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 1:
                    (r = s.s[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 2:
                    (r = s.s[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 3:
                    (r = s.s[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 4:
                    (r = s.t[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 5:
                    (r = s.t[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 6:
                    (r = s.t[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 7:
                    (r = s.t[3][0]).angle = E;
                    r.update = true;
                    break;
                    case 8:
                    (r = s.t[4][0]).angle = E;
                    r.update = true;
                    break;
                    case 9:
                    (r = s.t[5][0]).angle = E;
                    r.update = true;
                    break;
                    case 10:
                    (r = s.g[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 11:
                    (r = s.g[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 12:
                    (r = s.g[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 13:
                    (r = s.d[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 14:
                    (r = s.d[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 15:
                    (r = s.d[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 16:
                    (r = s.b[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 17:
                    (r = s.b[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 18:
                    (r = s.b[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 19:
                    (r = s.b[3][0]).angle = E;
                    r.update = true;
                    break;
                    case 20:
                    (r = s.f[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 21:
                    (r = s.f[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 22:
                    (r = s.f[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 32:
                    (r = s.a[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 33:
                    (r = s.a[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 34:
                    (r = s.a[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 35:
                    (r = s.cs[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 36:
                    (r = s.cs[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 37:
                    (r = s.cs[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 38:
                    (r = s.cs[3][0]).angle = E;
                    r.update = true;
                    break;
                    case 40:
                    (r = s.plm[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 41:
                    (r = s.plm[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 42:
                    (r = s.plm[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 50:
                    (r = s.re[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 51:
                    (r = s.re[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 52:
                    (r = s.re[2][0]).angle = E;
                    r.update = true;
                    break;
                    case 55:
                    (r = s.c[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 56:
                    (r = s.m[0][0]).angle = E;
                    r.update = true;
                    break;
                    case 57:
                    (r = s.m[1][0]).angle = E;
                    r.update = true;
                    break;
                    case 58:
                    (r = s.m[2][0]).angle = E;
                    r.update = true;
                }
                }
            };
            this.resurrection = function () {
                Dr([17]);
            };
            this.give_wheat = function (e) {
                Dr([22, window.Number(e)]);
            };
            this.give_flour_oven = function (e) {
                Dr([24, window.Number(e)]);
            };
            this.give_wood_oven = function (e) {
                Dr([25, window.Number(e)]);
            };
            this.take_bread = function () {
                Dr([26]);
            };
            this.claim_quest_reward = function (e) {
                Dr([27, e]);
            };
            this.give_well = function () {
                Dr([30]);
            };
            this.give_wood_extractor = function (e) {
                Dr([36, window.Number(e)]);
            };
            this.give_wood = function (e) {
                Dr([12, window.Number(e)]);
            };
            this.give_item = function (e, t) {
                Dr([8, e, window.Number(t)]);
            };
            this.take_extractor = function () {
                Dr([35]);
            };
            this.take_flour = function () {
                Dr([23]);
            };
            this.take_chest = function () {
                Dr([9]);
            };
            this.unlock_chest = function () {
                Dr([15]);
            };
            this.lock_chest = function () {
                Dr([16]);
            };
            this.kick_team = function (e) {
                Dr([20, Vn.team[e]]);
            };
            this.join_team = function () {
                Dr([18]);
            };
            this.leave_team = function () {
                Dr([19]);
            };
            this.lock_team = function () {
                Dr([33]);
                if (window.document.getElementById("lock_team").innerHTML == "LOCK") {
                Vn.totem.lock = 1;
                window.document.getElementById("lock_team").innerHTML = "UNLOCK";
                } else {
                Vn.totem.lock = 0;
                window.document.getElementById("lock_team").innerHTML = "LOCK";
                }
            };
            this.units = function (e, t, i) {
                if (i) {
                Wn.delete_all_units();
                }
                for (var o = (t.length - 1) / 17, r = 0; r < o; r++) {
                var n = 1 + r * 17;
                var a = t[n];
                var I = t[n + 1] / 255 * T;
                var E = t[n + 2];
                var _ = t[n + 3] | t[n + 4] << 8;
                var s = t[n + 5] | t[n + 6] << 8;
                var R = t[n + 7] | t[n + 8] << 8;
                var h = t[n + 9] | t[n + 10] << 8;
                var d = t[n + 11] | t[n + 12] << 8;
                var u = t[n + 13] | t[n + 14] << 8;
                var A = t[n + 15] | t[n + 16] << 8;
                if (_ & STATE.DELETE) {
                    Wn.delete_units(s || a);
                } else if (Wn.fast_units[s || a]) {
                    var O = Wn.fast_units[s || a];
                    O.r.x = R;
                    O.r.y = h;
                    if (a != 0 && v.dist(O, O.r) > CLIENT.LAG_DISTANCE) {
                    O.x = R;
                    O.y = h;
                    }
                    if (O.id !== Vn.id || a === 0) {
                    O.nangle = I;
                    }
                    O.action |= _;
                    O.info = d;
                    O.speed = u;
                    O.extra = A;
                    if (O.update) {
                    O.update(_);
                    }
                } else {
                    var l = new pn(E, a, s, R, h, I, _, d, u, A);
                    Wn.fast_units[s || a] = l;
                    Wn.units[E].push(l);
                }
                }
            };
            this.leaderboard = function (e) {
                var t = new window.Uint16Array(e);
                Vn.ldb.init(t);
            };
            this.new_recipes = function (e) {
                if (ee !== undefined) {
                l = ee;
                }
                if (e.length > 0) {
                ee = window.JSON.parse(window.JSON.stringify(l));
                for (let t = 0; t < e.length; t++) {
                    const i = e[t];
                    const o = l[t];
                    if (i && o) {
                    o.time = i.time;
                    o.r = i.r;
                    o.w = i.w;
                    o.o = i.o;
                    o.e = i.e;
                    o.f = i.f;
                    }
                }
                }
            };
            this.welcome = function (e) {
                if (e && e.length !== 0) {
                Vn.welcome.message = function (e) {
                    var t = window.document.createElement("canvas");
                    var i = t.getContext("2d");
                    for (i.lineJoin = "round"; e.indexOf("\\n") !== -1;) {
                    e = e.replace("\\n", "\n");
                    }
                    var o = (e = e.split("\n")).length * 18 + 10;
                    var T = 0;
                    var r = [];
                    i.font = "14px Baloo Paaji";
                    for (var n = 0; n < e.length; n++) {
                    if (e[n].charAt(0) === "#") {
                        r[n] = e[n].substring(0, 7);
                        e[n] = e[n].substring(8);
                    } else {
                        r[n] = "#FFFFFF";
                    }
                    T = window.Math.max(i.measureText(e[n]).width + 16, T);
                    }
                    t.height = o;
                    t.width = T;
                    n = 0;
                    for (; n < e.length; n++) {
                    var a = Dt(1, e[n], 14, r[n], null, null, null, null, null, "#000000", 6);
                    i.drawImage(a, 8, n * 18 + 5);
                    }
                    return t;
                }(e);
                } else {
                Vn.welcome.message = undefined;
                }
            };
            this.chat = function ([e, t]) {
                var i = Wn.fast_units[e];
                if (i) {
                i.text.push(t);
                }
            };
            this.select_craft = function (e) {
                const t = l[e];
                if (Vn.inv.max !== Vn.inv.can_select.length || e === ItemType.BAG || Vn.inv.find_item(e) != -1 || Vn.inv.free_place(t.r)) {
                Dr([7, e]);
                settings.autocraft.last = e;
                return 1;
                } else {
                this.inv_full();
                return 0;
                }
            };
            this.workbench = function (e) {
                Vn.craft.set_workbench(e);
            };
            this.well = function (e) {
                Vn.craft.well = e;
                Vn.craft.update();
            };
            this.fire = function (e) {
                Vn.craft.fire = e;
                Vn.craft.update();
            };
            this.water = function (e) {
                Vn.craft.water = e;
                Vn.craft.update();
            };
            this.dont_harvest = function () {
                this.new_alert(te[TEXT.WRONG_TOOL]);
            };
            this.cancel_craft = function () {
                Vn.craft.restart();
            };
            this.minimap = function (e) {
                Un.minimap.players = [];
                var t = Wn.fast_units[Vn.id];
                var i = 0;
                for (var o = 1; o < e.length; o += 2) {
                var T = {
                    x: window.Math.floor(e[o] * Wn.w / 250),
                    y: window.Math.floor(e[o + 1] * Wn.h / 250)
                };
                if (t && !i && v.dist(T, t) < 250) {
                    i += 1;
                } else {
                    Un.minimap.players.push(T);
                }
                }
            };
            this.reborn = function () {
                Vn.resurrection.open = false;
                Vn.ghost.enabled = false;
                Vn.ghost.delay = -1;
                Vn.ghost.label = null;
                Vn.ghost.sec = null;
                Vn.ghost.now = -1;
            };
            this.ghost = function (e) {
                Wn.ghost_delay = e;
                Vn.ghost.enabled = true;
                Vn.ghost.delay = window.Date.now();
                Vn.ghost.label = null;
                Vn.ghost.now = -1;
                for (var t = [ItemType.SUPER_HAMMER, ItemType.DRAGON_HEART, ItemType.WOOD_SWORD, ItemType.STONE_SWORD, ItemType.GOLD_SWORD, ItemType.DIAMOND_SWORD, ItemType.AMETHYST_SWORD, ItemType.REIDITE_SWORD, ItemType.DRAGON_SWORD, ItemType.LAVA_SWORD, ItemType.CURSED_SWORD, ItemType.PIRATE_SWORD, ItemType.STONE_SPEAR, ItemType.WOOD_SPEAR, ItemType.GOLD_SPEAR, ItemType.DIAMOND_SPEAR, ItemType.AMETHYST_SPEAR, ItemType.REIDITE_SPEAR, ItemType.DRAGON_SPEAR, ItemType.LAVA_SPEAR, ItemType.CRAB_SPEAR, ItemType.WOOD_BOW, ItemType.STONE_BOW, ItemType.GOLD_BOW, ItemType.DIAMOND_BOW, ItemType.AMETHYST_BOW, ItemType.REIDITE_BOW, ItemType.DRAGON_BOW, ItemType.WOOD_SHIELD, ItemType.STONE_SHIELD, ItemType.GOLD_SHIELD, ItemType.DIAMOND_SHIELD, ItemType.AMETHYST_SHIELD, ItemType.REIDITE_SHIELD, ItemType.WAND1, ItemType.WAND2, ItemType.WOOD_PICK, ItemType.STONE_PICK, ItemType.GOLD_PICK, ItemType.DIAMOND_PICK, ItemType.AMETHYST_PICK, ItemType.REIDITE_PICK, ItemType.WRENCH, ItemType.GOLD_WRENCH, ItemType.PITCHFORK, ItemType.GOLD_PITCHFORK], i = 0; i < t.length; i++) {
                var o = Vn.inv.find_item(t[i]);
                if (o != -1) {
                    Vn.inv.delete_item(t.length[i], o);
                }
                }
                Vn.craft.restart();
            };
            this.decrease_item2 = function (e, t, i) {
                this.decrease_item(e, t * 256 + i);
            };
            this.decrease_item = function (e, t) {
                if (Vn.craft.preview === e && Vn.inv.n[e] <= t) {
                Vn.craft.preview = -2;
                }
                Vn.inv.decrease(e, t, Vn.inv.find_item(e));
                Vn.craft.update();
            };
            this.accept_build = function (e) {
                Vn.craft.preview = -2;
                Vn.build.wait = true;
                var t = Vn.inv.find_item(e);
                Vn.inv.decrease(e, 1, t);
                if (t >= 0 && !Vn.inv.n[e]) {
                Vn.craft.update();
                }
                if (e == ItemType.TOTEM) {
                Vn.team = [Vn.id];
                }
            };
            this.cancel_crafting = function () {
                Dr([31]);
            };
            this.buy_market = function (e, t) {
                Dr([32, e, t]);
            };
            this.send_build = function () {
                var e = Wn.fast_units[Vn.id];
                if (e) {
                Dr([10, Vn.craft.preview, window.Math.floor((e.angle + T) % T * 255 / T), Vn.craft.mode]);
                }
            };
            this.select_inv = function (e, t) {
                switch (e) {
                case ItemType.BANDAGE:
                case ItemType.BERRY:
                case ItemType.MEAT:
                case ItemType.COOKED_MEAT:
                case ItemType.SANDWICH:
                case ItemType.BOTTLE_FULL:
                case ItemType.COOKIE:
                case ItemType.CAKE:
                case ItemType.ICE:
                case ItemType.BREAD:
                case ItemType.PUMPKIN:
                case ItemType.TOMATO:
                case ItemType.CACTUS:
                case ItemType.CARROT:
                case ItemType.WATERMELON:
                case ItemType.ALOE_VERA:
                case ItemType.GARLIC:
                case ItemType.FISH:
                case ItemType.FISH_COOKED:
                case ItemType.CRAB_STICK:
                case ItemType.CRAB_LOOT:
                case ItemType.CANDY:
                case ItemType.SUGAR_CAN:
                    Vn.craft.preview = -2;
                    Dr([5, e]);
                    break;
                case ItemType.WORKBENCH:
                case ItemType.WOOD_SPIKE:
                case ItemType.BERRY_SEED:
                case ItemType.WHEAT_SEED:
                case ItemType.PUMPKIN_SEED:
                case ItemType.TOMATO_SEED:
                case ItemType.CARROT_SEED:
                case ItemType.GARLIC_SEED:
                case ItemType.THORNBUSH_SEED:
                case ItemType.WATERMELON_SEED:
                case ItemType.ALOE_VERA_SEED:
                case ItemType.FIRE:
                case ItemType.WOOD_WALL:
                case ItemType.STONE_WALL:
                case ItemType.GOLD_WALL:
                case ItemType.DIAMOND_WALL:
                case ItemType.BIG_FIRE:
                case ItemType.CHEST:
                case ItemType.RESURRECTION:
                case ItemType.EMERALD_MACHINE:
                case ItemType.WOOD_DOOR:
                case ItemType.STONE_DOOR:
                case ItemType.GOLD_DOOR:
                case ItemType.DIAMOND_DOOR:
                case ItemType.AMETHYST_DOOR:
                case ItemType.REIDITE_DOOR:
                case ItemType.WOOD_DOOR_SPIKE:
                case ItemType.STONE_DOOR_SPIKE:
                case ItemType.GOLD_DOOR_SPIKE:
                case ItemType.DIAMOND_DOOR_SPIKE:
                case ItemType.AMETHYST_DOOR_SPIKE:
                case ItemType.REIDITE_DOOR_SPIKE:
                case ItemType.STONE_SPIKE:
                case ItemType.GOLD_SPIKE:
                case ItemType.DIAMOND_SPIKE:
                case ItemType.FURNACE:
                case ItemType.AMETHYST_WALL:
                case ItemType.AMETHYST_SPIKE:
                case ItemType.REIDITE_WALL:
                case ItemType.REIDITE_SPIKE:
                case ItemType.BRIDGE:
                case ItemType.ROOF:
                case ItemType.PLOT:
                case ItemType.WINDMILL:
                case ItemType.STONE_EXTRACTOR:
                case ItemType.GOLD_EXTRACTOR:
                case ItemType.DIAMOND_EXTRACTOR:
                case ItemType.AMETHYST_EXTRACTOR:
                case ItemType.REIDITE_EXTRACTOR:
                case ItemType.BED:
                case ItemType.GARLAND:
                case ItemType.WELL:
                case ItemType.BREAD_OVEN:
                case ItemType.TOTEM:
                case ItemType.TOWER:
                    if (!Vn.zombie) {
                    if (Vn.craft.preview === e) {
                        Vn.craft.preview = -2;
                    } else {
                        Vn.craft.preview = e;
                    }
                    }
                    break;
                case ItemType.STONE_SWORD:
                case ItemType.WOOD_SWORD:
                case ItemType.GOLD_SWORD:
                case ItemType.DIAMOND_SWORD:
                case ItemType.AMETHYST_SWORD:
                case ItemType.REIDITE_SWORD:
                case ItemType.PIRATE_SWORD:
                case ItemType.DRAGON_SWORD:
                case ItemType.LAVA_SWORD:
                case ItemType.CURSED_SWORD:
                case ItemType.WOOD_BOW:
                case ItemType.STONE_BOW:
                case ItemType.GOLD_BOW:
                case ItemType.DIAMOND_BOW:
                case ItemType.AMETHYST_BOW:
                case ItemType.REIDITE_BOW:
                case ItemType.DRAGON_BOW:
                case ItemType.WAND1:
                case ItemType.WAND2:
                case ItemType.WOOD_SPEAR:
                case ItemType.STONE_SPEAR:
                case ItemType.GOLD_SPEAR:
                case ItemType.DIAMOND_SPEAR:
                case ItemType.AMETHYST_SPEAR:
                case ItemType.DRAGON_SPEAR:
                case ItemType.LAVA_SPEAR:
                case ItemType.REIDITE_SPEAR:
                case ItemType.CRAB_SPEAR:
                    if (!Vn.zombie) {
                    Vn.craft.preview = -2;
                    if ((i = Wn.fast_units[Vn.id]) && i.right === e) {
                        Dr([5, ItemType.HAND]);
                    } else {
                        Vn.weapon.wait = true;
                        Dr([5, e]);
                    }
                    }
                    break;
                case ItemType.STONE_PICK:
                case ItemType.WOOD_PICK:
                case ItemType.GOLD_PICK:
                case ItemType.DIAMOND_PICK:
                case ItemType.STONE_HAMMER:
                case ItemType.GOLD_HAMMER:
                case ItemType.DIAMOND_HAMMER:
                case ItemType.BOOK:
                case ItemType.AMETHYST_HAMMER:
                case ItemType.REIDITE_HAMMER:
                case ItemType.AMETHYST_PICK:
                case ItemType.REIDITE_PICK:
                case ItemType.SUPER_HAMMER:
                case ItemType.STONE_SHOVEL:
                case ItemType.GOLD_SHOVEL:
                case ItemType.DIAMOND_SHOVEL:
                case ItemType.AMETHYST_SHOVEL:
                case ItemType.REIDITE_SHOVEL:
                case ItemType.WRENCH:
                case ItemType.GOLD_WRENCH:
                case ItemType.MACHETE:
                case ItemType.PITCHFORK:
                case ItemType.GOLD_PITCHFORK:
                case ItemType.YUSUKEDAO_ITEM1:
                case ItemType.YUSUKEDAO_ITEM2:
                case ItemType.SADDLE:
                case ItemType.WATERING_CAN_FULL:
                case ItemType.WOOD_SHIELD:
                case ItemType.STONE_SHIELD:
                case ItemType.GOLD_SHIELD:
                case ItemType.DIAMOND_SHIELD:
                case ItemType.AMETHYST_SHIELD:
                case ItemType.REIDITE_SHIELD:
                    if (!Vn.zombie) {
                    Vn.craft.preview = -2;
                    if ((i = Wn.fast_units[Vn.id]) && i.right === e) {
                        Dr([5, ItemType.HAND]);
                    } else {
                        Dr([5, e]);
                    }
                    }
                    break;
                case ItemType.BOAT:
                case ItemType.SLED:
                case ItemType.BOAR:
                case ItemType.BABY_MAMMOTH:
                case ItemType.CRAB_BOSS:
                case ItemType.BABY_DRAGON:
                case ItemType.BABY_LAVA:
                case ItemType.HAWK:
                case ItemType.PLANE:
                case ItemType.NIMBUS:
                    if (!Vn.zombie) {
                    Vn.craft.preview = -2;
                    var i = Wn.fast_units[Vn.id];
                    Dr([5, e]);
                    }
                    break;
                case ItemType.CROWN_GREEN:
                case ItemType.CROWN_ORANGE:
                case ItemType.CROWN_BLUE:
                case ItemType.WOOD_HELMET:
                case ItemType.STONE_HELMET:
                case ItemType.GOLD_HELMET:
                case ItemType.DIAMOND_HELMET:
                case ItemType.AMETHYST_HELMET:
                case ItemType.REIDITE_HELMET:
                case ItemType.DIAMOND_PROTECTION:
                case ItemType.AMETHYST_PROTECTION:
                case ItemType.REIDITE_PROTECTION:
                case ItemType.DRAGON_HELMET:
                case ItemType.LAVA_HELMET:
                case ItemType.WITCH_HAT:
                case ItemType.CRAB_HELMET:
                case ItemType.SUPER_DIVING_SUIT:
                    if ((i = Wn.fast_units[Vn.id]) && i.clothe !== e) {
                    Vn.helmet.wait = true;
                    }
                    Dr([5, e]);
                    break;
                case ItemType.EARMUFFS:
                case ItemType.HOOD:
                case ItemType.PEASANT:
                case ItemType.WINTER_PEASANT:
                case ItemType.COAT:
                case ItemType.CAP_SCARF:
                case ItemType.FUR_HAT:
                case ItemType.PILOT_HAT:
                case ItemType.TURBAN1:
                case ItemType.TURBAN2:
                case ItemType.CHRISTMAS_HAT:
                case ItemType.ELF_HAT:
                case ItemType.WINTER_HOOD:
                case ItemType.EXPLORER_HAT:
                case ItemType.PIRATE_HAT:
                case ItemType.DIVING_MASK:
                    Dr([5, e]);
                }
            };
            this.delete_inv = function (e) {
                Dr([6, e]);
            };
            this.delete_inv_ok = function (e) {
                Vn.build.wait = true;
                var t = Vn.inv.find_item(e);
                Vn.inv.delete_item(e, t);
                Vn.craft.update();
            };
            this.recycle_inv = function (e, t) {
                Dr([29, e]);
                settings.autorecycle.last = e;
            };
            this.delete_one_inv = function (e, t) {
                Dr([28, e]);
            };
            this.delete_one_inv_ok = function (e) {
                Vn.build.wait = true;
                var t = Vn.inv.find_item(e);
                Vn.inv.decrease(e, 1, t);
                Vn.craft.update();
            };
            this.delete_single_inv = function (e) {
                var t = e[1];
                var i = e[2];
                Vn.build.wait = true;
                var o = Vn.inv.find_item(t);
                Vn.inv.decrease(t, i, o);
                Vn.craft.update();
            };
            this.move_units = function (e) {
                var t = player.select.units;
                if (t.length != 0) {
                var i = [2];
                var o = [];
                v.sub_vector(e, {
                    x: 0,
                    y: 0
                });
                i.push(e.x);
                i.push(e.y);
                for (var T = 0; T < t.length; T++) {
                    o.push(t[T].oid);
                }
                i.push(o);
                Dr(i);
                }
            };
            this.cam_delay = 0;
            this.last_cam = {
                i: 0,
                j: 0
            };
            this.update_cam = function () {
                if (qn - this.cam_delay > CLIENT.CAM_DELAY) {
                this.cam_delay = qn;
                var e = Vn.cam;
                var t = window.Math.floor(e.x / 100);
                var i = window.Math.floor(e.y / 100);
                if (this.last_cam.i != t || this.last_cam.j != i) {
                    this.last_cam.i = t;
                    this.last_cam.j = i;
                }
                }
            };
            this.ping_delay = 0;
            this.try_ping = function () {
                if (qn - this.ping_delay > 2000) {
                this.ping_delay = qn;
                this.ping();
                }
            };
            this.join_new_team = function (e) {
                this.new_alert(te[TEXT.JOIN_TEAM]);
                for (var t = 1; t < e.length; t++) {
                Vn.team.push(e[t]);
                }
            };
            this.new_member_team = function (e) {
                this.new_alert(Wn.players[e].nickname + te[TEXT.JOINED_TEAM]);
                Vn.team.push(e);
                var t = window.document.getElementById("team_box");
                if (Un.team_buttons_id != -1 && t.style.display == "inline-block") {
                Un.team_buttons[Un.team_buttons_id].action();
                }
            };
            this.destroy_team = function () {
                this.new_alert(te[TEXT.TEAM_DESTROYED]);
                Vn.totem.wait = true;
                Vn.team = [];
                window.document.getElementById("team_box").style.display = "none";
            };
            this.exclude_team = function (e) {
                if (e == Vn.id) {
                this.new_alert(te[TEXT.LEFT_TEAM]);
                Vn.totem.wait = true;
                Vn.team = [];
                window.document.getElementById("team_box").style.display = "none";
                } else {
                this.new_alert(Wn.players[e].nickname + te[TEXT.LEFT_TEAM2]);
                for (var t = 0; t < Vn.team.length; t++) {
                    if (Vn.team[t] == e) {
                    Vn.team.splice(t, 1);
                    break;
                    }
                }
                var i = window.document.getElementById("team_box");
                if (Un.team_buttons_id != -1 && i.style.display == "inline-block") {
                    Un.team_buttons[Un.team_buttons_id].action();
                }
                }
            };
            this.steal_token = function () {
                Vn.alive = false;
                this.new_alert(te[TEXT.TOKEN]);
                if (this._current_id == this.socket._current_id) {
                this._current_id++;
                Un.quit(Gn.run);
                this.socket.close();
                }
            };
            this.killed = function (e, t) {
                Vn.alive = false;
                Vn.bandage = 0;
                var i = new window.Uint16Array(t);
                var o = new window.Uint32Array(t);
                Vn.die.howdie = ie[e][window.Math.floor(window.Math.random() * ie[e].length)];
                Vn.die.score = v.simplify_number(Wn.players[Vn.id].score);
                Vn.die.bank = v.simplify_number(o[1]);
                Vn.die.kill = i[1];
                this.new_alert(te[TEXT.YOU_DEAD]);
                if (this._current_id == this.socket._current_id) {
                this._current_id++;
                settings.autorespawn.enabled || Un.quit(Kn.run.bind(Kn));
                this.socket.close();
                settings.autorespawn.enabled && Yn.connect();
                settings.autospike.enabled = false;
                settings.dropsword.enabled = false;
                settings.swordinchest.enabled = false;
                }
            };
            this.ping = function () {
                Dr([13]);
                o = Date.now();
            };
            this.handshake = function ([t, i, o, T, r, n, a, I, E, _, s, R, h, d, u, A, O, l, S, C, b, N, D, m, c]) {
                window.clearTimeout(this.timeout_handler);
                sessions_alive.style.display = "none";
                window.document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]].a;
                Vn.terminal._clean();
                window.document.getElementById("exploreForest").src = "img/forest-leaf.png";
                window.document.getElementById("exploreWinter").src = "img/winter-flake.png";
                window.document.getElementById("exploreDesert").src = "img/desert-cactus.png";
                window.document.getElementById("exploreLava").src = "img/lava-volcano.png";
                Vn.gauges.cold.ed = Vn.gauges.cold.em;
                Vn.gauges.hunger.ed = Vn.gauges.hunger.em;
                Vn.gauges.thirst.ed = Vn.gauges.thirst.em;
                Vn.gauges.oxygen.ed = Vn.gauges.oxygen.em;
                Vn.gauges.warm.ed = Vn.gauges.warm.em;
                Vn.gauges.l = 1;
                Vn.gauges.c = 1;
                Vn.gauges.h = 1;
                Vn.gauges.t = 1;
                Vn.gauges.o = 1;
                Vn.gauges.wa = 1;
                Vn.bigmap = false;
                Un.info_box.display = 0;
                Vn.inv.can_select = [];
                Vn.inv.n = [];
                Vn.inv.max = WORLD.WITHOUT_BAG;
                Vn.inv.bonus = 0;
                Vn.inv.bag = 0;
                Vn.inv.id = -1;
                Un.show_recipe_book = 1;
                Un.show_clock = 1;
                Un.show_quest = 1;
                Un.show_market = 1;
                Vn.alive = true;
                Vn.inv.drag.stop();
                if (c) {
                Yn.set_market(c);
                }
                Vn.craft.can_craft = [];
                Vn.craft.crafting = false;
                Vn.craft.preview = -2;
                Vn.craft.id = -1;
                Vn.craft.workbench = false;
                Vn.craft.well = false;
                Vn.craft.fire = false;
                Vn.craft.water = false;
                Vn.craft.timeout = new P(false, 0, 1, 0, 1, 1);
                Vn.weapon.timeout = new P(false, 0, 1, 0, 0.1, 1);
                Vn.weapon.wait = false;
                Vn.helmet.timeout = new P(false, 0, 1, 0, 0.2, 1);
                Vn.helmet.wait = false;
                Vn.build.timeout = new P(false, 0, 1, 0, 1, 1);
                Vn.build.wait = false;
                Vn.totem.id = -1;
                Vn.totem.pid = -1;
                Vn.totem.wait = false;
                Vn.totem.timeout = new P(false, 0, 1, 0, 1 / 30, 1);
                Un.minimap.marker.x = -1;
                Un.minimap.marker.y = -1;
                Un.craft_list.open = false;
                Un.minimap.players = [];
                Wn.mode = t;
                Wn.nw = O;
                Wn.nh = l;
                Wn.w = Wn.nw * Wn.dw;
                Wn.h = Wn.nh * Wn.dh;
                Wn.islands = S;
                Wn.custom_map = C;
                e.welcome(b);
                e.new_recipes(N);
                Vn.desert.tempest = D;
                Vn.blizzard = 0;
                Vn.winter.tempest = m;
                Wn.generate_world(A);
                Wn.time = r;
                Wn.clock.hour = h;
                Wn.clock.init = new window.Date().getTime();
                Un.quests.born = d;
                Wn.transition = false;
                Vn.day = i;
                Un.quests.reset();
                Vn.team = n;
                Wn.units[ITEMS.PLAYERS] = [];
                Wn.units[ITEMS.FRUIT] = [];
                Wn.units[ITEMS.WORKBENCH] = [];
                Wn.units[ITEMS.FIRE] = [];
                Wn.units[ITEMS.BIG_FIRE] = [];
                Wn.units[ITEMS.SEED] = [];
                Wn.units[ITEMS.WHEAT_SEED] = [];
                Wn.units[ITEMS.PUMPKIN_SEED] = [];
                Wn.units[ITEMS.TOMATO_SEED] = [];
                Wn.units[ITEMS.CARROT_SEED] = [];
                Wn.units[ITEMS.GARLIC_SEED] = [];
                Wn.units[ITEMS.THORNBUSH_SEED] = [];
                Wn.units[ITEMS.WATERMELON_SEED] = [];
                Wn.units[ITEMS.ALOE_VERA_SEED] = [];
                Wn.units[ITEMS.WALL] = [];
                Wn.units[ITEMS.STONE_WALL] = [];
                Wn.units[ITEMS.GOLD_WALL] = [];
                Wn.units[ITEMS.DIAMOND_WALL] = [];
                Wn.units[ITEMS.WOOD_DOOR] = [];
                Wn.units[ITEMS.STONE_DOOR] = [];
                Wn.units[ITEMS.GOLD_DOOR] = [];
                Wn.units[ITEMS.DIAMOND_DOOR] = [];
                Wn.units[ITEMS.WOOD_DOOR_SPIKE] = [];
                Wn.units[ITEMS.STONE_DOOR_SPIKE] = [];
                Wn.units[ITEMS.GOLD_DOOR_SPIKE] = [];
                Wn.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
                Wn.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
                Wn.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
                Wn.units[ITEMS.CHEST] = [];
                Wn.units[ITEMS.RESURRECTION] = [];
                Wn.units[ITEMS.EMERALD_MACHINE] = [];
                Wn.units[ITEMS.SPIKE] = [];
                Wn.units[ITEMS.STONE_SPIKE] = [];
                Wn.units[ITEMS.GOLD_SPIKE] = [];
                Wn.units[ITEMS.DIAMOND_SPIKE] = [];
                Wn.units[ITEMS.WOLF] = [];
                Wn.units[ITEMS.BOAR] = [];
                Wn.units[ITEMS.CRAB_BOSS] = [];
                Wn.units[ITEMS.BABY_DRAGON] = [];
                Wn.units[ITEMS.BABY_LAVA] = [];
                Wn.units[ITEMS.HAWK] = [];
                Wn.units[ITEMS.TREASURE_CHEST] = [];
                Wn.units[ITEMS.DEAD_BOX] = [];
                Wn.units[ITEMS.GIFT] = [];
                Wn.units[ITEMS.CRATE] = [];
                Wn.units[ITEMS.BREAD_OVEN] = [];
                Wn.units[ITEMS.PIRANHA] = [];
                Wn.units[ITEMS.KRAKEN] = [];
                Wn.units[ITEMS.CRAB] = [];
                Wn.units[ITEMS.FOX] = [];
                Wn.units[ITEMS.BEAR] = [];
                Wn.units[ITEMS.MAMMOTH] = [];
                Wn.units[ITEMS.BABY_MAMMOTH] = [];
                Wn.units[ITEMS.VULTURE] = [];
                Wn.units[ITEMS.SAND_WORM] = [];
                Wn.units[ITEMS.DRAGON] = [];
                Wn.units[ITEMS.LAVA_DRAGON] = [];
                Wn.units[ITEMS.FLAME] = [];
                Wn.units[ITEMS.WHEAT_MOB] = [];
                Wn.units[ITEMS.ALOE_VERA_MOB] = [];
                Wn.units[ITEMS.PUMPKIN_MOB] = [];
                Wn.units[ITEMS.GARLIC_MOB] = [];
                Wn.units[ITEMS.THORNBUSH_MOB] = [];
                Wn.units[ITEMS.RABBIT] = [];
                Wn.units[ITEMS.PENGUIN] = [];
                Wn.units[ITEMS.SPELL] = [];
                Wn.units[ITEMS.FIREFLY] = [];
                Wn.units[ITEMS.SPIDER] = [];
                Wn.units[ITEMS.FURNACE] = [];
                Wn.units[ITEMS.AMETHYST_WALL] = [];
                Wn.units[ITEMS.AMETHYST_SPIKE] = [];
                Wn.units[ITEMS.AMETHYST_DOOR] = [];
                Wn.units[ITEMS.REIDITE_WALL] = [];
                Wn.units[ITEMS.REIDITE_SPIKE] = [];
                Wn.units[ITEMS.REIDITE_DOOR] = [];
                Wn.units[ITEMS.TOTEM] = [];
                Wn.units[ITEMS.WOOD_TOWER] = [];
                Wn.units[ITEMS.BRIDGE] = [];
                Wn.units[ITEMS.ROOF] = [];
                Wn.units[ITEMS.PLOT] = [];
                Wn.units[ITEMS.WINDMILL] = [];
                Wn.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
                Wn.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
                Wn.units[ITEMS.DIAMOND_EXTRACTOR] = [];
                Wn.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
                Wn.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
                Wn.units[ITEMS.GARLAND] = [];
                Wn.units[ITEMS.BED] = [];
                Wn.units[ITEMS.WELL] = [];
                Wn.fast_units = [];
                Vn.id = a;
                kn.clear_directionnal();
                Vn.cam.change(o, I);
                Wn.players = [];
                for (var y = 0; y < E; y++) {
                Wn.players.push(new yn());
                }
                console.log(E);
                for (const [e, t, i, o, r, n, a, I] of T) {
                var p = Wn.players[e];
                p.nickname = t;
                p.level = i;
                p.score = v.restore_number(o);
                p.skin = r;
                p.accessory = n;
                p.book = a;
                p.baglook = I;
                p.alive = true;
                }
                Vn.ldb.sort();
                if (Wn.mode === WORLD.MODE_ZOMBIES && Wn.players[Vn.id].skin === WORLD.ZOMBIE_SKIN) {
                Vn.zombie = true;
                } else {
                Vn.zombie = false;
                }
                if (Wn.mode === WORLD.MODE_VAMPIRES && Wn.players[Vn.id].skin === WORLD.VAMPIRE_SKIN) {
                Vn.vampire = true;
                } else {
                Vn.vampire = false;
                }
                Jn.set("starve_token", Vn.token);
                if (_ === 0) {
                Vn.shop.delay = 0;
                Un.quests.restore(u);
                if (R[ItemType.BAG]) {
                    Vn.inv.update_bag_size(1, 0);
                }
                for (y = 0; y < R.length; y++) {
                    if (R[y]) {
                    if (y == ItemType.BAG) {
                        continue;
                    }
                    if (y == ItemType.HAND) {
                        continue;
                    }
                    this.gather([0, y, R[y]]);
                    }
                }
                Vn.shop.open = false;
                } else {
                if (Wn.mode === WORLD.MODE_LEGACY) {
                    this.gather([0, ItemType.SANDWORM_JUICE, 1]);
                } else if (Wn.mode === WORLD.MODE_VAMPIRES) {
                    if (Vn.vampire) {
                    this.gather([0, ItemType.ROOF, 4]);
                    } else {
                    this.gather([0, ItemType.GARLIC_SEED, 3]);
                    }
                }
                if (Wn.mode === WORLD.MODE_PVP || Wn.mode === WORLD.MODE_VAMPIRES || Wn.mode === WORLD.MODE_EXPERIMENTAL || Wn.mode === WORLD.MODE_LEGACY) {
                    Vn.shop.delay = new window.Date().getTime();
                    Vn.shop.open = true;
                    Vn.shop.value = s;
                    Un.shop.init();
                } else {
                    Vn.shop.delay = 0;
                    Vn.shop.open = false;
                    Vn.shop.value = 0;
                }
                }
                Vn.ghost.enabled = 0;
                Vn.ghost.delay = -1;
                Vn.ghost.label = null;
                Vn.ghost.now = -1;
                Jn.set("starve_token_id", Vn.token_id);
                if (Vn.reconnect.enabled) {
                Vn.reconnect.rotate = 0;
                Vn.reconnect.enabled = false;
                } else {
                Gn.quit(Un.run);
                }
                Un.is_run = true;
            };
            this.connect = function () {
                this.timeout_number = 0;
                this.connect_timeout();
            };
            this.captcha2 = function (e) {
                Dr([127, window.MyEncoder(e)]);
            };
            this.captcha3 = function (e) {
                Dr([37, Vn.login, Vn.password]);
            };
            this.connect_timeout = async () => {
                var t = this.selected_server[this.current_mode];
                var T = this.mode_list[this.current_mode][t].i;
                var r = this.mode_list[this.current_mode][t].p;
                let n = "ws" + (this.mode_list[this.current_mode][t].ssl ? "s" : "") + "://" + T + (r === 80 ? "" : `:${r}`);
                this.socket = new window.WebSocket(n);
                this.socket.binaryType = "arraybuffer";
                this.socket._current_id = this._current_id;
                this.socket.onmessage = function (t) {
                if (this._current_id == e._current_id) {
                    if (typeof t.data == "string") {
                    const T = window.JSON.parse(t.data);
                    const r = T.shift();
                    const n = T[0];
                    switch (r) {
                        case 0:
                        e.chat(T);
                        break;
                        case 1:
                        e.kick(n);
                        break;
                        case 2:
                        e.new_player(T);
                        break;
                        case 3:
                        e.handshake(T);
                        break;
                        case 4:
                        e.message(n);
                        break;
                        case 5:
                        e.commands(T);
                        break;
                        case 6:
                        e.welcome(n);
                        break;
                        case 7:
                        e.session_list(T);
                        break;
                        case 8:
                        e.look_inventory(T);
                        break;
                        case 9:
                        i = ~~(Date.now() - o);
                        break;
                        case 10:
                        e.captcha2(n);
                        break;
                        case 11:
                        e.captcha3();
                    }
                    } else {
                    const i = new window.Uint8Array(t.data);
                    switch (i[0]) {
                        case 0:
                        e.units(t.data, i, false);
                        break;
                        case 1:
                        e.units(t.data, i, true);
                        break;
                        case 2:
                        e.cancel_craft();
                        break;
                        case 3:
                        e.gather(new window.Uint16Array(t.data));
                        break;
                        case 4:
                        e.old_version();
                        break;
                        case 5:
                        e.full();
                        break;
                        case 6:
                        e.dont_harvest();
                        break;
                        case 7:
                        e.hitten(t.data);
                        break;
                        case 8:
                        e.build_stop(i[1]);
                        break;
                        case 9:
                        e.build_ok(i[1]);
                        break;
                        case 10:
                        e.inv_full();
                        break;
                        case 11:
                        e.decrease_item(i[1], i[2]);
                        break;
                        case 12:
                        e.workbench(i[1]);
                        break;
                        case 13:
                        e.hitten_other(i);
                        break;
                        case 14:
                        e.mute();
                        break;
                        case 15:
                        e.kill_player(i[1]);
                        break;
                        case 16:
                        e.gauges(i[1], i[2], i[3], i[4], i[5], i[6], i[7]);
                        break;
                        case 17:
                        e.recover_focus(t.data);
                        break;
                        case 18:
                        e.empty_res();
                        break;
                        case 19:
                        e.fire(i[1]);
                        break;
                        case 20:
                        e.survive();
                        break;
                        case 21:
                        e.leaderboard(t.data);
                        break;
                        case 22:
                        e.get_time(i[1]);
                        break;
                        case 23:
                        e.set_cam(t.data);
                        break;
                        case 24:
                        e.accept_build(i[1]);
                        break;
                        case 25:
                        e.killed(i[1], t.data);
                        break;
                        case 26:
                        e.minimap(i);
                        break;
                        case 27:
                        e.fail_restore();
                        break;
                        case 28:
                        e.ghost(i[1]);
                        break;
                        case 29:
                        e.reborn();
                        break;
                        case 30:
                        e.steal_token();
                        break;
                        case 31:
                        e.join_new_team(i);
                        break;
                        case 32:
                        e.exclude_team(i[1]);
                        break;
                        case 33:
                        e.new_member_team(i[1]);
                        break;
                        case 34:
                        e.destroy_team();
                        break;
                        case 35:
                        e.kit_ok(i[1]);
                        break;
                        case 36:
                        e.water(i[1]);
                        break;
                        case 37:
                        e.gauges_life(i[1], i[2]);
                        break;
                        case 38:
                        e.gauges_food(i[1]);
                        break;
                        case 39:
                        e.gauges_water(i[1]);
                        break;
                        case 40:
                        e.get_bag();
                        break;
                        case 41:
                        e.verified_account(i);
                        break;
                        case 42:
                        e.succeed_quest(i[1]);
                        break;
                        case 43:
                        e.fail_quest(i[1]);
                        break;
                        case 44:
                        e.claimed(i[1]);
                        break;
                        case 45:
                        e.recycle_ok(i[1]);
                        break;
                        case 46:
                        e.recycle_stop(i[1]);
                        break;
                        case 47:
                        e.well(i[1]);
                        break;
                        case 48:
                        e.no_resources();
                        break;
                        case 50:
                        e.decrease_item2(i[1], i[2], i[3]);
                        break;
                        case 51:
                        e.blocked();
                        break;
                        case 52:
                        e.delete_inv_ok(i[1]);
                        break;
                        case 53:
                        e.delete_one_inv_ok(i[1]);
                        break;
                        case 54:
                        e.account_ok();
                        break;
                        case 55:
                        e.gauges_warm(i[1]);
                        break;
                        case 56:
                        e.gauges_cold(i[1]);
                        break;
                        case 57:
                        e.new_version();
                        break;
                        case 58:
                        e.wrong_password();
                        break;
                        case 59:
                        e.clean_inventory();
                        break;
                        case 60:
                        e.hide_shop_kit();
                        break;
                        case 61:
                        Vn.cam.forcedDelay = 0.2;
                        Vn.cam.delay = 3;
                        break;
                        case 62:
                        e.delete_single_inv(new window.Uint16Array(t.data));
                        break;
                        case 63:
                        e.hide_clock();
                        break;
                        case 64:
                        e.hide_recipe_book();
                        break;
                        case 65:
                        e.hide_quest();
                        break;
                        case 66:
                        e.hide_market();
                        break;
                        case 67:
                        e.explorer_quest(i[1]);
                        break;
                        case 68:
                        e.sand_tempest(i[1]);
                        break;
                        case 69:
                        e.blizzard(i[1]);
                        break;
                        case 70:
                        e.blizzard_status(i[1]);
                        break;
                        case 71:
                        e.bandage(i[1]);
                        break;
                        case 100:
                        e.captcha(i);
                    }
                    }
                }
                };
                this.socket.onopen = function () {
                this.last_join = Date.now();
                if (n.includes("eu") || n.includes("paris")) {
                    Dr([37, Vn.login, Vn.password]);
                }
                window.clearTimeout(e.timeout_handler);
                e.timeout_handler = window.setTimeout(e.timeout, CLIENT.TIMEOUT_TIME);
                };
                this.socket.onclose = () => {
                sessions_alive.style.display = "none";
                Vn.id = 0;
                Wn.players.length = 0;
                Gn.waiting = false;
                Vn.reconnect.enabled = true;
                return undefined;
                };
            };
            }
            set_market(e) {
            Un.market.items = [];
            for (const [t, i, o, T] of e) {
                Un.market.items.push([i, T, Q[o].img, Q[t].img]);
            }
            Un.market.id.innerHTML = "";
            for (let e = 0; e < Un.market.items.length; e++) {
                const [t, i, o, T] = Un.market.items[e];
                const r = re[o][0];
                const n = re[T][0];
                Un.market.id.innerHTML += `<div class="ore_to_buy">\n                        <img src="${r._src ? r._src : r.src}">\n                        <input class="ore_number" id="ore_number${e}" type="number" step="${i}" value="${i}" min="${i}" max="250"/>\n                        <div class="buy_market">\n                            <div class="buy_market_number" id="buy_market_number${e}">BUY</div>\n                            <div class="price_market">\n                                <span class="amount_price_market" id="amount_price_market${e}" >${t}</span>\n                                <img class="img_bread" src="${n._src ? n._src : n.src}"/>\n                            </div>\n                        </div>\n                    </div>`;
                setTimeout(() => {
                document.getElementById("ore_number" + e).onchange = function () {
                    document.getElementById("amount_price_market" + e).textContent = i === 1 ? document.getElementById("ore_number" + e).value * t : document.getElementById("ore_number" + e).value / i;
                };
                document.getElementById("buy_market_number" + e).onclick = function () {
                    Yn.buy_market(document.getElementById("amount_price_market" + e).textContent, e);
                };
                return undefined;
                }, 16);
            }
            Un.market.id.innerHTML += "<div id=\"quit_market\"> QUIT</div>";
            }
            timeout() {
            this.timeout_number++;
            if (this.socket && this.socket?.readyState !== WebSocket.OPEN && document.getElementById("captcha_block").style.display !== "flex") {
                if (this.timeout_number > CLIENT.TIMEOUT_NUMBER) {
                this.new_alert(te[TEXT.YOU_CANNOT_JOIN]);
                Gn.waiting = false;
                if (Vn.reconnect.enabled) {
                    Un.quit(Gn.run);
                }
                } else {
                Yn.connect_timeout();
                }
            }
            }
            kick(e) {
            if (this._current_id == this.socket._current_id) {
                this._current_id++;
                this.new_alert(te[TEXT.KICKED] + e);
                Un.quit(Gn.run);
            }
            }
            mute() {
            this.new_alert("You speak too much");
            }
            already_used_key() {
            window.clearTimeout(this.timeout_handler);
            this.new_alert(te[TEXT.KEY_ALREADY]);
            Gn.waiting = false;
            }
            hide_shop_kit() {
            Vn.shop.open = false;
            }
            hide_recipe_book() {
            Un.show_recipe_book = 0;
            }
            hide_clock() {
            Un.show_clock = 0;
            }
            sand_tempest(e) {
            Vn.desert.tempest = e;
            if (Wn.dist_desert > -300) {
                if (e === 0) {
                this.new_alert(te[TEXT.TEMPEST_OFF]);
                } else {
                this.new_alert(te[TEXT.TEMPEST_ON]);
                }
            }
            }
            bandage(e) {
            Vn.bandage = e;
            }
            look_inventory(e) {
            for (const [t, i] of e[0]) {
                const e = document.createElement("canvas");
                const o = e.getContext("2d");
                e.width = 50;
                e.height = 50;
                Xo(o, re[Q[t].img][0], 0, 0, 50, 50);
                o.font = "15px Baloo Paaji";
                o.strokeStyle = "black";
                o.fillStyle = "white";
                o.strokeText("x" + i, 0, 45);
                o.fillText("x" + i, 0, 45);
                document.getElementById("commandsBox").appendChild(e);
            }
            }
            session_list(e) {
            sessions_alive.style.display = "flex";
            sessions_alive.innerHTML = "<button id=\"join_new_session\">New session</button>";
            for (let t = 0; t < e.length; t++) {
                const [i, o, T, r] = e[t];
                sessions_alive.insertAdjacentHTML("afterbegin", `<div class="session_alive" id="session_alive${t}">\n                        <div class="session_nickname">Name: ${i}</div>\n                        <div class="session_token" id="session_token${t}">Tok: ********</div>\n                        <div class="session_token_id" id="session_token_id${t}">TokId: ********</div>\n                    <button id="session_join${t}" class="session_join">Join</button></div>`);
                setTimeout(() => {
                const e = document.getElementById("session_alive" + t);
                const i = document.getElementById("session_token" + t);
                const n = document.getElementById("session_token_id" + t);
                i.onclick = function () {
                    i.textContent = "Tok: " + o;
                };
                for (const [t, i] of r) {
                    if (t <= 0 || i <= 0) {
                    continue;
                    }
                    const o = document.createElement("canvas");
                    const T = o.getContext("2d");
                    o.width = 50;
                    o.height = 50;
                    Xo(T, re[Q[t].img][0], 0, 0, 50, 50);
                    T.font = "15px Baloo Paaji";
                    T.strokeStyle = "black";
                    T.fillStyle = "white";
                    T.strokeText("x" + i, 0, 45);
                    T.fillText("x" + i, 0, 45);
                    e.appendChild(o);
                }
                n.onclick = function () {
                    n.textContent = "TokId: " + T;
                };
                join_new_session.onclick = () => {
                    Vn.token = v.generate_token(CLIENT.TOKEN_LEN);
                    Vn.token_id = v.generate_token(CLIENT.TOKEN_LEN);
                    Dr([38]);
                    return undefined;
                };
                document.getElementById(`session_join${t}`).onclick = () => {
                    Vn.token = o;
                    Vn.token_id = T;
                    Dr([Gn.nickname.input.value, Vn.token, Vn.token_id, Gn.skin, Gn.accessory, Gn.bag, Gn.book, Gn.crate, Gn.dead, Vn.login, Vn.password, ""]);
                    return undefined;
                };
                }, 0);
            }
            }
            captcha(e) {
            const t = Date.now();
            if (e.length === 1) {
                Dr([Gn.nickname.input.value, Vn.token, Vn.token_id, Gn.skin, Gn.accessory, Gn.bag, Gn.book, Gn.crate, Gn.dead, Vn.login, Vn.password, ""]);
                return;
            }
            const i = e[1];
            captcha_image.src = URL.createObjectURL(new Blob([new window.Uint8Array(e.slice(2))]));
            captcha_attempts.textContent = "Attempts available: " + i;
            captcha_count.textContent = "The captcha expires after 10 seconds";
            captcha_block.style.display = "flex";
            captcha_input.focus();
            const o = setInterval(() => {
                const e = window.Math.floor((window.Date.now() - t) / 1000);
                captcha_count.textContent = `The captcha expires after ${10 - e} second${10 - e == 1 ? "" : "s"}`;
                if (e >= 10) {
                clearInterval(o);
                Gn.waiting = false;
                captcha_block.style.display = "none";
                }
            }, 1000);
            const T = function () {
                Dr([Gn.nickname.input.value, Vn.token, Vn.token_id, Gn.skin, Gn.accessory, Gn.bag, Gn.book, Gn.crate, Gn.dead, Vn.login, Vn.password, captcha_input.value]);
                clearInterval(o);
                captcha_count.textContent = "The captcha expires after 10 seconds";
                captcha_block.style.display = "none";
                captcha_input.value = "";
            };
            captcha_input.onkeydown = function () {
                if (captcha_input.value.length === 3) {
                setTimeout(T, 0);
                }
            };
            }
            blizzard_status(e) {
            Vn.blizzard = e;
            }
            blizzard(e) {
            Vn.winter.tempest = e;
            if (Wn.dist_winter > -300) {
                if (e === 0) {
                this.new_alert(te[TEXT.BLIZZARD_OFF]);
                } else {
                this.new_alert(te[TEXT.BLIZZARD_ON]);
                }
            }
            }
            explorer_quest(e) {
            if (e === 0) {
                window.document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (e === 1) {
                window.document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (e === 2) {
                window.document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (e === 3) {
                window.document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
            }
            hide_market() {
            Un.show_market = 0;
            }
            hide_quest() {
            Un.show_quest = 0;
            }
            clean_inventory() {
            Vn.inv.can_select = [];
            Vn.inv.n = [];
            Vn.inv.id = -1;
            Vn.inv.drag.stop();
            Vn.craft.can_craft = [];
            Vn.craft.crafting = false;
            Vn.craft.preview = -2;
            Vn.craft.id = -1;
            Vn.craft.workbench = false;
            Vn.craft.well = false;
            Vn.craft.fire = false;
            Vn.craft.water = false;
            Vn.craft.timeout = new P(false, 0, 1, 0, 1, 1);
            }
            commands([e, t, i, o]) {
            for (var T = 0; T < arguments.length; T++) {
                if (typeof arguments[T] == "string") {
                arguments[T] = v.escape_html(arguments[T]);
                }
            }
            Vn.terminal.write_command(e, t, i, o);
            }
            message(e) {
            this.new_alert(e);
            }
            wrong_password() {
            window.clearTimeout(this.timeout_handler);
            this.new_alert(te[TEXT.WRONG_PASSWORD]);
            Gn.waiting = false;
            }
            new_version() {
            window.clearTimeout(this.timeout_handler);
            this.new_alert(te[TEXT.NEW_VERSION]);
            Gn.waiting = false;
            }
            old_version() {
            window.clearTimeout(this.timeout_handler);
            this.new_alert(te[TEXT.OLD_VERSION]);
            Gn.waiting = false;
            }
            get_bag() {
            Vn.inv.update_bag_size(1, 0);
            Un.update_inv_buttons();
            }
            verified_account(e) {
            var t = e[1];
            var i = Wn.players[t];
            i.skin = 0;
            i.accessory = 0;
            i.baglook = 0;
            i.book = 0;
            i.level = e[6];
            var o = Wn.fast_units[t];
            if (o) {
                o.skin = 0;
                o.accessory = 0;
                o.baglook = 0;
                o.book = 0;
            }
            }
            build_stop(e) {
            if (e === ItemType.BAG) {
                Vn.inv.update_bag_size(1, 0);
                Un.update_inv_buttons();
            } else {
                this.gather([0, e, 1]);
            }
            Vn.craft.restart();
            }
            recycle_ok(e) {
            Vn.auto_feed.delay = 0;
            Vn.craft.do_recycle(e);
            }
            recycle_stop(e) {
            for (var t = l[e].r, i = 0; i < t.length; i++) {
                if (Vn.inv.max > Vn.inv.can_select.length || Vn.inv.n[t[i][0]] > 0) {
                var o = window.Math.floor(t[i][1] * 0.8);
                if (!o) {
                    continue;
                }
                this.gather([0, t[i][0], o]);
                }
            }
            Vn.craft.restart();
            }
            build_ok(e) {
            Vn.auto_feed.delay = 0;
            Vn.craft.do_craft(e);
            }
            stop_attack() {
            Dr([14]);
            }
            send_attack(e) {
            Dr([4, window.Math.floor((e + T) % T * 255 / T)]);
            }
            send_angle(e) {
            Dr([3, window.Math.floor((e + T) % T * 255 / T)]);
            }
            send_move(e) {
            Dr([2, e]);
            }
            send_command(e) {
            Dr([34, e]);
            }
            send_chat(e) {
            Wn.fast_units[Vn.id].text.push(e);
            Dr([0, e]);
            }
        }();
        var Un = {
            is_run: false
        };
        var kn = new class {
            constructor() {
            this.UP = 0;
            this.DOWN = 1;
            this._1 = 49;
            this._2 = 50;
            this._3 = 51;
            this._4 = 52;
            this._5 = 53;
            this.CTRL = 17;
            this.ARROW_LEFT = 37;
            this.ARROW_RIGHT = 39;
            this.ARROW_TOP = 38;
            this.ARROW_BOTTOM = 40;
            this.SPACE = 32;
            this.R = 82;
            this.G = 71;
            this.V = 86;
            this.B = 66;
            this.set_qwerty();
            this.keys = new Array(255);
            for (let e = 0; e < 255; e++) {
                this.keys[e] = this.UP;
            }
            }
            set_azerty() {
            this.LEFT = 81;
            this.RIGHT = 68;
            this.TOP = 90;
            this.DOWN = 83;
            }
            set_qwerty() {
            this.LEFT = 65;
            this.RIGHT = 68;
            this.TOP = 87;
            this.BOTTOM = 83;
            }
            up(e) {
            const t = window.Math.min(e.charCode || e.keyCode, 255);
            this.keys[t] = this.UP;
            }
            down(e) {
            const t = window.Math.min(e.charCode || e.keyCode, 255);
            if (t === this.LEFT || t === this.ARROW_LEFT) {
                this.press_left();
            } else if (t === this.TOP || t === this.ARROW_TOP) {
                this.press_top();
            } else if (t === this.DOWN || t === this.ARROW_DOWN) {
                this.press_bottom();
            } else if (t === this.RIGHT || t === this.ARROW_RIGHT) {
                this.press_right();
            }
            this.keys[t] = this.DOWN;
            return t;
            }
            press_left() {
            this.keys[this.RIGHT] = this.UP;
            this.keys[this.ARROW_RIGHT] = this.UP;
            }
            press_right() {
            this.keys[this.LEFT] = this.UP;
            this.keys[this.ARROW_LEFT] = this.UP;
            }
            press_bottom() {
            this.keys[this.TOP] = this.UP;
            this.keys[this.ARROW_TOP] = this.UP;
            }
            press_top() {
            this.keys[this.BOTTOM] = this.UP;
            this.keys[this.ARROW_BOTTOM] = this.UP;
            }
            clear_directionnal() {
            this.keys[this.RIGHT] = this.UP;
            this.keys[this.ARROW_RIGHT] = this.UP;
            this.keys[this.LEFT] = this.UP;
            this.keys[this.ARROW_LEFT] = this.UP;
            this.keys[this.TOP] = this.UP;
            this.keys[this.ARROW_TOP] = this.UP;
            this.keys[this.BOTTOM] = this.UP;
            this.keys[this.ARROW_BOTTOM] = this.UP;
            }
            is_left() {
            return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT];
            }
            is_right() {
            return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT];
            }
            is_top() {
            return this.keys[this.TOP] || this.keys[this.ARROW_TOP];
            }
            is_bottom() {
            return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM];
            }
            is_ctrl() {
            return this.keys[this.CTRL];
            }
            is_1() {
            return this.keys[this._1];
            }
            is_2() {
            return this.keys[this._2];
            }
            is_3() {
            return this.keys[this._3];
            }
            is_4() {
            return this.keys[this._4];
            }
            is_space() {
            return this.keys[this.SPACE];
            }
            is_r() {
            return this.keys[this.R];
            }
            is_g() {
            return this.keys[this.G];
            }
            is_v() {
            return this.keys[this.V];
            }
            is_b() {
            return this.keys[this.B];
            }
        }();
        var Fn = new class {
            constructor() {
            this.DOWN = 0;
            this.UP = 1;
            this.IDLE = 2;
            this.IN = 0;
            this.OUT = 1;
            this.pos = {
                x: 0,
                y: 0
            };
            this.x_old = 0;
            this.y_old = 0;
            this.angle = 0;
            this.state = this.IDLE;
            this.dist = this.IN;
            }
            down() {
            this.state = this.DOWN;
            }
            up() {
            this.state = this.UP;
            }
            update() {
            return (this.pos.x !== this.x_old || this.pos.y !== this.y_old) && (this.x_old = this.pos.x, this.y_old = this.pos.y, true);
            }
        }();
        var xn = new class {
            constructor() {
            window.addEventListener("mouseup", this.onLeftClick);
            window.addEventListener("contextmenu", this.onRightClick);
            window.addEventListener("resize", this.onResize);
            }
            onResize() {
            if (M.width != window.innerWidth) {
                M.width = window.innerWidth;
                H = M.width;
                z = M.width / 2;
            }
            if (M.height != window.innerHeight) {
                M.height = window.innerHeight;
                f = M.height;
                B = M.height / 2;
            }
            G = {
                x: z,
                y: B
            };
            var e = M.width;
            var t = M.height;
            V = window.Math.min(1, window.Math.max(0.5, K));
            M.width = e * V;
            M.height = t * V;
            M.style.width = e + "px";
            M.style.height = t + "px";
            L.scale(V, V);
            if (Vn) {
                Vn.cam.rw = e;
                Vn.cam.rh = t;
            }
            if (jn.is_run) {
                jn.update();
            } else if (Gn.is_run) {
                Gn.update();
            } else if (Un.is_run) {
                Un.update();
            } else if (Kn.is_run) {
                Kn.update();
            }
            }
            onRightClick(e) {
            if (kn.keys[16]) {
                Yn.send_command("tp $id " + Math.floor((Fn.pos.x - Vn.cam.x) / 100) + " " + Math.floor((Fn.pos.y - Vn.cam.y) / 100));
            }
            e.preventDefault();
            }
            onLeftClick(e) {
            switch (e.target.id) {
                case "azerty_ing":
                Un.options.azerty();
                break;
                case "qwerty_ing":
                Un.options.qwerty();
                break;
                case "low_ing":
                Un.options.low();
                break;
                case "high_ing":
                Un.options.high();
                break;
                case "quit_opt":
                Un.options.quit();
                break;
                case "agree_ing":
                case "case_agree_opt":
                Un.options.checkbox();
                break;
                case "quest_agree_ing":
                case "quest_case_agree_opt":
                Un.options.quest_checkbox();
                break;
                case "cancel_agree_ing":
                case "cancel_case_agree_opt":
                Un.options.cancel_checkbox();
                break;
                case "auto_feed_agree_ing":
                case "auto_feed_case_agree_opt":
                Un.options.feed_checkbox();
                break;
                case "cancel_yes_delete":
                Un.safe_cancel.yes();
                break;
                case "cancel_no_delete":
                Un.safe_cancel.quit();
                break;
                case "cancel_case_delete":
                Un.safe_cancel.checkbox();
                break;
                case "quit_market":
                Un.market.quit();
                break;
                case "lock_team":
                Yn.lock_team();
                break;
                case "leave":
                Yn.leave_team();
                break;
                case "bbback":
                Kn.quit(Gn.run);
                break;
                case "quit":
                Un.craft_list.home.quit();
                break;
                case "quitmenu":
                Un.craft_list.list.quit();
                break;
                case "backhome":
                Un.craft_list.list.previous();
                break;
                case "hatcategory":
                Un.craft_list.list.select(CATEGORY.CLOTHES);
                break;
                case "weaponcategory":
                Un.craft_list.list.select(CATEGORY.WEAPONS);
                break;
                case "toolcategory":
                Un.craft_list.list.select(CATEGORY.TOOLS);
                break;
                case "foodcategory":
                Un.craft_list.list.select(CATEGORY.FOODS);
                break;
                case "placeablecategory":
                Un.craft_list.list.select(CATEGORY.UTILS);
                break;
                case "constructioncategory":
                Un.craft_list.list.select(CATEGORY.BASES);
            }
            }
        }();
        var Jn = new class {
            get(e) {
            const t = window.document.cookie.match(new RegExp(e + "=[^;]*", "g"));
            if (t) {
                return t[0].slice(e.length + 1);
            } else {
                return undefined;
            }
            }
            set(e, t, i) {
            var o = new window.Date();
            o.setTime(+o + i * 86400000);
            window.document.cookie = e + "=" + t + "; expires=" + o.toGMTString();
            }
        }();
        var Xn = 0;
        var qn = 0;
        var jn = new class {
            constructor(e, t, i) {
            this.can = e;
            this.ctx = t;
            this.logo = {
                translate: {
                x: 0,
                y: 0
                },
                style: window.document.getElementById("loading").style,
                update: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = window.Math.floor(this.translate.y) + "px";
                }
            };
            this.logo.style.position = "absolute";
            this.logo.style.display = "inline-block";
            this.logo.update();
            this.is_run = true;
            this.stop = function () {
                this.is_run = false;
            };
            this.loading = {
                total: 1
            };
            var o = this;
            function T() {}
            var r = 0;
            this.quit_effect = function () {
                o.update();
                if (++r == 60) {
                o.stop();
                T();
                return;
                }
                window.setTimeout(o.quit_effect, a);
            };
            this.quit = function (e) {
                T = e;
                o.quit_effect();
            };
            new window.Date().getTime();
            function n(e) {
                if (e.indexOf("normal-mode") !== -1 || e.indexOf("player0") !== -1) {
                return 1;
                } else if (e.indexOf("day-bag") !== -1 || e.indexOf("night-bag") !== -1 || e.indexOf("day-book") !== -1 || e.indexOf("night-book") !== -1 || e.indexOf("day-player") !== -1 || e.indexOf("night-player") !== -1 || e.indexOf("day-accessory") !== -1 || e.indexOf("night-accessory") !== -1 || e.indexOf("day-crate") !== -1 || e.indexOf("night-crate") !== -1 || e.indexOf("day-skin") !== -1 || e.indexOf("night-skin") !== -1 || e.indexOf("day-river") !== -1 || e.indexOf("night-river") !== -1 || e.indexOf("day-river") !== -1 || e.indexOf("night-river") !== -1 || e.indexOf("day-rock") !== -1 || e.indexOf("night-rock") !== -1 || e.indexOf("day-flower") !== -1 || e.indexOf("night-flower") !== -1 || e.indexOf("day-leaf") !== -1 || e.indexOf("night-leaf") !== -1 || e.indexOf("day-herb") !== -1 || e.indexOf("night-herb") !== -1 || e.indexOf("day-shell") !== -1 || e.indexOf("night-shell") !== -1 || e.indexOf("day-hand-skin") !== -1 || e.indexOf("night-hand-skin") !== -1 || e.indexOf("bignight") !== -1 || e.indexOf("bigday") !== -1 || e.indexOf("bigzday") !== -1 || e.indexOf("bigznight") !== -1 || e.indexOf("tutorial-box") !== -1 || e.indexOf("-leaderboard-") !== -1 || e.indexOf("-lead-") !== -1 || e.indexOf("day-lava-") !== -1 || e.indexOf("night-lava-") !== -1 || e.indexOf("-click.png") !== -1 || e.indexOf("-in.png") !== -1 || e.indexOf("-fog") !== -1 || e.indexOf("-lava") !== -1 || e.indexOf("pebblecompo") !== -1 || e.indexOf("avatar-player") !== -1) {
                return 0;
                } else {
                return 1;
                }
            }
            Object.keys(S).length;
            for (var I in S) {
                if (n(S[I]) === 0) {
                0;
                }
            }
            function E() {
                if (this.isLoaded !== 0) {
                return this.isLoaded;
                } else {
                this.isLoaded = 2;
                this.src = this._src;
                return 0;
                }
            }
            function _(e) {
                this.isLoaded = 1;
            }
            var s = 0;
            function R() {
                let e = async () => {
                await Yn.fetch_server_list();
                (function () {
                    if (s !== 1) {
                    s = 1;
                    var e = v.getURLData("server");
                    if (e !== null) {
                        Yn.privateServer = 1;
                        Yn.server_list = [{
                        nu: 0,
                        m: 100,
                        i: "server" + e + ".starver.io",
                        p: 443,
                        a: "Private Server " + e,
                        ssl: true
                        }];
                    }
                    Yn.update_server_list();
                    window.setTimeout(i, 100);
                    }
                })();
                return undefined;
                };
                if (window.document.fonts && window.document.fonts.check) {
                if (window.document.fonts.check("1em Baloo Paaji")) {
                    window.setTimeout(e, 100);
                } else {
                    window.setTimeout(R, 100);
                }
                } else {
                window.setTimeout(e, 1000);
                }
            }
            function h() {
                var e = this.src;
                var t = n(e) === 0 ? 10000 : 2000;
                window.setTimeout(function () {
                for (var t in Te) {
                    if (e.indexOf(Te[t]) !== -1) {
                    S[t] = new Image();
                    S[t].onload = _;
                    S[t].onerror = h;
                    S[t].src = e;
                    break;
                    }
                }
                }, t);
            }
            function d(e) {
                for (var t in S) {
                var i = "img/" + S[t] + ".png";
                if (typeof i == "string") {
                    if (n(i) === e) {
                    S[t] = new Image();
                    S[t].isLoaded = 0;
                    S[t].onload = _;
                    S[t].onerror = h;
                    S[t].tryLoad = E;
                    if (window.location.protocol !== "https:") {
                        S[t]._src = i;
                    } else {
                        S[t]._src = window.location.href + i;
                    }
                    }
                }
                }
            }
            d(1);
            d(0);
            Dt(1, "l", 20, "#000000");
            R();
            Uo();
            this.update = function () {
                this.logo.translate.x = (H - 500) / 2;
                this.logo.translate.y = (f - 150) / 2;
                var e = 2500 / (60 - r + 1) - 24;
                this.logo.translate.y -= e;
                this.logo.update();
            };
            this.logo.update();
            this.draw = function () {
                Fo();
                this.update();
            };
            }
        }(M, L, __p_5863156023(() => {
            ko();
            Un = new wn(M, L);
            (Gn = new Hn(M, L)).login_after();
            Kn = new fn(M, L);
            Wn = new gn();
            Vn = new Ln();
            jn.quit(__p_5863156023(() => {
            jn.logo.style.display = "none";
            Gn.run();
            }, 0));
        }, 0));
        const Zn = __p_5863156023(e => {
            window.requestAnimationFrame(Zn);
            const t = performance.now();
            while (I.length > 0 && I[0] <= t - 1000) {
            I.shift();
            }
            I.push(t);
            if (performance.now() - E >= 1000) {
            E = performance.now();
            window.fpsdata = I.length - 1;
            }
            Xn = (e - qn) / 1000;
            qn = e;
            Xn = Xn > 1 ? 1 : Xn;
            L.clearRect(0, 0, H, f);
            if (Un.is_run) {
            Un.draw();
            } else if (jn.is_run) {
            jn.draw();
            } else if (Gn.is_run) {
            Gn.draw();
            } else if (Kn.is_run) {
            Kn.draw();
            }
            if (Vn && Wn?.fast_units && Qn.startX) {
            const e = Wn.units[0].filter(e => e.x >= Qn.startX - 2 && e.x <= Qn.endX + 2 && e.y >= Qn.startY - 2 && e.y <= Qn.endY + 2 || e.x >= Qn.endX - 2 && e.x <= Qn.startX + 2 && e.y >= Qn.endY - 2 && e.y <= Qn.startY + 2 || e.x >= Qn.endX - 2 && e.x <= Qn.startX + 2 && e.y <= Qn.endY - 2 && e.y >= Qn.startY + 2 || e.x >= Qn.startX - 2 && e.x <= Qn.endX + 2 && e.y <= Qn.startY - 2 && e.y >= Qn.endY + 2).length;
            L.save();
            L.font = "25px Baloo Paaji";
            L.fillStyle = "#0066cc";
            L.strokeStyle = "#0066cc";
            L.lineWidth = 3;
            L.strokeRect(Qn.startX + Vn.cam.x, Qn.startY + Vn.cam.y, Qn.endX - Qn.startX, Qn.endY - Qn.startY);
            L.globalAlpha = 0.3;
            L.fillRect(Qn.startX + Vn.cam.x, Qn.startY + Vn.cam.y, Qn.endX - Qn.startX, Qn.endY - Qn.startY);
            L.fillStyle = "white";
            L.globalAlpha = 1;
            L.strokeText(e, Qn.startX + Vn.cam.x, Qn.startY + Vn.cam.y);
            L.fillText(e, Qn.startX + Vn.cam.x, Qn.startY + Vn.cam.y);
            L.restore();
            }
        }, 1);
        window.onbeforeunload = __p_5863156023(() => {
            if (Un.is_run) {
            return "";
            }
        }, 0);
        xn.onResize();
        Zn(0);
        var $n = 0;
        window.onUserLogin = __p_5863156023(() => {
            $n = 1;
        }, 0);
        const Qn = {
            sx: 0,
            sy: 0,
            ex: 0,
            ey: 0
        };
        const ea = {};
        const ta = ["ControlLeft"];
        ItemType.REIDITE_SPIKE;
        ItemType.AMETHYST_SPIKE;
        ItemType.DIAMOND_SPIKE;
        ItemType.GOLD_SPIKE;
        ItemType.STONE_SPIKE;
        ItemType.WOOD_SPIKE;
        ItemType.WOOD_WALL;
        window.addEventListener("keydown", e => {
            ea[e.code] = true;
            return undefined;
        });
        window.addEventListener("keyup", e => {
            ea[e.code] = undefined;
            return undefined;
        });
        window.addEventListener("contextmenu", e => {
            const t = Wn.fast_units[Vn.id];
            mapX = e.clientX - Vn.cam.x;
            mapY = e.clientY - Vn.cam.y;
            if (!ta.map(e => ea[e]).includes(undefined)) {
            if (!t) {
                return;
            }
            if (Qn.startX === undefined && Qn.startY === undefined) {
                Qn.startX = mapX;
                Qn.startY = mapY;
            } else if (Qn.endX === undefined && Qn.endY === undefined) {
                Qn.endX = mapX;
                Qn.endY = mapY;
            } else {
                Qn.startX = undefined;
                Qn.startY = undefined;
                Qn.endX = undefined;
                Qn.endY = undefined;
            }
            }
        });

        const initHack = () => {
            const gui = new guify({
                title: "Nova v2",
                align: "right",
                width: 600,
                opacity: .74,
                barMode: "none",
                theme: {
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(10,10,35)",
                        componentForeground: "rgb(204, 102, 255)",
                        textPrimary: "rgb(204, 102, 255)",
                        textSecondary: "rgb(204, 102, 255)",
                        textHover: "rgb(0,0,0)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                    }
                }
            });

            gui.Register([
                { type: "folder", label: "Visuals", open: false },
                { type: "checkbox", label: "Tracers", folder: "Visuals", object: settings.tracers, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "MovementPredicter", folder: "Visuals", object: settings.movementpredicter, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "Percentages", folder: "Visuals", object: settings.percentages, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "EnabledHacks", folder: "Visuals", object: settings.enabledhacks, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "DrawInChest", folder: "Visuals", object: settings.drawinchest, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "BoxOnTop", folder: "Visuals", object: settings.boxontop, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "ChestOnTop", folder: "Visuals", object: settings.chestontop, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "TotemOnTop", folder: "Visuals", object: settings.totemontop, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "Xray", folder: "Visuals", object: settings.xray, property: "enabled", onChange() { saveSettings && saveSettings() } },
                
                { type: "folder", label: "Misc", open: false },
                { type: "checkbox", label: "AutoRespawn", folder: "Misc", object: settings.autorespawn, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "AutoTotem", folder: "Misc", object: settings.autototem, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "AutoBandage", folder: "Misc", object: settings.autobandage, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "DropSword", folder: "Misc", object: settings.dropsword, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "SwordInChest", folder: "Misc", object: settings.swordinchest, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "Aimbot", folder: "Misc", object: settings.aimbot, property: "enabled", onChange() { saveSettings && saveSettings() } },
                
                { type: "folder", label: "Keybinds", open: false },
                { type: "display", label: "AutoTotem Key", folder: "Keybinds", object: settings.autototem, property: "key" },
                { type: "button", label: "Set AutoTotem Key", folder: "Keybinds", action() { setKeybind("autototem") } },
                { type: "display", label: "DropSword Key", folder: "Keybinds", object: settings.dropsword, property: "key" },
                { type: "button", label: "Set DropSword Key", folder: "Keybinds", action() { setKeybind("dropsword") } },
                { type: "display", label: "SwordInChest Key", folder: "Keybinds", object: settings.swordinchest, property: "key" },
                { type: "button", label: "Set SwordInChest Key", folder: "Keybinds", action() { setKeybind("swordinchest") } },
                { type: "display", label: "Aimbot Key", folder: "Keybinds", object: settings.aimbot, property: "key" },
                { type: "button", label: "Set Aimbot Key", folder: "Keybinds", action() { setKeybind("aimbot") } },
                { type: "display", label: "AutoDoor Key", folder: "Keybinds", object: settings.autodoor, property: "key" },
                { type: "button", label: "Set AutoDoor Key", folder: "Keybinds", action() { setKeybind("autodoor") } },
                { type: "display", label: "Xray Key", folder: "Keybinds", object: settings.xray, property: "key" },
                { type: "button", label: "Set Xray Key", folder: "Keybinds", action() { setKeybind("xray") } },

                { type: "folder", label: "AutoSteal", open: false },
                { type: "checkbox", label: "AutoSteal Enabled", folder: "AutoSteal", object: settings.autosteal, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "AutoUnlock", folder: "AutoSteal", object: settings.autosteal, property: "unlock", onChange() { saveSettings && saveSettings() } },
                { type: "display", label: "AutoSteal Key", folder: "AutoSteal", object: settings.autosteal, property: "key" },
                { type: "button", label: "Set AutoSteal Key", folder: "AutoSteal", action() { setKeybind("autosteal") } },
                
                { type: "folder", label: "AutoCraft&AutoRecycle", open: false },
                { type: "checkbox", label: "AutoCraft Enabled", folder: "AutoCraft&AutoRecycle", object: settings.autocraft, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "display", label: "AutoCraft Key", folder: "AutoCraft&AutoRecycle", object: settings.autocraft, property: "key" },
                { type: "button", label: "Set AutoCraft Key", folder: "AutoCraft&AutoRecycle", action() { setKeybind("autocraft") } },
                { type: "checkbox", label: "AutoRecycle Enabled", folder: "AutoCraft&AutoRecycle", object: settings.autorecycle, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "display", label: "AutoRecycle Key", folder: "AutoCraft&AutoRecycle", object: settings.autorecycle, property: "key" },
                { type: "button", label: "Set AutoRecycle Key", folder: "AutoCraft&AutoRecycle", action() { setKeybind("autorecycle") } },
                
                { type: "folder", label: "AutoSpike", open: false },
                { type: "checkbox", label: "AutoSpike Aim", folder: "AutoSpike", object: settings.autospike, property: "aim", onChange() { saveSettings && saveSettings() } },
                { type: "select", label: "AutoSpike Mode", folder: "AutoSpike", options: ["Nova", "Loux (remaked)"], object: settings.autospike, property: "mode", onChange() { saveSettings && saveSettings() } },
                { type: "display", label: "AutoSpike Key", folder: "AutoSpike", object: settings.autospike, property: "key" },
                { type: "button", label: "Set AutoSpike Key", folder: "AutoSpike", action() { setKeybind("autospike") } },
                { type: "select", label: "AutoSpike 1", folder: "AutoSpike", options: settings.autospike.cases, object: settings.autospike.priority, property: "0", onChange() { saveSettings && saveSettings() } },
                { type: "select", label: "AutoSpike 2", folder: "AutoSpike", options: settings.autospike.cases, object: settings.autospike.priority, property: "1", onChange() { saveSettings && saveSettings() } },
                { type: "select", label: "AutoSpike 3", folder: "AutoSpike", options: settings.autospike.cases, object: settings.autospike.priority, property: "2", onChange() { saveSettings && saveSettings() } },
                { type: "select", label: "AutoSpike 4", folder: "AutoSpike", options: settings.autospike.cases, object: settings.autospike.priority, property: "3", onChange() { saveSettings && saveSettings() } },
                { type: "select", label: "AutoSpike 5", folder: "AutoSpike", options: settings.autospike.cases, object: settings.autospike.priority, property: "4", onChange() { saveSettings && saveSettings() } },
                { type: "select", label: "AutoSpike 6", folder: "AutoSpike", options: settings.autospike.cases, object: settings.autospike.priority, property: "5", onChange() { saveSettings && saveSettings() } },

                { type: "folder", label: "TrashTalk", open: false },
                { type: "checkbox", label: "TrashTalk Enabled", folder: "TrashTalk", object: settings.trashtalk, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "text", label: "TrashTalk Message", folder: "TrashTalk", object: settings.trashtalk, property: "message", onChange() { saveSettings && saveSettings() } },
            
                { type: "folder", label: "AutoTrade", open: false },
                { type: "checkbox", label: "AutoTradeCakes", folder: "AutoTrade", object: settings.autotradecakes, property: "enabled", onChange() { saveSettings && saveSettings() } },
                { type: "checkbox", label: "AutoTradeCookies", folder: "AutoTrade", object: settings.autotradecookies, property: "enabled", onChange() { saveSettings && saveSettings() } },
                
                { type: "folder", label: "Colors", open: false },
                { type: "color", label: "TracersAlly Color", folder: "Colors", object: settings.colors, property: "tracersally", onChange() { saveSettings && saveSettings() } },
                { type: "color", label: "TracersEnemy Color", folder: "Colors", object: settings.colors, property: "tracersenemy", onChange() { saveSettings && saveSettings() } },
                { type: "color", label: "Percentages Color", folder: "Colors", object: settings.colors, property: "percentages", onChange() { saveSettings && saveSettings() } },
                { type: "color", label: "EnabledHacks Color", folder: "Colors", object: settings.colors, property: "enabledhacks", onChange() { saveSettings && saveSettings() } },
                { type: "button", label: "Reset Colors", folder: "Colors", action() { resetColors && resetColors() } },
            ]);

            document.querySelector("#game_body > div.guify-container_be6yU > div.guify-panel-container_CvM3b > div").childNodes.forEach(child => child.style.transition = ".2s")
        }, resetColors = () => {
            settings.colors.tracersally = "rgb(0, 255, 0)";
            settings.colors.tracersenemy = "rgb(255, 0, 0)";
            settings.colors.movementpredicter = "rgb(0, 255, 255)";
            settings.colors.percentages = "rgb(105, 161, 72)";
            settings.colors.enabledhacks = "rgb(0, 255, 255)";
            saveSettings && saveSettings();
        }, saveSettings = () => {
            for(const hack in settings) {
                localStorage.setItem("novascript_" + hack, JSON.stringify(settings[hack]));
            };
        }, loadSettings = () => {
            for(const hack in settings) {
                const data = localStorage.getItem("novascript_" + hack);
                !data || ( settings[hack] = JSON.parse(data) );
            }; 
        }, setKeybind = e => {
            if(settings[e] && settings[e].key) {
                const LK = settings[e].key;
                settings[e].key = "Press Any Key";
                document.addEventListener("keydown", function setbind(event) {
                    event.code == "Escape" ? settings[e].key = LK : settings[e].key = event.code;
                    document.removeEventListener("keydown", setbind)
                    saveSettings && saveSettings();
                });
            };
        }, loadScript = () => {
            loadSettings();
            const script = document.createElement("script");
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            script.onload = () => initHack();
            document.head.appendChild(script);
            script.removeAttribute('src');

            setTimeout(() => {
                document.addEventListener("keydown", event => {
                    if(!Vn.chat.open && !Vn.terminal.open && Wn.fast_units[Vn.id]) {
                        if(event.code == settings.xray.key) settings.xray.enabled = true;
                        if(event.code == settings.autospike.key) settings.autospike.enabled = true;
                        if(event.code == settings.autosteal.key) settings.autosteal.enabled = true;
                        if(event.code == settings.dropsword.key) settings.dropsword.enabled = true;
                        if(event.code == settings.swordinchest.key) settings.swordinchest.enabled = true;
                        if(event.code == settings.autodoor.key) settings.autodoor.enabled = true;
                    };
                });
                document.addEventListener("keyup", event => {
                    if(!Vn.chat.open && !Vn.terminal.open && Wn.fast_units[Vn.id]) {
                        if(event.code == settings.xray.key) settings.xray.enabled = false;
                        if(event.code == settings.autospike.key) settings.autospike.enabled = false;
                        if(event.code == settings.autosteal.key) settings.autosteal.enabled = false;
                        if(event.code == settings.dropsword.key) settings.dropsword.enabled = false;
                        if(event.code == settings.swordinchest.key) settings.swordinchest.enabled = false;
                        if(event.code == settings.autodoor.key) settings.autodoor.enabled = false;
                    };
                });
                document.addEventListener("keypress", event => {
                    if(!Vn.chat.open && !Vn.terminal.open && Wn.fast_units[Vn.id]) {
                        if(event.code == settings.autototem.key) settings.autototem.enabled = !settings.autototem.enabled;
                        if(event.code == settings.autocraft.key) settings.autocraft.enabled = !settings.autocraft.enabled;
                        if(event.code == settings.aimbot.key) settings.aimbot.enabled = !settings.aimbot.enabled;
                        if(event.code == settings.autorecycle.key) settings.autorecycle.enabled = !settings.autorecycle.enabled;
                    };
                });
            }, 5e3);

            function canSelect(id) {
                return Vn.inv.can_select.find(slot => slot.id == id);
            };

            function getBestSpike() {
                for (let i = 0; i < settings.autospike.priority.length; i++)
                    switch (settings.autospike.priority[i].toLowerCase()) {
                    case "reidite_spike":
                        if (canSelect(186))
                            return 186;
                        break;
                    case "amethyst_spike":
                        if (canSelect(185))
                            return 185;
                        break;
                    case "diamond_spike":
                        if (canSelect(184))
                            return 184;
                        break;
                    case "gold_spike":
                        if (canSelect(183))
                            return 183;
                        break;
                    case "stone_spike":
                        if (canSelect(182))
                            return 182;
                        break;
                    case "wood_wall":
                        if (canSelect(175))
                            return 175
                    }
            };

            function getBestDoor() {
                if(canSelect(195)) return 195;
                if(canSelect(198)) return 198;
                if(canSelect(197)) return 197;
                if(canSelect(196)) return 196;
                if(canSelect(194)) return 194;
                
                if(canSelect(189)) return 189;
                if(canSelect(192)) return 192;
                if(canSelect(191)) return 191;
                if(canSelect(190)) return 190;
                if(canSelect(188)) return 188;
            };

            function equippedGear(myPlayer) {
                for(let i = 0; i < 19; i++)
                    if(myPlayer.right == i) return i;
                return null;
            };

            function holdingGearType(myPlayer) {
                if(myPlayer.right == 10) return "PIRATE";
                for(let i = 1; i < 9; i++)
                    if(myPlayer.right == i) return "SWORD";
                for(let b = 11; b < 20; b++)
                    if(myPlayer.right == b) return "SPEAR";
                return null;
            };

            function findTarget(a, b, c) {
                for(const p of b)
                    if(p.pid != Vn.id && !Vn.team.includes(p.pid) && v.dist(a, p) <= c) return p;
            };

            function calcAngle(e, o, i) {
                return e && o ? i ? Math.atan2(o.r.y - e.r.y, o.r.x - e.r.x) : Math.atan2(o.y - e.y, o.x - e.x) : null
            };

            function Miscals() {
                requestAnimationFrame(Miscals);
            
                if(Yn && Yn.socket && Yn.socket.readyState === 1) {
                    const me = Wn.fast_units[Vn.id];
                    const pi2 = Math.PI * 2;

                    if(settings.autototem.enabled && me && readys.autototem && Vn.team.length === 0) {
                        const totems = Wn.units[ITEMS.TOTEM];
                        for(const totem of totems) {
                            if(v.dist(me, totem) <= 100) {
                                Dr([18]);
                                readys.autototem = false;
                                setTimeout(() => { readys.autototem = true }, 40);
                            };
                        };
                    };
                    if(settings.autobandage.enabled && me) {
                        if(canSelect(141) && Vn.bandage <= 45) {
                            Dr([5, 141]);
                        };
                    };
                    if(settings.aimbot.enabled && me) {
                        let n = 0;
                        const holdingGear = holdingGearType(me);
                        switch(holdingGear) {
                            case "SWORD": n = 140; break;
                            case "SPEAR": n = 200; break;
                            case "PIRATE": n = 150; break;
                        };
                        if(n) {
                            const target = findTarget(me, Wn.units[0], n);
                            if(target) {
                                const distance = v.dist(me, target);
                                if(distance <= n) {
                                    settings.aimbot.angle = calcAngle(me, target, true);
                                    const pi2 = Math.PI * 2;
                                    angle = Math.floor((settings.aimbot.angle + pi2) % pi2 * 255 / pi2);
                                    Yn.send_angle(angle);
                                } else settings.aimbot.angle = null;
                            } else settings.aimbot.angle = null;
                        } else settings.aimbot.angle = null;
                    };
                    if(settings.dropsword.enabled && me) {
                        const gear = equippedGear(me);
                        if(gear != null) {
                            Yn.delete_inv(gear);
                            readys.dropsword = false;
                            setTimeout(() => { readys.dropsword = true }, 40);
                        };
                    };
                    if(settings.swordinchest.enabled && me) {
                        const chests = Wn.units[ITEMS.CHEST];
                        const gear = equippedGear(me);
                        if(gear != null) {
                            if(canSelect(ItemType.CHEST)) {
                                Dr([10, ItemType.CHEST, Math.floor(Math.random() * 256), 0]);
                                for(const chest of chests) {
                                    if(v.dist(me, chest) <= 100 && !chest.lock || (Vn.team.includes(chest.pid) || Vn.id == chest.pid)) {
                                        Yn.give_item(gear, 0xff);
                                        Yn.take_chest();
                                        readys.swordinchest = false;
                                        setTimeout(() => { readys.swordinchest = true }, 40);
                                    };
                                };
                            } else {
                                for(const chest of chests) {
                                    if(v.dist(me, chest) <= 100 && !chest.lock || (Vn.team.includes(chest.pid) || Vn.id == chest.pid)) {
                                        Yn.give_item(gear, 0xff);
                                        Yn.take_chest();
                                        readys.swordinchest = false;
                                        setTimeout(() => { readys.swordinchest = true }, 40);
                                    };
                                };
                            };
                        };
                    };
                    if(settings.autosteal.enabled && me) {
                        const chests = Wn.units[ITEMS.CHEST];
                        for(const chest of chests) {
                            if(v.dist(me, chest) <= 100) {
                                if(chest.lock && settings.autosteal.unlock && canSelect(ItemType.LOCK_PICK)) {
                                    Yn.unlock_chest();
                                }
                                Yn.take_chest();
                                readys.autosteal = false;
                                setTimeout(() => { readys.autosteal = true }, 40);
                            };
                        };
                    };
                    if(settings.autocraft.enabled && me) {
                        if(settings.autocraft.last != null) {
                            Dr([7, settings.autocraft.last]);
                        };
                    };
                    if(settings.autorecycle.enabled && me) {
                        if(settings.autorecycle.last != null) {
                            Dr([29, settings.autorecycle.last]);
                        };
                    };
                    if(settings.autotradecakes.enabled && me) {
                        if(canSelect(127)) {
                            Dr([32, '1', 6]);
                        };
                    };
                    if(settings.autotradecookies.enabled && me) {
                        if(canSelect(126)) {
                            Dr([32, '1', 7]);
                        };
                    };
                    if(settings.autospike.enabled && me && !Vn.build.wait && readys.autospike) {
                        const spike = getBestSpike();
                        if(spike != undefined) {
                            if(settings.autospike.aim)
                                var target = findTarget(me, Wn.units[0], 220);
                            
                            const angle = settings.autospike.aim && target ? Math.floor((((calcAngle(me, target, true) + pi2) % pi2) * 255) / pi2) : Math.floor((((me.angle + pi2) % pi2) * 255) / pi2);

                            switch(settings.autospike.mode) {
                                case "Nova": {
                                    Dr([10, spike, angle, 0]);
                                    Dr([10, spike, (angle + 240) % 255, 0]);
                                    Dr([10, spike, (angle + 230) % 255, 0]);
                                    Dr([10, spike, (angle + 15) % 255, 0]);
                                    Dr([10, spike, (angle + 25) % 255, 0]);
                                }; break;
                                case "Loux (remaked)": {
                                    Dr([10, spike, angle, 0]);
                                    Dr([10, spike, (angle + 20) % 255, 0]);
                                    Dr([10, spike, (angle - 20 + 255) % 255, 0]);
                                    Dr([10, spike, (angle + 25) % 255, 0]);
                                    Dr([10, spike, (angle - 25 + 255) % 255, 0]);
                                }; break;
                            };

                            readys.autospike = false;
                            setTimeout(() => { readys.autospike = true }, 100);
                        }
                    };
                    if(settings.autodoor.enabled && me && readys.autodoor) {
                        const door = getBestDoor();
                        if(door) {
                            const angle = Math.floor((((me.angle + pi2) % pi2) * 255) / pi2);
                            Dr([10, door, angle, 0]);
                            readys.autodoor = false;
                            setTimeout(() => { readys.autodoor = true }, 50);
                        };
                    };
                    if(settings.trashtalk.enabled && me && readys.trashtalk) {
                        if(settings.trashtalk.message != "") {
                            Yn.send_chat(settings.trashtalk.message);
                            readys.trashtalk = false;
                            setTimeout(() => { readys.trashtalk = true; }, 2e3 + 5e2);
                        };
                    };
                };
            };

            Miscals();
        }; loadScript && loadScript();
        }();
        function __p_5863156023(arrowFn, functionLength) {
        function functionObject() {
            return arrowFn(...arguments);
        }
        Object.defineProperty(functionObject, "length", {
            value: functionLength,
            configurable: true
        });
        return functionObject;
        }
